"android.accessibilityservice.AccessibilityServiceInfo.getSettingsActivityName () &mdash; The settings activity name. <br /><br />android.accessibilityservice.AccessibilityServiceInfo.getCapabilities () &mdash; Returns the bit mask of capabilities this accessibility service has such as being able to retrieve the active window content, etc. <br /><br />android.accessibilityservice.AccessibilityServiceInfo.getCanRetrieveWindowContent ()    This method was deprecated in API level 18. Use getCapabilities () &mdash; This method was deprecated in API level 18. Use getCapabilities(). <br /><br />android.accessibilityservice.AccessibilityServiceInfo.getResolveInfo () &mdash; The service ResolveInfo. <br /><br />android.accessibilityservice.AccessibilityServiceInfo.getDescription ()    This method was deprecated in API level 16. Use loadDescription (PackageManager) &mdash; This method was deprecated in API level 16. Use loadDescription(PackageManager). <br /><br />android.accessibilityservice.AccessibilityServiceInfo.getId () &mdash; The accessibility service id. <br /><br />android.accounts.Account.writeToParcel (Parcel dest, int flags) &mdash; Flatten this object in to a Parcel. <br /><br />android.accounts.Account.equals (Object o) &mdash; Compares this instance with the specified object and indicates if they are equal. <br /><br />android.accounts.AccountAuthenticatorResponse.onError (int errorCode, String errorMessage) &mdash; no description <br /><br />android.accounts.AccountManager.getAccountsByType (String type) &mdash; Lists all accounts of a particular type. <br /><br />android.accounts.AccountManager.invalidateAuthToken (String accountType, String authToken) &mdash; Removes an auth token from the AccountManager's cache. <br /><br />android.accounts.AccountManager.get (Context context) &mdash; Gets an AccountManager instance associated with a Context. <br /><br />android.accounts.AccountManager.confirmCredentials (Account account, Bundle options, Activity activity, AccountManagerCallback< Bundle> callback, Handler handler) &mdash; Confirms that the user knows the password for an account to make extra sure they are the owner of the account. <br /><br />android.accounts.AccountManager.setUserData (Account account, String key, String value) &mdash; Sets one userdata key for an account. <br /><br />android.accounts.AccountManager.getAuthToken (Account account, String authTokenType, boolean notifyAuthFailure, AccountManagerCallback< Bundle> callback, Handler handler)    This method was deprecated in API level 14. use getAuthToken (Account, String, android.os.Bundle, boolean, AccountManagerCallback, android.os.Handler) &mdash; This method was deprecated in API level 14. use getAuthToken(Account, String, android.os.Bundle, boolean, AccountManagerCallback, android.os.Handler) instead <br /><br />android.accounts.AccountManager.getAccounts () &mdash; Lists all accounts of any type registered on the device. <br /><br />android.accounts.AccountManager.getUserData (Account account, String key) &mdash; Gets the user data named by 'key' associated with the account. <br /><br />android.accounts.AccountManager.getAuthToken (Account account, String authTokenType, Bundle options, Activity activity, AccountManagerCallback< Bundle> callback, Handler handler) &mdash; Gets an auth token of the specified type for a particular account, prompting the user for credentials if necessary. <br /><br />android.accounts.AccountManager.getAuthenticatorTypes () &mdash; Lists the currently registered authenticators. <br /><br />android.accounts.AccountManager.getAuthToken (Account account, String authTokenType, Bundle options, boolean notifyAuthFailure, AccountManagerCallback< Bundle> callback, Handler handler) &mdash; Gets an auth token of the specified type for a particular account, optionally raising a notification if the user must enter credentials. <br /><br />"
"android.accounts.AccountManager.removeAccount (Account account, Activity activity, AccountManagerCallback< Bundle> callback, Handler handler) &mdash; Removes an account from the AccountManager. <br /><br />android.accounts.AccountManager.addAccountExplicitly (Account account, String password, Bundle userdata) &mdash; Adds an account directly to the AccountManager. <br /><br />android.accounts.AccountManager.removeAccount (Account account, AccountManagerCallback< Boolean> callback, Handler handler)    This method is deprecated. use removeAccount (Account, Activity, AccountManagerCallback, Handler) &mdash; This method is deprecated. use removeAccount(Account, Activity, AccountManagerCallback, Handler) instead <br /><br />android.animation.Animator.setTarget (Object target) &mdash; Sets the target object whose property will be animated by this animation. <br /><br />android.animation.Animator.setDuration (long duration) &mdash; Sets the duration of the animation. <br /><br />android.animation.Animator.setStartDelay (long startDelay)   The amount of time, in milliseconds, to delay processing the animation after start () &mdash; The amount of time, in milliseconds, to delay processing the animation after start() is called. <br /><br />android.animation.Animator.end () &mdash; Ends the animation. <br /><br />android.animation.Animator.start () &mdash; Starts this animation. <br /><br />android.animation.Animator.removeAllListeners ()   Removes all listeners and &mdash; Removes all listeners and pauseListeners from this object. <br /><br />android.animation.Animator.isRunning ()   Returns whether this Animator is currently running  (having been started and gone past any initial startDelay period and not yet ended) &mdash; Returns whether this Animator is currently running (having been started and gone past any initial startDelay period and not yet ended). <br /><br />android.animation.Animator.setInterpolator (TimeInterpolator value) &mdash; The time interpolator used in calculating the elapsed fraction of the animation. <br /><br />android.animation.Animator.cancel () &mdash; Cancels the animation. <br /><br />android.animation.AnimatorInflater.loadAnimator (Context context, int id) &mdash; Loads an Animator object from a resource <br /><br />android.animation.AnimatorListenerAdapter.onAnimationEnd (Animator animation) &mdash; Notifies the end of the animation. <br /><br />android.animation.AnimatorListenerAdapter.onAnimationStart (Animator animation) &mdash; Notifies the start of the animation. <br /><br />android.animation.AnimatorSet.isStarted () &mdash; Returns whether this Animator has been started and not yet ended. <br /><br />android.animation.AnimatorSet.play (Animator anim) &mdash; This method creates a Builder object, which is used to set up playing constraints. <br /><br />android.animation.AnimatorSet.setDuration (long duration) &mdash; Sets the length of each of the current child animations of this AnimatorSet. <br /><br />android.animation.AnimatorSet.end () &mdash; Ends the animation. Note that ending a AnimatorSet also ends all of the animations that it is responsible for. <br /><br />android.animation.AnimatorSet.start () &mdash; Starts this animation. Starting this AnimatorSet will, in turn, start the animations for which it is responsible. <br /><br />"
"android.animation.AnimatorSet.playTogether (Collection< Animator> items) &mdash; Sets up this AnimatorSet to play all of the supplied animations at the same time. <br /><br />android.animation.AnimatorSet.isRunning () &mdash; Returns true if any of the child animations of this AnimatorSet have been started and have not yet ended. <br /><br />android.animation.AnimatorSet.setStartDelay (long startDelay)   The amount of time, in milliseconds, to delay starting the animation after start () &mdash; The amount of time, in milliseconds, to delay starting the animation after start() is called. <br /><br />android.animation.AnimatorSet.setInterpolator (TimeInterpolator interpolator)   Sets the TimeInterpolator for all current &mdash; Sets the TimeInterpolator for all current child animations of this AnimatorSet. <br /><br />android.animation.AnimatorSet.clone () &mdash; Creates and returns a copy of this Object. <br /><br />android.animation.AnimatorSet.cancel () &mdash; Cancels the animation. Note that canceling a AnimatorSet also cancels all of the animations that it is responsible for. <br /><br />android.animation.ArgbEvaluator.evaluate (float fraction, Object startValue, Object endValue) &mdash; This function returns the calculated in-between value for a color given integers that represent the start and end values in the four bytes of the 32-bit int. <br /><br />android.animation.Keyframe.ofFloat (float fraction) &mdash; Constructs a Keyframe object with the given time. <br /><br />android.animation.Keyframe.ofFloat (float fraction, float value) &mdash; Constructs a Keyframe object with the given time and value. <br /><br />android.animation.LayoutTransition.setAnimateParentHierarchy (boolean animateParentHierarchy) &mdash; This flag controls whether CHANGE_APPEARING or CHANGE_DISAPPEARING animations will cause the default changing animation to be run on the parent hierarchy as well. <br /><br />android.animation.LayoutTransition.setDuration (long duration) &mdash; Sets the duration to be used by all animations of this transition object. <br /><br />android.animation.LayoutTransition.setDuration (int transitionType, long duration) &mdash; Sets the duration on one of the animation objects used by this transition. <br /><br />android.animation.LayoutTransition.disableTransitionType (int transitionType) &mdash; Disables the specified transitionType for this LayoutTransition object. <br /><br />android.animation.LayoutTransition.setAnimator (int transitionType, Animator animator) &mdash; Sets the animation used during one of the transition types that may run. <br /><br />android.animation.LayoutTransition.enableTransitionType (int transitionType) &mdash; Enables the specified transitionType for this LayoutTransition object. <br /><br />android.animation.ObjectAnimator.setDuration (long duration) &mdash; Sets the length of the animation. <br /><br />android.animation.ObjectAnimator.setPropertyName (String propertyName) &mdash; Sets the name of the property that will be animated. <br /><br />android.animation.ObjectAnimator.setProperty (Property property) &mdash; Sets the property that will be animated. <br /><br />android.animation.ObjectAnimator.getPropertyName () &mdash; Gets the name of the property that will be animated. <br /><br />android.animation.TimeInterpolator.getInterpolation (float input) &mdash; Maps a value representing the elapsed fraction of an animation to a value that represents the interpolated fraction. <br /><br />"
"android.animation.ValueAnimator.reverse () &mdash; Plays the ValueAnimator in reverse. <br /><br />android.animation.ValueAnimator.getFrameDelay () &mdash; The amount of time, in milliseconds, between each frame of the animation. <br /><br />android.animation.ValueAnimator.setRepeatCount (int value) &mdash; Sets how many times the animation should be repeated. <br /><br />android.animation.ValueAnimator.setCurrentPlayTime (long playTime) &mdash; Sets the position of the animation to the specified point in time. <br /><br />android.animation.ValueAnimator.setInterpolator (TimeInterpolator value) &mdash; The time interpolator used in calculating the elapsed fraction of this animation. <br /><br />android.animation.ValueAnimator.getAnimatedValue () &mdash; The most recent value calculated by this ValueAnimator when there is just one property being animated. <br /><br />android.animation.ValueAnimator.getDuration () &mdash; Gets the length of the animation. <br /><br />android.animation.ValueAnimator.getAnimatedFraction () &mdash; Returns the current animation fraction, which is the elapsed/interpolated fraction used in the most recent frame update on the animation. <br /><br />android.animation.ValueAnimator.getCurrentPlayTime () &mdash; Gets the current position of the animation in time, which is equal to the current time minus the time that the animation started. <br /><br />android.animation.ValueAnimator.setRepeatMode (int value) &mdash; Defines what this animation should do when it reaches the end. <br /><br />android.animation.ValueAnimator.getAnimatedValue (String propertyName) &mdash; The most recent value calculated by this ValueAnimator for propertyName. <br /><br />android.animation.ValueAnimator.removeAllUpdateListeners () &mdash; Removes all listeners from the set listening to frame updates for this animation. <br /><br />android.app.ActionBar.setDisplayHomeAsUpEnabled (boolean showHomeAsUp) &mdash; Set whether home should be displayed as an 'up' affordance. <br /><br />android.app.ActionBar.setHomeAsUpIndicator (int resId) &mdash; Set an alternate drawable to display next to the icon/logo/title when DISPLAY_HOME_AS_UP is enabled. <br /><br />android.app.ActionBar.setBackgroundDrawable (Drawable d) &mdash; Set the ActionBar's background. <br /><br />android.app.ActionBar.setIcon (Drawable icon) &mdash; Set the icon to display in the 'home' section of the action bar. <br /><br />android.app.ActionBar.setSubtitle (CharSequence subtitle) &mdash; Set the action bar's subtitle. <br /><br />android.app.ActionBar.setDisplayOptions (int options) &mdash; Set display options. <br /><br />android.app.ActionBar.setSelectedNavigationItem (int position) &mdash; This method was deprecated in API level 21. Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead. <br /><br />android.app.ActionBar.getHeight () &mdash; Retrieve the current height of the ActionBar. <br /><br />"
"android.app.ActionBar.setLogo (int resId) &mdash; Set the logo to display in the 'home' section of the action bar. <br /><br />android.app.ActionBar.getTitle () &mdash; Returns the current ActionBar title in standard mode. <br /><br />android.app.ActionBar.setDisplayShowCustomEnabled (boolean showCustom) &mdash; Set whether a custom view should be displayed, if set. <br /><br />android.app.ActionBar.setCustomView (View view, ActionBar.LayoutParams layoutParams) &mdash; Set the action bar into custom navigation mode, supplying a view for custom navigation. <br /><br />android.app.ActionBar.setStackedBackgroundDrawable (Drawable d) &mdash; Set the ActionBar's stacked background. <br /><br />android.app.ActionBar.setHomeButtonEnabled (boolean enabled) &mdash; Enable or disable the 'home' button in the corner of the action bar. <br /><br />android.app.ActionBar.setHomeActionContentDescription (CharSequence description) &mdash; Set an alternate description for the Home/Up action, when enabled. <br /><br />android.app.ActionBar.setDisplayOptions (int options, int mask) &mdash; Set selected display options. <br /><br />android.app.ActionBar.getThemedContext () &mdash; Returns a Context with an appropriate theme for creating views that will appear in the action bar. <br /><br />android.app.ActionBar.setTitle (int resId) &mdash; Set the action bar's title. <br /><br />android.app.ActionBar.getSubtitle () &mdash; Returns the current ActionBar subtitle in standard mode. <br /><br />android.app.ActionBar.hide () &mdash; Hide the ActionBar if it is currently showing. <br /><br />android.app.ActionBar.setSplitBackgroundDrawable (Drawable d) &mdash; Set the ActionBar's split background. <br /><br />android.app.ActionBar.setDisplayShowHomeEnabled (boolean showHome) &mdash; Set whether to include the application home affordance in the action bar. <br /><br />android.app.ActionBar.setDisplayShowTitleEnabled (boolean showTitle) &mdash; Set whether an activity title/subtitle should be displayed. <br /><br />android.app.ActionBar.show () &mdash; Show the ActionBar if it is not currently showing. <br /><br />android.app.ActionBar.setDisplayUseLogoEnabled (boolean useLogo) &mdash; Set whether to display the activity logo rather than the activity icon. <br /><br />android.app.Activity.onMenuItemSelected (int featureId, MenuItem item)   Default implementation of onMenuItemSelected (int, MenuItem) &mdash; Default implementation of onMenuItemSelected(int, MenuItem) for activities. <br /><br />android.app.Activity.getIntent () &mdash; Return the intent that started this activity. <br /><br />android.app.Activity.startActivityForResult (Intent intent, int requestCode, Bundle options) &mdash; Launch an activity for which you would like a result when it finished. <br /><br />"
"android.app.Activity.startPostponedEnterTransition ()   Begin postponed transitions after postponeEnterTransition () &mdash; Begin postponed transitions after postponeEnterTransition() was called. <br /><br />android.app.Activity.startIntentSenderFromChild (Activity child, IntentSender intent, int requestCode, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags)   Same as calling startIntentSenderFromChild (Activity, IntentSender, int, Intent, int, int, int, Bundle) &mdash; Same as calling startIntentSenderFromChild(Activity, IntentSender, int, Intent, int, int, int, Bundle) with no options. <br /><br />android.app.Activity.getSystemService (String name) &mdash; Return the handle to a system-level service by name. <br /><br />android.app.Activity.startActivityFromChild (Activity child, Intent intent, int requestCode)   Same as calling startActivityFromChild (Activity, Intent, int, Bundle) &mdash; Same as calling startActivityFromChild(Activity, Intent, int, Bundle) with no options. <br /><br />android.app.Activity.onNavigateUp () &mdash; This method is called whenever the user chooses to navigate Up within your application's activity hierarchy from the action bar. <br /><br />android.app.Activity.postponeEnterTransition ()   Postpone the entering activity transition when Activity was started with makeSceneTransitionAnimation (Activity, android.util.Pair[]) &mdash; Postpone the entering activity transition when Activity was started with makeSceneTransitionAnimation(Activity, android.util.Pair[]). <br /><br />android.app.Activity.setProgress (int progress) &mdash; Sets the progress for the progress bars in the title. <br /><br />android.app.Activity.getPreferences (int mode) &mdash; Retrieve a SharedPreferences object for accessing preferences that are private to this activity. <br /><br />android.app.Activity.getCallingActivity () &mdash; Return the name of the activity that invoked this activity. <br /><br />android.app.Activity.getTaskId () &mdash; Return the identifier of the task this activity is in. <br /><br />android.app.Activity.setProgressBarVisibility (boolean visible) &mdash; Sets the visibility of the progress bar in the title. <br /><br />android.app.Activity.getApplication () &mdash; Return the application that owns this activity. <br /><br />android.app.Activity.getCurrentFocus ()   Calls getCurrentFocus () &mdash; Calls getCurrentFocus() on the Window of this Activity to return the currently focused view. <br /><br />android.app.Activity.dispatchKeyShortcutEvent (KeyEvent event) &mdash; Called to process a key shortcut event. <br /><br />android.app.Activity.recreate () &mdash; Cause this Activity to be recreated with a new instance. <br /><br />android.app.Activity.onKeyLongPress (int keyCode, KeyEvent event)   Default implementation of KeyEvent.Callback.onKeyLongPress (): always returns false  (doesn't handle the event) &mdash; Default implementation of KeyEvent.Callback.onKeyLongPress(): always returns false (doesn't handle the event). <br /><br />android.app.Activity.onContextItemSelected (MenuItem item) &mdash; This hook is called whenever an item in a context menu is selected. <br /><br />android.app.Activity.onSearchRequested () &mdash; This hook is called when the user signals the desire to start a search. <br /><br />android.app.Activity.takeKeyEvents (boolean get) &mdash; Request that key events come to this activity. <br /><br />android.app.Activity.closeOptionsMenu () &mdash; Progammatically closes the options menu. <br /><br />"
"android.app.Activity.showDialog (int id) &mdash; This method was deprecated in API level 13. Use the new DialogFragment class with FragmentManager instead; this is also available on older platforms through the Android compatibility package. <br /><br />android.app.Activity.getActionBar () &mdash; Retrieve a reference to this activity's ActionBar. <br /><br />android.app.Activity.managedQuery (Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) &mdash; This method was deprecated in API level 11. Use CursorLoader instead. <br /><br />android.app.Activity.runOnUiThread (Runnable action) &mdash; Runs the specified action on the UI thread. <br /><br />android.app.Activity.getLastNonConfigurationInstance ()    This method was deprecated in API level 13. Use the new Fragment API setRetainInstance (boolean) &mdash; This method was deprecated in API level 13. Use the new Fragment API setRetainInstance(boolean) instead; this is also available on older platforms through the Android compatibility package. <br /><br />android.app.Activity.finishFromChild (Activity child)   This is called when a child activity of this one calls its finish () &mdash; This is called when a child activity of this one calls its finish() method. <br /><br />android.app.Activity.createPendingResult (int requestCode, Intent data, int flags)   Create a new PendingIntent object which you can hand to others for them to use to send result data back to your onActivityResult (int, int, Intent) &mdash; Create a new PendingIntent object which you can hand to others for them to use to send result data back to your onActivityResult(int, int, Intent) callback. <br /><br />android.app.Activity.onKeyUp (int keyCode, KeyEvent event) &mdash; Called when a key was released and not handled by any of the views inside of the activity. <br /><br />android.app.Activity.onOptionsItemSelected (MenuItem item) &mdash; This hook is called whenever an item in your options menu is selected. <br /><br />android.app.Activity.finish () &mdash; Call this when your activity is done and should be closed. <br /><br />android.app.Activity.triggerSearch (String query, Bundle appSearchData)   Similar to startSearch (String, boolean, Bundle, boolean) &mdash; Similar to startSearch(String, boolean, Bundle, boolean), but actually fires off the search query after invoking the search dialog. <br /><br />android.app.Activity.startIntentSenderForResult (IntentSender intent, int requestCode, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options)   Like startActivityForResult (Intent, int) &mdash; Like startActivityForResult(Intent, int), but allowing you to use a IntentSender to describe the activity to be started. <br /><br />android.app.Activity.registerForContextMenu (View view)   Registers a context menu to be shown for the given view  (multiple views can show the context menu) &mdash; Registers a context menu to be shown for the given view (multiple views can show the context menu). <br /><br />android.app.Activity.getMenuInflater () &mdash; Returns a MenuInflater with this context. <br /><br />android.app.Activity.onPrepareNavigateUpTaskStack (TaskStackBuilder builder) &mdash; Prepare the synthetic task stack that will be generated during Up navigation from a different task. <br /><br />android.app.Activity.onCreatePanelMenu (int featureId, Menu menu)   Default implementation of onCreatePanelMenu (int, Menu) &mdash; Default implementation of onCreatePanelMenu(int, Menu) for activities. <br /><br />android.app.Activity.stopManagingCursor (Cursor c) &mdash; This method was deprecated in API level 11. Use the new CursorLoader class with LoaderManager instead; this is also available on older platforms through the Android compatibility package. <br /><br />android.app.Activity.setEnterSharedElementCallback (SharedElementCallback callback)   When makeSceneTransitionAnimation (Activity, android.view.View, String) &mdash; When makeSceneTransitionAnimation(Activity, android.view.View, String) was used to start an Activity, callback will be called to handle shared elements on the launched Activity. <br /><br />android.app.Activity.isFinishing ()   Check to see whether this activity is in the process of finishing, either because you called finish () &mdash; Check to see whether this activity is in the process of finishing, either because you called finish() on it or someone else has requested that it finished. <br /><br />android.app.Activity.getLocalClassName () &mdash; Returns class name for this activity with the package prefix removed. <br /><br />"
"android.app.Activity.unregisterForContextMenu (View view) &mdash; Prevents a context menu to be shown for the given view. <br /><br />android.app.Activity.overridePendingTransition (int enterAnim, int exitAnim)   Call immediately after one of the flavors of startActivity (Intent) or finish () &mdash; Call immediately after one of the flavors of startActivity(Intent) or finish() to specify an explicit transition animation to perform next. <br /><br />android.app.Activity.onKeyDown (int keyCode, KeyEvent event) &mdash; Called when a key was pressed down and not handled by any of the views inside of the activity. <br /><br />android.app.Activity.setProgressBarIndeterminate (boolean indeterminate)   Sets whether the horizontal progress bar in the title should be indeterminate  (the circular is always indeterminate) &mdash; Sets whether the horizontal progress bar in the title should be indeterminate (the circular is always indeterminate). <br /><br />android.app.Activity.moveTaskToBack (boolean nonRoot) &mdash; Move the task containing this activity to the back of the activity stack. <br /><br />android.app.Activity.onContextMenuClosed (Menu menu)   This hook is called whenever the context menu is being closed  (either by the user canceling the menu with the back/menu button, or when an item is selected) &mdash; This hook is called whenever the context menu is being closed (either by the user canceling the menu with the back/menu button, or when an item is selected). <br /><br />android.app.Activity.onKeyMultiple (int keyCode, int repeatCount, KeyEvent event)   Default implementation of KeyEvent.Callback.onKeyMultiple (): always returns false  (doesn't handle the event) &mdash; Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event). <br /><br />android.app.Activity.onAttachFragment (Fragment fragment)   Called when a Fragment is being attached to this activity, immediately after the call to its Fragment.onAttach () method and before Fragment.onCreate () &mdash; Called when a Fragment is being attached to this activity, immediately after the call to its Fragment.onAttach() method and before Fragment.onCreate(). <br /><br />android.app.Activity.setVisible (boolean visible) &mdash; Control whether this activity's main window is visible. <br /><br />android.app.Activity.getLoaderManager () &mdash; Return the LoaderManager for this activity, creating it if needed. <br /><br />android.app.Activity.setVolumeControlStream (int streamType) &mdash; Suggests an audio stream whose volume should be changed by the hardware volume controls. <br /><br />android.app.Activity.setTitleColor (int textColor) &mdash; This method was deprecated in API level 21. Use action bar styles instead. <br /><br />android.app.Activity.onNavigateUpFromChild (Activity child) &mdash; This is called when a child activity of this one attempts to navigate up. <br /><br />android.app.Activity.dispatchKeyEvent (KeyEvent event) &mdash; Called to process key events. <br /><br />android.app.Activity.invalidateOptionsMenu () &mdash; Declare that the options menu has changed, so should be recreated. <br /><br />android.app.Activity.setTitle (int titleId) &mdash; Change the title associated with this activity. <br /><br />android.app.Activity.openOptionsMenu () &mdash; Programmatically opens the options menu. <br /><br />android.app.Activity.setExitSharedElementCallback (SharedElementCallback callback)   When makeSceneTransitionAnimation (Activity, android.view.View, String) &mdash; When makeSceneTransitionAnimation(Activity, android.view.View, String) was used to start an Activity, callback will be called to handle shared elements on the launching Activity. <br /><br />android.app.Activity.onCreateNavigateUpTaskStack (TaskStackBuilder builder) &mdash; Define the synthetic task stack that will be generated during Up navigation from a different task. <br /><br />android.app.Activity.onCreateView (View parent, String name, Context context, AttributeSet attrs)   Standard implementation of onCreateView (View, String, Context, AttributeSet) used when inflating with the LayoutInflater returned by getSystemService (String) &mdash; Standard implementation of onCreateView(View, String, Context, AttributeSet) used when inflating with the LayoutInflater returned by getSystemService(String). <br /><br />"
"android.app.Activity.startIntentSenderFromChild (Activity child, IntentSender intent, int requestCode, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options)   Like startActivityFromChild (Activity, Intent, int), but taking a IntentSender; see startIntentSenderForResult (IntentSender, int, Intent, int, int, int) &mdash; Like startActivityFromChild(Activity, Intent, int), but taking a IntentSender; see startIntentSenderForResult(IntentSender, int, Intent, int, int, int) for more information. <br /><br />android.app.Activity.startActivityIfNeeded (Intent intent, int requestCode)   Same as calling startActivityIfNeeded (Intent, int, Bundle) &mdash; Same as calling startActivityIfNeeded(Intent, int, Bundle) with no options. <br /><br />android.app.Activity.isChild () &mdash; Is this activity embedded inside of another activity? <br /><br />android.app.Activity.startActivity (Intent intent)   Same as startActivity (Intent, Bundle) &mdash; Same as startActivity(Intent, Bundle) with no options specified. <br /><br />android.app.Activity.onPreparePanel (int featureId, View view, Menu menu)   Default implementation of onPreparePanel (int, View, Menu) &mdash; Default implementation of onPreparePanel(int, View, Menu) for activities. <br /><br />android.app.Activity.onDetachedFromWindow () &mdash; Called when the main window associated with the activity has been detached from the window manager. <br /><br />android.app.Activity.setContentView (int layoutResID) &mdash; Set the activity content from a layout resource. <br /><br />android.app.Activity.startActivityIfNeeded (Intent intent, int requestCode, Bundle options) &mdash; A special variation to launch an activity only if a new activity instance is needed to handle the given Intent. <br /><br />android.app.Activity.setContentView (View view, ViewGroup.LayoutParams params) &mdash; Set the activity content to an explicit view. <br /><br />android.app.Activity.dispatchTrackballEvent (MotionEvent ev) &mdash; Called to process trackball events. <br /><br />android.app.Activity.findViewById (int id)   Finds a view that was identified by the id attribute from the XML that was processed in onCreate (Bundle) &mdash; Finds a view that was identified by the id attribute from the XML that was processed in onCreate(Bundle). <br /><br />android.app.Activity.onCreateDescription () &mdash; Generate a new description for this activity. <br /><br />android.app.Activity.startNextMatchingActivity (Intent intent, Bundle options) &mdash; Special version of starting an activity, for use when you are replacing other activity components. <br /><br />android.app.Activity.startActivities (Intent[] intents, Bundle options) &mdash; Launch a new activity. <br /><br />android.app.Activity.startActivityFromFragment (Fragment fragment, Intent intent, int requestCode)   Same as calling startActivityFromFragment (Fragment, Intent, int, Bundle) &mdash; Same as calling startActivityFromFragment(Fragment, Intent, int, Bundle) with no options. <br /><br />android.app.Activity.startIntentSenderForResult (IntentSender intent, int requestCode, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags)   Same as calling startIntentSenderForResult (IntentSender, int, Intent, int, int, int, Bundle) &mdash; Same as calling startIntentSenderForResult(IntentSender, int, Intent, int, int, int, Bundle) with no options. <br /><br />android.app.Activity.getVolumeControlStream () &mdash; Gets the suggested audio stream whose volume should be changed by the hardware volume controls. <br /><br />android.app.Activity.dump (String prefix, FileDescriptor fd, PrintWriter writer, String[] args) &mdash; Print the Activity's state into the given stream. <br /><br />android.app.Activity.finishActivityFromChild (Activity child, int requestCode)   This is called when a child activity of this one calls its finishActivity () &mdash; This is called when a child activity of this one calls its finishActivity(). <br /><br />android.app.Activity.startActivities (Intent[] intents)   Same as startActivities (Intent[], Bundle) &mdash; Same as startActivities(Intent[], Bundle) with no options specified. <br /><br />"
"android.app.Activity.getComponentName () &mdash; Returns complete component name of this activity. <br /><br />android.app.Activity.onBackPressed () &mdash; Called when the activity has detected the user's press of the back key. <br /><br />android.app.Activity.shouldUpRecreateTask (Intent targetIntent) &mdash; Returns true if the app should recreate the task when navigating 'up' from this activity by using targetIntent. <br /><br />android.app.Activity.onActionModeFinished (ActionMode mode) &mdash; Notifies the activity that an action mode has finished. <br /><br />android.app.Activity.getFragmentManager () &mdash; Return the FragmentManager for interacting with fragments associated with this activity. <br /><br />android.app.Activity.finishAfterTransition () &mdash; Reverses the Activity Scene entry Transition and triggers the calling Activity to reverse its exit Transition. <br /><br />android.app.Activity.startActivityFromChild (Activity child, Intent intent, int requestCode, Bundle options)   This is called when a child activity of this one calls its startActivity (Intent) or startActivityForResult (Intent, int) &mdash; This is called when a child activity of this one calls its startActivity(Intent) or startActivityForResult(Intent, int) method. <br /><br />android.app.Activity.setFinishOnTouchOutside (boolean finish) &mdash; Sets whether this activity is finished when touched outside its window's bounds. <br /><br />android.app.Activity.openContextMenu (View view) &mdash; Programmatically opens the context menu for a particular view. <br /><br />android.app.Activity.onCreateView (String name, Context context, AttributeSet attrs)   Standard implementation of onCreateView (String, Context, AttributeSet) used when inflating with the LayoutInflater returned by getSystemService (String) &mdash; Standard implementation of onCreateView(String, Context, AttributeSet) used when inflating with the LayoutInflater returned by getSystemService(String). <br /><br />android.app.Activity.startIntentSender (IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags)   Same as calling startIntentSender (IntentSender, Intent, int, int, int, Bundle) &mdash; Same as calling startIntentSender(IntentSender, Intent, int, int, int, Bundle) with no options. <br /><br />android.app.Activity.onAttachedToWindow () &mdash; Called when the main window associated with the activity has been attached to the window manager. <br /><br />android.app.Activity.onCreatePanelView (int featureId)   Default implementation of onCreatePanelView (int) &mdash; Default implementation of onCreatePanelView(int) for activities. <br /><br />android.app.Activity.navigateUpTo (Intent upIntent) &mdash; Navigate from this activity to the activity specified by upIntent, finishing this activity in the process. <br /><br />android.app.Activity.getParentActivityIntent () &mdash; Obtain an Intent that will launch an explicit target activity specified by this activity's logical parent. <br /><br />android.app.Activity.dispatchGenericMotionEvent (MotionEvent ev) &mdash; Called to process generic motion events. <br /><br />android.app.Activity.isDestroyed ()   Returns true if the final onDestroy () &mdash; Returns true if the final onDestroy() call has been made on the Activity, so this instance is now dead. <br /><br />android.app.Activity.startActivityFromFragment (Fragment fragment, Intent intent, int requestCode, Bundle options)   This is called when a Fragment in this activity calls its startActivity (Intent) or startActivityForResult (Intent, int) &mdash; This is called when a Fragment in this activity calls its startActivity(Intent) or startActivityForResult(Intent, int) method. <br /><br />android.app.Activity.setSecondaryProgress (int secondaryProgress) &mdash; Sets the secondary progress for the progress bar in the title. <br /><br />android.app.Activity.getLayoutInflater ()   Convenience for calling getLayoutInflater () &mdash; Convenience for calling getLayoutInflater(). <br /><br />"
"android.app.Activity.isChangingConfigurations () &mdash; Check to see whether this activity is in the process of being destroyed in order to be recreated with a new configuration. <br /><br />android.app.Activity.onActionModeStarted (ActionMode mode) &mdash; Notifies the Activity that an action mode has been started. <br /><br />android.app.Activity.onCreateThumbnail (Bitmap outBitmap, Canvas canvas) &mdash; Generate a new thumbnail for this activity. <br /><br />android.app.Activity.onTrackballEvent (MotionEvent event) &mdash; Called when the trackball was moved and not handled by any of the views inside of the activity. <br /><br />android.app.Activity.onTrimMemory (int level) &mdash; Called when the operating system has determined that it is a good time for a process to trim unneeded memory from its process. <br /><br />android.app.Activity.onLowMemory () &mdash; This is called when the overall system is running low on memory, and actively running processes should trim their memory usage. <br /><br />android.app.Activity.setResult (int resultCode, Intent data) &mdash; Call this to set the result that your activity will return to its caller. <br /><br />android.app.Activity.getWindowManager () &mdash; Retrieve the window manager for showing custom windows. <br /><br />android.app.Activity.onGenericMotionEvent (MotionEvent event) &mdash; Called when a generic motion event was not handled by any of the views inside of the activity. <br /><br />android.app.Activity.getWindow () &mdash; Retrieve the current Window for the activity. <br /><br />android.app.Activity.startIntentSender (IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options)   Like startActivity (Intent, Bundle), but taking a IntentSender to start; see startIntentSenderForResult (IntentSender, int, Intent, int, int, int, Bundle) &mdash; Like startActivity(Intent, Bundle), but taking a IntentSender to start; see startIntentSenderForResult(IntentSender, int, Intent, int, int, int, Bundle) for more information. <br /><br />android.app.Activity.onOptionsMenuClosed (Menu menu)   This hook is called whenever the options menu is being closed  (either by the user canceling the menu with the back/menu button, or when an item is selected) &mdash; This hook is called whenever the options menu is being closed (either by the user canceling the menu with the back/menu button, or when an item is selected). <br /><br />android.app.Activity.hasWindowFocus () &mdash; Returns true if this activity's main window currently has window focus. <br /><br />android.app.Activity.requestWindowFeature (int featureId) &mdash; Enable extended window features. <br /><br />android.app.Activity.dispatchPopulateAccessibilityEvent (AccessibilityEvent event) &mdash; Called to process population of AccessibilityEvents. <br /><br />android.app.Activity.getRequestedOrientation () &mdash; Return the current requested orientation of the activity. <br /><br />android.app.Activity.onContentChanged ()   This hook is called whenever the content view of the screen changes  (due to a call to Window.setContentView or Window.addContentView) &mdash; This hook is called whenever the content view of the screen changes (due to a call to Window.setContentView or Window.addContentView). <br /><br />android.app.Activity.onConfigurationChanged (Configuration newConfig) &mdash; Called by the system when the device configuration changes while your activity is running. <br /><br />android.app.Activity.onCreateOptionsMenu (Menu menu) &mdash; Initialize the contents of the Activity's standard options menu. <br /><br />android.app.Activity.setProgressBarIndeterminateVisibility (boolean visible) &mdash; Sets the visibility of the indeterminate progress bar in the title. <br /><br />"
"android.app.Activity.onWindowFocusChanged (boolean hasFocus) &mdash; Called when the current Window of the activity gains or loses focus. <br /><br />android.app.Activity.setRequestedOrientation (int requestedOrientation) &mdash; Change the desired orientation of this activity. <br /><br />android.app.Activity.setIntent (Intent newIntent)   Change the intent returned by getIntent () &mdash; Change the intent returned by getIntent(). <br /><br />android.app.Activity.dispatchTouchEvent (MotionEvent ev) &mdash; Called to process touch screen events. <br /><br />android.app.Activity.onTouchEvent (MotionEvent event) &mdash; Called when a touch screen event was not handled by any of the views under it. <br /><br />android.app.Activity.closeContextMenu () &mdash; Programmatically closes the most recently opened context menu, if showing. <br /><br />android.app.Activity.startSearch (String initialQuery, boolean selectInitialQuery, Bundle appSearchData, boolean globalSearch) &mdash; This hook is called to launch the search UI. <br /><br />android.app.Activity.finishActivity (int requestCode)   Force finish another activity that you had previously started with startActivityForResult (Intent, int) &mdash; Force finish another activity that you had previously started with startActivityForResult(Intent, int). <br /><br />android.app.Activity.onMenuOpened (int featureId, Menu menu) &mdash; Called when a panel's menu is opened by the user. <br /><br />android.app.Activity.getChangingConfigurations ()   If this activity is being destroyed because it can not handle a configuration parameter being changed  (and thus its onConfigurationChanged (Configuration) method is not being called) &mdash; If this activity is being destroyed because it can not handle a configuration parameter being changed (and thus its onConfigurationChanged(Configuration) method is not being called), then you can use this method to discover the set of changes that have occurred while in the process of being destroyed. <br /><br />android.app.Activity.startActivityForResult (Intent intent, int requestCode)   Same as calling startActivityForResult (Intent, int, Bundle) &mdash; Same as calling startActivityForResult(Intent, int, Bundle) with no options. <br /><br />android.app.Activity.navigateUpToFromChild (Activity child, Intent upIntent)   This is called when a child activity of this one calls its navigateUpTo (Intent) &mdash; This is called when a child activity of this one calls its navigateUpTo(Intent) method. <br /><br />android.app.Activity.getCallingPackage () &mdash; Return the name of the package that invoked this activity. <br /><br />android.app.Activity.startNextMatchingActivity (Intent intent)   Same as calling startNextMatchingActivity (Intent, Bundle) &mdash; Same as calling startNextMatchingActivity(Intent, Bundle) with no options. <br /><br />android.app.Activity.onUserInteraction () &mdash; Called whenever a key, touch, or trackball event is dispatched to the activity. <br /><br />android.app.Activity.isTaskRoot () &mdash; Return whether this activity is the root of a task. <br /><br />android.app.Activity.getParent () &mdash; Return the parent activity if this view is an embedded child. <br /><br />android.app.Activity.finishAffinity () &mdash; Finish this activity as well as all activities immediately below it in the current task that have the same affinity. <br /><br />android.app.Activity.onPrepareOptionsMenu (Menu menu) &mdash; Prepare the Screen's standard options menu to be displayed. <br /><br />android.app.Activity.onPanelClosed (int featureId, Menu menu)   Default implementation of onPanelClosed (int, Menu) &mdash; Default implementation of onPanelClosed(int, Menu) for activities. <br /><br />"
"android.app.Activity.onKeyShortcut (int keyCode, KeyEvent event) &mdash; Called when a key shortcut event is not handled by any of the views in the Activity. <br /><br />android.app.ActivityManager.getRunningTasks (int maxNum) &mdash; This method was deprecated in API level 21. As of LOLLIPOP, this method is no longer available to third party applications: the introduction of document-centric recents means it can leak person information to the caller. For backwards compatibility, it will still retu rn a small subset of its data: at least the caller's own tasks, and possibly some other tasks such as home that are known to not be sensitive. <br /><br />android.app.ActivityManager.getMemoryClass () &mdash; Return the approximate per-application memory class of the current device. <br /><br />android.app.ActivityManager.getRunningServices (int maxNum) &mdash; Return a list of the services that are currently running. <br /><br />android.app.ActivityManager.isUserAMonkey () &mdash; Returns 'true' if the user interface is currently being messed with by a monkey. <br /><br />android.app.ActivityManager.getDeviceConfigurationInfo () &mdash; Get the device configuration attributes. <br /><br />android.app.ActivityManager.restartPackage (String packageName)    This method was deprecated in API level 8. This is now just a wrapper for killBackgroundProcesses (String) &mdash; This method was deprecated in API level 8. This is now just a wrapper for killBackgroundProcesses(String); the previous behavior here is no longer available to applications because it allows them to break other applications by removing their alarms, stopping their services, etc. <br /><br />android.app.ActivityManager.getLauncherLargeIconSize () &mdash; Get the preferred launcher icon size. <br /><br />android.app.ActivityManager.getRecentTasks (int maxNum, int flags)    This method was deprecated in API level 21. As of LOLLIPOP, this method is no longer available to third party applications: the introduction of document-centric recents means it can leak personal information to the caller. For backwards compatibility, it will still return a small subset of its data: at least the caller's own tasks  (though see getAppTasks () for the correct supported way to retrieve that information) &mdash; This method was deprecated in API level 21. As of LOLLIPOP, this method is no longer available to third party applications: the introduction of document-centric recents means it can leak personal information to the caller. For backwards compatibility, it will still return a small subset of its data: at least the caller's own tasks (though see getAppTasks() for the correct supported way to retrieve that information), and possibly some other tasks such as home that are known to not be sensitive. <br /><br />android.app.ActivityManager.killBackgroundProcesses (String packageName) &mdash; Have the system immediately kill all background processes associated with the given package. <br /><br />android.app.ActivityManager.isLowRamDevice () &mdash; Returns true if this is a low-RAM device. <br /><br />android.app.ActivityManager.getLauncherLargeIconDensity () &mdash; Get the preferred density of icons for the launcher. <br /><br />android.app.ActivityManager.getLargeMemoryClass () &mdash; Return the approximate per-application memory class of the current device when an application is running with a large heap. <br /><br />android.app.ActivityManager.getRunningAppProcesses () &mdash; Returns a list of application processes that are running on the device. <br /><br />android.app.ActivityManager.getProcessMemoryInfo (int[] pids) &mdash; Return information about the memory usage of one or more processes. <br /><br />android.app.ActivityOptions.toBundle ()   Returns the created options as a Bundle, which can be passed to Context.startActivity (Intent, Bundle) &mdash; Returns the created options as a Bundle, which can be passed to Context.startActivity(Intent, Bundle) and related methods. <br /><br />android.app.ActivityOptions.makeScaleUpAnimation (View source, int startX, int startY, int width, int height) &mdash; Create an ActivityOptions specifying an animation where the new activity is scaled from a small originating area of the screen to its final full representation. <br /><br />android.app.ActivityOptions.makeSceneTransitionAnimation (Activity activity, Pair...< View,  String> sharedElements) &mdash; Create an ActivityOptions to transition between Activities using cross-Activity scene animations. <br /><br />android.app.ActivityOptions.makeThumbnailScaleUpAnimation (View source, Bitmap thumbnail, int startX, int startY) &mdash; Create an ActivityOptions specifying an animation where a thumbnail is scaled from a given position to the new activity window that is being started. <br /><br />android.app.ActivityOptions.update (ActivityOptions otherOptions) &mdash; Update the current values in this ActivityOptions from those supplied in otherOptions. <br /><br />"
"android.app.ActivityOptions.makeCustomAnimation (Context context, int enterResId, int exitResId) &mdash; Create an ActivityOptions specifying a custom animation to run when the activity is displayed. <br /><br />android.app.admin.DeviceAdminReceiver.onReceive (Context context, Intent intent) &mdash; Intercept standard device administrator broadcasts. <br /><br />android.app.admin.DevicePolicyManager.getCurrentFailedPasswordAttempts () &mdash; Retrieve the number of times the user has failed at entering a password since that last successful password entry. <br /><br />android.app.admin.DevicePolicyManager.wipeData (int flags) &mdash; Ask the user data be wiped. <br /><br />android.app.admin.DevicePolicyManager.removeActiveAdmin (ComponentName who) &mdash; Remove a current administration component. <br /><br />android.app.admin.DevicePolicyManager.resetPassword (String password, int flags)   Force a new device unlock password  (the password needed to access the entire device, not for individual accounts) &mdash; Force a new device unlock password (the password needed to access the entire device, not for individual accounts) on the user. <br /><br />android.app.admin.DevicePolicyManager.getActiveAdmins () &mdash; Return a list of all currently active device administrator's component names. <br /><br />android.app.admin.DevicePolicyManager.isAdminActive (ComponentName who)   Return true if the given administrator component is currently active  (enabled) &mdash; Return true if the given administrator component is currently active (enabled) in the system. <br /><br />android.app.admin.DevicePolicyManager.lockNow () &mdash; Make the device lock immediately, as if the lock screen timeout has expired at the point of this call. <br /><br />android.app.admin.DevicePolicyManager.getCameraDisabled (ComponentName admin) &mdash; Determine whether or not the device's cameras have been disabled for this user, either by the current admin, if specified, or all admins. <br /><br />android.app.AlarmManager.setInexactRepeating (int type, long triggerAtMillis, long intervalMillis, PendingIntent operation) &mdash; Schedule a repeating alarm that has inexact trigger time requirements; for example, an alarm that repeats every hour, but not necessarily at the top of every hour. <br /><br />android.app.AlarmManager.setExact (int type, long triggerAtMillis, PendingIntent operation) &mdash; Schedule an alarm to be delivered precisely at the stated time. <br /><br />android.app.AlarmManager.setRepeating (int type, long triggerAtMillis, long intervalMillis, PendingIntent operation) &mdash; Schedule a repeating alarm. <br /><br />android.app.AlarmManager.set (int type, long triggerAtMillis, PendingIntent operation) &mdash; Schedule an alarm. <br /><br />android.app.AlarmManager.cancel (PendingIntent operation) &mdash; Remove any alarms with a matching Intent. <br /><br />android.app.AlertDialog.getListView () &mdash; Gets the list view used in the dialog. <br /><br />android.app.AlertDialog.setView (View view) &mdash; Set the view to display in that dialog. <br /><br />android.app.AlertDialog.setIcon (int resId) &mdash; Set resId to 0 if you don't want an icon. <br /><br />android.app.AlertDialog.setView (View view, int viewSpacingLeft, int viewSpacingTop, int viewSpacingRight, int viewSpacingBottom) &mdash; Set the view to display in that dialog, specifying the spacing to appear around that view. <br /><br />android.app.AlertDialog.setTitle (CharSequence title) &mdash; Set the title text for this dialog's window. <br /><br />"
"android.app.AlertDialog.getButton (int whichButton) &mdash; Gets one of the buttons used in the dialog. <br /><br />android.app.Application.registerComponentCallbacks (ComponentCallbacks callback) &mdash; Add a new ComponentCallbacks to the base application of the Context, which will be called at the same times as the ComponentCallbacks methods of activities and other components are called. <br /><br />android.app.Application.onConfigurationChanged (Configuration newConfig) &mdash; Called by the system when the device configuration changes while your component is running. <br /><br />android.app.Application.onTerminate () &mdash; This method is for use in emulated process environments. <br /><br />android.app.Application.onCreate ()   Called when the application is starting, before any activity, service, or receiver objects  (excluding content providers) &mdash; Called when the application is starting, before any activity, service, or receiver objects (excluding content providers) have been created. <br /><br />android.app.AppOpsManager.checkOp (String op, int uid, String packageName) &mdash; Do a quick check for whether an application might be able to perform an operation. <br /><br />android.app.AppOpsManager.checkPackage (int uid, String packageName) &mdash; Do a quick check to validate if a package name belongs to a UID. <br /><br />android.app.AppOpsManager.checkOpNoThrow (String op, int uid, String packageName)   Like checkOp (String, int, String) &mdash; Like checkOp(String, int, String) but instead of throwing a SecurityException it returns MODE_ERRORED. <br /><br />android.app.backup.BackupDataInput.readEntityData (byte[] data, int offset, int size) &mdash; Read a record's raw data from the restore stream. <br /><br />android.app.backup.BackupDataInput.readNextHeader () &mdash; Extract the next entity header from the restore stream. <br /><br />android.app.backup.BackupDataInput.getKey () &mdash; Report the key associated with the current entity in the restore stream <br /><br />android.app.backup.BackupDataInput.getDataSize () &mdash; Report the size in bytes of the data associated with the current entity in the restore stream. <br /><br />android.app.backup.BackupDataOutput.writeEntityHeader (String key, int dataSize) &mdash; Mark the beginning of one record in the backup data stream. <br /><br />android.app.backup.BackupDataOutput.writeEntityData (byte[] data, int size) &mdash; Write a chunk of data under the current entity to the backup transport. <br /><br />android.app.backup.BackupManager.dataChanged () &mdash; Notifies the Android backup system that your application wishes to back up new changes to its data. <br /><br />android.app.backup.BackupManager.dataChanged (String packageName) &mdash; Convenience method for callers who need to indicate that some other package needs a backup pass. <br /><br />android.app.DatePickerDialog.updateDate (int year, int monthOfYear, int dayOfMonth) &mdash; Sets the current date. <br /><br />android.app.Dialog.onBackPressed () &mdash; Called when the dialog has detected the user's press of the back key. <br /><br />android.app.Dialog.onRestoreInstanceState (Bundle savedInstanceState) &mdash; Restore the state of the dialog from a previously saved bundle. <br /><br />android.app.Dialog.setDismissMessage (Message msg) &mdash; Set a message to be sent when the dialog is dismissed. <br /><br />"
"android.app.Dialog.dismiss () &mdash; Dismiss this dialog, removing it from the screen. <br /><br />android.app.Dialog.onAttachedToWindow () &mdash; Called when the window has been attached to the window manager. <br /><br />android.app.Dialog.cancel () &mdash; Cancel the dialog. <br /><br />android.app.Dialog.getContext () &mdash; Retrieve the Context this Dialog is running in. <br /><br />android.app.Dialog.onKeyUp (int keyCode, KeyEvent event) &mdash; A key was released. <br /><br />android.app.Dialog.setOwnerActivity (Activity activity) &mdash; Sets the Activity that owns this dialog. <br /><br />android.app.Dialog.onSaveInstanceState () &mdash; Saves the state of the dialog into a bundle. <br /><br />android.app.Dialog.hide () &mdash; Hide the dialog, but do not dismiss it. <br /><br />android.app.Dialog.onWindowFocusChanged (boolean hasFocus) &mdash; This hook is called whenever the window focus changes. <br /><br />android.app.Dialog.onKeyDown (int keyCode, KeyEvent event) &mdash; A key was pressed down. <br /><br />android.app.Dialog.setContentView (View view) &mdash; Set the screen content to an explicit view. <br /><br />android.app.Dialog.setCancelable (boolean flag) &mdash; Sets whether this dialog is cancelable with the BACK key. <br /><br />android.app.Dialog.show () &mdash; Start the dialog and display it on screen. <br /><br />android.app.Dialog.setCanceledOnTouchOutside (boolean cancel) &mdash; Sets whether this dialog is canceled when touched outside the window's bounds. <br /><br />android.app.Dialog.setContentView (int layoutResID) &mdash; Set the screen content from a layout resource. <br /><br />android.app.Dialog.findViewById (int id) &mdash; Finds a child view with the given identifier. <br /><br />android.app.DialogFragment.show (FragmentManager manager, String tag) &mdash; Display the dialog, adding the fragment to the given FragmentManager. <br /><br />android.app.DialogFragment.onStart () &mdash; Called when the Fragment is visible to the user. <br /><br />android.app.DialogFragment.dismiss () &mdash; Dismiss the fragment and its dialog. <br /><br />android.app.DialogFragment.onCreate (Bundle savedInstanceState) &mdash; Called to do initial creation of a fragment. <br /><br />"
"android.app.DialogFragment.show (FragmentTransaction transaction, String tag) &mdash; Display the dialog, adding the fragment using an existing transaction and then committing the transaction. <br /><br />android.app.DownloadManager.getUriForDownloadedFile (long id) &mdash; Returns the Uri of the given downloaded file id, if the file is downloaded successfully. <br /><br />android.app.DownloadManager.getMimeTypeForDownloadedFile (long id) &mdash; Returns the media type of the given downloaded file id, if the file was downloaded successfully. <br /><br />android.app.DownloadManager.getRecommendedMaxBytesOverMobile (Context context) &mdash; Returns recommended maximum size, in bytes, of downloads that may go over a mobile connection; or null if there's no recommended limit. <br /><br />android.app.DownloadManager.getMaxBytesOverMobile (Context context) &mdash; Returns maximum size, in bytes, of downloads that may go over a mobile connection; or null if there's no limit <br /><br />android.app.Fragment.getView ()   Get the root view for the fragment's layout  (the one returned by onCreateView (LayoutInflater, ViewGroup, Bundle)) &mdash; Get the root view for the fragment's layout (the one returned by onCreateView(LayoutInflater, ViewGroup, Bundle)), if provided. <br /><br />android.app.Fragment.getTargetRequestCode ()   Return the target request code set by setTargetFragment (Fragment, int) &mdash; Return the target request code set by setTargetFragment(Fragment, int). <br /><br />android.app.Fragment.getTag () &mdash; Get the tag name of the fragment, if specified. <br /><br />android.app.Fragment.onPause () &mdash; Called when the Fragment is no longer resumed. <br /><br />android.app.Fragment.onSaveInstanceState (Bundle outState) &mdash; Called to ask the fragment to save its current dynamic state, so it can later be reconstructed in a new instance of its process is restarted. <br /><br />android.app.Fragment.instantiate (Context context, String fname)   Like instantiate (Context, String, Bundle) &mdash; Like instantiate(Context, String, Bundle) but with a null argument Bundle. <br /><br />android.app.Fragment.onStop () &mdash; Called when the Fragment is no longer started. <br /><br />android.app.Fragment.onDestroyView ()   Called when the view previously created by onCreateView (LayoutInflater, ViewGroup, Bundle) &mdash; Called when the view previously created by onCreateView(LayoutInflater, ViewGroup, Bundle) has been detached from the fragment. <br /><br />android.app.Fragment.onDestroy () &mdash; Called when the fragment is no longer in use. <br /><br />android.app.Fragment.isRemoving () &mdash; Return true if this fragment is currently being removed from its activity. <br /><br />android.app.Fragment.onInflate (AttributeSet attrs, Bundle savedInstanceState)    This method was deprecated in API level 12. Use onInflate (Activity, AttributeSet, Bundle) &mdash; This method was deprecated in API level 12. Use onInflate(Activity, AttributeSet, Bundle) instead. <br /><br />android.app.Fragment.getTargetFragment ()   Return the target fragment set by setTargetFragment (Fragment, int) &mdash; Return the target fragment set by setTargetFragment(Fragment, int). <br /><br />android.app.Fragment.onResume () &mdash; Called when the fragment is visible to the user and actively running. <br /><br />android.app.Fragment.setRetainInstance (boolean retain)   Control whether a fragment instance is retained across Activity re-creation  (such as from a configuration change) &mdash; Control whether a fragment instance is retained across Activity re-creation (such as from a configuration change). <br /><br />android.app.Fragment.getParentFragment () &mdash; Returns the parent Fragment containing this Fragment. <br /><br />"
"android.app.Fragment.startActivityForResult (Intent intent, int requestCode, Bundle options)   Call startActivityForResult (Intent, int, Bundle) &mdash; Call startActivityForResult(Intent, int, Bundle) from the fragment's containing Activity. <br /><br />android.app.Fragment.getId () &mdash; Return the identifier this fragment is known by. <br /><br />android.app.Fragment.startActivity (Intent intent)   Call startActivity (Intent) &mdash; Call startActivity(Intent) from the fragment's containing Activity. <br /><br />android.app.Fragment.setUserVisibleHint (boolean isVisibleToUser) &mdash; Set a hint to the system about whether this fragment's UI is currently visible to the user. <br /><br />android.app.Fragment.isVisible () &mdash; Return true if the fragment is currently visible to the user. <br /><br />android.app.Fragment.getResources ()   Return getActivity ().getResources () &mdash; Return getActivity().getResources(). <br /><br />android.app.Fragment.setHasOptionsMenu (boolean hasMenu)   Report that this fragment would like to participate in populating the options menu by receiving a call to onCreateOptionsMenu (Menu, MenuInflater) &mdash; Report that this fragment would like to participate in populating the options menu by receiving a call to onCreateOptionsMenu(Menu, MenuInflater) and related methods. <br /><br />android.app.Fragment.startActivityForResult (Intent intent, int requestCode)   Call startActivityForResult (Intent, int) &mdash; Call startActivityForResult(Intent, int) from the fragment's containing Activity. <br /><br />android.app.Fragment.isResumed () &mdash; Return true if the fragment is in the resumed state. <br /><br />android.app.Fragment.onActivityCreated (Bundle savedInstanceState) &mdash; Called when the fragment's activity has been created and this fragment's view hierarchy instantiated. <br /><br />android.app.Fragment.onActivityResult (int requestCode, int resultCode, Intent data)   Receive the result from a previous call to startActivityForResult (Intent, int) &mdash; Receive the result from a previous call to startActivityForResult(Intent, int). <br /><br />android.app.Fragment.getActivity () &mdash; Return the Activity this fragment is currently associated with. <br /><br />android.app.Fragment.isInLayout () &mdash; Return true if the layout is included as part of an activity view hierarchy via the <fragment> tag. <br /><br />android.app.Fragment.startActivity (Intent intent, Bundle options)   Call startActivity (Intent, Bundle) &mdash; Call startActivity(Intent, Bundle) from the fragment's containing Activity. <br /><br />android.app.Fragment.instantiate (Context context, String fname, Bundle args) &mdash; Create a new instance of a Fragment with the given class name. <br /><br />android.app.Fragment.isAdded () &mdash; Return true if the fragment is currently added to its activity. <br /><br />android.app.Fragment.onAttach (Activity activity) &mdash; Called when a fragment is first attached to its activity. <br /><br />android.app.Fragment.isDetached () &mdash; Return true if the fragment has been explicitly detached from the UI. <br /><br />android.app.Fragment.setMenuVisibility (boolean menuVisible) &mdash; Set a hint for whether this fragment's menu should be visible. <br /><br />android.app.Fragment.getArguments () &mdash; Return the arguments supplied when the fragment was instantiated, if any. <br /><br />"
"android.app.Fragment.onInflate (Activity activity, AttributeSet attrs, Bundle savedInstanceState) &mdash; Called when a fragment is being created as part of a view layout inflation, typically from setting the content view of an activity. <br /><br />android.app.Fragment.isHidden () &mdash; Return true if the fragment has been hidden. <br /><br />android.app.Fragment.setArguments (Bundle args) &mdash; Supply the construction arguments for this fragment. <br /><br />android.app.FragmentManager.putFragment (Bundle bundle, String key, Fragment fragment) &mdash; Put a reference to a fragment in a Bundle. <br /><br />android.app.FragmentManager.getBackStackEntryCount () &mdash; Return the number of entries currently in the back stack. <br /><br />android.app.FragmentManager.popBackStackImmediate ()   Like popBackStack () &mdash; Like popBackStack(), but performs the operation immediately inside of the call. <br /><br />android.app.FragmentManager.popBackStack () &mdash; Pop the top state off the back stack. <br /><br />android.app.FragmentManager.beginTransaction () &mdash; Start a series of edit operations on the Fragments associated with this FragmentManager. <br /><br />android.app.FragmentManager.getFragment (Bundle bundle, String key)   Retrieve the current Fragment instance for a reference previously placed with putFragment (Bundle, String, Fragment) &mdash; Retrieve the current Fragment instance for a reference previously placed with putFragment(Bundle, String, Fragment). <br /><br />android.app.FragmentManager.popBackStackImmediate (String name, int flags)   Like popBackStack (String, int) &mdash; Like popBackStack(String, int), but performs the operation immediately inside of the call. <br /><br />android.app.FragmentManager.popBackStackImmediate (int id, int flags)   Like popBackStack (int, int) &mdash; Like popBackStack(int, int), but performs the operation immediately inside of the call. <br /><br />android.app.FragmentManager.popBackStack (String name, int flags) &mdash; Pop the last fragment transition from the manager's fragment back stack. <br /><br />android.app.FragmentManager.popBackStack (int id, int flags) &mdash; Pop all back stack states up to the one with the given identifier. <br /><br />android.app.FragmentManager.findFragmentByTag (String tag) &mdash; Finds a fragment that was identified by the given tag either when inflated from XML or as supplied when added in a transaction. <br /><br />android.app.FragmentManager.saveFragmentInstanceState (Fragment f) &mdash; Save the current instance state of the given Fragment. <br /><br />android.app.FragmentManager.executePendingTransactions ()   After a FragmentTransaction is committed with FragmentTransaction.commit () &mdash; After a FragmentTransaction is committed with FragmentTransaction.commit(), it is scheduled to be executed asynchronously on the process's main thread. <br /><br />android.app.FragmentTransaction.commit () &mdash; Schedules a commit of this transaction. <br /><br />android.app.FragmentTransaction.add (int containerViewId, Fragment fragment)   Calls add (int, Fragment, String) &mdash; Calls add(int, Fragment, String) with a null tag. <br /><br />android.app.FragmentTransaction.add (Fragment fragment, String tag)   Calls add (int, Fragment, String) &mdash; Calls add(int, Fragment, String) with a 0 containerViewId. <br /><br />android.app.FragmentTransaction.add (int containerViewId, Fragment fragment, String tag) &mdash; Add a fragment to the activity state. <br /><br />"
"android.app.FragmentTransaction.replace (int containerViewId, Fragment fragment)   Calls replace (int, Fragment, String) &mdash; Calls replace(int, Fragment, String) with a null tag. <br /><br />android.app.FragmentTransaction.detach (Fragment fragment) &mdash; Detach the given fragment from the UI. <br /><br />android.app.FragmentTransaction.addToBackStack (String name) &mdash; Add this transaction to the back stack. <br /><br />android.app.FragmentTransaction.attach (Fragment fragment)   Re-attach a fragment after it had previously been detached from the UI with detach (Fragment) &mdash; Re-attach a fragment after it had previously been detached from the UI with detach(Fragment). <br /><br />android.app.FragmentTransaction.commitAllowingStateLoss ()   Like commit () &mdash; Like commit() but allows the commit to be executed after an activity's state is saved. <br /><br />android.app.FragmentTransaction.replace (int containerViewId, Fragment fragment, String tag) &mdash; Replace an existing fragment that was added to a container. <br /><br />android.app.FragmentTransaction.remove (Fragment fragment) &mdash; Remove an existing fragment. <br /><br />android.app.FragmentTransaction.setTransition (int transit) &mdash; Select a standard transition animation for this transaction. <br /><br />android.app.Instrumentation.onCreate (Bundle arguments) &mdash; Called when the instrumentation is starting, before any application code has been loaded. <br /><br />android.app.Instrumentation.onStart () &mdash; Method where the instrumentation thread enters execution. <br /><br />android.app.IntentService.onCreate () &mdash; Called by the system when the service is first created. <br /><br />android.app.IntentService.onDestroy () &mdash; Called by the system to notify a Service that it is no longer used and is being removed. <br /><br />android.app.ListActivity.setListAdapter (ListAdapter adapter) &mdash; Provide the cursor for the list view. <br /><br />android.app.LocalActivityManager.dispatchCreate (Bundle state)   Restore a state that was previously returned by saveInstanceState () &mdash; Restore a state that was previously returned by saveInstanceState(). <br /><br />android.app.LocalActivityManager.dispatchDestroy (boolean finishing)   Called by the container activity in its onDestroy () &mdash; Called by the container activity in its onDestroy() so that LocalActivityManager can perform the corresponding action on the activities it holds. <br /><br />android.app.LocalActivityManager.getActivity (String id) &mdash; Return the Activity object associated with a string ID. <br /><br />android.app.LocalActivityManager.dispatchPause (boolean finishing)   Called by the container activity in its onPause () &mdash; Called by the container activity in its onPause() so that LocalActivityManager can perform the corresponding action on the activities it holds. <br /><br />android.app.LocalActivityManager.startActivity (String id, Intent intent) &mdash; Start a new activity running in the group. <br /><br />android.app.LocalActivityManager.getCurrentActivity () &mdash; Retrieve the Activity that is currently running. <br /><br />android.app.LocalActivityManager.saveInstanceState () &mdash; Retrieve the state of all activities known by the group. <br /><br />"
"android.app.LocalActivityManager.dispatchResume ()   Called by the container activity in its onResume () &mdash; Called by the container activity in its onResume() so that LocalActivityManager can perform the corresponding action on the activities it holds. <br /><br />android.app.LocalActivityManager.dispatchStop ()   Called by the container activity in its onStop () &mdash; Called by the container activity in its onStop() so that LocalActivityManager can perform the corresponding action on the activities it holds. <br /><br />android.app.LocalActivityManager.destroyActivity (String id, boolean finish) &mdash; Destroy the activity associated with a particular id. <br /><br />android.app.Notification.setLatestEventInfo (Context context, CharSequence contentTitle, CharSequence contentText, PendingIntent contentIntent) &mdash; This method was deprecated in API level 11. Use Notification.Builder instead. <br /><br />android.app.Notification.writeToParcel (Parcel parcel, int flags) &mdash; Flatten this notification from a parcel. <br /><br />android.app.Notification.getSortKey () &mdash; Get a sort key that orders this notification among other notifications from the same package. <br /><br />android.app.Notification.getGroup () &mdash; Get the key used to group this notification into a cluster or stack with other notifications on devices which support such rendering. <br /><br />android.app.Notification.toString () &mdash; Returns a string containing a concise, human-readable description of this object. <br /><br />android.app.NotificationManager.notify (int id, Notification notification) &mdash; Post a notification to be shown in the status bar. <br /><br />android.app.NotificationManager.cancel (String tag, int id) &mdash; Cancel a previously shown notification. <br /><br />android.app.NotificationManager.cancelAll () &mdash; Cancel all previously shown notifications. <br /><br />android.app.PendingIntent.send (Context context, int code, Intent intent) &mdash; Perform the operation associated with this PendingIntent, allowing the caller to specify information about the Intent to use. <br /><br />android.app.PendingIntent.send (int code) &mdash; Perform the operation associated with this PendingIntent. <br /><br />android.app.PendingIntent.getIntentSender () &mdash; Retrieve a IntentSender object that wraps the existing sender of the PendingIntent <br /><br />android.app.PendingIntent.getBroadcast (Context context, int requestCode, Intent intent, int flags)   Retrieve a PendingIntent that will perform a broadcast, like calling Context.sendBroadcast () &mdash; Retrieve a PendingIntent that will perform a broadcast, like calling Context.sendBroadcast(). <br /><br />android.app.PendingIntent.getService (Context context, int requestCode, Intent intent, int flags)   Retrieve a PendingIntent that will start a service, like calling Context.startService () &mdash; Retrieve a PendingIntent that will start a service, like calling Context.startService(). <br /><br />android.app.PendingIntent.getTargetPackage ()    This method was deprecated in API level 17. Renamed to getCreatorPackage () &mdash; This method was deprecated in API level 17. Renamed to getCreatorPackage(). <br /><br />android.app.PendingIntent.getActivity (Context context, int requestCode, Intent intent, int flags, Bundle options)   Retrieve a PendingIntent that will start a new activity, like calling Context.startActivity (Intent) &mdash; Retrieve a PendingIntent that will start a new activity, like calling Context.startActivity(Intent). <br /><br />android.app.PendingIntent.cancel () &mdash; Cancel a currently active PendingIntent. <br /><br />android.app.PendingIntent.equals (Object otherObj) &mdash; Comparison operator on two PendingIntent objects, such that true is returned then they both represent the same operation from the same package. <br /><br />"
"android.app.PendingIntent.getActivities (Context context, int requestCode, Intent[] intents, int flags, Bundle options)   Like getActivity (Context, int, Intent, int) &mdash; Like getActivity(Context, int, Intent, int), but allows an array of Intents to be supplied. <br /><br />android.app.PendingIntent.getCreatorPackage () &mdash; Return the package name of the application that created this PendingIntent, that is the identity under which you will actually be sending the Intent. <br /><br />android.app.PendingIntent.send (Context context, int code, Intent intent, PendingIntent.OnFinished onFinished, Handler handler) &mdash; Perform the operation associated with this PendingIntent, allowing the caller to specify information about the Intent to use and be notified when the send has completed. <br /><br />android.app.PendingIntent.hashCode () &mdash; Returns an integer hash code for this object. <br /><br />android.app.PendingIntent.send (int code, PendingIntent.OnFinished onFinished, Handler handler) &mdash; Perform the operation associated with this PendingIntent, allowing the caller to be notified when the send has completed. <br /><br />android.app.ProgressDialog.setProgressNumberFormat (String format) &mdash; Change the format of the small text showing current and maximum units of progress. <br /><br />android.app.ProgressDialog.onStart () &mdash; Called when the dialog is starting. <br /><br />android.app.RemoteInput.getExtras () &mdash; Get additional metadata carried around with this remote input. <br /><br />android.app.RemoteInput.addResultsToIntent (RemoteInput[] remoteInputs, Intent intent, Bundle results) &mdash; Populate an intent object with the results gathered from remote input. <br /><br />android.app.RemoteInput.getResultsFromIntent (Intent intent) &mdash; Get the remote input results bundle from an intent. <br /><br />android.app.RemoteInput.getLabel () &mdash; Get the label to display to users when collecting this input. <br /><br />android.app.RemoteInput.getAllowFreeFormInput () &mdash; Get whether or not users can provide an arbitrary value for input. <br /><br />android.app.RemoteInput.getResultKey ()   Get the key that the result of this input will be set in from the Bundle returned by getResultsFromIntent (Intent) &mdash; Get the key that the result of this input will be set in from the Bundle returned by getResultsFromIntent(Intent) when the PendingIntent is sent. <br /><br />android.app.RemoteInput.getChoices () &mdash; Get possible input choices. <br /><br />android.app.SearchableInfo.getVoiceLanguageModeId () &mdash; Gets the resource id of the voice search language model string. <br /><br />android.app.SearchableInfo.getInputType () &mdash; Gets the input type as specified in the searchable attributes. <br /><br />android.app.SearchableInfo.getSuggestThreshold () &mdash; Gets the suggestion threshold. <br /><br />android.app.SearchableInfo.getImeOptions () &mdash; Gets the input method options specified in the searchable attributes. <br /><br />android.app.SearchableInfo.getSearchActivity () &mdash; Gets the component name of the searchable activity. <br /><br />android.app.SearchableInfo.getSuggestIntentData () &mdash; Gets the optional intent data for use with these suggestions. <br /><br />"
"android.app.SearchableInfo.getSuggestIntentAction () &mdash; Gets the optional intent action for use with these suggestions. <br /><br />android.app.SearchableInfo.getVoiceMaxResults () &mdash; The maximum number of voice recognition results to return. <br /><br />android.app.SearchableInfo.getVoiceLanguageId () &mdash; Gets the resource id of the spoken language to recognize in voice search. <br /><br />android.app.SearchableInfo.getHintId () &mdash; Gets the resource id of the hint text. <br /><br />android.app.SearchableInfo.getSuggestSelection () &mdash; Gets the selection for obtaining search suggestions. <br /><br />android.app.SearchableInfo.shouldRewriteQueryFromData () &mdash; Checks whether the text in the query field should come from the suggestion intent data. <br /><br />android.app.SearchableInfo.getSuggestPath () &mdash; Gets the content provider path for obtaining search suggestions. <br /><br />android.app.SearchableInfo.getVoiceSearchLaunchRecognizer () &mdash; Checks if voice search should start in-app search. <br /><br />android.app.SearchableInfo.getVoicePromptTextId () &mdash; Gets the resource id of the voice prompt text string. <br /><br />android.app.SearchableInfo.getVoiceSearchLaunchWebSearch () &mdash; Checks if voice search should start web search. <br /><br />android.app.SearchableInfo.shouldRewriteQueryFromText () &mdash; Checks whether the text in the query field should come from the suggestion title. <br /><br />android.app.SearchableInfo.getSuggestAuthority () &mdash; Gets the search suggestion content provider authority. <br /><br />android.app.SearchableInfo.getVoiceSearchEnabled () &mdash; Checks if the searchable activity wants the voice search button to be shown. <br /><br />android.app.SearchManager.getSearchableInfo (ComponentName componentName) &mdash; Gets information about a searchable activity. <br /><br />android.app.Service.stopSelf () &mdash; Stop the service, if it was previously started. <br /><br />android.app.Service.onTaskRemoved (Intent rootIntent) &mdash; This is called if the service is currently running and the user has removed a task that comes from the service's application. <br /><br />android.app.Service.onStart (Intent intent, int startId)    This method was deprecated in API level 5. Implement onStartCommand (Intent, int, int) &mdash; This method was deprecated in API level 5. Implement onStartCommand(Intent, int, int) instead. <br /><br />android.app.Service.onUnbind (Intent intent) &mdash; Called when all clients have disconnected from a particular interface published by the service. <br /><br />android.app.Service.stopSelf (int startId)   Old version of stopSelfResult (int) &mdash; Old version of stopSelfResult(int) that doesn't return a result. <br /><br />android.app.Service.onStartCommand (Intent intent, int flags, int startId)   Called by the system every time a client explicitly starts the service by calling startService (Intent) &mdash; Called by the system every time a client explicitly starts the service by calling startService(Intent), providing the arguments it supplied and a unique integer token representing the start request. <br /><br />"
"android.app.Service.startForeground (int id, Notification notification) &mdash; Make this service run in the foreground, supplying the ongoing notification to be shown to the user while in this state. <br /><br />android.app.Service.onRebind (Intent intent)   Called when new clients have connected to the service, after it had previously been notified that all had disconnected in its onUnbind (Intent) &mdash; Called when new clients have connected to the service, after it had previously been notified that all had disconnected in its onUnbind(Intent). <br /><br />android.app.Service.getApplication () &mdash; Return the application that owns this service. <br /><br />android.app.TaskStackBuilder.addParentStack (ComponentName sourceActivityName)   Add the activity parent chain as specified by the parentActivityName attribute of the activity  (or activity-alias) &mdash; Add the activity parent chain as specified by the parentActivityName attribute of the activity (or activity-alias) element in the application's manifest to the task stack builder. <br /><br />android.app.TaskStackBuilder.addNextIntent (Intent nextIntent) &mdash; Add a new Intent to the task stack. <br /><br />android.app.TaskStackBuilder.getPendingIntent (int requestCode, int flags, Bundle options) &mdash; Obtain a PendingIntent for launching the task constructed by this builder so far. <br /><br />android.app.TaskStackBuilder.startActivities (Bundle options) &mdash; Start the task stack constructed by this builder. <br /><br />android.app.TaskStackBuilder.create (Context context) &mdash; Return a new TaskStackBuilder for launching a fresh task stack consisting of a series of activities. <br /><br />android.app.TaskStackBuilder.addParentStack (Activity sourceActivity)   Add the activity parent chain as specified by the getParentActivityIntent () method of the activity specified and the parentActivityName attributes of each successive activity  (or activity-alias) &mdash; Add the activity parent chain as specified by the getParentActivityIntent() method of the activity specified and the parentActivityName attributes of each successive activity (or activity-alias) element in the application's manifest to the task stack builder. <br /><br />android.app.usage.UsageEvents.hasNextEvent ()   Returns whether or not there are more events to read using getNextEvent (android.app.usage.UsageEvents.Event) &mdash; Returns whether or not there are more events to read using getNextEvent(android.app.usage.UsageEvents.Event). <br /><br />android.app.usage.UsageStatsManager.queryEvents (long beginTime, long endTime) &mdash; Query for events in the given time range. <br /><br />android.app.WallpaperInfo.getPackageName () &mdash; Return the .apk package that implements this wallpaper. <br /><br />android.app.WallpaperInfo.getServiceInfo () &mdash; Return the raw information about the Service implementing this wallpaper. <br /><br />android.app.WallpaperManager.getInstance (Context context) &mdash; Retrieve a WallpaperManager associated with the given Context. <br /><br />android.app.WallpaperManager.setWallpaperOffsetSteps (float xStep, float yStep) &mdash; For applications that use multiple virtual screens showing a wallpaper, specify the step size between virtual screens. <br /><br />android.app.WallpaperManager.setResource (int resid) &mdash; Change the current system wallpaper to the bitmap in the given resource. <br /><br />android.app.WallpaperManager.getDesiredMinimumWidth () &mdash; Returns the desired minimum width for the wallpaper. <br /><br />android.app.WallpaperManager.getDrawable () &mdash; Retrieve the current system wallpaper; if no wallpaper is set, the system built-in static wallpaper is returned. <br /><br />android.app.WallpaperManager.sendWallpaperCommand (IBinder windowToken, String action, int x, int y, int z, Bundle extras) &mdash; Send an arbitrary command to the current active wallpaper. <br /><br />android.app.WallpaperManager.getDesiredMinimumHeight () &mdash; Returns the desired minimum height for the wallpaper. <br /><br />"
"android.app.WallpaperManager.suggestDesiredDimensions (int minimumWidth, int minimumHeight) &mdash; For use only by the current home application, to specify the size of wallpaper it would like to use. <br /><br />android.app.WallpaperManager.setWallpaperOffsets (IBinder windowToken, float xOffset, float yOffset) &mdash; Set the position of the current wallpaper within any larger space, when that wallpaper is visible behind the given window. <br /><br />android.app.WallpaperManager.setStream (InputStream data) &mdash; Change the current system wallpaper to a specific byte stream. <br /><br />android.app.WallpaperManager.getWallpaperInfo () &mdash; If the current wallpaper is a live wallpaper component, return the information about that wallpaper. <br /><br />android.app.WallpaperManager.forgetLoadedWallpaper () &mdash; Remove all internal references to the last loaded wallpaper. <br /><br />android.appwidget.AppWidgetHost.allocateAppWidgetId () &mdash; Get a appWidgetId for a host in the calling process. <br /><br />android.appwidget.AppWidgetHost.stopListening () &mdash; Stop receiving onAppWidgetChanged calls for your AppWidgets. <br /><br />android.appwidget.AppWidgetHostView.getDefaultPaddingForWidget (Context context, ComponentName component, Rect padding) &mdash; As of ICE_CREAM_SANDWICH we are automatically adding padding to widgets targeting ICE_CREAM_SANDWICH and higher. <br /><br />android.appwidget.AppWidgetHostView.updateAppWidget (RemoteViews remoteViews) &mdash; Process a set of RemoteViews coming in as an update from the AppWidget provider. <br /><br />android.appwidget.AppWidgetManager.getAppWidgetIds (ComponentName provider) &mdash; Get the list of appWidgetIds that have been bound to the given AppWidget provider. <br /><br />android.appwidget.AppWidgetManager.updateAppWidget (int[] appWidgetIds, RemoteViews views) &mdash; Set the RemoteViews to use for the specified appWidgetIds. <br /><br />android.appwidget.AppWidgetManager.getInstance (Context context) &mdash; Get the AppWidgetManager instance to use for the supplied Context object. <br /><br />android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed (int appWidgetId, ComponentName provider, Bundle options) &mdash; Set the component for a given appWidgetId. <br /><br />android.appwidget.AppWidgetManager.updateAppWidget (int appWidgetId, RemoteViews views) &mdash; Set the RemoteViews to use for the specified appWidgetId. <br /><br />android.appwidget.AppWidgetManager.getAppWidgetInfo (int appWidgetId) &mdash; Get the available info about the AppWidget. <br /><br />android.appwidget.AppWidgetManager.updateAppWidget (ComponentName provider, RemoteViews views) &mdash; Set the RemoteViews to use for all AppWidget instances for the supplied AppWidget provider. <br /><br />android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed (int appWidgetId, UserHandle user, ComponentName provider, Bundle options) &mdash; Set the provider for a given appWidgetId if the caller has a permission. <br /><br />android.appwidget.AppWidgetProvider.onReceive (Context context, Intent intent)   Implements onReceive (Context, Intent) &mdash; Implements onReceive(Context, Intent) to dispatch calls to the various other methods on AppWidgetProvider. <br /><br />android.appwidget.AppWidgetProvider.onDisabled (Context context) &mdash; Called in response to the ACTION_APPWIDGET_DISABLED broadcast, which is sent when the last AppWidget instance for this provider is deleted. Override this method to implement your own AppWidget functionality. <br /><br />android.appwidget.AppWidgetProvider.onDeleted (Context context, int[] appWidgetIds) &mdash; Called in response to the ACTION_APPWIDGET_DELETED broadcast when one or more AppWidget instances have been deleted. Override this method to implement your own AppWidget functionality. <br /><br />"
"android.appwidget.AppWidgetProvider.onEnabled (Context context) &mdash; Called in response to the ACTION_APPWIDGET_ENABLED broadcast when the a AppWidget for this provider is instantiated. Override this method to implement your own AppWidget functionality. <br /><br />android.appwidget.AppWidgetProvider.onAppWidgetOptionsChanged (Context context, AppWidgetManager appWidgetManager, int appWidgetId, Bundle newOptions) &mdash; Called in response to the ACTION_APPWIDGET_OPTIONS_CHANGED broadcast when this widget has been layed out at a new size. <br /><br />android.appwidget.AppWidgetProvider.onUpdate (Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) &mdash; Called in response to the ACTION_APPWIDGET_UPDATE and ACTION_APPWIDGET_RESTORED broadcasts when this AppWidget provider is being asked to provide RemoteViews for a set of AppWidgets. Override this method to implement your own AppWidget functionality. <br /><br />android.bluetooth.BluetoothAdapter.enable () &mdash; Turn on the local Bluetooth adapter do not use without explicit user action to turn on Bluetooth. <br /><br />android.bluetooth.BluetoothAdapter.getAddress () &mdash; Returns the hardware address of the local Bluetooth adapter. <br /><br />android.bluetooth.BluetoothAdapter.getBondedDevices ()   Return the set of BluetoothDevice objects that are bonded  (paired) &mdash; Return the set of BluetoothDevice objects that are bonded (paired) to the local adapter. <br /><br />android.bluetooth.BluetoothAdapter.getState () &mdash; Get the current state of the local Bluetooth adapter. <br /><br />android.bluetooth.BluetoothAdapter.getDefaultAdapter () &mdash; Get a handle to the default local Bluetooth adapter. <br /><br />android.bluetooth.BluetoothAdapter.disable () &mdash; Turn off the local Bluetooth adapter do not use without explicit user action to turn off Bluetooth. <br /><br />android.bluetooth.BluetoothAdapter.isEnabled () &mdash; Return true if Bluetooth is currently enabled and ready for use. <br /><br />android.bluetooth.BluetoothClass.getMajorDeviceClass () &mdash; Return the major device class component of this BluetoothClass. <br /><br />android.bluetooth.BluetoothClass.getDeviceClass ()   Return the  (major and minor) &mdash; Return the (major and minor) device class component of this BluetoothClass. <br /><br />android.bluetooth.BluetoothDevice.getName () &mdash; Get the friendly Bluetooth name of the remote device. <br /><br />android.bluetooth.BluetoothDevice.getBluetoothClass () &mdash; Get the Bluetooth class of the remote device. <br /><br />android.content.AsyncQueryHandler.startQuery (int token, Object cookie, Uri uri, String[] projection, String selection, String[] selectionArgs, String orderBy) &mdash; This method begins an asynchronous query. <br /><br />android.content.BroadcastReceiver.onReceive (Context context, Intent intent) &mdash; This method is called when the BroadcastReceiver is receiving an Intent broadcast. <br /><br />android.content.BroadcastReceiver.abortBroadcast ()   Sets the flag indicating that this receiver should abort the current broadcast; only works with broadcasts sent through &mdash; Sets the flag indicating that this receiver should abort the current broadcast; only works with broadcasts sent through Context.sendOrderedBroadcast. <br /><br />android.content.ClipData.newIntent (CharSequence label, Intent intent) &mdash; Create a new ClipData holding an Intent with MIME type MIMETYPE_TEXT_INTENT. <br /><br />android.content.ClipData.getDescription () &mdash; Return the ClipDescription associated with this data, describing what it contains. <br /><br />android.content.ClipData.getItemAt (int index) &mdash; Return a single item inside of the clip data. <br /><br />"
"android.content.ClipData.getItemCount () &mdash; Return the number of items in the clip data. <br /><br />android.content.ClipData.newPlainText (CharSequence label, CharSequence text) &mdash; Create a new ClipData holding data of the type MIMETYPE_TEXT_PLAIN. <br /><br />android.content.ClipDescription.getMimeTypeCount () &mdash; Return the number of MIME types the clip is available in. <br /><br />android.content.ClipDescription.getMimeType (int index) &mdash; Return one of the possible clip MIME types. <br /><br />android.content.ClipDescription.getLabel () &mdash; Return the label for this clip. <br /><br />android.content.ClipDescription.hasMimeType (String mimeType) &mdash; Check whether the clip description contains the given MIME type. <br /><br />android.content.ComponentName.getClassName () &mdash; Return the class name of this component. <br /><br />android.content.ComponentName.writeToParcel (ComponentName c, Parcel out) &mdash; Write a ComponentName to a Parcel, handling null pointers. <br /><br />android.content.ComponentName.getPackageName () &mdash; Return the package name of this component. <br /><br />android.content.ComponentName.flattenToString () &mdash; Return a String that unambiguously describes both the package and class names contained in the ComponentName. <br /><br />android.content.ComponentName.unflattenFromString (String str)   Recover a ComponentName from a String that was previously created with flattenToString () &mdash; Recover a ComponentName from a String that was previously created with flattenToString(). <br /><br />android.content.ComponentName.flattenToShortString ()   The same as flattenToString () &mdash; The same as flattenToString(), but abbreviates the class name if it is a suffix of the package. <br /><br />android.content.ComponentName.getShortClassName ()   Return the class name, either fully qualified or in a shortened form  (with a leading '.') &mdash; Return the class name, either fully qualified or in a shortened form (with a leading '.') if it is a suffix of the package. <br /><br />android.content.ComponentName.toShortString () &mdash; Return string representation of this class without the class's name as a prefix. <br /><br />android.content.ContentProvider.bulkInsert (Uri uri, ContentValues[] values)   Override this to handle requests to insert a set of new rows, or the default implementation will iterate over the values and call insert (Uri, ContentValues) &mdash; Override this to handle requests to insert a set of new rows, or the default implementation will iterate over the values and call insert(Uri, ContentValues) on each of them. <br /><br />android.content.ContentProvider.onConfigurationChanged (Configuration newConfig) &mdash; Called by the system when the device configuration changes while your component is running. This method is always called on the application main thread, and must not perform lengthy operations. <br /><br />android.content.ContentProvider.attachInfo (Context context, ProviderInfo info) &mdash; After being instantiated, this is called to tell the content provider about itself. <br /><br />android.content.ContentProvider.applyBatch (ArrayList< ContentProviderOperation> operations)   Override this to handle requests to perform a batch of operations, or the default implementation will iterate over the operations and call apply (ContentProvider, ContentProviderResult[], int) &mdash; Override this to handle requests to perform a batch of operations, or the default implementation will iterate over the operations and call apply(ContentProvider, ContentProviderResult[], int) on each of them. <br /><br />android.content.ContentProviderClient.delete (Uri url, String selection, String[] selectionArgs)   See &mdash; See ContentProvider.delete <br /><br />android.content.ContentProviderClient.query (Uri url, String[] projection, String selection, String[] selectionArgs, String sortOrder)   See &mdash; See ContentProvider.query <br /><br />"
"android.content.ContentProviderClient.release () &mdash; Call this to indicate to the system that the associated ContentProvider is no longer needed by this ContentProviderClient. <br /><br />android.content.ContentProviderClient.getType (Uri url)   See &mdash; See ContentProvider.getType <br /><br />android.content.ContentProviderOperation.newDelete (Uri uri) &mdash; Create a ContentProviderOperation.Builder suitable for building a delete ContentProviderOperation. <br /><br />android.content.ContentProviderOperation.newUpdate (Uri uri) &mdash; Create a ContentProviderOperation.Builder suitable for building an update ContentProviderOperation. <br /><br />android.content.ContentProviderOperation.apply (ContentProvider provider, ContentProviderResult[] backRefs, int numBackRefs) &mdash; Applies this operation using the given provider. <br /><br />android.content.ContentProviderOperation.newInsert (Uri uri) &mdash; Create a ContentProviderOperation.Builder suitable for building an insert ContentProviderOperation. <br /><br />android.content.ContentResolver.openFileDescriptor (Uri uri, String mode, CancellationSignal cancellationSignal) &mdash; Open a raw file descriptor to access data under a URI. <br /><br />android.content.ContentResolver.acquireContentProviderClient (Uri uri) &mdash; Returns a ContentProviderClient that is associated with the ContentProvider that services the content at uri, starting the provider if necessary. <br /><br />android.content.ContentResolver.call (Uri uri, String method, String arg, Bundle extras) &mdash; Call a provider-defined method. <br /><br />android.content.ContentResolver.setMasterSyncAutomatically (boolean sync) &mdash; Sets the master auto-sync setting that applies to all the providers and accounts. <br /><br />android.content.ContentResolver.openInputStream (Uri uri) &mdash; Open a stream on to the content associated with a content URI. <br /><br />android.content.ContentResolver.bulkInsert (Uri url, ContentValues[] values) &mdash; Inserts multiple rows into a table at the given URL. <br /><br />android.content.ContentResolver.applyBatch (String authority, ArrayList< ContentProviderOperation> operations) &mdash; Applies each of the ContentProviderOperation objects and returns an array of their results. <br /><br />android.content.ContentResolver.acquireContentProviderClient (String name) &mdash; Returns a ContentProviderClient that is associated with the ContentProvider with the authority of name, starting the provider if necessary. <br /><br />android.content.ContentResolver.notifyChange (Uri uri, ContentObserver observer) &mdash; Notify registered observers that a row was updated and attempt to sync changes to the network. <br /><br />android.content.ContentResolver.query (Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder, CancellationSignal cancellationSignal) &mdash; Query the given URI, returning a Cursor over the result set with optional support for cancellation. <br /><br />android.content.ContentResolver.unregisterContentObserver (ContentObserver observer) &mdash; Unregisters a change observer. <br /><br />android.content.ContentResolver.notifyChange (Uri uri, ContentObserver observer, boolean syncToNetwork) &mdash; Notify registered observers that a row was updated. <br /><br />android.content.ContentResolver.validateSyncExtrasBundle (Bundle extras) &mdash; Check that only values of the following types are in the Bundle:  Integer Long Boolean Float Double String Account null <br /><br />android.content.ContentResolver.getType (Uri url) &mdash; Return the MIME type of the given content URL. <br /><br />"
"android.content.ContentResolver.insert (Uri url, ContentValues values) &mdash; Inserts a row into a table at the given URL. <br /><br />android.content.ContentResolver.registerContentObserver (Uri uri, boolean notifyForDescendents, ContentObserver observer) &mdash; Register an observer class that gets callbacks when data identified by a given content URI changes. <br /><br />android.content.ContentResolver.openOutputStream (Uri uri)   Synonym for openOutputStream (uri, 'w') &mdash; Synonym for openOutputStream(uri, 'w'). <br /><br />android.content.ContentResolver.update (Uri uri, ContentValues values, String where, String[] selectionArgs)   Update row (s) &mdash; Update row(s) in a content URI. <br /><br />android.content.ContentResolver.delete (Uri url, String where, String[] selectionArgs)   Deletes row (s) &mdash; Deletes row(s) specified by a content URI. <br /><br />android.content.ContentResolver.getMasterSyncAutomatically () &mdash; Gets the master auto-sync setting that applies to all the providers and accounts. <br /><br />android.content.ContentResolver.query (Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) &mdash; Query the given URI, returning a Cursor over the result set. <br /><br />android.content.ContentUris.withAppendedId (Uri contentUri, long id) &mdash; Appends the given ID to the end of the path. <br /><br />android.content.ContentUris.parseId (Uri contentUri) &mdash; Converts the last path segment to a long. <br /><br />android.content.ContentValues.get (String key) &mdash; Gets a value. <br /><br />android.content.ContentValues.valueSet () &mdash; Returns a set of all of the keys and values <br /><br />android.content.ContentValues.put (String key, byte[] value) &mdash; Adds a value to the set. <br /><br />android.content.ContentValues.size () &mdash; Returns the number of values. <br /><br />android.content.ContentValues.getAsByte (String key) &mdash; Gets a value and converts it to a Byte. <br /><br />android.content.ContentValues.clear () &mdash; Removes all values. <br /><br />android.content.ContentValues.containsKey (String key) &mdash; Returns true if this object has the named value. <br /><br />android.content.ContentValues.getAsString (String key) &mdash; Gets a value and converts it to a String. <br /><br />android.content.ContentValues.remove (String key) &mdash; Remove a single value. <br /><br />android.content.ContentValues.getAsShort (String key) &mdash; Gets a value and converts it to a Short. <br /><br />android.content.ContentValues.putNull (String key) &mdash; Adds a null value to the set. <br /><br />"
"android.content.ContentValues.getAsLong (String key) &mdash; Gets a value and converts it to a Long. <br /><br />android.content.ContentValues.getAsBoolean (String key) &mdash; Gets a value and converts it to a Boolean. <br /><br />android.content.ContentValues.getAsDouble (String key) &mdash; Gets a value and converts it to a Double. <br /><br />android.content.ContentValues.getAsInteger (String key) &mdash; Gets a value and converts it to an Integer. <br /><br />android.content.ContentValues.keySet () &mdash; Returns a set of all of the keys <br /><br />android.content.Context.getResources () &mdash; Return a Resources instance for your application's package. <br /><br />android.content.Context.checkUriPermission (Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags) &mdash; Check both a Uri and normal permission. <br /><br />android.content.Context.unbindService (ServiceConnection conn) &mdash; Disconnect from an application service. <br /><br />android.content.Context.checkPermission (String permission, int pid, int uid) &mdash; Determine whether the given permission is allowed for a particular process and user ID running in the system. <br /><br />android.content.Context.sendBroadcast (Intent intent, String receiverPermission) &mdash; Broadcast the given intent to all interested BroadcastReceivers, allowing an optional required permission to be enforced. <br /><br />android.content.Context.isRestricted () &mdash; Indicates whether this Context is restricted. <br /><br />android.content.Context.getDrawable (int id) &mdash; Return a drawable object associated with a particular resource ID and styled for the current theme. <br /><br />android.content.Context.sendBroadcast (Intent intent) &mdash; Broadcast the given intent to all interested BroadcastReceivers. <br /><br />android.content.Context.getExternalCacheDirs () &mdash; Returns absolute paths to application-specific directories on all external storage devices where the application can place cache files it owns. <br /><br />android.content.Context.getText (int resId) &mdash; Return a localized, styled CharSequence from the application's package's default string table. <br /><br />android.content.Context.openFileOutput (String name, int mode) &mdash; Open a private file associated with this Context's application package for writing. <br /><br />android.content.Context.unregisterComponentCallbacks (ComponentCallbacks callback)   Remove a ComponentCallbacks object that was previously registered with registerComponentCallbacks (ComponentCallbacks) &mdash; Remove a ComponentCallbacks object that was previously registered with registerComponentCallbacks(ComponentCallbacks). <br /><br />android.content.Context.getMainLooper () &mdash; Return the Looper for the main thread of the current process. <br /><br />android.content.Context.revokeUriPermission (Uri uri, int modeFlags)   Remove all permissions to access a particular content provider Uri that were previously added with grantUriPermission (String, Uri, int) &mdash; Remove all permissions to access a particular content provider Uri that were previously added with grantUriPermission(String, Uri, int). <br /><br />android.content.Context.getPackageName () &mdash; Return the name of this application's package. <br /><br />"
"android.content.Context.getAssets () &mdash; Return an AssetManager instance for your application's package. <br /><br />android.content.Context.getApplicationInfo () &mdash; Return the full application info for this context's package. <br /><br />android.content.Context.getDatabasePath (String name)   Returns the absolute path on the filesystem where a database created with openOrCreateDatabase (String, int, SQLiteDatabase.CursorFactory) &mdash; Returns the absolute path on the filesystem where a database created with openOrCreateDatabase(String, int, SQLiteDatabase.CursorFactory) is stored. <br /><br />android.content.Context.getCodeCacheDir () &mdash; Returns the absolute path to the application specific cache directory on the filesystem designed for storing cached code. <br /><br />android.content.Context.stopService (Intent service) &mdash; Request that a given application service be stopped. <br /><br />android.content.Context.checkCallingPermission (String permission) &mdash; Determine whether the calling process of an IPC you are handling has been granted a particular permission. <br /><br />android.content.Context.getClassLoader () &mdash; Return a class loader you can use to retrieve classes in this package. <br /><br />android.content.Context.getString (int resId) &mdash; Return a localized string from the application's package's default string table. <br /><br />android.content.Context.getFileStreamPath (String name)   Returns the absolute path on the filesystem where a file created with openFileOutput (String, int) &mdash; Returns the absolute path on the filesystem where a file created with openFileOutput(String, int) is stored. <br /><br />android.content.Context.getSharedPreferences (String name, int mode) &mdash; Retrieve and hold the contents of the preferences file 'name', returning a SharedPreferences through which you can retrieve and modify its values. <br /><br />android.content.Context.bindService (Intent service, ServiceConnection conn, int flags) &mdash; Connect to an application service, creating it if needed. <br /><br />android.content.Context.getExternalFilesDirs (String type) &mdash; Returns absolute paths to application-specific directories on all external storage devices where the application can place persistent files it owns. <br /><br />android.content.Context.getFilesDir ()   Returns the absolute path to the directory on the filesystem where files created with openFileOutput (String, int) &mdash; Returns the absolute path to the directory on the filesystem where files created with openFileOutput(String, int) are stored. <br /><br />android.content.Context.getString (int resId, Object... formatArgs)   Return a localized formatted string from the application's package's default string table, substituting the format arguments as defined in Formatter and format (String, Object...) &mdash; Return a localized formatted string from the application's package's default string table, substituting the format arguments as defined in Formatter and format(String, Object...). <br /><br />android.content.Context.getExternalFilesDir (String type)   Returns the absolute path to the directory on the primary external filesystem  (that is somewhere on Environment.getExternalStorageDirectory ()) &mdash; Returns the absolute path to the directory on the primary external filesystem (that is somewhere on Environment.getExternalStorageDirectory()) where the application can place persistent files it owns. <br /><br />android.content.Context.createPackageContext (String packageName, int flags) &mdash; Return a new Context object for the given application name. <br /><br />android.content.Context.getTheme () &mdash; Return the Theme object associated with this Context. <br /><br />android.content.Context.fileList () &mdash; Returns an array of strings naming the private files associated with this Context's application package. <br /><br />android.content.Context.startActivities (Intent[] intents, Bundle options) &mdash; Launch multiple new activities. <br /><br />android.content.Context.obtainStyledAttributes (AttributeSet set, int[] attrs) &mdash; Retrieve styled attribute information in this Context's theme. <br /><br />"
"android.content.Context.getPackageManager () &mdash; Return PackageManager instance to find global package information. <br /><br />android.content.Context.registerReceiver (BroadcastReceiver receiver, IntentFilter filter) &mdash; Register a BroadcastReceiver to be run in the main activity thread. <br /><br />android.content.Context.checkCallingOrSelfPermission (String permission) &mdash; Determine whether the calling process of an IPC or you have been granted a particular permission. <br /><br />android.content.Context.enforceCallingPermission (String permission, String message) &mdash; If the calling process of an IPC you are handling has not been granted a particular permission, throw a SecurityException. <br /><br />android.content.Context.setTheme (int resid) &mdash; Set the base theme for this context. <br /><br />android.content.Context.getObbDirs ()   Returns absolute paths to application-specific directories on all external storage devices where the application's OBB files  (if there are any) &mdash; Returns absolute paths to application-specific directories on all external storage devices where the application's OBB files (if there are any) can be found. <br /><br />android.content.Context.openFileInput (String name) &mdash; Open a private file associated with this Context's application package for reading. <br /><br />android.content.Context.checkUriPermission (Uri uri, int pid, int uid, int modeFlags) &mdash; Determine whether a particular process and user ID has been granted permission to access a specific URI. <br /><br />android.content.Context.getPackageCodePath () &mdash; Return the full path to this context's primary Android package. <br /><br />android.content.Context.checkCallingOrSelfUriPermission (Uri uri, int modeFlags) &mdash; Determine whether the calling process of an IPC or you has been granted permission to access a specific URI. <br /><br />android.content.Context.unregisterReceiver (BroadcastReceiver receiver) &mdash; Unregister a previously registered BroadcastReceiver. <br /><br />android.content.Context.getApplicationContext () &mdash; Return the context of the single, global Application object of the current process. <br /><br />android.content.Context.getNoBackupFilesDir ()   Returns the absolute path to the directory on the filesystem similar to getFilesDir () &mdash; Returns the absolute path to the directory on the filesystem similar to getFilesDir(). <br /><br />android.content.Context.grantUriPermission (String toPackage, Uri uri, int modeFlags) &mdash; Grant permission to access a specific Uri to another package, regardless of whether that package has general permission to access the Uri's content provider. <br /><br />android.content.Context.getContentResolver () &mdash; Return a ContentResolver instance for your application's package. <br /><br />android.content.Context.deleteFile (String name) &mdash; Delete the given private file associated with this Context's application package. <br /><br />android.content.Context.registerReceiver (BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler) &mdash; Register to receive intent broadcasts, to run in the context of scheduler. <br /><br />android.content.Context.getObbDir ()   Return the primary external storage directory where this application's OBB files  (if there are any) &mdash; Return the primary external storage directory where this application's OBB files (if there are any) can be found. <br /><br />android.content.Context.startInstrumentation (ComponentName className, String profileFile, Bundle arguments) &mdash; Start executing an Instrumentation class. <br /><br />android.content.Context.getExternalCacheDir ()   Returns the absolute path to the directory on the primary external filesystem  (that is somewhere on Environment.getExternalStorageDirectory () &mdash; Returns the absolute path to the directory on the primary external filesystem (that is somewhere on Environment.getExternalStorageDirectory() where the application can place cache files it owns. <br /><br />"
"android.content.Context.getCacheDir () &mdash; Returns the absolute path to the application specific cache directory on the filesystem. <br /><br />android.content.Context.sendOrderedBroadcast (Intent intent, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)   Version of sendBroadcast (Intent) &mdash; Version of sendBroadcast(Intent) that allows you to receive data back from the broadcast. <br /><br />android.content.Context.getDir (String name, int mode) &mdash; Retrieve, creating if needed, a new directory in which the application can place its own custom data files. <br /><br />android.content.Context.startService (Intent service) &mdash; Request that a given application service be started. <br /><br />android.content.Context.deleteDatabase (String name) &mdash; Delete an existing private SQLiteDatabase associated with this Context's application package. <br /><br />android.content.Context.sendOrderedBroadcast (Intent intent, String receiverPermission) &mdash; Broadcast the given intent to all interested BroadcastReceivers, delivering them one at a time to allow more preferred receivers to consume the broadcast before it is delivered to less preferred receivers. <br /><br />android.content.CursorLoader.loadInBackground () &mdash; Called on a worker thread to perform the actual load and to return the result of the load operation. <br /><br />android.content.Intent.putExtra (String name, byte value) &mdash; Add extended data to the intent. <br /><br />android.content.Intent.setClassName (String packageName, String className)   Convenience for calling setComponent (ComponentName) &mdash; Convenience for calling setComponent(ComponentName) with an explicit application package name and class name. <br /><br />android.content.Intent.resolveType (ContentResolver resolver) &mdash; Return the MIME data type of this intent. <br /><br />android.content.Intent.getLongArrayExtra (String name) &mdash; Retrieve extended data from the intent. <br /><br />android.content.Intent.toURI ()    This method was deprecated in API level 4. Use toUri (int) &mdash; This method was deprecated in API level 4. Use toUri(int) instead. <br /><br />android.content.Intent.setClipData (ClipData clip) &mdash; Set a ClipData associated with this Intent. <br /><br />android.content.Intent.setDataAndType (Uri data, String type)    (Usually optional) &mdash; (Usually optional) Set the data for the intent along with an explicit MIME data type. <br /><br />android.content.Intent.addFlags (int flags)   Add additional flags to the intent  (or with existing flags value) &mdash; Add additional flags to the intent (or with existing flags value). <br /><br />android.content.Intent.putExtras (Intent src) &mdash; Copy all extras in 'src' in to this intent. <br /><br />android.content.Intent.getCategories () &mdash; Return the set of all categories in the intent. <br /><br />android.content.Intent.getExtras () &mdash; Retrieves a map of extended data from the intent. <br /><br />android.content.Intent.getAction () &mdash; Retrieve the general action to be performed, such as ACTION_VIEW. <br /><br />android.content.Intent.makeRestartActivityTask (ComponentName mainActivity) &mdash; Make an Intent that can be used to re-launch an application's task in its base state. <br /><br />"
"android.content.Intent.setSourceBounds (Rect r) &mdash; Set the bounds of the sender of this intent, in screen coordinates. <br /><br />android.content.Intent.setComponent (ComponentName component)    (Usually optional) &mdash; (Usually optional) Explicitly set the component to handle the intent. <br /><br />android.content.Intent.getPackage () &mdash; Retrieve the application package name this Intent is limited to. <br /><br />android.content.Intent.setAction (String action) &mdash; Set the general action to be performed. <br /><br />android.content.Intent.getDataString ()   The same as getData () &mdash; The same as getData(), but returns the URI as an encoded String. <br /><br />android.content.Intent.hasExtra (String name) &mdash; Returns true if an extra value is associated with the given name. <br /><br />android.content.Intent.setExtrasClassLoader (ClassLoader loader) &mdash; Sets the ClassLoader that will be used when unmarshalling any Parcelable values from the extras of this Intent. <br /><br />android.content.Intent.resolveTypeIfNeeded (ContentResolver resolver) &mdash; Return the MIME data type of this intent, only if it will be needed for intent resolution. <br /><br />android.content.Intent.createChooser (Intent target, CharSequence title, IntentSender sender) &mdash; Convenience function for creating a ACTION_CHOOSER Intent. <br /><br />android.content.Intent.hasCategory (String category) &mdash; Check if a category exists in the intent. <br /><br />android.content.Intent.putExtras (Bundle extras) &mdash; Add a set of extended data to the intent. <br /><br />android.content.Intent.getClipData () &mdash; Return the ClipData associated with this Intent. <br /><br />android.content.Intent.getType () &mdash; Retrieve any explicit MIME type included in the intent. <br /><br />android.content.Intent.setPackage (String packageName)    (Usually optional) &mdash; (Usually optional) Set an explicit application package name that limits the components this Intent will resolve to. <br /><br />android.content.Intent.getScheme () &mdash; Return the scheme portion of the intent's data. <br /><br />android.content.Intent.setSelector (Intent selector) &mdash; Set a selector for this Intent. <br /><br />android.content.Intent.getFlags () &mdash; Retrieve any special flags associated with this intent. <br /><br />android.content.Intent.resolveActivityInfo (PackageManager pm, int flags) &mdash; Resolve the Intent into an ActivityInfo describing the activity that should execute the intent. <br /><br />android.content.Intent.setClassName (Context packageContext, String className)   Convenience for calling setComponent (ComponentName) &mdash; Convenience for calling setComponent(ComponentName) with an explicit class name. <br /><br />android.content.Intent.getSourceBounds () &mdash; Get the bounds of the sender of this intent, in screen coordinates. <br /><br />"
"android.content.Intent.setClass (Context packageContext, Class<?> cls)   Convenience for calling setComponent (ComponentName) &mdash; Convenience for calling setComponent(ComponentName) with the name returned by a Class object. <br /><br />android.content.Intent.resolveActivity (PackageManager pm) &mdash; Return the Activity component that should be used to handle this intent. <br /><br />android.content.Intent.getComponent () &mdash; Retrieve the concrete component associated with the intent. <br /><br />android.content.Intent.removeExtra (String name) &mdash; Remove extended data from the intent. <br /><br />android.content.Intent.setData (Uri data) &mdash; Set the data this intent is operating on. <br /><br />android.content.Intent.setType (String type) &mdash; Set an explicit MIME data type. <br /><br />android.content.Intent.setFlags (int flags) &mdash; Set special flags controlling how this intent is handled. <br /><br />android.content.Intent.addCategory (String category) &mdash; Add a new category to the intent. <br /><br />android.content.Intent.makeMainSelectorActivity (String selectorAction, String selectorCategory) &mdash; Make an Intent for the main activity of an application, without specifying a specific activity to run but giving a selector to find the activity. <br /><br />android.content.Intent.parseUri (String uri, int flags) &mdash; Create an intent from a URI. <br /><br />android.content.Intent.makeMainActivity (ComponentName mainActivity)   Create an intent to launch the main  (root) &mdash; Create an intent to launch the main (root) activity of a task. <br /><br />android.content.Intent.toUri (int flags) &mdash; Convert this Intent into a String holding a URI representation of it. <br /><br />android.content.Intent.getData () &mdash; Retrieve data this intent is operating on. <br /><br />android.content.IntentFilter.actionsIterator () &mdash; Return an iterator over the filter's actions. <br /><br />android.content.IntentFilter.getAction (int index) &mdash; Return an action in the filter. <br /><br />android.content.IntentFilter.countDataAuthorities () &mdash; Return the number of data authorities in the filter. <br /><br />android.content.IntentFilter.hasAction (String action) &mdash; Is the given action included in the filter? Note that if the filter does not include any actions, false will always be returned. <br /><br />android.content.IntentFilter.setPriority (int priority) &mdash; Modify priority of this filter. <br /><br />android.content.IntentFilter.countActions () &mdash; Return the number of actions in the filter. <br /><br />android.content.IntentFilter.addCategory (String category) &mdash; Add a new Intent category to match against. <br /><br />"
"android.content.IntentFilter.addDataPath (String path, int type) &mdash; Add a new Intent data path to match against. <br /><br />android.content.IntentFilter.addDataType (String type) &mdash; Add a new Intent data type to match against. <br /><br />android.content.IntentFilter.addDataScheme (String scheme) &mdash; Add a new Intent data scheme to match against. <br /><br />android.content.IntentFilter.countDataPaths () &mdash; Return the number of data paths in the filter. <br /><br />android.content.IntentFilter.hasCategory (String category) &mdash; Is the given category included in the filter? <br /><br />android.content.IntentFilter.addDataAuthority (String host, String port) &mdash; Add a new Intent data authority to match against. <br /><br />android.content.IntentFilter.hasDataScheme (String scheme) &mdash; Is the given data scheme included in the filter? Note that if the filter does not include any scheme, false will always be returned. <br /><br />android.content.IntentFilter.match (String action, String type, String scheme, Uri data, Set< String> categories, String logTag) &mdash; Test whether this filter matches the given intent data. <br /><br />android.content.IntentFilter.match (ContentResolver resolver, Intent intent, boolean resolve, String logTag) &mdash; Test whether this filter matches the given intent. <br /><br />android.content.IntentFilter.addAction (String action) &mdash; Add a new Intent action to match against. <br /><br />android.content.MutableContextWrapper.setBaseContext (Context base) &mdash; Change the base context for this ContextWrapper. <br /><br />android.content.pm.ConfigurationInfo.getGlEsVersion () &mdash; This method extracts the major and minor version of reqGLEsVersion attribute and returns it as a string. <br /><br />android.content.pm.LabeledIntent.getIconResource () &mdash; Return any resource identifier that has been given for the label icon. <br /><br />android.content.pm.LabeledIntent.getLabelResource () &mdash; Return any resource identifier that has been given for the label text. <br /><br />android.content.pm.LabeledIntent.getSourcePackage () &mdash; Return the name of the package holding label and icon resources. <br /><br />android.content.pm.LabeledIntent.getNonLocalizedLabel () &mdash; Return any concrete text that has been given for the label text. <br /><br />android.content.pm.PackageItemInfo.loadLabel (PackageManager pm) &mdash; Retrieve the current textual label associated with this item. <br /><br />android.content.pm.PackageItemInfo.loadIcon (PackageManager pm) &mdash; Retrieve the current graphical icon associated with this item. <br /><br />android.content.pm.PackageManager.getInstrumentationInfo (ComponentName className, int flags) &mdash; Retrieve all of the information we know about a particular instrumentation class. <br /><br />android.content.pm.PackageManager.getPermissionInfo (String name, int flags) &mdash; Retrieve all of the information we know about a particular permission. <br /><br />"
"android.content.pm.PackageManager.getText (String packageName, int resid, ApplicationInfo appInfo) &mdash; Retrieve text from a package. <br /><br />android.content.pm.PackageManager.getProviderInfo (ComponentName component, int flags) &mdash; Retrieve all of the information we know about a particular content provider class. <br /><br />android.content.pm.PackageManager.getPackagesHoldingPermissions (String[] permissions, int flags) &mdash; Return a List of all installed packages that are currently holding any of the given permissions. <br /><br />android.content.pm.PackageManager.resolveActivity (Intent intent, int flags) &mdash; Determine the best action to perform for a given Intent. <br /><br />android.content.pm.PackageManager.getPackageInfo (String packageName, int flags) &mdash; Retrieve overall information about an application package that is installed on the system. <br /><br />android.content.pm.PackageManager.checkSignatures (int uid1, int uid2)   Like checkSignatures (String, String) &mdash; Like checkSignatures(String, String), but takes UIDs of the two packages to be checked. <br /><br />android.content.pm.PackageManager.removePackageFromPreferred (String packageName)    This method was deprecated in API level 7. This function no longer does anything; it was an old approach to managing preferred activities, which has been superseded by  (and conflicts with) &mdash; This method was deprecated in API level 7. This function no longer does anything; it was an old approach to managing preferred activities, which has been superseded by (and conflicts with) the modern activity-based preferences. <br /><br />android.content.pm.PackageManager.extendVerificationTimeout (int id, int verificationCodeAtTimeout, long millisecondsToDelay) &mdash; Allows a package listening to the package verification broadcast to extend the default timeout for a response and declare what action to perform after the timeout occurs. <br /><br />android.content.pm.PackageManager.getServiceInfo (ComponentName component, int flags) &mdash; Retrieve all of the information we know about a particular service class. <br /><br />android.content.pm.PackageManager.getApplicationIcon (ApplicationInfo info) &mdash; Retrieve the icon associated with an application. <br /><br />android.content.pm.PackageManager.removePermission (String name)   Removes a permission that was previously added with addPermission (PermissionInfo) &mdash; Removes a permission that was previously added with addPermission(PermissionInfo). <br /><br />android.content.pm.PackageManager.getActivityIcon (Intent intent) &mdash; Retrieve the icon associated with an Intent. <br /><br />android.content.pm.PackageManager.resolveContentProvider (String name, int flags) &mdash; Find a single content provider by its base path name. <br /><br />android.content.pm.PackageManager.getSystemAvailableFeatures () &mdash; Get a list of features that are available on the system. <br /><br />android.content.pm.PackageManager.queryBroadcastReceivers (Intent intent, int flags) &mdash; Retrieve all receivers that can handle a broadcast of the given intent. <br /><br />android.content.pm.PackageManager.getApplicationInfo (String packageName, int flags) &mdash; Retrieve all of the information we know about a particular package/application. <br /><br />android.content.pm.PackageManager.queryIntentServices (Intent intent, int flags) &mdash; Retrieve all services that can match the given intent. <br /><br />android.content.pm.PackageManager.addPreferredActivity (IntentFilter filter, int match, ComponentName[] set, ComponentName activity)    This method was deprecated in API level 8. This is a protected API that should not have been available to third party applications. It is the platform's responsibility for assigning preferred activities and this cannot be directly modified. Add a new preferred activity mapping to the system. This will be used to automatically select the given activity component when Context.startActivity () &mdash; This method was deprecated in API level 8. This is a protected API that should not have been available to third party applications. It is the platform's responsibility for assigning preferred activities and this cannot be directly modified. Add a new preferred activity mapping to the system. This will be used to automatically select the given activity component when Context.startActivity() finds multiple matching activities and also matches the given filter. <br /><br />android.content.pm.PackageManager.setApplicationEnabledSetting (String packageName, int newState, int flags) &mdash; Set the enabled setting for an application This setting will override any enabled state which may have been set by the application in its manifest. <br /><br />android.content.pm.PackageManager.queryPermissionsByGroup (String group, int flags) &mdash; Query for all of the permissions associated with a particular group. <br /><br />"
"android.content.pm.PackageManager.addPermission (PermissionInfo info) &mdash; Add a new dynamic permission to the system. <br /><br />android.content.pm.PackageManager.getInstalledApplications (int flags) &mdash; Return a List of all application packages that are installed on the device. <br /><br />android.content.pm.PackageManager.getActivityLogo (ComponentName activityName) &mdash; Retrieve the logo associated with an activity. <br /><br />android.content.pm.PackageManager.addPermissionAsync (PermissionInfo info)   Like addPermission (PermissionInfo) &mdash; Like addPermission(PermissionInfo) but asynchronously persists the package manager state after returning from the call, allowing it to return quicker and batch a series of adds at the expense of no guarantee the added permission will be retained if the device is rebooted before it is written. <br /><br />android.content.pm.PackageManager.getApplicationEnabledSetting (String packageName) &mdash; Return the enabled setting for an application. <br /><br />android.content.pm.PackageManager.resolveService (Intent intent, int flags) &mdash; Determine the best service to handle for a given Intent. <br /><br />android.content.pm.PackageManager.queryInstrumentation (String targetPackage, int flags) &mdash; Retrieve information about available instrumentation code. <br /><br />android.content.pm.PackageManager.getPreferredPackages (int flags) &mdash; Retrieve the list of all currently configured preferred packages. <br /><br />android.content.pm.PackageManager.getPackageGids (String packageName) &mdash; Return an array of all of the secondary group-ids that have been assigned to a package. <br /><br />android.content.pm.PackageManager.getPreferredActivities (List< IntentFilter> outFilters, List< ComponentName> outActivities, String packageName)   Retrieve all preferred activities, previously added with addPreferredActivity (IntentFilter, int, ComponentName[], ComponentName) &mdash; Retrieve all preferred activities, previously added with addPreferredActivity(IntentFilter, int, ComponentName[], ComponentName), that are currently registered with the system. <br /><br />android.content.pm.PackageManager.setInstallerPackageName (String targetPackage, String installerPackageName) &mdash; Change the installer associated with a given package. <br /><br />android.content.pm.PackageManager.getXml (String packageName, int resid, ApplicationInfo appInfo) &mdash; Retrieve an XML file from a package. <br /><br />android.content.pm.PackageManager.getInstalledPackages (int flags) &mdash; Return a List of all packages that are installed on the device. <br /><br />android.content.pm.PackageManager.queryIntentActivityOptions (ComponentName caller, Intent[] specifics, Intent intent, int flags) &mdash; Retrieve a set of activities that should be presented to the user as similar options. <br /><br />android.content.pm.PackageManager.getInstallerPackageName (String packageName) &mdash; Retrieve the package name of the application that installed a package. <br /><br />android.content.pm.PackageManager.setComponentEnabledSetting (ComponentName componentName, int newState, int flags)   Set the enabled setting for a package component  (activity, receiver, service, provider) &mdash; Set the enabled setting for a package component (activity, receiver, service, provider). <br /><br />android.content.pm.PackageManager.getActivityLogo (Intent intent) &mdash; Retrieve the logo associated with an Intent. <br /><br />android.content.pm.PackageManager.queryContentProviders (String processName, int uid, int flags) &mdash; Retrieve content provider information. <br /><br />android.content.pm.PackageManager.checkSignatures (String pkg1, String pkg2) &mdash; Compare the signatures of two packages to determine if the same signature appears in both of them. <br /><br />android.content.pm.PackageManager.getDefaultActivityIcon () &mdash; Return the generic icon for an activity that is used when no specific icon is defined. <br /><br />"
"android.content.pm.PackageManager.getPackageArchiveInfo (String archiveFilePath, int flags) &mdash; Retrieve overall information about an application package defined in a package archive file <br /><br />android.content.pm.PackageManager.getAllPermissionGroups (int flags) &mdash; Retrieve all of the known permission groups in the system. <br /><br />android.content.pm.PackageManager.getReceiverInfo (ComponentName component, int flags) &mdash; Retrieve all of the information we know about a particular receiver class. <br /><br />android.content.pm.PackageManager.getPermissionGroupInfo (String name, int flags) &mdash; Retrieve all of the information we know about a particular group of permissions. <br /><br />android.content.pm.PackageManager.getActivityIcon (ComponentName activityName) &mdash; Retrieve the icon associated with an activity. <br /><br />android.content.pm.PackageManager.clearPackagePreferredActivities (String packageName)   Remove all preferred activity mappings, previously added with addPreferredActivity (IntentFilter, int, ComponentName[], ComponentName) &mdash; Remove all preferred activity mappings, previously added with addPreferredActivity(IntentFilter, int, ComponentName[], ComponentName), from the system whose activities are implemented in the given package name. <br /><br />android.content.pm.PackageManager.getApplicationLogo (ApplicationInfo info) &mdash; Retrieve the logo associated with an application. <br /><br />android.content.pm.PackageManager.getLaunchIntentForPackage (String packageName) &mdash; Returns a 'good' intent to launch a front-door activity in a package. <br /><br />android.content.pm.PackageManager.queryIntentContentProviders (Intent intent, int flags) &mdash; Retrieve all providers that can match the given intent. <br /><br />android.content.pm.PackageManager.verifyPendingInstall (int id, int verificationCode) &mdash; Allows a package listening to the package verification broadcast to respond to the package manager. <br /><br />android.content.pm.PackageManager.getApplicationLabel (ApplicationInfo info) &mdash; Return the label to use for this application. <br /><br />android.content.pm.PackageManager.getNameForUid (int uid) &mdash; Retrieve the official name associated with a user id. <br /><br />android.content.pm.PackageManager.hasSystemFeature (String name)   Check whether the given feature name is one of the available features as returned by getSystemAvailableFeatures () &mdash; Check whether the given feature name is one of the available features as returned by getSystemAvailableFeatures(). <br /><br />android.content.pm.PackageManager.getPackagesForUid (int uid) &mdash; Retrieve the names of all packages that are associated with a particular user id. <br /><br />android.content.pm.PackageManager.checkPermission (String permName, String pkgName) &mdash; Check whether a particular package has been granted a particular permission. <br /><br />android.content.pm.PackageManager.getResourcesForApplication (ApplicationInfo app) &mdash; Retrieve the resources for an application. <br /><br />android.content.pm.PackageManager.getComponentEnabledSetting (ComponentName componentName)   Return the enabled setting for a package component  (activity, receiver, service, provider) &mdash; Return the enabled setting for a package component (activity, receiver, service, provider). <br /><br />android.content.pm.PackageManager.getSystemSharedLibraryNames () &mdash; Get a list of shared libraries that are available on the system. <br /><br />android.content.pm.PackageManager.currentToCanonicalPackageNames (String[] names) &mdash; Map from the current package names in use on the device to whatever the current canonical name of that package is. <br /><br />android.content.pm.PackageManager.getDrawable (String packageName, int resid, ApplicationInfo appInfo) &mdash; Retrieve an image from a package. <br /><br />"
"android.content.pm.PackageManager.getActivityInfo (ComponentName component, int flags) &mdash; Retrieve all of the information we know about a particular activity class. <br /><br />android.content.pm.PackageManager.getResourcesForApplication (String appPackageName) &mdash; Retrieve the resources associated with an application. <br /><br />android.content.pm.PackageManager.canonicalToCurrentPackageNames (String[] names) &mdash; Map from a packages canonical name to the current name in use on the device. <br /><br />android.content.pm.PackageManager.queryIntentActivities (Intent intent, int flags) &mdash; Retrieve all activities that can be performed for the given intent. <br /><br />android.content.pm.PackageManager.getResourcesForActivity (ComponentName activityName) &mdash; Retrieve the resources associated with an activity. <br /><br />android.content.pm.PackageManager.isSafeMode () &mdash; Return whether the device has been booted into safe mode. <br /><br />android.content.pm.ResolveInfo.loadLabel (PackageManager pm) &mdash; Retrieve the current textual label associated with this resolution. <br /><br />android.content.pm.ResolveInfo.getIconResource () &mdash; Return the icon resource identifier to use for this match. <br /><br />android.content.pm.ResolveInfo.loadIcon (PackageManager pm) &mdash; Retrieve the current graphical icon associated with this resolution. <br /><br />android.content.pm.Signature.toCharsString ()   Return the result of toChars () &mdash; Return the result of toChars() as a String. <br /><br />android.content.res.AssetFileDescriptor.close ()   Convenience for calling getParcelFileDescriptor ().close () &mdash; Convenience for calling getParcelFileDescriptor().close(). <br /><br />android.content.res.AssetFileDescriptor.createOutputStream () &mdash; Create and return a new auto-close output stream for this asset. <br /><br />android.content.res.AssetFileDescriptor.getStartOffset () &mdash; Returns the byte offset where this asset entry's data starts. <br /><br />android.content.res.AssetFileDescriptor.getLength () &mdash; Returns the total number of bytes of this asset entry's data. <br /><br />android.content.res.AssetFileDescriptor.createInputStream () &mdash; Create and return a new auto-close input stream for this asset. <br /><br />android.content.res.AssetFileDescriptor.getParcelFileDescriptor () &mdash; The AssetFileDescriptor contains its own ParcelFileDescriptor, which in addition to the normal FileDescriptor object also allows you to close the descriptor when you are done with it. <br /><br />android.content.res.AssetFileDescriptor.getFileDescriptor () &mdash; Returns the FileDescriptor that can be used to read the data in the file. <br /><br />android.content.res.AssetManager.openXmlResourceParser (int cookie, String fileName) &mdash; Retrieve a parser for a compiled XML file. <br /><br />android.content.res.AssetManager.open (String fileName) &mdash; Open an asset using ACCESS_STREAMING mode. <br /><br />android.content.res.AssetManager.list (String path) &mdash; Return a String array of all the assets at the given path. <br /><br />"
"android.content.res.AssetManager.close () &mdash; Close this asset manager. <br /><br />android.content.res.AssetManager.open (String fileName, int accessMode) &mdash; Open an asset using an explicit access mode, returning an InputStream to read its contents. <br /><br />android.content.res.ColorStateList.valueOf (int color) &mdash; Creates or retrieves a ColorStateList that always returns a single color. <br /><br />android.content.res.ColorStateList.getColorForState (int[] stateSet, int defaultColor) &mdash; Return the color associated with the given set of View states. <br /><br />android.content.res.ColorStateList.isStateful () &mdash; Indicates whether this color state list contains more than one state spec and will change color based on state. <br /><br />android.content.res.ColorStateList.getDefaultColor () &mdash; Return the default color in this ColorStateList. <br /><br />android.content.res.ColorStateList.withAlpha (int alpha)   Creates a new ColorStateList that has the same states and colors as this one but where each color has the specified alpha value  (0-255) &mdash; Creates a new ColorStateList that has the same states and colors as this one but where each color has the specified alpha value (0-255). <br /><br />android.content.res.Configuration.setToDefaults () &mdash; Set this object to the system defaults. <br /><br />android.content.res.Resources.getLayout (int id) &mdash; Return an XmlResourceParser through which you can read a view layout description for the given resource ID. <br /><br />android.content.res.Resources.getTextArray (int id) &mdash; Return the styled text array associated with a particular resource ID. <br /><br />android.content.res.Resources.getString (int id) &mdash; Return the string value associated with a particular resource ID. It will be stripped of any styled text information. <br /><br />android.content.res.Resources.getConfiguration () &mdash; Return the current configuration that is in effect for this resource object. <br /><br />android.content.res.Resources.getResourceTypeName (int resid) &mdash; Return the type name for a given resource identifier. <br /><br />android.content.res.Resources.openRawResourceFd (int id) &mdash; Open a file descriptor for reading a raw resource. <br /><br />android.content.res.Resources.getQuantityString (int id, int quantity, Object... formatArgs) &mdash; Formats the string necessary for grammatically correct pluralization of the given resource ID for the given quantity, using the given arguments. <br /><br />android.content.res.Resources.openRawResource (int id, TypedValue value) &mdash; Open a data stream for reading a raw resource. <br /><br />android.content.res.Resources.getIdentifier (String name, String defType, String defPackage) &mdash; Return a resource identifier for the given resource name. <br /><br />android.content.res.Resources.obtainTypedArray (int id) &mdash; Return an array of heterogeneous values. <br /><br />android.content.res.Resources.getDrawable (int id, Resources.Theme theme) &mdash; Return a drawable object associated with a particular resource ID and styled for the specified theme. <br /><br />android.content.res.Resources.getSystem ()   Return a global shared Resources object that provides access to only system resources  (no application resources), and is not configured for the current screen  (can not use dimension units, does not change based on orientation, etc) &mdash; Return a global shared Resources object that provides access to only system resources (no application resources), and is not configured for the current screen (can not use dimension units, does not change based on orientation, etc). <br /><br />"
"android.content.res.Resources.getResourcePackageName (int resid) &mdash; Return the package name for a given resource identifier. <br /><br />android.content.res.Resources.getInteger (int id) &mdash; Return an integer associated with a particular resource ID. <br /><br />android.content.res.Resources.getXml (int id) &mdash; Return an XmlResourceParser through which you can read a generic XML resource for the given resource ID. <br /><br />android.content.res.Resources.newTheme () &mdash; Generate a new Theme object for this set of Resources. <br /><br />android.content.res.Resources.getResourceName (int resid) &mdash; Return the full name for a given resource identifier. <br /><br />android.content.res.Resources.getDimension (int id) &mdash; Retrieve a dimensional for a particular resource ID. <br /><br />android.content.res.Resources.getDimensionPixelOffset (int id) &mdash; Retrieve a dimensional for a particular resource ID for use as an offset in raw pixels. <br /><br />android.content.res.Resources.getDisplayMetrics () &mdash; Return the current display metrics that are in effect for this resource object. <br /><br />android.content.res.Resources.getValue (String name, TypedValue outValue, boolean resolveRefs) &mdash; Return the raw data associated with a particular resource ID. <br /><br />android.content.res.Resources.getDimensionPixelSize (int id) &mdash; Retrieve a dimensional for a particular resource ID for use as a size in raw pixels. <br /><br />android.content.res.Resources.getResourceEntryName (int resid) &mdash; Return the entry name for a given resource identifier. <br /><br />android.content.res.Resources.getStringArray (int id) &mdash; Return the string array associated with a particular resource ID. <br /><br />android.content.res.Resources.getIntArray (int id) &mdash; Return the int array associated with a particular resource ID. <br /><br />android.content.res.Resources.getAssets () &mdash; Retrieve underlying AssetManager storage for these resources. <br /><br />android.content.res.Resources.getAnimation (int id) &mdash; Return an XmlResourceParser through which you can read an animation description for the given resource ID. <br /><br />android.content.res.Resources.getValueForDensity (int id, int density, TypedValue outValue, boolean resolveRefs) &mdash; Get the raw value associated with a resource with associated density. <br /><br />android.content.res.Resources.getDrawableForDensity (int id, int density)    This method is deprecated. Use getDrawableForDensity (int, int, Theme) &mdash; This method is deprecated. Use getDrawableForDensity(int, int, Theme) instead. <br /><br />android.content.res.Resources.getDrawableForDensity (int id, int density, Resources.Theme theme) &mdash; Return a drawable object associated with a particular resource ID for the given screen density in DPI and styled for the specified theme. <br /><br />android.content.res.Resources.getColor (int id) &mdash; Return a color integer associated with a particular resource ID. <br /><br />android.content.res.Resources.getText (int id, CharSequence def) &mdash; Return the string value associated with a particular resource ID. <br /><br />"
"android.content.res.Resources.getText (int id) &mdash; Return the string value associated with a particular resource ID. The returned object will be a String if this is a plain string; it will be some other type of CharSequence if it is styled. <br /><br />android.content.res.Resources.getDrawable (int id)    This method is deprecated. Use getDrawable (int, Theme) &mdash; This method is deprecated. Use getDrawable(int, Theme) instead. <br /><br />android.content.res.Resources.getColorStateList (int id) &mdash; Return a color state list associated with a particular resource ID. <br /><br />android.content.res.Resources.getString (int id, Object... formatArgs)   Return the string value associated with a particular resource ID, substituting the format arguments as defined in Formatter and format (String, Object...) &mdash; Return the string value associated with a particular resource ID, substituting the format arguments as defined in Formatter and format(String, Object...). It will be stripped of any styled text information. <br /><br />android.content.res.Resources.obtainAttributes (AttributeSet set, int[] attrs) &mdash; Retrieve a set of basic attribute values from an AttributeSet, not performing styling of them using a theme and/or style resources. <br /><br />android.content.res.Resources.getQuantityString (int id, int quantity) &mdash; Returns the string necessary for grammatically correct pluralization of the given resource ID for the given quantity. <br /><br />android.content.res.Resources.updateConfiguration (Configuration config, DisplayMetrics metrics) &mdash; Store the newly updated configuration. <br /><br />android.content.res.Resources.getBoolean (int id) &mdash; Return a boolean associated with a particular resource ID. <br /><br />android.content.res.TypedArray.length () &mdash; Return the number of values in this array. <br /><br />android.content.res.TypedArray.getNonResourceString (int index) &mdash; Retrieve the string value for the attribute at index, but only if that string comes from an immediate value in an XML file. <br /><br />android.content.res.TypedArray.getDimensionPixelOffset (int index, int defValue) &mdash; Retrieve a dimensional unit attribute at index for use as an offset in raw pixels. <br /><br />android.content.res.TypedArray.getResourceId (int index, int defValue) &mdash; Retrieve the resource identifier for the attribute at index. <br /><br />android.content.res.TypedArray.peekValue (int index) &mdash; Retrieve the raw TypedValue for the attribute at index and return a temporary object holding its data. <br /><br />android.content.res.TypedArray.getFloat (int index, float defValue) &mdash; Retrieve the float value for the attribute at index. <br /><br />android.content.res.TypedArray.getBoolean (int index, boolean defValue) &mdash; Retrieve the boolean value for the attribute at index. <br /><br />android.content.res.TypedArray.getInt (int index, int defValue) &mdash; Retrieve the integer value for the attribute at index. <br /><br />android.content.res.TypedArray.hasValue (int index) &mdash; Determines whether there is an attribute at index. <br /><br />android.content.res.TypedArray.getDrawable (int index) &mdash; Retrieve the Drawable for the attribute at index. <br /><br />android.content.res.TypedArray.getLayoutDimension (int index, String name)   Special version of getDimensionPixelSize (int, int) &mdash; Special version of getDimensionPixelSize(int, int) for retrieving ViewGroup's layout_width and layout_height attributes. <br /><br />android.content.res.TypedArray.getIndex (int at) &mdash; Return an index in the array that has data. <br /><br />"
"android.content.res.TypedArray.getIndexCount () &mdash; Return the number of indices in the array that actually have data. <br /><br />android.content.res.TypedArray.getDimension (int index, float defValue) &mdash; Retrieve a dimensional unit attribute at index. <br /><br />android.content.res.TypedArray.getColor (int index, int defValue) &mdash; Retrieve the color value for the attribute at index. <br /><br />android.content.res.TypedArray.getText (int index) &mdash; Retrieve the styled string value for the attribute at index. <br /><br />android.content.res.TypedArray.getString (int index) &mdash; Retrieve the string value for the attribute at index. <br /><br />android.content.res.TypedArray.getDimensionPixelSize (int index, int defValue) &mdash; Retrieve a dimensional unit attribute at index for use as a size in raw pixels. <br /><br />android.content.res.TypedArray.getColorStateList (int index) &mdash; Retrieve the ColorStateList for the attribute at index. <br /><br />android.content.res.TypedArray.recycle () &mdash; Recycle the TypedArray, to be re-used by a later caller. <br /><br />android.content.res.TypedArray.getValue (int index, TypedValue outValue) &mdash; Retrieve the raw TypedValue for the attribute at index. <br /><br />android.content.res.XmlResourceParser.close () &mdash; Close this interface to the resource. <br /><br />android.content.RestrictionEntry.setChoiceValues (Context context, int stringArrayResId)   Sets a list of string values that can be selected by the user, similar to setChoiceValues (String[]) &mdash; Sets a list of string values that can be selected by the user, similar to setChoiceValues(String[]). <br /><br />android.content.RestrictionEntry.setDescription (String description) &mdash; Sets the user-visible description of the entry, as a possible sub-text for the title. <br /><br />android.content.RestrictionEntry.setTitle (String title) &mdash; Sets the user-visible title for the entry. <br /><br />android.content.RestrictionEntry.setChoiceEntries (String[] choiceEntries) &mdash; Sets a list of strings that will be presented as choices to the user. <br /><br />android.content.RestrictionEntry.setChoiceValues (String[] choiceValues) &mdash; Sets a list of string values that can be selected by the user. <br /><br />android.content.ServiceConnection.onServiceConnected (ComponentName name, IBinder service) &mdash; Called when a connection to the Service has been established, with the IBinder of the communication channel to the Service. <br /><br />android.content.ServiceConnection.onServiceDisconnected (ComponentName name) &mdash; Called when a connection to the Service has been lost. <br /><br />android.content.UriMatcher.addURI (String authority, String path, int code) &mdash; Add a URI to match, and the code to return when this URI is matched. <br /><br />android.content.UriMatcher.match (Uri uri) &mdash; Try to match against the path in a url. <br /><br />android.database.AbstractCursor.close () &mdash; Closes the Cursor, releasing all of its resources and making it completely invalid. <br /><br />"
"android.database.AbstractWindowedCursor.setWindow (CursorWindow window) &mdash; Sets a new cursor window for the cursor to use. <br /><br />android.database.AbstractWindowedCursor.getWindow () &mdash; If the cursor is backed by a CursorWindow, returns a pre-filled window with the contents of the cursor, otherwise null. <br /><br />android.database.ContentObservable.registerObserver (ContentObserver observer) &mdash; Adds an observer to the list. <br /><br />android.database.ContentObservable.dispatchChange (boolean selfChange)    This method was deprecated in API level 16. Use dispatchChange (boolean, Uri) &mdash; This method was deprecated in API level 16. Use dispatchChange(boolean, Uri) instead. <br /><br />android.database.ContentObservable.dispatchChange (boolean selfChange, Uri uri)   Invokes dispatchChange (boolean, Uri) &mdash; Invokes dispatchChange(boolean, Uri) on each observer. <br /><br />android.database.ContentObserver.dispatchChange (boolean selfChange, Uri uri) &mdash; Dispatches a change notification to the observer. <br /><br />android.database.ContentObserver.onChange (boolean selfChange, Uri uri) &mdash; This method is called when a content change occurs. <br /><br />android.database.ContentObserver.deliverSelfNotifications () &mdash; Returns true if this observer is interested receiving self-change notifications. <br /><br />android.database.CrossProcessCursor.getWindow () &mdash; Returns a pre-filled window that contains the data within this cursor. <br /><br />android.database.Cursor.getDouble (int columnIndex) &mdash; Returns the value of the requested column as a double. <br /><br />android.database.Cursor.getColumnName (int columnIndex) &mdash; Returns the column name at the given zero-based column index. <br /><br />android.database.Cursor.getInt (int columnIndex) &mdash; Returns the value of the requested column as an int. <br /><br />android.database.Cursor.requery () &mdash; This method was deprecated in API level 11. Don't use this. Just request a new cursor, so you can do this asynchronously and update your list view once the new cursor comes back. <br /><br />android.database.Cursor.getWantsAllOnMoveCalls ()   onMove () &mdash; onMove() will only be called across processes if this method returns true. <br /><br />android.database.Cursor.getCount () &mdash; Returns the numbers of rows in the cursor. <br /><br />android.database.Cursor.registerContentObserver (ContentObserver observer) &mdash; Register an observer that is called when changes happen to the content backing this cursor. <br /><br />android.database.Cursor.isNull (int columnIndex) &mdash; Returns true if the value in the indicated column is null. <br /><br />android.database.Cursor.deactivate ()    This method was deprecated in API level 16. Since requery () &mdash; This method was deprecated in API level 16. Since requery() is deprecated, so too is this. <br /><br />android.database.Cursor.isBeforeFirst () &mdash; Returns whether the cursor is pointing to the position before the first row. <br /><br />android.database.Cursor.registerDataSetObserver (DataSetObserver observer)   Register an observer that is called when changes happen to the contents of the this cursors data set, for example, when the data set is changed via requery (), deactivate (), or close () &mdash; Register an observer that is called when changes happen to the contents of the this cursors data set, for example, when the data set is changed via requery(), deactivate(), or close(). <br /><br />"
"android.database.Cursor.moveToPosition (int position) &mdash; Move the cursor to an absolute position. <br /><br />android.database.Cursor.isClosed () &mdash; return true if the cursor is closed <br /><br />android.database.Cursor.getPosition () &mdash; Returns the current position of the cursor in the row set. <br /><br />android.database.Cursor.setNotificationUri (ContentResolver cr, Uri uri) &mdash; Register to watch a content URI for changes. <br /><br />android.database.Cursor.getShort (int columnIndex) &mdash; Returns the value of the requested column as a short. <br /><br />android.database.Cursor.moveToNext () &mdash; Move the cursor to the next row. <br /><br />android.database.Cursor.getColumnIndex (String columnName) &mdash; Returns the zero-based index for the given column name, or -1 if the column doesn't exist. <br /><br />android.database.Cursor.moveToLast () &mdash; Move the cursor to the last row. <br /><br />android.database.Cursor.getColumnNames () &mdash; Returns a string array holding the names of all of the columns in the result set in the order in which they were listed in the result. <br /><br />android.database.Cursor.isLast () &mdash; Returns whether the cursor is pointing to the last row. <br /><br />android.database.Cursor.moveToFirst () &mdash; Move the cursor to the first row. <br /><br />android.database.Cursor.moveToPrevious () &mdash; Move the cursor to the previous row. <br /><br />android.database.Cursor.getLong (int columnIndex) &mdash; Returns the value of the requested column as a long. <br /><br />android.database.Cursor.getType (int columnIndex) &mdash; Returns data type of the given column's value. <br /><br />android.database.Cursor.unregisterContentObserver (ContentObserver observer)   Unregister an observer that has previously been registered with this cursor via registerContentObserver (ContentObserver) &mdash; Unregister an observer that has previously been registered with this cursor via registerContentObserver(ContentObserver). <br /><br />android.database.Cursor.getBlob (int columnIndex) &mdash; Returns the value of the requested column as a byte array. <br /><br />android.database.Cursor.getExtras () &mdash; Returns a bundle of extra values. <br /><br />android.database.Cursor.move (int offset) &mdash; Move the cursor by a relative amount, forward or backward, from the current position. <br /><br />android.database.Cursor.getColumnCount () &mdash; Return total number of columns <br /><br />android.database.Cursor.copyStringToBuffer (int columnIndex, CharArrayBuffer buffer) &mdash; Retrieves the requested column text and stores it in the buffer provided. <br /><br />"
"android.database.Cursor.getFloat (int columnIndex) &mdash; Returns the value of the requested column as a float. <br /><br />android.database.Cursor.getString (int columnIndex) &mdash; Returns the value of the requested column as a String. <br /><br />android.database.Cursor.isAfterLast () &mdash; Returns whether the cursor is pointing to the position after the last row. <br /><br />android.database.Cursor.getColumnIndexOrThrow (String columnName) &mdash; Returns the zero-based index for the given column name, or throws IllegalArgumentException if the column doesn't exist. <br /><br />android.database.CursorWindow.getInt (int row, int column) &mdash; Gets the value of the field at the specified row and column index as an int. <br /><br />android.database.CursorWindow.getShort (int row, int column) &mdash; Gets the value of the field at the specified row and column index as a short. <br /><br />android.database.CursorWindow.putBlob (byte[] value, int row, int column) &mdash; Copies a byte array into the field at the specified row and column index. <br /><br />android.database.CursorWindow.putLong (long value, int row, int column) &mdash; Puts a long integer into the field at the specified row and column index. <br /><br />android.database.CursorWindow.setStartPosition (int pos) &mdash; Sets the start position of this cursor window. <br /><br />android.database.CursorWindow.setNumColumns (int columnNum) &mdash; Sets the number of columns in this window. <br /><br />android.database.CursorWindow.getStartPosition () &mdash; Gets the start position of this cursor window. <br /><br />android.database.CursorWindow.copyStringToBuffer (int row, int column, CharArrayBuffer buffer) &mdash; Copies the text of the field at the specified row and column index into a CharArrayBuffer. <br /><br />android.database.CursorWindow.getBlob (int row, int column) &mdash; Gets the value of the field at the specified row and column index as a byte array. <br /><br />android.database.CursorWindow.isNull (int row, int column)    This method was deprecated in API level 11. Use getType (int, int) &mdash; This method was deprecated in API level 11. Use getType(int, int) instead. <br /><br />android.database.CursorWindow.putDouble (double value, int row, int column) &mdash; Puts a double-precision floating point value into the field at the specified row and column index. <br /><br />android.database.CursorWindow.getDouble (int row, int column) &mdash; Gets the value of the field at the specified row and column index as a double. <br /><br />android.database.CursorWindow.getFloat (int row, int column) &mdash; Gets the value of the field at the specified row and column index as a float. <br /><br />android.database.CursorWindow.allocRow () &mdash; Allocates a new row at the end of this cursor window. <br /><br />android.database.CursorWindow.freeLastRow () &mdash; Frees the last row in this cursor window. <br /><br />android.database.CursorWindow.putString (String value, int row, int column) &mdash; Copies a string into the field at the specified row and column index. <br /><br />"
"android.database.CursorWindow.getLong (int row, int column) &mdash; Gets the value of the field at the specified row and column index as a long. <br /><br />android.database.CursorWindow.getNumRows () &mdash; Gets the number of rows in this window. <br /><br />android.database.CursorWindow.getString (int row, int column) &mdash; Gets the value of the field at the specified row and column index as a string. <br /><br />android.database.CursorWindow.putNull (int row, int column) &mdash; Puts a null value into the field at the specified row and column index. <br /><br />android.database.DatabaseUtils.queryNumEntries (SQLiteDatabase db, String table, String selection, String[] selectionArgs) &mdash; Query the table for the number of rows in the table. <br /><br />android.database.DatabaseUtils.bindObjectToProgram (SQLiteProgram prog, int index, Object value) &mdash; Binds the given Object to the given SQLiteProgram using the proper typing. <br /><br />android.database.DatabaseUtils.cursorRowToContentValues (Cursor cursor, ContentValues values) &mdash; Read the entire contents of a cursor row and store them in a ContentValues. <br /><br />android.database.DatabaseUtils.dumpCursor (Cursor cursor) &mdash; Prints the contents of a Cursor to System.out. <br /><br />android.database.DatabaseUtils.dumpCursorToString (Cursor cursor) &mdash; Prints the contents of a Cursor to a String. <br /><br />android.database.DatabaseUtils.dumpCursor (Cursor cursor, StringBuilder sb) &mdash; Prints the contents of a Cursor to a StringBuilder. <br /><br />android.database.DatabaseUtils.sqlEscapeString (String value) &mdash; SQL-escape a string. <br /><br />android.database.DatabaseUtils.appendValueToSql (StringBuilder sql, Object value) &mdash; Appends an Object to an SQL string with the proper escaping, etc. <br /><br />android.database.DatabaseUtils.longForQuery (SQLiteDatabase db, String query, String[] selectionArgs) &mdash; Utility method to run the query on the db and return the value in the first column of the first row. <br /><br />android.database.DatabaseUtils.dumpCursor (Cursor cursor, PrintStream stream) &mdash; Prints the contents of a Cursor to a PrintSteam. <br /><br />android.database.DatabaseUtils.longForQuery (SQLiteStatement prog, String[] selectionArgs) &mdash; Utility method to run the pre-compiled query and return the value in the first column of the first row. <br /><br />android.database.DataSetObservable.notifyInvalidated ()   Invokes onInvalidated () &mdash; Invokes onInvalidated() on each observer. <br /><br />android.database.DataSetObservable.notifyChanged ()   Invokes onChanged () &mdash; Invokes onChanged() on each observer. <br /><br />android.database.DataSetObserver.onInvalidated ()   This method is called when the entire data becomes invalid, most likely through a call to deactivate () or close () &mdash; This method is called when the entire data becomes invalid, most likely through a call to deactivate() or close() on a Cursor. <br /><br />android.database.DataSetObserver.onChanged ()   This method is called when the entire data set has changed, most likely through a call to requery () &mdash; This method is called when the entire data set has changed, most likely through a call to requery() on a Cursor. <br /><br />android.database.MatrixCursor.addRow (Iterable<?> columnValues) &mdash; Adds a new row to the end with the given column values. <br /><br />"
"android.database.MatrixCursor.newRow () &mdash; Adds a new row to the end and returns a builder for that row. <br /><br />android.database.sqlite.SQLiteDatabase.beginTransaction () &mdash; Begins a transaction in EXCLUSIVE mode. <br /><br />android.database.sqlite.SQLiteDatabase.endTransaction () &mdash; End a transaction. <br /><br />android.database.sqlite.SQLiteDatabase.compileStatement (String sql) &mdash; Compiles an SQL statement into a reusable pre-compiled statement object. <br /><br />android.database.sqlite.SQLiteDatabase.delete (String table, String whereClause, String[] whereArgs) &mdash; Convenience method for deleting rows in the database. <br /><br />android.database.sqlite.SQLiteDatabase.rawQuery (String sql, String[] selectionArgs, CancellationSignal cancellationSignal) &mdash; Runs the provided SQL and returns a Cursor over the result set. <br /><br />android.database.sqlite.SQLiteDatabase.execSQL (String sql) &mdash; Execute a single SQL statement that is NOT a SELECT or any other SQL statement that returns data. <br /><br />android.database.sqlite.SQLiteDatabase.isOpen () &mdash; Returns true if the database is currently open. <br /><br />android.database.sqlite.SQLiteDatabase.getVersion () &mdash; Gets the database version. <br /><br />android.database.sqlite.SQLiteDatabase.insertOrThrow (String table, String nullColumnHack, ContentValues values) &mdash; Convenience method for inserting a row into the database. <br /><br />android.database.sqlite.SQLiteDatabase.query (String table, String[] columns, String selection, String[] selectionArgs, String groupBy, String having, String orderBy) &mdash; Query the given table, returning a Cursor over the result set. <br /><br />android.database.sqlite.SQLiteDatabase.query (boolean distinct, String table, String[] columns, String selection, String[] selectionArgs, String groupBy, String having, String orderBy, String limit) &mdash; Query the given URL, returning a Cursor over the result set. <br /><br />android.database.sqlite.SQLiteDatabase.isReadOnly () &mdash; Returns true if the database is opened as read only. <br /><br />android.database.sqlite.SQLiteDatabase.replace (String table, String nullColumnHack, ContentValues initialValues) &mdash; Convenience method for replacing a row in the database. <br /><br />android.database.sqlite.SQLiteDatabase.inTransaction () &mdash; Returns true if the current thread has a transaction pending. <br /><br />android.database.sqlite.SQLiteDatabase.updateWithOnConflict (String table, ContentValues values, String whereClause, String[] whereArgs, int conflictAlgorithm) &mdash; Convenience method for updating rows in the database. <br /><br />android.database.sqlite.SQLiteDatabase.yieldIfContendedSafely () &mdash; Temporarily end the transaction to let other threads run. <br /><br />android.database.sqlite.SQLiteDatabase.execSQL (String sql, Object[] bindArgs) &mdash; Execute a single SQL statement that is NOT a SELECT/INSERT/UPDATE/DELETE. <br /><br />android.database.sqlite.SQLiteDatabase.insertWithOnConflict (String table, String nullColumnHack, ContentValues initialValues, int conflictAlgorithm) &mdash; General method for inserting a row into the database. <br /><br />android.database.sqlite.SQLiteDatabase.getPath () &mdash; Gets the path to the database file. <br /><br />"
"android.database.sqlite.SQLiteDatabase.isDbLockedByCurrentThread () &mdash; Returns true if the current thread is holding an active connection to the database. <br /><br />android.database.sqlite.SQLiteDatabase.beginTransactionNonExclusive () &mdash; Begins a transaction in IMMEDIATE mode. <br /><br />android.database.sqlite.SQLiteDatabase.setTransactionSuccessful () &mdash; Marks the current transaction as successful. <br /><br />android.database.sqlite.SQLiteDatabase.setMaximumSize (long numBytes) &mdash; Sets the maximum size the database will grow to. <br /><br />android.database.sqlite.SQLiteDatabase.releaseMemory () &mdash; Attempts to release memory that SQLite holds but does not require to operate properly. <br /><br />android.database.sqlite.SQLiteOpenHelper.getReadableDatabase () &mdash; Create and/or open a database. <br /><br />android.database.sqlite.SQLiteOpenHelper.onDowngrade (SQLiteDatabase db, int oldVersion, int newVersion) &mdash; Called when the database needs to be downgraded. <br /><br />android.database.sqlite.SQLiteOpenHelper.close () &mdash; Close any open database object. <br /><br />android.database.sqlite.SQLiteOpenHelper.onOpen (SQLiteDatabase db) &mdash; Called when the database has been opened. <br /><br />android.database.sqlite.SQLiteOpenHelper.onConfigure (SQLiteDatabase db) &mdash; Called when the database connection is being configured, to enable features such as write-ahead logging or foreign key support. <br /><br />android.database.sqlite.SQLiteOpenHelper.getWritableDatabase () &mdash; Create and/or open a database that will be used for reading and writing. <br /><br />android.database.sqlite.SQLiteOpenHelper.getDatabaseName () &mdash; Return the name of the SQLite database being opened, as given to the constructor. <br /><br />android.database.sqlite.SQLiteQueryBuilder.query (SQLiteDatabase db, String[] projectionIn, String selection, String[] selectionArgs, String groupBy, String having, String sortOrder, String limit, CancellationSignal cancellationSignal) &mdash; Perform a query by combining all current settings and the information passed into this method. <br /><br />android.database.sqlite.SQLiteQueryBuilder.appendWhere (CharSequence inWhere) &mdash; Append a chunk to the WHERE clause of the query. <br /><br />android.database.sqlite.SQLiteQueryBuilder.setProjectionMap (Map< String,  String> columnMap) &mdash; Sets the projection map for the query. <br /><br />android.database.sqlite.SQLiteQueryBuilder.setTables (String inTables) &mdash; Sets the list of tables to query. <br /><br />android.database.sqlite.SQLiteStatement.executeInsert () &mdash; Execute this SQL statement and return the ID of the row inserted due to this call. <br /><br />android.database.sqlite.SQLiteStatement.execute () &mdash; Execute this SQL statement, if it is not a SELECT / INSERT / DELETE / UPDATE, for example CREATE / DROP table, view, trigger, index etc. <br /><br />android.database.sqlite.SQLiteStatement.simpleQueryForLong () &mdash; Execute a statement that returns a 1 by 1 table with a numeric value. <br /><br />android.gesture.GestureStore.load (InputStream stream) &mdash; Load the gesture library <br /><br />"
"android.gesture.GestureStore.recognize (Gesture gesture) &mdash; Recognize a gesture <br /><br />android.graphics.Bitmap.getScaledWidth (Canvas canvas)   Convenience for calling getScaledWidth (int) &mdash; Convenience for calling getScaledWidth(int) with the target density of the given Canvas. <br /><br />android.graphics.Bitmap.setPixel (int x, int y, int color)   Write the specified Color into the bitmap  (assuming it is mutable) &mdash; Write the specified Color into the bitmap (assuming it is mutable) at the x,y coordinate. <br /><br />android.graphics.Bitmap.createBitmap (DisplayMetrics display, int[] colors, int width, int height, Bitmap.Config config) &mdash; Returns a immutable bitmap with the specified width and height, with each pixel value set to the corresponding value in the colors array. <br /><br />android.graphics.Bitmap.isMutable ()   Returns true if the bitmap is marked as mutable  (i.e. can be drawn into) &mdash; Returns true if the bitmap is marked as mutable (i.e. can be drawn into) <br /><br />android.graphics.Bitmap.createBitmap (Bitmap source, int x, int y, int width, int height, Matrix m, boolean filter) &mdash; Returns an immutable bitmap from subset of the source bitmap, transformed by the optional matrix. <br /><br />android.graphics.Bitmap.hasAlpha () &mdash; Returns true if the bitmap's config supports per-pixel alpha, and if the pixels may contain non-opaque alpha values. <br /><br />android.graphics.Bitmap.copyPixelsFromBuffer (Buffer src) &mdash; Copy the pixels from the buffer, beginning at the current position, overwriting the bitmap's pixels. <br /><br />android.graphics.Bitmap.sameAs (Bitmap other) &mdash; Given another bitmap, return true if it has the same dimensions, config, and pixel data as this bitmap. <br /><br />android.graphics.Bitmap.getByteCount () &mdash; Returns the minimum number of bytes that can be used to store this bitmap's pixels. <br /><br />android.graphics.Bitmap.getHeight () &mdash; Returns the bitmap's height <br /><br />android.graphics.Bitmap.createBitmap (Bitmap src) &mdash; Returns an immutable bitmap from the source bitmap. <br /><br />android.graphics.Bitmap.getNinePatchChunk () &mdash; Returns an optional array of private data, used by the UI system for some bitmaps. <br /><br />android.graphics.Bitmap.getRowBytes () &mdash; Return the number of bytes between rows in the bitmap's pixels. <br /><br />android.graphics.Bitmap.getScaledHeight (Canvas canvas)   Convenience for calling getScaledHeight (int) &mdash; Convenience for calling getScaledHeight(int) with the target density of the given Canvas. <br /><br />android.graphics.Bitmap.createBitmap (DisplayMetrics display, int width, int height, Bitmap.Config config) &mdash; Returns a mutable bitmap with the specified width and height. <br /><br />android.graphics.Bitmap.isRecycled () &mdash; Returns true if this bitmap has been recycled. <br /><br />android.graphics.Bitmap.createBitmap (Bitmap source, int x, int y, int width, int height) &mdash; Returns an immutable bitmap from the specified subset of the source bitmap. <br /><br />android.graphics.Bitmap.eraseColor (int c) &mdash; Fills the bitmap's pixels with the specified Color. <br /><br />android.graphics.Bitmap.getPixels (int[] pixels, int offset, int stride, int x, int y, int width, int height) &mdash; Returns in pixels[] a copy of the data in the bitmap. <br /><br />"
"android.graphics.Bitmap.setDensity (int density) &mdash; Specifies the density for this bitmap. <br /><br />android.graphics.Bitmap.getScaledWidth (DisplayMetrics metrics)   Convenience for calling getScaledWidth (int) &mdash; Convenience for calling getScaledWidth(int) with the target density of the given DisplayMetrics. <br /><br />android.graphics.Bitmap.getPixel (int x, int y) &mdash; Returns the Color at the specified location. <br /><br />android.graphics.Bitmap.hasMipMap () &mdash; Indicates whether the renderer responsible for drawing this bitmap should attempt to use mipmaps when this bitmap is drawn scaled down. <br /><br />android.graphics.Bitmap.getAllocationByteCount () &mdash; Returns the size of the allocated memory used to store this bitmap's pixels. <br /><br />android.graphics.Bitmap.setPixels (int[] pixels, int offset, int stride, int x, int y, int width, int height) &mdash; Replace pixels in the bitmap with the colors in the array. <br /><br />android.graphics.Bitmap.getScaledWidth (int targetDensity) &mdash; Convenience method that returns the width of this bitmap divided by the density scale factor. <br /><br />android.graphics.Bitmap.copyPixelsToBuffer (Buffer dst)   Copy the bitmap's pixels into the specified buffer  (allocated by the caller) &mdash; Copy the bitmap's pixels into the specified buffer (allocated by the caller). <br /><br />android.graphics.Bitmap.getScaledHeight (int targetDensity) &mdash; Convenience method that returns the height of this bitmap divided by the density scale factor. <br /><br />android.graphics.Bitmap.getDensity () &mdash; Returns the density for this bitmap. <br /><br />android.graphics.Bitmap.getWidth () &mdash; Returns the bitmap's width <br /><br />android.graphics.Bitmap.writeToParcel (Parcel p, int flags) &mdash; Write the bitmap and its pixels to the parcel. <br /><br />android.graphics.Bitmap.createScaledBitmap (Bitmap src, int dstWidth, int dstHeight, boolean filter) &mdash; Creates a new bitmap, scaled from an existing bitmap, when possible. <br /><br />android.graphics.Bitmap.getConfig () &mdash; If the bitmap's internal config is in one of the public formats, return that config, otherwise return null. <br /><br />android.graphics.Bitmap.extractAlpha () &mdash; Returns a new bitmap that captures the alpha values of the original. <br /><br />android.graphics.Bitmap.recycle () &mdash; Free the native object associated with this bitmap, and clear the reference to the pixel data. <br /><br />android.graphics.Bitmap.setHasMipMap (boolean hasMipMap) &mdash; Set a hint for the renderer responsible for drawing this bitmap indicating that it should attempt to use mipmaps when this bitmap is drawn scaled down. <br /><br />android.graphics.Bitmap.getScaledHeight (DisplayMetrics metrics)   Convenience for calling getScaledHeight (int) &mdash; Convenience for calling getScaledHeight(int) with the target density of the given DisplayMetrics. <br /><br />android.graphics.BitmapFactory.decodeFileDescriptor (FileDescriptor fd, Rect outPadding, BitmapFactory.Options opts) &mdash; Decode a bitmap from the file descriptor. <br /><br />android.graphics.BitmapFactory.decodeByteArray (byte[] data, int offset, int length) &mdash; Decode an immutable bitmap from the specified byte array. <br /><br />"
"android.graphics.BitmapFactory.decodeFile (String pathName, BitmapFactory.Options opts) &mdash; Decode a file path into a bitmap. <br /><br />android.graphics.BitmapFactory.decodeResource (Resources res, int id, BitmapFactory.Options opts)   Synonym for opening the given resource and calling decodeResourceStream (Resources, TypedValue, InputStream, Rect, BitmapFactory.Options) &mdash; Synonym for opening the given resource and calling decodeResourceStream(Resources, TypedValue, InputStream, Rect, BitmapFactory.Options). <br /><br />android.graphics.BitmapFactory.decodeStream (InputStream is) &mdash; Decode an input stream into a bitmap. <br /><br />android.graphics.BitmapFactory.decodeResource (Resources res, int id)   Synonym for decodeResource (Resources, int, android.graphics.BitmapFactory.Options) &mdash; Synonym for decodeResource(Resources, int, android.graphics.BitmapFactory.Options) with null Options. <br /><br />android.graphics.BitmapRegionDecoder.newInstance (FileDescriptor fd, boolean isShareable) &mdash; Create a BitmapRegionDecoder from the file descriptor. <br /><br />android.graphics.BitmapRegionDecoder.newInstance (String pathName, boolean isShareable) &mdash; Create a BitmapRegionDecoder from a file path. <br /><br />android.graphics.BitmapRegionDecoder.getHeight () &mdash; Returns the original image's height <br /><br />android.graphics.BitmapRegionDecoder.recycle ()   Frees up the memory associated with this region decoder, and mark the region decoder as 'dead', meaning it will throw an exception if decodeRegion (), getWidth () or getHeight () &mdash; Frees up the memory associated with this region decoder, and mark the region decoder as 'dead', meaning it will throw an exception if decodeRegion(), getWidth() or getHeight() is called. <br /><br />android.graphics.BitmapRegionDecoder.isRecycled () &mdash; Returns true if this region decoder has been recycled. <br /><br />android.graphics.BitmapRegionDecoder.newInstance (InputStream is, boolean isShareable) &mdash; Create a BitmapRegionDecoder from an input stream. <br /><br />android.graphics.BitmapRegionDecoder.newInstance (byte[] data, int offset, int length, boolean isShareable) &mdash; Create a BitmapRegionDecoder from the specified byte array. <br /><br />android.graphics.BitmapRegionDecoder.getWidth () &mdash; Returns the original image's width <br /><br />android.graphics.Camera.save () &mdash; Saves the camera state. <br /><br />android.graphics.Camera.rotateX (float deg) &mdash; Applies a rotation transform around the X axis. <br /><br />android.graphics.Camera.restore () &mdash; Restores the saved state, if any. <br /><br />android.graphics.Camera.getMatrix (Matrix matrix) &mdash; Computes the matrix corresponding to the current transformation and copies it to the supplied matrix object. <br /><br />android.graphics.Camera.translate (float x, float y, float z) &mdash; Applies a translation transform on all three axis. <br /><br />android.graphics.Camera.setLocation (float x, float y, float z) &mdash; Sets the location of the camera. <br /><br />android.graphics.Camera.rotateZ (float deg) &mdash; Applies a rotation transform around the Z axis. <br /><br />android.graphics.Camera.rotateY (float deg) &mdash; Applies a rotation transform around the Y axis. <br /><br />"
"android.graphics.Canvas.isHardwareAccelerated () &mdash; Indicates whether this Canvas uses hardware acceleration. <br /><br />android.graphics.Canvas.drawLines (float[] pts, int offset, int count, Paint paint) &mdash; Draw a series of lines. <br /><br />android.graphics.Canvas.save (int saveFlags) &mdash; Based on saveFlags, can save the current matrix and clip onto a private stack. <br /><br />android.graphics.Canvas.clipPath (Path path, Region.Op op) &mdash; Modify the current clip with the specified path. <br /><br />android.graphics.Canvas.clipRect (RectF rect, Region.Op op) &mdash; Modify the current clip with the specified rectangle. <br /><br />android.graphics.Canvas.drawOval (RectF oval, Paint paint) &mdash; Draw the specified oval using the specified paint. <br /><br />android.graphics.Canvas.clipRect (float left, float top, float right, float bottom) &mdash; Intersect the current clip with the specified rectangle, which is expressed in local coordinates. <br /><br />android.graphics.Canvas.drawColor (int color, PorterDuff.Mode mode)   Fill the entire canvas' bitmap  (restricted to the current clip) &mdash; Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. <br /><br />android.graphics.Canvas.drawRGB (int r, int g, int b)   Fill the entire canvas' bitmap  (restricted to the current clip) &mdash; Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. <br /><br />android.graphics.Canvas.drawText (String text, int start, int end, float x, float y, Paint paint)   Draw the text, with origin at  (x,y) &mdash; Draw the text, with origin at (x,y), using the specified paint. <br /><br />android.graphics.Canvas.getHeight () &mdash; Returns the height of the current drawing layer <br /><br />android.graphics.Canvas.translate (float dx, float dy) &mdash; Preconcat the current matrix with the specified translation <br /><br />android.graphics.Canvas.drawRoundRect (RectF rect, float rx, float ry, Paint paint) &mdash; Draw the specified round-rect using the specified paint. <br /><br />android.graphics.Canvas.getClipBounds (Rect bounds)   Return the bounds of the current clip  (in local coordinates) &mdash; Return the bounds of the current clip (in local coordinates) in the bounds parameter, and return true if it is non-empty. <br /><br />android.graphics.Canvas.drawARGB (int a, int r, int g, int b)   Fill the entire canvas' bitmap  (restricted to the current clip) &mdash; Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. <br /><br />android.graphics.Canvas.drawPath (Path path, Paint paint) &mdash; Draw the specified path using the specified paint. <br /><br />android.graphics.Canvas.drawRect (float left, float top, float right, float bottom, Paint paint) &mdash; Draw the specified Rect using the specified paint. <br /><br />android.graphics.Canvas.drawArc (float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean useCenter, Paint paint) &mdash; Draw the specified arc, which will be scaled to fit inside the specified oval. <br /><br />android.graphics.Canvas.getMatrix () &mdash; Return a new matrix with a copy of the canvas' current transformation matrix. <br /><br />android.graphics.Canvas.save () &mdash; Saves the current matrix and clip onto a private stack. <br /><br />"
"android.graphics.Canvas.concat (Matrix matrix) &mdash; Preconcat the current matrix with the specified matrix. <br /><br />android.graphics.Canvas.saveLayerAlpha (RectF bounds, int alpha, int saveFlags)   This behaves the same as save () &mdash; This behaves the same as save(), but in addition it allocates and redirects drawing to an offscreen bitmap. <br /><br />android.graphics.Canvas.drawText (CharSequence text, int start, int end, float x, float y, Paint paint)   Draw the specified range of text, specified by start/end, with its origin at  (x,y) &mdash; Draw the specified range of text, specified by start/end, with its origin at (x,y), in the specified Paint. <br /><br />android.graphics.Canvas.setBitmap (Bitmap bitmap) &mdash; Specify a bitmap for the canvas to draw into. <br /><br />android.graphics.Canvas.drawBitmap (Bitmap bitmap, Rect src, Rect dst, Paint paint) &mdash; Draw the specified bitmap, scaling/translating automatically to fill the destination rectangle. <br /><br />android.graphics.Canvas.setDensity (int density) &mdash; Specifies the density for this Canvas' backing bitmap. <br /><br />android.graphics.Canvas.saveLayerAlpha (float left, float top, float right, float bottom, int alpha)   Helper for saveLayerAlpha (left, top, right, bottom, alpha, ALL_SAVE_FLAG) &mdash; Helper for saveLayerAlpha(left, top, right, bottom, alpha, ALL_SAVE_FLAG) <br /><br />android.graphics.Canvas.drawBitmap (Bitmap bitmap, Matrix matrix, Paint paint) &mdash; Draw the bitmap using the specified matrix. <br /><br />android.graphics.Canvas.drawBitmap (int[] colors, int offset, int stride, float x, float y, int width, int height, boolean hasAlpha, Paint paint)    This method was deprecated in API level 21. Usage with a &mdash; This method was deprecated in API level 21. Usage with a hardware accelerated canvas requires an internal copy of color buffer contents every time this method is called. Using a Bitmap avoids this copy, and allows the application to more explicitly control the lifetime and copies of pixel data. <br /><br />android.graphics.Canvas.saveLayer (float left, float top, float right, float bottom, Paint paint)   Convenience for saveLayer (left, top, right, bottom, paint, ALL_SAVE_FLAG) &mdash; Convenience for saveLayer(left, top, right, bottom, paint, ALL_SAVE_FLAG) <br /><br />android.graphics.Canvas.drawCircle (float cx, float cy, float radius, Paint paint) &mdash; Draw the specified circle using the specified paint. <br /><br />android.graphics.Canvas.drawBitmap (Bitmap bitmap, float left, float top, Paint paint)   Draw the specified bitmap, with its top/left corner at  (x,y) &mdash; Draw the specified bitmap, with its top/left corner at (x,y), using the specified paint, transformed by the current matrix. <br /><br />android.graphics.Canvas.getMaximumBitmapHeight () &mdash; Returns the maximum allowed height for bitmaps drawn with this canvas. <br /><br />android.graphics.Canvas.clipRect (float left, float top, float right, float bottom, Region.Op op) &mdash; Modify the current clip with the specified rectangle, which is expressed in local coordinates. <br /><br />android.graphics.Canvas.restoreToCount (int saveCount)   Efficient way to pop any calls to save () &mdash; Efficient way to pop any calls to save() that happened after the save count reached saveCount. <br /><br />android.graphics.Canvas.drawLine (float startX, float startY, float stopX, float stopY, Paint paint) &mdash; Draw a line segment with the specified start and stop x,y coordinates, using the specified paint. <br /><br />android.graphics.Canvas.getMatrix (Matrix ctm) &mdash; Return, in ctm, the current transformation matrix. <br /><br />android.graphics.Canvas.drawRect (Rect r, Paint paint) &mdash; Draw the specified Rect using the specified Paint. <br /><br />android.graphics.Canvas.saveLayer (float left, float top, float right, float bottom, Paint paint, int saveFlags)   Helper version of saveLayer () &mdash; Helper version of saveLayer() that takes 4 values rather than a RectF. <br /><br />android.graphics.Canvas.getDensity () &mdash; Returns the target density of the canvas. <br /><br />"
"android.graphics.Canvas.getWidth () &mdash; Returns the width of the current drawing layer <br /><br />android.graphics.Canvas.getMaximumBitmapWidth () &mdash; Returns the maximum allowed width for bitmaps drawn with this canvas. <br /><br />android.graphics.Canvas.setMatrix (Matrix matrix) &mdash; Completely replace the current matrix with the specified matrix. <br /><br />android.graphics.Canvas.rotate (float degrees, float px, float py) &mdash; Preconcat the current matrix with the specified rotation. <br /><br />android.graphics.Canvas.drawPaint (Paint paint)   Fill the entire canvas' bitmap  (restricted to the current clip) &mdash; Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint. <br /><br />android.graphics.Canvas.drawColor (int color)   Fill the entire canvas' bitmap  (restricted to the current clip) &mdash; Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. <br /><br />android.graphics.Canvas.getClipBounds ()   Retrieve the bounds of the current clip  (in local coordinates) &mdash; Retrieve the bounds of the current clip (in local coordinates). <br /><br />android.graphics.Canvas.scale (float sx, float sy, float px, float py) &mdash; Preconcat the current matrix with the specified scale. <br /><br />android.graphics.Canvas.drawPoint (float x, float y, Paint paint)   Helper for drawPoints () &mdash; Helper for drawPoints() for drawing a single point. <br /><br />android.graphics.Canvas.clipPath (Path path) &mdash; Intersect the current clip with the specified path. <br /><br />android.graphics.Canvas.restore ()   This call balances a previous call to save () &mdash; This call balances a previous call to save(), and is used to remove all modifications to the matrix/clip state since the last save call. <br /><br />android.graphics.Canvas.saveLayerAlpha (float left, float top, float right, float bottom, int alpha, int saveFlags)   Helper for saveLayerAlpha () &mdash; Helper for saveLayerAlpha() that takes 4 values instead of a RectF. <br /><br />android.graphics.Canvas.saveLayer (RectF bounds, Paint paint)   Convenience for saveLayer (bounds, paint, ALL_SAVE_FLAG) &mdash; Convenience for saveLayer(bounds, paint, ALL_SAVE_FLAG) <br /><br />android.graphics.Canvas.saveLayerAlpha (RectF bounds, int alpha)   Convenience for saveLayerAlpha (bounds, alpha, ALL_SAVE_FLAG) &mdash; Convenience for saveLayerAlpha(bounds, alpha, ALL_SAVE_FLAG) <br /><br />android.graphics.Color.green (int color) &mdash; Return the green component of a color int. <br /><br />android.graphics.Color.RGBToHSV (int red, int green, int blue, float[] hsv) &mdash; Convert RGB components to HSV. <br /><br />android.graphics.Color.rgb (int red, int green, int blue) &mdash; Return a color-int from red, green, blue components. <br /><br />android.graphics.Color.alpha (int color) &mdash; Return the alpha component of a color int. <br /><br />android.graphics.Color.parseColor (String colorString) &mdash; Parse the color string, and return the corresponding color-int. <br /><br />android.graphics.Color.red (int color) &mdash; Return the red component of a color int. <br /><br />"
"android.graphics.Color.HSVToColor (int alpha, float[] hsv) &mdash; Convert HSV components to an ARGB color. <br /><br />android.graphics.Color.blue (int color) &mdash; Return the blue component of a color int. <br /><br />android.graphics.Color.colorToHSV (int color, float[] hsv) &mdash; Convert the argb color to its HSV components. <br /><br />android.graphics.Color.argb (int alpha, int red, int green, int blue) &mdash; Return a color-int from alpha, red, green, blue components. <br /><br />android.graphics.ColorMatrix.setSaturation (float sat) &mdash; Set the matrix to affect the saturation of colors. <br /><br />android.graphics.ColorMatrix.set (float[] src) &mdash; Assign the array of floats into this matrix, copying all of its values. <br /><br />android.graphics.ColorMatrix.set (ColorMatrix src) &mdash; Assign the src colormatrix into this matrix, copying all of its values. <br /><br />android.graphics.ColorMatrix.postConcat (ColorMatrix postmatrix) &mdash; Concat this colormatrix with the specified postmatrix. <br /><br />android.graphics.ColorMatrix.reset () &mdash; Set this colormatrix to identity:  [ 1 0 0 0 0 - red vector 0 1 0 0 0 - green vector 0 0 1 0 0 - blue vector 0 0 0 1 0 ] - alpha vector <br /><br />android.graphics.ColorMatrix.setScale (float rScale, float gScale, float bScale, float aScale) &mdash; Set this colormatrix to scale by the specified values. <br /><br />android.graphics.ColorMatrix.preConcat (ColorMatrix prematrix) &mdash; Concat this colormatrix with the specified prematrix. <br /><br />android.graphics.drawable.Animatable.stop () &mdash; Stops the drawable's animation. <br /><br />android.graphics.drawable.Animatable.start () &mdash; Starts the drawable's animation. <br /><br />android.graphics.drawable.AnimationDrawable.addFrame (Drawable frame, int duration) &mdash; Add a frame to the animation <br /><br />android.graphics.drawable.AnimationDrawable.stop () &mdash; Stops the animation. <br /><br />android.graphics.drawable.AnimationDrawable.isRunning () &mdash; Indicates whether the animation is currently running or not. <br /><br />android.graphics.drawable.AnimationDrawable.run () &mdash; This method exists for implementation purpose only and should not be called directly. <br /><br />android.graphics.drawable.AnimationDrawable.start () &mdash; Starts the animation, looping if necessary. <br /><br />android.graphics.drawable.AnimationDrawable.setOneShot (boolean oneShot) &mdash; Sets whether the animation should play once or repeat. <br /><br />android.graphics.drawable.BitmapDrawable.setColorFilter (ColorFilter cf) &mdash; Specify an optional color filter for the drawable. <br /><br />"
"android.graphics.drawable.BitmapDrawable.getIntrinsicWidth () &mdash; Return the intrinsic width of the underlying drawable object. <br /><br />android.graphics.drawable.BitmapDrawable.setAlpha (int alpha) &mdash; Specify an alpha value for the drawable. <br /><br />android.graphics.drawable.BitmapDrawable.setTargetDensity (int density) &mdash; Set the density at which this drawable will be rendered. <br /><br />android.graphics.drawable.BitmapDrawable.setGravity (int gravity) &mdash; Set the gravity used to position/stretch the bitmap within its bounds. <br /><br />android.graphics.drawable.BitmapDrawable.draw (Canvas canvas)   Draw in its bounds  (set via setBounds) respecting optional effects such as alpha  (set via setAlpha) and color filter  (set via setColorFilter) &mdash; Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter). <br /><br />android.graphics.drawable.BitmapDrawable.setTargetDensity (Canvas canvas) &mdash; Set the density scale at which this drawable will be rendered. <br /><br />android.graphics.drawable.BitmapDrawable.getOpacity () &mdash; Return the opacity/transparency of this Drawable. <br /><br />android.graphics.drawable.BitmapDrawable.setAntiAlias (boolean aa) &mdash; Enables or disables anti-aliasing for this drawable. <br /><br />android.graphics.drawable.BitmapDrawable.getIntrinsicHeight () &mdash; Return the intrinsic height of the underlying drawable object. <br /><br />android.graphics.drawable.BitmapDrawable.getBitmap () &mdash; Returns the bitmap used by this drawable to render. <br /><br />android.graphics.drawable.BitmapDrawable.getPaint () &mdash; Returns the paint used to render this drawable. <br /><br />android.graphics.drawable.BitmapDrawable.setDither (boolean dither) &mdash; Set to true to have the drawable dither its colors when drawn to a device with fewer than 8-bits per color component. <br /><br />android.graphics.drawable.BitmapDrawable.setFilterBitmap (boolean filter)   Set to true to have the drawable filter its bitmap when scaled or rotated  (for drawables that use bitmaps) &mdash; Set to true to have the drawable filter its bitmap when scaled or rotated (for drawables that use bitmaps). <br /><br />android.graphics.drawable.BitmapDrawable.mutate () &mdash; A mutable BitmapDrawable still shares its Bitmap with any other Drawable that comes from the same resource. <br /><br />android.graphics.drawable.ColorDrawable.setAlpha (int alpha) &mdash; Sets the color's alpha value. <br /><br />android.graphics.drawable.ColorDrawable.setColor (int color) &mdash; Sets the drawable's color value. <br /><br />android.graphics.drawable.Drawable.getPadding (Rect padding) &mdash; Return in padding the insets suggested by this Drawable for placing content inside the drawable's bounds. <br /><br />android.graphics.drawable.Drawable.copyBounds () &mdash; Return a copy of the drawable's bounds in a new Rect. <br /><br />android.graphics.drawable.Drawable.setLevel (int level) &mdash; Specify the level for the drawable. <br /><br />android.graphics.drawable.Drawable.setBounds (int left, int top, int right, int bottom) &mdash; Specify a bounding rectangle for the Drawable. <br /><br />"
"android.graphics.drawable.Drawable.setHotspot (float x, float y) &mdash; Specifies the hotspot's location within the drawable. <br /><br />android.graphics.drawable.Drawable.getLevel () &mdash; Retrieve the current level. <br /><br />android.graphics.drawable.Drawable.getConstantState () &mdash; Return a Drawable.ConstantState instance that holds the shared state of this Drawable. <br /><br />android.graphics.drawable.Drawable.invalidateSelf () &mdash; Use the current Drawable.Callback implementation to have this Drawable redrawn. <br /><br />android.graphics.drawable.Drawable.getChangingConfigurations () &mdash; Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created. <br /><br />android.graphics.drawable.Drawable.getState () &mdash; Describes the current state, as a union of primitve states, such as state_focused, state_selected, etc. <br /><br />android.graphics.drawable.Drawable.inflate (Resources r, XmlPullParser parser, AttributeSet attrs) &mdash; Inflate this Drawable from an XML resource. <br /><br />android.graphics.drawable.Drawable.setVisible (boolean visible, boolean restart) &mdash; Set whether this Drawable is visible. <br /><br />android.graphics.drawable.Drawable.clearColorFilter () &mdash; Removes the color filter for this drawable. <br /><br />android.graphics.drawable.Drawable.getTransparentRegion () &mdash; Returns a Region representing the part of the Drawable that is completely transparent. <br /><br />android.graphics.drawable.Drawable.getBounds () &mdash; Return the drawable's bounds Rect. <br /><br />android.graphics.drawable.Drawable.getMinimumHeight () &mdash; Returns the minimum height suggested by this Drawable. <br /><br />android.graphics.drawable.Drawable.resolveOpacity (int op1, int op2) &mdash; Return the appropriate opacity value for two source opacities. <br /><br />android.graphics.drawable.Drawable.isStateful () &mdash; Indicates whether this drawable will change its appearance based on state. <br /><br />android.graphics.drawable.Drawable.jumpToCurrentState () &mdash; If this Drawable does transition animations between states, ask that it immediately jump to the current state and skip any active animations. <br /><br />android.graphics.drawable.Drawable.setAutoMirrored (boolean mirrored)   Set whether this Drawable is automatically mirrored when its layout direction is RTL  (right-to left) &mdash; Set whether this Drawable is automatically mirrored when its layout direction is RTL (right-to left). <br /><br />android.graphics.drawable.Drawable.createFromPath (String pathName) &mdash; Create a drawable from file path name. <br /><br />android.graphics.drawable.Drawable.setState (int[] stateSet) &mdash; Specify a set of states for the drawable. <br /><br />android.graphics.drawable.Drawable.isAutoMirrored () &mdash; Tells if this Drawable will be automatically mirrored when its layout direction is RTL right-to-left. <br /><br />android.graphics.drawable.Drawable.setChangingConfigurations (int configs) &mdash; Set a mask of the configuration parameters for which this drawable may change, requiring that it be re-created. <br /><br />"
"android.graphics.drawable.Drawable.inflate (Resources r, XmlPullParser parser, AttributeSet attrs, Resources.Theme theme) &mdash; Inflate this Drawable from an XML resource optionally styled by a theme. <br /><br />android.graphics.drawable.Drawable.copyBounds (Rect bounds)   Return a copy of the drawable's bounds in the specified Rect  (allocated by the caller) &mdash; Return a copy of the drawable's bounds in the specified Rect (allocated by the caller). <br /><br />android.graphics.drawable.Drawable.getMinimumWidth () &mdash; Returns the minimum width suggested by this Drawable. <br /><br />android.graphics.drawable.Drawable.createFromStream (InputStream is, String srcName) &mdash; Create a drawable from an inputstream <br /><br />android.graphics.drawable.Drawable.setTint (int tint) &mdash; Specifies a tint for this drawable. <br /><br />android.graphics.drawable.Drawable.setColorFilter (int color, PorterDuff.Mode mode) &mdash; Specify a color and Porter-Duff mode to be the color filter for this drawable. <br /><br />android.graphics.drawable.Drawable.setTintList (ColorStateList tint) &mdash; Specifies a tint for this drawable as a color state list. <br /><br />android.graphics.drawable.Drawable.setHotspotBounds (int left, int top, int right, int bottom) &mdash; Sets the bounds to which the hotspot is constrained, if they should be different from the drawable bounds. <br /><br />android.graphics.drawable.Drawable.mutate () &mdash; Make this drawable mutable. <br /><br />android.graphics.drawable.GradientDrawable.setStroke (int width, int color) &mdash; Set the stroke width and color for the drawable. <br /><br />android.graphics.drawable.GradientDrawable.setCornerRadius (float radius) &mdash; Specify radius for the corners of the gradient. <br /><br />android.graphics.drawable.GradientDrawable.setShape (int shape) &mdash; Sets the type of shape used to draw the gradient. <br /><br />android.graphics.drawable.GradientDrawable.setCornerRadii (float[] radii) &mdash; Specify radii for each of the 4 corners. <br /><br />android.graphics.drawable.GradientDrawable.setStroke (int width, ColorStateList colorStateList) &mdash; Set the stroke width and color state list for the drawable. <br /><br />android.graphics.drawable.GradientDrawable.setGradientCenter (float x, float y) &mdash; Sets the center location of the gradient. <br /><br />android.graphics.drawable.GradientDrawable.setUseLevel (boolean useLevel) &mdash; Sets whether or not this drawable will honor its level property. <br /><br />android.graphics.drawable.GradientDrawable.setColor (ColorStateList colorStateList) &mdash; Changes this drawable to use a single color state list instead of a gradient. <br /><br />android.graphics.drawable.GradientDrawable.setGradientRadius (float gradientRadius) &mdash; Sets the radius of the gradient. <br /><br />android.graphics.drawable.GradientDrawable.setSize (int width, int height) &mdash; Sets the size of the shape drawn by this drawable. <br /><br />android.graphics.drawable.GradientDrawable.setColor (int argb) &mdash; Changes this drawable to use a single color instead of a gradient. <br /><br />"
"android.graphics.drawable.GradientDrawable.setGradientType (int gradient) &mdash; Sets the type of gradient used by this drawable.. <br /><br />android.graphics.drawable.LayerDrawable.setLayerInset (int index, int l, int t, int r, int b) &mdash; Specifies the insets in pixels for the drawable at the specified index. <br /><br />android.graphics.drawable.LayerDrawable.setDrawableByLayerId (int id, Drawable drawable)   Sets  (or replaces) &mdash; Sets (or replaces) the Drawable for the layer with the given id. <br /><br />android.graphics.drawable.LayerDrawable.getDrawable (int index) &mdash; Returns the drawable at the specified layer index. <br /><br />android.graphics.drawable.LayerDrawable.getId (int index) &mdash; Returns the id of the specified layer. <br /><br />android.graphics.drawable.LayerDrawable.getNumberOfLayers () &mdash; Returns the number of layers contained within this. <br /><br />android.graphics.drawable.LayerDrawable.setId (int index, int id) &mdash; Sets the ID of a layer. <br /><br />android.graphics.drawable.LayerDrawable.findDrawableByLayerId (int id) &mdash; Looks for a layer with the given ID and returns its Drawable. <br /><br />android.graphics.drawable.RippleDrawable.setPaddingMode (int mode) &mdash; Specifies how layer padding should affect the bounds of subsequent layers. <br /><br />android.graphics.drawable.ShapeDrawable.setAlpha (int alpha) &mdash; Set the alpha level for this drawable [0..255]. <br /><br />android.graphics.drawable.ShapeDrawable.setIntrinsicHeight (int height)   Sets the intrinsic  (default) &mdash; Sets the intrinsic (default) height for this shape. <br /><br />android.graphics.drawable.ShapeDrawable.setShape (Shape s) &mdash; Sets the Shape of this ShapeDrawable. <br /><br />android.graphics.drawable.ShapeDrawable.setIntrinsicWidth (int width)   Sets the intrinsic  (default) &mdash; Sets the intrinsic (default) width for this shape. <br /><br />android.graphics.drawable.ShapeDrawable.setPadding (Rect padding) &mdash; Sets padding for this shape, defined by a Rect object. <br /><br />android.graphics.drawable.ShapeDrawable.setPadding (int left, int top, int right, int bottom) &mdash; Sets padding for the shape. <br /><br />android.graphics.drawable.ShapeDrawable.getPaint () &mdash; Returns the Paint used to draw the shape. <br /><br />android.graphics.drawable.shapes.RoundRectShape.draw (Canvas canvas, Paint paint) &mdash; Draw this shape into the provided Canvas, with the provided Paint. <br /><br />android.graphics.drawable.StateListDrawable.addState (int[] stateSet, Drawable drawable) &mdash; Add a new image/string ID to the set of images. <br /><br />android.graphics.drawable.TransitionDrawable.startTransition (int durationMillis) &mdash; Begin the second layer on top of the first layer. <br /><br />android.graphics.drawable.TransitionDrawable.setCrossFadeEnabled (boolean enabled) &mdash; Enables or disables the cross fade of the drawables. <br /><br />"
"android.graphics.drawable.TransitionDrawable.resetTransition () &mdash; Show only the first layer. <br /><br />android.graphics.ImageFormat.getBitsPerPixel (int format) &mdash; Use this function to retrieve the number of bits per pixel of an ImageFormat. <br /><br />android.graphics.Matrix.postSkew (float kx, float ky) &mdash; Postconcats the matrix with the specified skew. <br /><br />android.graphics.Matrix.mapPoints (float[] pts) &mdash; Apply this matrix to the array of 2D points, and write the transformed points back into the array <br /><br />android.graphics.Matrix.preScale (float sx, float sy) &mdash; Preconcats the matrix with the specified scale. <br /><br />android.graphics.Matrix.postScale (float sx, float sy) &mdash; Postconcats the matrix with the specified scale. <br /><br />android.graphics.Matrix.preRotate (float degrees, float px, float py) &mdash; Preconcats the matrix with the specified rotation. <br /><br />android.graphics.Matrix.setConcat (Matrix a, Matrix b) &mdash; Set the matrix to the concatenation of the two specified matrices and return true. <br /><br />android.graphics.Matrix.postConcat (Matrix other) &mdash; Postconcats the matrix with the specified matrix. <br /><br />android.graphics.Matrix.getValues (float[] values) &mdash; Copy 9 values from the matrix into the array. <br /><br />android.graphics.Matrix.mapRect (RectF dst, RectF src) &mdash; Apply this matrix to the src rectangle, and write the transformed rectangle into dst. <br /><br />android.graphics.Matrix.preConcat (Matrix other) &mdash; Preconcats the matrix with the specified matrix. <br /><br />android.graphics.Matrix.set (Matrix src)    (deep) &mdash; (deep) copy the src matrix into this matrix. <br /><br />android.graphics.Matrix.postRotate (float degrees) &mdash; Postconcats the matrix with the specified rotation. <br /><br />android.graphics.Matrix.setTranslate (float dx, float dy)   Set the matrix to translate by  (dx, dy) &mdash; Set the matrix to translate by (dx, dy). <br /><br />android.graphics.Matrix.setRotate (float degrees, float px, float py)   Set the matrix to rotate by the specified number of degrees, with a pivot point at  (px, py) &mdash; Set the matrix to rotate by the specified number of degrees, with a pivot point at (px, py). <br /><br />android.graphics.Matrix.mapVectors (float[] dst, float[] src) &mdash; Apply this matrix to the array of 2D vectors specified by src, and write the transformed vectors into the array of vectors specified by dst. <br /><br />android.graphics.Matrix.mapRect (RectF rect) &mdash; Apply this matrix to the rectangle, and write the transformed rectangle back into it. <br /><br />android.graphics.Matrix.invert (Matrix inverse) &mdash; If this matrix can be inverted, return true and if inverse is not null, set inverse to be the inverse of this matrix. <br /><br />android.graphics.Matrix.postTranslate (float dx, float dy) &mdash; Postconcats the matrix with the specified translation. <br /><br />"
"android.graphics.Matrix.setRotate (float degrees)   Set the matrix to rotate about  (0,0) &mdash; Set the matrix to rotate about (0,0) by the specified number of degrees. <br /><br />android.graphics.Matrix.reset () &mdash; Set the matrix to identity <br /><br />android.graphics.Matrix.mapPoints (float[] dst, float[] src) &mdash; Apply this matrix to the array of 2D points specified by src, and write the transformed points into the array of points specified by dst. <br /><br />android.graphics.Matrix.setScale (float sx, float sy) &mdash; Set the matrix to scale by sx and sy. <br /><br />android.graphics.Matrix.setScale (float sx, float sy, float px, float py)   Set the matrix to scale by sx and sy, with a pivot point at  (px, py) &mdash; Set the matrix to scale by sx and sy, with a pivot point at (px, py). <br /><br />android.graphics.Matrix.preTranslate (float dx, float dy) &mdash; Preconcats the matrix with the specified translation. <br /><br />android.graphics.Matrix.setValues (float[] values) &mdash; Copy 9 values from the array into the matrix. <br /><br />android.graphics.Matrix.mapVectors (float[] vecs) &mdash; Apply this matrix to the array of 2D vectors, and write the transformed vectors back into the array. <br /><br />android.graphics.NinePatch.isNinePatchChunk (byte[] chunk) &mdash; Verifies that the specified byte array is a valid 9-patch data chunk. <br /><br />android.graphics.Outline.setRoundRect (Rect rect, float radius)   Convenience for setRoundRect (int, int, int, int, float) &mdash; Convenience for setRoundRect(int, int, int, int, float) <br /><br />android.graphics.Outline.setRoundRect (int left, int top, int right, int bottom, float radius) &mdash; Sets the Outline to the rounded rect defined by the input rect, and corner radius. <br /><br />android.graphics.Outline.setRect (Rect rect)   Convenience for setRect (int, int, int, int) &mdash; Convenience for setRect(int, int, int, int) <br /><br />android.graphics.Paint.getTypeface () &mdash; Get the paint's typeface object. <br /><br />android.graphics.Paint.setColorFilter (ColorFilter filter) &mdash; Set or clear the paint's colorfilter, returning the parameter. <br /><br />android.graphics.Paint.getTextBounds (String text, int start, int end, Rect bounds)   Return in bounds  (allocated by the caller) the smallest rectangle that encloses all of the characters, with an implied origin at  (0,0) &mdash; Return in bounds (allocated by the caller) the smallest rectangle that encloses all of the characters, with an implied origin at (0,0). <br /><br />android.graphics.Paint.isAntiAlias ()   Helper for getFlags () &mdash; Helper for getFlags(), returning true if ANTI_ALIAS_FLAG bit is set AntiAliasing smooths out the edges of what is being drawn, but is has no impact on the interior of the shape. <br /><br />android.graphics.Paint.setAntiAlias (boolean aa)   Helper for setFlags () &mdash; Helper for setFlags(), setting or clearing the ANTI_ALIAS_FLAG bit AntiAliasing smooths out the edges of what is being drawn, but is has no impact on the interior of the shape. <br /><br />android.graphics.Paint.setFakeBoldText (boolean fakeBoldText)   Helper for setFlags () &mdash; Helper for setFlags(), setting or clearing the FAKE_BOLD_TEXT_FLAG bit <br /><br />android.graphics.Paint.measureText (char[] text, int index, int count) &mdash; Return the width of the text. <br /><br />android.graphics.Paint.getTextWidths (char[] text, int index, int count, float[] widths) &mdash; Return the advance widths for the characters in the string. <br /><br />"
"android.graphics.Paint.getStyle ()   Return the paint's style, used for controlling how primitives' geometries are interpreted  (except for drawBitmap, which always assumes FILL_STYLE) &mdash; Return the paint's style, used for controlling how primitives' geometries are interpreted (except for drawBitmap, which always assumes FILL_STYLE). <br /><br />android.graphics.Paint.getXfermode () &mdash; Get the paint's xfermode object. <br /><br />android.graphics.Paint.setDither (boolean dither)   Helper for setFlags () &mdash; Helper for setFlags(), setting or clearing the DITHER_FLAG bit Dithering affects how colors that are higher precision than the device are down-sampled. <br /><br />android.graphics.Paint.setXfermode (Xfermode xfermode) &mdash; Set or clear the xfermode object. <br /><br />android.graphics.Paint.setTextScaleX (float scaleX) &mdash; Set the paint's horizontal scale factor for text. <br /><br />android.graphics.Paint.getFlags () &mdash; Return the paint's flags. <br /><br />android.graphics.Paint.setShadowLayer (float radius, float dx, float dy, int shadowColor) &mdash; This draws a shadow layer below the main layer, with the specified offset and color, and blur radius. <br /><br />android.graphics.Paint.getColorFilter ()   Get the paint's colorfilter  (maybe be null) &mdash; Get the paint's colorfilter (maybe be null). <br /><br />android.graphics.Paint.setSubpixelText (boolean subpixelText)   Helper for setFlags () &mdash; Helper for setFlags(), setting or clearing the SUBPIXEL_TEXT_FLAG bit <br /><br />android.graphics.Paint.setPathEffect (PathEffect effect) &mdash; Set or clear the patheffect object. <br /><br />android.graphics.Paint.getStrokeWidth () &mdash; Return the width for stroking. <br /><br />android.graphics.Paint.setLinearText (boolean linearText)   Helper for setFlags () &mdash; Helper for setFlags(), setting or clearing the LINEAR_TEXT_FLAG bit <br /><br />android.graphics.Paint.set (Paint src) &mdash; Copy the fields from src into this paint. <br /><br />android.graphics.Paint.descent ()   Return the distance below  (positive) the baseline  (descent) &mdash; Return the distance below (positive) the baseline (descent) based on the current typeface and text size. <br /><br />android.graphics.Paint.setARGB (int a, int r, int g, int b)   Helper to setColor () &mdash; Helper to setColor(), that takes a,r,g,b and constructs the color int <br /><br />android.graphics.Paint.getTextSize () &mdash; Return the paint's text size. <br /><br />android.graphics.Paint.getColor () &mdash; Return the paint's color. <br /><br />android.graphics.Paint.setUnderlineText (boolean underlineText)   Helper for setFlags () &mdash; Helper for setFlags(), setting or clearing the UNDERLINE_TEXT_FLAG bit <br /><br />android.graphics.Paint.getFontMetricsInt (Paint.FontMetricsInt fmi) &mdash; Return the font's interline spacing, given the Paint's settings for typeface, textSize, etc. <br /><br />android.graphics.Paint.getShader () &mdash; Get the paint's shader object. <br /><br />"
"android.graphics.Paint.getFontSpacing () &mdash; Return the recommend line spacing based on the current typeface and text size. <br /><br />android.graphics.Paint.getTextAlign () &mdash; Return the paint's Align value for drawing text. <br /><br />android.graphics.Paint.setFlags (int flags) &mdash; Set the paint's flags. <br /><br />android.graphics.Paint.setTypeface (Typeface typeface) &mdash; Set or clear the typeface object. <br /><br />android.graphics.Paint.setTextSize (float textSize) &mdash; Set the paint's text size. <br /><br />android.graphics.Paint.setFilterBitmap (boolean filter)   Helper for setFlags () &mdash; Helper for setFlags(), setting or clearing the FILTER_BITMAP_FLAG bit. <br /><br />android.graphics.Paint.setShader (Shader shader) &mdash; Set or clear the shader object. <br /><br />android.graphics.Paint.getAlpha ()   Helper to getColor () &mdash; Helper to getColor() that just returns the color's alpha value. <br /><br />android.graphics.Paint.ascent ()   Return the distance above  (negative) the baseline  (ascent) &mdash; Return the distance above (negative) the baseline (ascent) based on the current typeface and text size. <br /><br />android.graphics.Paint.setColor (int color) &mdash; Set the paint's color. <br /><br />android.graphics.Paint.setMaskFilter (MaskFilter maskfilter) &mdash; Set or clear the maskfilter object. <br /><br />android.graphics.Paint.setAlpha (int a)   Helper to setColor () &mdash; Helper to setColor(), that only assigns the color's alpha value, leaving its r,g,b values unchanged. <br /><br />android.graphics.Paint.getFontMetrics ()   Allocates a new FontMetrics object, and then calls getFontMetrics (fm) &mdash; Allocates a new FontMetrics object, and then calls getFontMetrics(fm) with it, returning the object. <br /><br />android.graphics.Paint.clearShadowLayer () &mdash; Clear the shadow layer. <br /><br />android.graphics.Paint.setStrokeWidth (float width) &mdash; Set the width for stroking. <br /><br />android.graphics.Paint.setTextSkewX (float skewX) &mdash; Set the paint's horizontal skew factor for text. <br /><br />android.graphics.Paint.reset () &mdash; Restores the paint to its default settings. <br /><br />android.graphics.Paint.getFontMetrics (Paint.FontMetrics metrics) &mdash; Return the font's recommended interline spacing, given the Paint's settings for typeface, textSize, etc. <br /><br />android.graphics.Path.close () &mdash; Close the current contour. <br /><br />android.graphics.Path.computeBounds (RectF bounds, boolean exact) &mdash; Compute the bounds of the control points of the path, and write the answer into bounds. <br /><br />"
"android.graphics.Path.rewind () &mdash; Rewinds the path: clears any lines and curves from the path but keeps the internal data structure for faster reuse. <br /><br />android.graphics.Path.lineTo (float x, float y)   Add a line from the last point to the specified point  (x,y) &mdash; Add a line from the last point to the specified point (x,y). <br /><br />android.graphics.Path.arcTo (RectF oval, float startAngle, float sweepAngle, boolean forceMoveTo) &mdash; Append the specified arc to the path as a new contour. <br /><br />android.graphics.Path.rMoveTo (float dx, float dy) &mdash; Set the beginning of the next contour relative to the last point on the previous contour. <br /><br />android.graphics.Path.isEmpty ()   Returns true if the path is empty  (contains no lines or curves) &mdash; Returns true if the path is empty (contains no lines or curves) <br /><br />android.graphics.Path.setLastPoint (float dx, float dy) &mdash; Sets the last point of the path. <br /><br />android.graphics.Path.quadTo (float x1, float y1, float x2, float y2)   Add a quadratic bezier from the last point, approaching control point  (x1,y1), and ending at  (x2,y2) &mdash; Add a quadratic bezier from the last point, approaching control point (x1,y1), and ending at (x2,y2). <br /><br />android.graphics.Path.transform (Matrix matrix, Path dst) &mdash; Transform the points in this path by matrix, and write the answer into dst. <br /><br />android.graphics.Path.cubicTo (float x1, float y1, float x2, float y2, float x3, float y3)   Add a cubic bezier from the last point, approaching control points  (x1,y1) and  (x2,y2), and ending at  (x3,y3) &mdash; Add a cubic bezier from the last point, approaching control points (x1,y1) and (x2,y2), and ending at (x3,y3). <br /><br />android.graphics.Path.addArc (float left, float top, float right, float bottom, float startAngle, float sweepAngle) &mdash; Add the specified arc to the path as a new contour. <br /><br />android.graphics.Path.transform (Matrix matrix) &mdash; Transform the points in this path by matrix. <br /><br />android.graphics.Path.offset (float dx, float dy, Path dst)   Offset the path by  (dx,dy) &mdash; Offset the path by (dx,dy) <br /><br />android.graphics.Path.moveTo (float x, float y)   Set the beginning of the next contour to the point  (x,y) &mdash; Set the beginning of the next contour to the point (x,y). <br /><br />android.graphics.Path.reset () &mdash; Clear any lines and curves from the path, making it empty. <br /><br />android.graphics.Path.rLineTo (float dx, float dy) &mdash; Same as lineTo, but the coordinates are considered relative to the last point on this contour. <br /><br />android.graphics.Picture.beginRecording (int width, int height)   To record a picture, call beginRecording () &mdash; To record a picture, call beginRecording() and then draw into the Canvas that is returned. <br /><br />android.graphics.Picture.draw (Canvas canvas) &mdash; Draw this picture on the canvas. <br /><br />android.graphics.Picture.endRecording () &mdash; Call endRecording when the picture is built. <br /><br />android.graphics.Point.set (int x, int y) &mdash; Set the point's x and y coordinates <br /><br />android.graphics.Point.equals (int x, int y)   Returns true if the point's coordinates equal  (x,y) &mdash; Returns true if the point's coordinates equal (x,y) <br /><br />"
"android.graphics.Point.offset (int dx, int dy) &mdash; Offset the point's coordinates by dx, dy <br /><br />android.graphics.PointF.length (float x, float y)   Returns the euclidian distance from  (0,0) to  (x,y) &mdash; Returns the euclidian distance from (0,0) to (x,y) <br /><br />android.graphics.PointF.set (PointF p) &mdash; Set the point's x and y coordinates to the coordinates of p <br /><br />android.graphics.PointF.length ()   Return the euclidian distance from  (0,0) &mdash; Return the euclidian distance from (0,0) to the point <br /><br />android.graphics.Rect.intersects (Rect a, Rect b) &mdash; Returns true iff the two specified rectangles intersect. <br /><br />android.graphics.Rect.set (int left, int top, int right, int bottom) &mdash; Set the rectangle's coordinates to the specified values. <br /><br />android.graphics.Rect.union (int x, int y) &mdash; Update this Rect to enclose itself and the [x,y] coordinate. <br /><br />android.graphics.Rect.intersects (int left, int top, int right, int bottom) &mdash; Returns true if this rectangle intersects the specified rectangle. <br /><br />android.graphics.Rect.contains (int left, int top, int right, int bottom) &mdash; Returns true iff the 4 specified sides of a rectangle are inside or equal to this rectangle. <br /><br />android.graphics.Rect.intersect (Rect r) &mdash; If the specified rectangle intersects this rectangle, return true and set this rectangle to that intersection, otherwise return false and do not change this rectangle. <br /><br />android.graphics.Rect.isEmpty ()   Returns true if the rectangle is empty  (left >= right or top >= bottom) &mdash; Returns true if the rectangle is empty (left >= right or top >= bottom) <br /><br />android.graphics.Rect.intersect (int left, int top, int right, int bottom) &mdash; If the rectangle specified by left,top,right,bottom intersects this rectangle, return true and set this rectangle to that intersection, otherwise return false and do not change this rectangle. <br /><br />android.graphics.Rect.union (Rect r) &mdash; Update this Rect to enclose itself and the specified rectangle. <br /><br />android.graphics.Rect.offset (int dx, int dy) &mdash; Offset the rectangle by adding dx to its left and right coordinates, and adding dy to its top and bottom coordinates. <br /><br />android.graphics.Rect.setEmpty ()   Set the rectangle to  (0,0,0,0) &mdash; Set the rectangle to (0,0,0,0) <br /><br />android.graphics.Rect.setIntersect (Rect a, Rect b) &mdash; If rectangles a and b intersect, return true and set this rectangle to that intersection, otherwise return false and do not change this rectangle. <br /><br />android.graphics.Rect.contains (Rect r) &mdash; Returns true iff the specified rectangle r is inside or equal to this rectangle. <br /><br />android.graphics.Rect.inset (int dx, int dy)   Inset the rectangle by  (dx,dy) &mdash; Inset the rectangle by (dx,dy). <br /><br />android.graphics.Rect.set (Rect src) &mdash; Copy the coordinates from src into this rectangle. <br /><br />android.graphics.Rect.offsetTo (int newLeft, int newTop)   Offset the rectangle to a specific  (left, top) &mdash; Offset the rectangle to a specific (left, top) position, keeping its width and height the same. <br /><br />"
"android.graphics.Rect.contains (int x, int y)   Returns true if  (x,y) &mdash; Returns true if (x,y) is inside the rectangle. <br /><br />android.graphics.RectF.round (Rect dst) &mdash; Set the dst integer Rect by rounding this rectangle's coordinates to their nearest integer values. <br /><br />android.graphics.Shader.setLocalMatrix (Matrix localM) &mdash; Set the shader's local matrix. <br /><br />android.graphics.SurfaceTexture.setDefaultBufferSize (int width, int height) &mdash; Set the default size of the image buffers. <br /><br />android.graphics.SurfaceTexture.release ()   release () &mdash; release() frees all the buffers and puts the SurfaceTexture into the 'abandoned' state. <br /><br />android.graphics.SurfaceTexture.getTransformMatrix (float[] mtx) &mdash; Retrieve the 4x4 texture coordinate transform matrix associated with the texture image set by the most recent call to updateTexImage. <br /><br />android.graphics.SurfaceTexture.updateTexImage () &mdash; Update the texture image to the most recent frame from the image stream. <br /><br />android.graphics.Typeface.create (String familyName, int style) &mdash; Create a typeface object given a family name, and option style information. <br /><br />android.graphics.Typeface.createFromAsset (AssetManager mgr, String path) &mdash; Create a new typeface from the specified font data. <br /><br />android.graphics.Typeface.isItalic ()   Returns true if getStyle () &mdash; Returns true if getStyle() has the ITALIC bit set. <br /><br />android.graphics.Typeface.createFromFile (String path) &mdash; Create a new typeface from the specified font file. <br /><br />android.graphics.Typeface.getStyle () &mdash; Returns the typeface's intrinsic style attributes <br /><br />android.graphics.Typeface.isBold ()   Returns true if getStyle () &mdash; Returns true if getStyle() has the BOLD bit set. <br /><br />android.graphics.Typeface.defaultFromStyle (int style) &mdash; Returns one of the default typeface objects, based on the specified style <br /><br />android.graphics.Typeface.create (Typeface family, int style) &mdash; Create a typeface object that best matches the specified existing typeface and the specified Style. <br /><br />android.hardware.Camera.getParameters () &mdash; Returns the current settings for this Camera service. <br /><br />android.hardware.Camera.getNumberOfCameras () &mdash; Returns the number of physical cameras available on this device. <br /><br />android.hardware.Camera.addCallbackBuffer (byte[] callbackBuffer) &mdash; Adds a pre-allocated buffer to the preview callback buffer queue. <br /><br />android.hardware.Camera.startSmoothZoom (int value) &mdash; Zooms to the requested value smoothly. <br /><br />android.hardware.Camera.open (int cameraId) &mdash; Creates a new Camera object to access a particular hardware camera. <br /><br />"
"android.hardware.Camera.stopPreview ()   Stops capturing and drawing preview frames to the surface, and resets the camera for a future call to startPreview () &mdash; Stops capturing and drawing preview frames to the surface, and resets the camera for a future call to startPreview(). <br /><br />android.hardware.Camera.reconnect () &mdash; Reconnects to the camera service after another process used it. <br /><br />android.hardware.Camera.startPreview () &mdash; Starts capturing and drawing preview frames to the screen. <br /><br />android.hardware.Camera.setPreviewTexture (SurfaceTexture surfaceTexture) &mdash; Sets the SurfaceTexture to be used for live preview. <br /><br />android.hardware.Camera.open () &mdash; Creates a new Camera object to access the first back-facing camera on the device. <br /><br />android.hardware.Camera.lock () &mdash; Re-locks the camera to prevent other processes from accessing it. <br /><br />android.hardware.Camera.release () &mdash; Disconnects and releases the Camera object resources. <br /><br />android.hardware.Camera.setPreviewDisplay (SurfaceHolder holder) &mdash; Sets the Surface to be used for live preview. <br /><br />android.hardware.Camera.cancelAutoFocus () &mdash; Cancels any auto-focus function in progress. <br /><br />android.hardware.Camera.setDisplayOrientation (int degrees) &mdash; Set the clockwise rotation of preview display in degrees. <br /><br />android.hardware.Camera.unlock () &mdash; Unlocks the camera to allow another process to access it. <br /><br />android.hardware.display.DisplayManager.getDisplays () &mdash; Gets all currently valid logical displays. <br /><br />android.hardware.display.DisplayManager.getDisplays (String category) &mdash; Gets all currently valid logical displays of the specified category. <br /><br />android.hardware.display.DisplayManager.getDisplay (int displayId) &mdash; Gets information about a logical display. <br /><br />android.hardware.input.InputManager.getInputDevice (int id) &mdash; Gets information about the input device with the specified id. <br /><br />android.hardware.input.InputManager.getInputDeviceIds () &mdash; Gets the ids of all input devices in the system. <br /><br />android.hardware.SensorManager.getDefaultSensor (int type, boolean wakeUp) &mdash; Return a Sensor with the given type and wakeUp properties. <br /><br />android.hardware.SensorManager.unregisterListener (SensorListener listener)    This method was deprecated in API level 3. This method is deprecated, use unregisterListener (SensorEventListener) &mdash; This method was deprecated in API level 3. This method is deprecated, use unregisterListener(SensorEventListener) instead. <br /><br />android.hardware.SensorManager.registerListener (SensorEventListener listener, Sensor sensor, int samplingPeriodUs, int maxReportLatencyUs) &mdash; Registers a SensorEventListener for the given sensor at the given sampling frequency and the given maximum reporting latency. <br /><br />android.hardware.SensorManager.getDefaultSensor (int type) &mdash; Use this method to get the default sensor for a given type. <br /><br />"
"android.hardware.SensorManager.registerListener (SensorListener listener, int sensors, int rate)    This method was deprecated in API level 3. This method is deprecated, use registerListener (SensorEventListener, Sensor, int) &mdash; This method was deprecated in API level 3. This method is deprecated, use registerListener(SensorEventListener, Sensor, int) instead. <br /><br />android.hardware.SensorManager.unregisterListener (SensorEventListener listener) &mdash; Unregisters a listener for all sensors. <br /><br />android.hardware.SensorManager.registerListener (SensorEventListener listener, Sensor sensor, int samplingPeriodUs, Handler handler) &mdash; Registers a SensorEventListener for the given sensor. <br /><br />android.hardware.SensorManager.unregisterListener (SensorListener listener, int sensors)    This method was deprecated in API level 3. This method is deprecated, use unregisterListener (SensorEventListener, Sensor) &mdash; This method was deprecated in API level 3. This method is deprecated, use unregisterListener(SensorEventListener, Sensor) instead. <br /><br />android.hardware.SensorManager.getOrientation (float[] R, float[] values) &mdash; Computes the device's orientation based on the rotation matrix. <br /><br />android.hardware.SensorManager.getRotationMatrix (float[] R, float[] I, float[] gravity, float[] geomagnetic)    Computes the inclination matrix I as well as the rotation matrix R transforming a vector from the device coordinate system to the world's coordinate system which is defined as a direct orthonormal basis, where:   X is defined as the vector product Y.Z  (It is tangential to the ground at the device's current location and roughly points East) &mdash; Computes the inclination matrix I as well as the rotation matrix R transforming a vector from the device coordinate system to the world's coordinate system which is defined as a direct orthonormal basis, where:   X is defined as the vector product Y.Z (It is tangential to the ground at the device's current location and roughly points East). <br /><br />android.hardware.SensorManager.unregisterListener (SensorEventListener listener, Sensor sensor) &mdash; Unregisters a listener for the sensors with which it is registered. <br /><br />android.hardware.SensorManager.registerListener (SensorEventListener listener, Sensor sensor, int samplingPeriodUs) &mdash; Registers a SensorEventListener for the given sensor at the given sampling frequency. <br /><br />android.hardware.SensorManager.getSensorList (int type) &mdash; Use this method to get the list of available sensors of a certain type. <br /><br />android.location.Address.getAddressLine (int index)   Returns a line of the address numbered by the given index  (starting at 0) &mdash; Returns a line of the address numbered by the given index (starting at 0), or null if no such line is present. <br /><br />android.location.Address.getLocality () &mdash; Returns the locality of the address, for example 'Mountain View', or null if it is unknown. <br /><br />android.location.Address.getMaxAddressLineIndex () &mdash; Returns the largest index currently in use to specify an address line. <br /><br />android.location.Address.getPostalCode () &mdash; Returns the postal code of the address, for example '94110', or null if it is unknown. <br /><br />android.location.Address.getCountryName () &mdash; Returns the localized country name of the address, for example 'Iceland', or null if it is unknown. <br /><br />android.location.Address.getCountryCode () &mdash; Returns the country code of the address, for example 'US', or null if it is unknown. <br /><br />android.location.Address.getAdminArea () &mdash; Returns the administrative area name of the address, for example, 'CA', or null if it is unknown <br /><br />android.location.Criteria.setBearingAccuracy (int accuracy) &mdash; Indicates the desired bearing accuracy. <br /><br />android.location.Criteria.setSpeedRequired (boolean speedRequired) &mdash; Indicates whether the provider must provide speed information. <br /><br />android.location.Criteria.setBearingRequired (boolean bearingRequired) &mdash; Indicates whether the provider must provide bearing information. <br /><br />android.location.Criteria.setVerticalAccuracy (int accuracy)   Indicates the desired vertical accuracy  (altitude) &mdash; Indicates the desired vertical accuracy (altitude). <br /><br />"
"android.location.Criteria.setSpeedAccuracy (int accuracy) &mdash; Indicates the desired speed accuracy. <br /><br />android.location.Criteria.setAltitudeRequired (boolean altitudeRequired) &mdash; Indicates whether the provider must provide altitude information. <br /><br />android.location.Criteria.setHorizontalAccuracy (int accuracy)   Indicates the desired horizontal accuracy  (latitude and longitude) &mdash; Indicates the desired horizontal accuracy (latitude and longitude). <br /><br />android.location.Criteria.setCostAllowed (boolean costAllowed) &mdash; Indicates whether the provider is allowed to incur monetary cost. <br /><br />android.location.Criteria.setAccuracy (int accuracy) &mdash; Indicates the desired accuracy for latitude and longitude. <br /><br />android.location.Criteria.setPowerRequirement (int level) &mdash; Indicates the desired maximum power level. <br /><br />android.location.Geocoder.getFromLocationName (String locationName, int maxResults) &mdash; Returns an array of Addresses that are known to describe the named location, which may be a place name such as 'Dalvik, Iceland', an address such as '1600 Amphitheatre Parkway, Mountain View, CA', an airport code such as 'SFO', etc.. <br /><br />android.location.Geocoder.isPresent () &mdash; Returns true if the Geocoder methods getFromLocation and getFromLocationName are implemented. <br /><br />android.location.Geocoder.getFromLocation (double latitude, double longitude, int maxResults) &mdash; Returns an array of Addresses that are known to describe the area immediately surrounding the given latitude and longitude. <br /><br />android.location.Location.getBearing () &mdash; Get the bearing, in degrees. <br /><br />android.location.Location.distanceTo (Location dest) &mdash; Returns the approximate distance in meters between this location and the given location. <br /><br />android.location.Location.getLongitude () &mdash; Get the longitude, in degrees. <br /><br />android.location.Location.getLatitude () &mdash; Get the latitude, in degrees. <br /><br />android.location.Location.hasAltitude () &mdash; True if this location has an altitude. <br /><br />android.location.Location.getProvider () &mdash; Returns the name of the provider that generated this fix. <br /><br />android.location.Location.convert (String coordinate) &mdash; Converts a String in one of the formats described by FORMAT_DEGREES, FORMAT_MINUTES, or FORMAT_SECONDS into a double. <br /><br />android.location.Location.setLatitude (double latitude) &mdash; Set the latitude, in degrees. <br /><br />android.location.Location.hasSpeed () &mdash; True if this location has a speed. <br /><br />android.location.Location.hasAccuracy () &mdash; True if this location has an accuracy. <br /><br />android.location.Location.setProvider (String provider) &mdash; Sets the name of the provider that generated this fix. <br /><br />"
"android.location.Location.getAccuracy () &mdash; Get the estimated accuracy of this location, in meters. <br /><br />android.location.Location.setLongitude (double longitude) &mdash; Set the longitude, in degrees. <br /><br />android.location.Location.convert (double coordinate, int outputType) &mdash; Converts a coordinate to a String representation. <br /><br />android.location.Location.getAltitude () &mdash; Get the altitude if available, in meters above the WGS 84 reference ellipsoid. <br /><br />android.location.Location.setAccuracy (float accuracy) &mdash; Set the estimated accuracy of this location, meters. <br /><br />android.location.Location.hasBearing () &mdash; True if this location has a bearing. <br /><br />android.location.Location.getSpeed () &mdash; Get the speed if it is available, in meters/second over ground. <br /><br />android.location.Location.getTime () &mdash; Return the UTC time of this fix, in milliseconds since January 1, 1970. <br /><br />android.location.Location.distanceBetween (double startLatitude, double startLongitude, double endLatitude, double endLongitude, float[] results) &mdash; Computes the approximate distance in meters between two locations, and optionally the initial and final bearings of the shortest path between them. <br /><br />android.location.Location.setTime (long time) &mdash; Set the UTC time of this fix, in milliseconds since January 1, 1970. <br /><br />android.location.LocationListener.onLocationChanged (Location location) &mdash; Called when the location has changed. <br /><br />android.location.LocationManager.getAllProviders () &mdash; Returns a list of the names of all known location providers. <br /><br />android.location.LocationManager.requestSingleUpdate (String provider, LocationListener listener, Looper looper) &mdash; Register for a single location update using the named provider and a callback. <br /><br />android.location.LocationManager.removeUpdates (PendingIntent intent) &mdash; Removes all location updates for the specified pending intent. <br /><br />android.location.LocationManager.requestLocationUpdates (String provider, long minTime, float minDistance, LocationListener listener) &mdash; Register for location updates using the named provider, and a pending intent. <br /><br />android.location.LocationManager.requestLocationUpdates (long minTime, float minDistance, Criteria criteria, LocationListener listener, Looper looper) &mdash; Register for location updates using a Criteria, and a callback on the specified looper thread. <br /><br />android.location.LocationManager.requestSingleUpdate (String provider, PendingIntent intent) &mdash; Register for a single location update using a named provider and pending intent. <br /><br />android.location.LocationManager.getProvider (String name) &mdash; Returns the information associated with the location provider of the given name, or null if no provider exists by that name. <br /><br />android.location.LocationManager.requestLocationUpdates (String provider, long minTime, float minDistance, LocationListener listener, Looper looper) &mdash; Register for location updates using the named provider, and a callback on the specified looper thread. <br /><br />android.location.LocationManager.requestSingleUpdate (Criteria criteria, LocationListener listener, Looper looper) &mdash; Register for a single location update using a Criteria and a callback. <br /><br />"
"android.location.LocationManager.requestSingleUpdate (Criteria criteria, PendingIntent intent) &mdash; Register for a single location update using a Criteria and pending intent. <br /><br />android.location.LocationManager.removeUpdates (LocationListener listener) &mdash; Removes all location updates for the specified LocationListener. <br /><br />android.location.LocationManager.getProviders (boolean enabledOnly) &mdash; Returns a list of the names of location providers. <br /><br />android.location.LocationManager.getLastKnownLocation (String provider) &mdash; Returns a Location indicating the data from the last known location fix obtained from the given provider. <br /><br />android.location.LocationManager.getBestProvider (Criteria criteria, boolean enabledOnly) &mdash; Returns the name of the provider that best meets the given criteria. <br /><br />android.location.LocationManager.requestLocationUpdates (long minTime, float minDistance, Criteria criteria, PendingIntent intent) &mdash; Register for location updates using a Criteria and pending intent. <br /><br />android.location.LocationManager.getProviders (Criteria criteria, boolean enabledOnly) &mdash; Returns a list of the names of LocationProviders that satisfy the given criteria, or null if none do. <br /><br />android.location.LocationManager.isProviderEnabled (String provider) &mdash; Returns the current enabled/disabled status of the given provider. <br /><br />android.location.LocationProvider.getAccuracy () &mdash; Returns a constant describing horizontal accuracy of this provider. <br /><br />android.media.AudioAttributes.getFlags () &mdash; Return the flags. <br /><br />android.media.AudioAttributes.getUsage () &mdash; Return the usage. <br /><br />android.media.AudioManager.startBluetoothSco () &mdash; Start bluetooth SCO audio connection. <br /><br />android.media.AudioManager.setRouting (int mode, int routes, int mask)    This method was deprecated in API level 4. Do not set audio routing directly, use setSpeakerphoneOn (), setBluetoothScoOn () &mdash; This method was deprecated in API level 4. Do not set audio routing directly, use setSpeakerphoneOn(), setBluetoothScoOn() methods instead. <br /><br />android.media.AudioManager.getMode () &mdash; Returns the current audio mode. <br /><br />android.media.AudioManager.getStreamVolume (int streamType) &mdash; Returns the current volume index for a particular stream. <br /><br />android.media.AudioManager.unregisterMediaButtonEventReceiver (ComponentName eventReceiver) &mdash; This method was deprecated in API level 21. Use MediaSession instead. <br /><br />android.media.AudioManager.setStreamMute (int streamType, boolean state) &mdash; Mute or unmute an audio stream. <br /><br />android.media.AudioManager.getVibrateSetting (int vibrateType)    This method was deprecated in API level 16. Applications should maintain their own vibrate policy based on current ringer mode that can be queried via getRingerMode () &mdash; This method was deprecated in API level 16. Applications should maintain their own vibrate policy based on current ringer mode that can be queried via getRingerMode(). <br /><br />android.media.AudioManager.registerMediaButtonEventReceiver (PendingIntent eventReceiver)    This method was deprecated in API level 21. Use setMediaButtonReceiver (PendingIntent) &mdash; This method was deprecated in API level 21. Use setMediaButtonReceiver(PendingIntent) instead. <br /><br />android.media.AudioManager.isMusicActive () &mdash; Checks whether any music is active. <br /><br />"
"android.media.AudioManager.isBluetoothScoOn () &mdash; Checks whether communications use Bluetooth SCO. <br /><br />android.media.AudioManager.setStreamVolume (int streamType, int index, int flags) &mdash; Sets the volume index for a particular stream. <br /><br />android.media.AudioManager.getStreamMaxVolume (int streamType) &mdash; Returns the maximum volume index for a particular stream. <br /><br />android.media.AudioManager.adjustStreamVolume (int streamType, int direction, int flags) &mdash; Adjusts the volume of a particular stream by one step in a direction. <br /><br />android.media.AudioManager.getRingerMode () &mdash; Returns the current ringtone mode. <br /><br />android.media.AudioManager.isSpeakerphoneOn () &mdash; Checks whether the speakerphone is on or off. <br /><br />android.media.AudioManager.getRouting (int mode)    This method was deprecated in API level 4. Do not query audio routing directly, use isSpeakerphoneOn (), isBluetoothScoOn (), isBluetoothA2dpOn () and isWiredHeadsetOn () &mdash; This method was deprecated in API level 4. Do not query audio routing directly, use isSpeakerphoneOn(), isBluetoothScoOn(), isBluetoothA2dpOn() and isWiredHeadsetOn() methods instead. <br /><br />android.media.AudioManager.setSpeakerphoneOn (boolean on) &mdash; Sets the speakerphone on or off. <br /><br />android.media.AudioManager.setRingerMode (int ringerMode) &mdash; Sets the ringer mode. <br /><br />android.media.AudioManager.stopBluetoothSco () &mdash; Stop bluetooth SCO audio connection. <br /><br />android.media.AudioRecord.startRecording (MediaSyncEvent syncEvent) &mdash; Starts recording from the AudioRecord instance when the specified synchronization event occurs on the specified audio session. <br /><br />android.media.AudioRecord.startRecording () &mdash; Starts recording from the AudioRecord instance. <br /><br />android.media.AudioRecord.getState () &mdash; Returns the state of the AudioRecord instance. <br /><br />android.media.AudioRecord.read (byte[] audioData, int offsetInBytes, int sizeInBytes) &mdash; Reads audio data from the audio hardware for recording into a buffer. <br /><br />android.media.AudioRecord.release () &mdash; Releases the native AudioRecord resources. <br /><br />android.media.AudioRecord.read (ByteBuffer audioBuffer, int sizeInBytes) &mdash; Reads audio data from the audio hardware for recording into a direct buffer. <br /><br />android.media.AudioRecord.getMinBufferSize (int sampleRateInHz, int channelConfig, int audioFormat) &mdash; Returns the minimum buffer size required for the successful creation of an AudioRecord object, in byte units. <br /><br />android.media.AudioRecord.stop () &mdash; Stops recording. <br /><br />android.media.AudioRecord.getRecordingState () &mdash; Returns the recording state of the AudioRecord instance. <br /><br />android.media.AudioRecord.setPositionNotificationPeriod (int periodInFrames)   Sets the period at which the listener is called, if set with setRecordPositionUpdateListener (OnRecordPositionUpdateListener) or setRecordPositionUpdateListener (OnRecordPositionUpdateListener, Handler) &mdash; Sets the period at which the listener is called, if set with setRecordPositionUpdateListener(OnRecordPositionUpdateListener) or setRecordPositionUpdateListener(OnRecordPositionUpdateListener, Handler). <br /><br />"
"android.media.AudioTrack.write (ByteBuffer audioData, int sizeInBytes, int writeMode)   Writes the audio data to the audio sink for playback  (streaming mode), or copies audio data for later playback  (static buffer mode) &mdash; Writes the audio data to the audio sink for playback (streaming mode), or copies audio data for later playback (static buffer mode). <br /><br />android.media.AudioTrack.getNativeOutputSampleRate (int streamType) &mdash; Returns the output sample rate in Hz for the specified stream type. <br /><br />android.media.AudioTrack.getMinBufferSize (int sampleRateInHz, int channelConfig, int audioFormat) &mdash; Returns the minimum buffer size required for the successful creation of an AudioTrack object to be created in the MODE_STREAM mode. <br /><br />android.media.AudioTrack.stop () &mdash; Stops playing the audio data. <br /><br />android.media.AudioTrack.getPlayState () &mdash; Returns the playback state of the AudioTrack instance. <br /><br />android.media.AudioTrack.play () &mdash; Starts playing an AudioTrack. <br /><br />android.media.AudioTrack.setNotificationMarkerPosition (int markerInFrames) &mdash; Sets the position of the notification marker. <br /><br />android.media.AudioTrack.getState () &mdash; Returns the state of the AudioTrack instance. <br /><br />android.media.AudioTrack.flush () &mdash; Flushes the audio data currently queued for playback. <br /><br />android.media.AudioTrack.release () &mdash; Releases the native AudioTrack resources. <br /><br />android.media.AudioTrack.getPlaybackHeadPosition () &mdash; Returns the playback head position expressed in frames. <br /><br />android.media.CamcorderProfile.get (int cameraId, int quality) &mdash; Returns the camcorder profile for the given camera at the given quality level. <br /><br />android.media.CamcorderProfile.hasProfile (int quality) &mdash; Returns true if camcorder profile exists for the first back-facing camera at the given quality level. <br /><br />android.media.CamcorderProfile.hasProfile (int cameraId, int quality) &mdash; Returns true if camcorder profile exists for the given camera at the given quality level. <br /><br />android.media.CamcorderProfile.get (int quality) &mdash; Returns the camcorder profile for the first back-facing camera on the device at the given quality level. <br /><br />android.media.CameraProfile.getJpegEncodingQualityParameter (int quality)   Returns a pre-defined still image capture  (jpeg) &mdash; Returns a pre-defined still image capture (jpeg) quality level used for the given quality level in the Camera application for the first back-facing camera on the device. <br /><br />android.media.CameraProfile.getJpegEncodingQualityParameter (int cameraId, int quality)   Returns a pre-defined still image capture  (jpeg) &mdash; Returns a pre-defined still image capture (jpeg) quality level used for the given quality level in the Camera application for the specified camera. <br /><br />android.media.ExifInterface.setAttribute (String tag, String value) &mdash; Set the value of the specified tag. <br /><br />android.media.ExifInterface.getThumbnail () &mdash; Returns the thumbnail inside the JPEG file, or null if there is no thumbnail. <br /><br />android.media.ExifInterface.saveAttributes () &mdash; Save the tag data into the JPEG file. <br /><br />"
"android.media.ExifInterface.hasThumbnail () &mdash; Returns true if the JPEG file has a thumbnail. <br /><br />android.media.ExifInterface.getLatLong (float[] output) &mdash; Stores the latitude and longitude value in a float array. <br /><br />android.media.ExifInterface.getAttribute (String tag) &mdash; Returns the value of the specified tag or null if there is no such tag in the JPEG file. <br /><br />android.media.ExifInterface.getAttributeInt (String tag, int defaultValue) &mdash; Returns the integer value of the specified tag. <br /><br />android.media.MediaCodec.getOutputFormat (int index) &mdash; Returns the output format for a specific output buffer. <br /><br />android.media.MediaCodec.getInputBuffers ()    This method was deprecated in API level 21. Use the new getInputBuffer (int) method instead each time an input buffer is dequeued. Note:As of API 21, dequeued input buffers are automatically &mdash; This method was deprecated in API level 21. Use the new getInputBuffer(int) method instead each time an input buffer is dequeued. Note:As of API 21, dequeued input buffers are automatically cleared. <br /><br />android.media.MediaCodec.stop ()   Finish the decode/encode session, note that the codec instance remains active and ready to be start () &mdash; Finish the decode/encode session, note that the codec instance remains active and ready to be start()ed again. <br /><br />android.media.MediaCodec.dequeueInputBuffer (long timeoutUs) &mdash; Returns the index of an input buffer to be filled with valid data or -1 if no such buffer is currently available. <br /><br />android.media.MediaCodec.queueInputBuffer (int index, int offset, int size, long presentationTimeUs, int flags) &mdash; After filling a range of the input buffer at the specified index submit it to the component. <br /><br />android.media.MediaCodec.configure (MediaFormat format, Surface surface, MediaCrypto crypto, int flags) &mdash; Configures a component. <br /><br />android.media.MediaCodec.createDecoderByType (String type) &mdash; Instantiate a decoder supporting input data of the given mime type. <br /><br />android.media.MediaCodec.createEncoderByType (String type) &mdash; Instantiate an encoder supporting output data of the given mime type. <br /><br />android.media.MediaCodec.getOutputBuffers ()    This method was deprecated in API level 21. Use the new getOutputBuffer (int) &mdash; This method was deprecated in API level 21. Use the new getOutputBuffer(int) method instead each time an output buffer is dequeued. This method is not supported if codec is configured in asynchronous mode. Note:As of API 21, the position and limit of output buffers that are dequeued will be set to the valid data range. <br /><br />android.media.MediaCodec.getOutputFormat () &mdash; Call this after dequeueOutputBuffer signals a format change by returning INFO_OUTPUT_FORMAT_CHANGED. <br /><br />android.media.MediaCodec.start () &mdash; After successfully configuring the component, call start. <br /><br />android.media.MediaCodec.signalEndOfInputStream () &mdash; Signals end-of-stream on input. <br /><br />android.media.MediaCodec.flush ()   Flush both input and output ports of the component, all indices previously returned in calls to dequeueInputBuffer (long) and dequeueOutputBuffer (MediaCodec.BufferInfo, long) &mdash; Flush both input and output ports of the component, all indices previously returned in calls to dequeueInputBuffer(long) and dequeueOutputBuffer(MediaCodec.BufferInfo, long) become invalid. <br /><br />android.media.MediaCodec.release () &mdash; Make sure you call this when you're done to free up any opened component instance instead of relying on the garbage collector to do this for you at some point in the future. <br /><br />android.media.MediaCodec.releaseOutputBuffer (int index, long renderTimestampNs) &mdash; If you are done with a buffer, use this call to update its surface timestamp and return it to the codec to render it on the output surface. <br /><br />android.media.MediaCodec.createInputSurface () &mdash; Requests a Surface to use as the input to an encoder, in place of input buffers. <br /><br />"
"android.media.MediaCodec.releaseOutputBuffer (int index, boolean render) &mdash; If you are done with a buffer, use this call to return the buffer to the codec. <br /><br />android.media.MediaCodecList.getCodecInfoAt (int index)    This method was deprecated in API level 21. Use getCodecInfos () &mdash; This method was deprecated in API level 21. Use getCodecInfos() instead. <br /><br />android.media.MediaDescription.getExtras () &mdash; Returns any extras that were added to the description. <br /><br />android.media.MediaDescription.getDescription () &mdash; Returns a description suitable for display or null. <br /><br />android.media.MediaDescription.getIconBitmap () &mdash; Returns a bitmap icon suitable for display or null. <br /><br />android.media.MediaDescription.getMediaId () &mdash; Returns the media id or null. <br /><br />android.media.MediaDescription.getTitle () &mdash; Returns a title suitable for display or null. <br /><br />android.media.MediaDescription.getSubtitle () &mdash; Returns a subtitle suitable for display or null. <br /><br />android.media.MediaDescription.getIconUri () &mdash; Returns a Uri for an icon suitable for display or null. <br /><br />android.media.MediaExtractor.readSampleData (ByteBuffer byteBuf, int offset) &mdash; Retrieve the current encoded sample and store it in the byte buffer starting at the given offset. <br /><br />android.media.MediaExtractor.setDataSource (String path)   Sets the data source  (file-path or http URL) &mdash; Sets the data source (file-path or http URL) to use. <br /><br />android.media.MediaExtractor.unselectTrack (int index)   Subsequent calls to readSampleData (ByteBuffer, int), getSampleTrackIndex () and getSampleTime () &mdash; Subsequent calls to readSampleData(ByteBuffer, int), getSampleTrackIndex() and getSampleTime() only retrieve information for the subset of tracks selected. <br /><br />android.media.MediaExtractor.seekTo (long timeUs, int mode) &mdash; All selected tracks seek near the requested time according to the specified mode. <br /><br />android.media.MediaExtractor.setDataSource (Context context, Uri uri, Map< String,  String> headers) &mdash; Sets the data source as a content Uri. <br /><br />android.media.MediaExtractor.getSampleFlags () &mdash; Returns the current sample's flags. <br /><br />android.media.MediaExtractor.release () &mdash; Make sure you call this when you're done to free up any resources instead of relying on the garbage collector to do this for you at some point in the future. <br /><br />android.media.MediaExtractor.setDataSource (FileDescriptor fd)   Sets the data source  (FileDescriptor) &mdash; Sets the data source (FileDescriptor) to use. <br /><br />android.media.MediaExtractor.getTrackFormat (int index) &mdash; Get the track format at the specified index. <br /><br />android.media.MediaExtractor.getSampleTime () &mdash; Returns the current sample's presentation time in microseconds. <br /><br />android.media.MediaExtractor.advance () &mdash; Advance to the next sample. <br /><br />"
"android.media.MediaExtractor.getTrackCount () &mdash; Count the number of tracks found in the data source. <br /><br />android.media.MediaFormat.createVideoFormat (String mime, int width, int height) &mdash; Creates a minimal video format. <br /><br />android.media.MediaFormat.getByteBuffer (String name) &mdash; Returns the value of a ByteBuffer key. <br /><br />android.media.MediaFormat.getLong (String name) &mdash; Returns the value of a long key. <br /><br />android.media.MediaFormat.getString (String name) &mdash; Returns the value of a string key. <br /><br />android.media.MediaFormat.setInteger (String name, int value) &mdash; Sets the value of an integer key. <br /><br />android.media.MediaFormat.getInteger (String name) &mdash; Returns the value of an integer key. <br /><br />android.media.MediaMetadata.getText (String key) &mdash; Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key. <br /><br />android.media.MediaMetadata.getRating (String key) &mdash; Returns a Rating for the given key or null if no rating exists for the given key. <br /><br />android.media.MediaMetadata.keySet () &mdash; Returns a Set containing the Strings used as keys in this metadata. <br /><br />android.media.MediaMetadata.getLong (String key) &mdash; Returns the value associated with the given key, or 0L if no long exists for the given key. <br /><br />android.media.MediaMetadata.getBitmap (String key) &mdash; Returns a Bitmap for the given key or null if no bitmap exists for the given key. <br /><br />android.media.MediaMetadataRetriever.setDataSource (String uri, Map< String,  String> headers)   Sets the data source  (URI) &mdash; Sets the data source (URI) to use. <br /><br />android.media.MediaMetadataRetriever.getFrameAtTime (long timeUs)   Call this method after setDataSource () &mdash; Call this method after setDataSource(). <br /><br />android.media.MediaMetadataRetriever.setDataSource (String path)   Sets the data source  (file pathname) &mdash; Sets the data source (file pathname) to use. <br /><br />android.media.MediaMetadataRetriever.release () &mdash; Call it when one is done with the object. <br /><br />android.media.MediaMuxer.addTrack (MediaFormat format) &mdash; Adds a track with the specified format. <br /><br />android.media.MediaMuxer.stop () &mdash; Stops the muxer. <br /><br />android.media.MediaMuxer.start () &mdash; Starts the muxer. <br /><br />android.media.MediaPlayer.setAudioStreamType (int streamtype) &mdash; Sets the audio stream type for this MediaPlayer. <br /><br />"
"android.media.MediaPlayer.create (Context context, int resid, AudioAttributes audioAttributes, int audioSessionId)   Same factory method as create (Context, int) &mdash; Same factory method as create(Context, int) but that lets you specify the audio attributes and session ID to be used by the new MediaPlayer instance. <br /><br />android.media.MediaPlayer.setSurface (Surface surface) &mdash; Sets the Surface to be used as the sink for the video portion of the media. <br /><br />android.media.MediaPlayer.getVideoWidth () &mdash; Returns the width of the video. <br /><br />android.media.MediaPlayer.prepare () &mdash; Prepares the player for playback, synchronously. <br /><br />android.media.MediaPlayer.setLooping (boolean looping) &mdash; Sets the player to be looping or non-looping. <br /><br />android.media.MediaPlayer.setScreenOnWhilePlaying (boolean screenOn) &mdash; Control whether we should use the attached SurfaceHolder to keep the screen on while video playback is occurring. <br /><br />android.media.MediaPlayer.seekTo (int msec) &mdash; Seeks to specified time position. <br /><br />android.media.MediaPlayer.create (Context context, Uri uri, SurfaceHolder holder, AudioAttributes audioAttributes, int audioSessionId)   Same factory method as create (Context, Uri, SurfaceHolder) &mdash; Same factory method as create(Context, Uri, SurfaceHolder) but that lets you specify the audio attributes and session ID to be used by the new MediaPlayer instance. <br /><br />android.media.MediaPlayer.setDataSource (String path)   Sets the data source  (file-path or http/rtsp URL) &mdash; Sets the data source (file-path or http/rtsp URL) to use. <br /><br />android.media.MediaPlayer.getCurrentPosition () &mdash; Gets the current playback position. <br /><br />android.media.MediaPlayer.getVideoHeight () &mdash; Returns the height of the video. <br /><br />android.media.MediaPlayer.setVolume (float leftVolume, float rightVolume) &mdash; Sets the volume on this player. <br /><br />android.media.MediaPlayer.getAudioSessionId () &mdash; Returns the audio session ID. <br /><br />android.media.MediaPlayer.create (Context context, int resid) &mdash; Convenience method to create a MediaPlayer for a given resource id. <br /><br />android.media.MediaPlayer.isPlaying () &mdash; Checks whether the MediaPlayer is playing. <br /><br />android.media.MediaPlayer.stop () &mdash; Stops playback after playback has been stopped or paused. <br /><br />android.media.MediaPlayer.getDuration () &mdash; Gets the duration of the file. <br /><br />android.media.MediaPlayer.prepareAsync () &mdash; Prepares the player for playback, asynchronously. <br /><br />android.media.MediaPlayer.create (Context context, Uri uri, SurfaceHolder holder) &mdash; Convenience method to create a MediaPlayer for a given Uri. <br /><br />android.media.MediaPlayer.start () &mdash; Starts or resumes playback. <br /><br />"
"android.media.MediaPlayer.release () &mdash; Releases resources associated with this MediaPlayer object. <br /><br />android.media.MediaPlayer.setDisplay (SurfaceHolder sh) &mdash; Sets the SurfaceHolder to use for displaying the video portion of the media. <br /><br />android.media.MediaPlayer.reset () &mdash; Resets the MediaPlayer to its uninitialized state. <br /><br />android.media.MediaPlayer.pause () &mdash; Pauses playback. <br /><br />android.media.MediaRecorder.setOrientationHint (int degrees) &mdash; Sets the orientation hint for output video playback. <br /><br />android.media.MediaRecorder.start ()   Begins capturing and encoding data to the file specified with setOutputFile () &mdash; Begins capturing and encoding data to the file specified with setOutputFile(). <br /><br />android.media.MediaRecorder.setPreviewDisplay (Surface sv)   Sets a Surface to show a preview of recorded media  (video) &mdash; Sets a Surface to show a preview of recorded media (video). <br /><br />android.media.MediaRecorder.setProfile (CamcorderProfile profile) &mdash; Uses the settings from a CamcorderProfile object for recording. <br /><br />android.media.MediaRecorder.setCamera (Camera c)    This method was deprecated in API level 21. Use getSurface () &mdash; This method was deprecated in API level 21. Use getSurface() and the android.hardware.camera2 API instead. <br /><br />android.media.MediaRecorder.prepare () &mdash; Prepares the recorder to begin capturing and encoding data. <br /><br />android.media.MediaRecorder.setOutputFormat (int output_format) &mdash; Sets the format of the output file produced during recording. <br /><br />android.media.MediaRecorder.release () &mdash; Releases resources associated with this MediaRecorder object. <br /><br />android.media.MediaRecorder.setVideoSource (int video_source) &mdash; Sets the video source to be used for recording. <br /><br />android.media.MediaRecorder.setAudioEncoder (int audio_encoder) &mdash; Sets the audio encoder to be used for recording. <br /><br />android.media.MediaRecorder.setOutputFile (String path) &mdash; Sets the path of the output file to be produced. <br /><br />android.media.MediaRecorder.setOutputFile (FileDescriptor fd) &mdash; Pass in the file descriptor of the file to be written. <br /><br />android.media.MediaRecorder.setAudioSource (int audio_source) &mdash; Sets the audio source to be used for recording. <br /><br />android.media.MediaRecorder.reset () &mdash; Restarts the MediaRecorder to its idle state. <br /><br />android.media.MediaRecorder.getMaxAmplitude () &mdash; Returns the maximum absolute amplitude that was sampled since the last call to this method. <br /><br />android.media.MediaRouter.getDefaultRoute () &mdash; Gets the default route for playing media content on the system. <br /><br />"
"android.media.MediaRouter.getRouteCount () &mdash; Return the number of routes currently known to this MediaRouter. <br /><br />android.media.MediaRouter.getCategoryAt (int index) &mdash; Return the category at the given index. <br /><br />android.media.MediaRouter.getSelectedRoute (int type) &mdash; Return the currently selected route for any of the given types <br /><br />android.media.MediaRouter.createRouteCategory (int nameResId, boolean isGroupable) &mdash; Create a new route category. <br /><br />android.media.MediaRouter.getRouteAt (int index) &mdash; Return the route at the specified index. <br /><br />android.media.MediaRouter.getCategoryCount () &mdash; Return the number of categories currently represented by routes known to this MediaRouter. <br /><br />android.media.MediaScannerConnection.connect () &mdash; Initiates a connection to the media scanner service. <br /><br />android.media.MediaScannerConnection.isConnected () &mdash; Returns whether we are connected to the media scanner service <br /><br />android.media.MediaScannerConnection.scanFile (String path, String mimeType) &mdash; Requests the media scanner to scan a file. <br /><br />android.media.MediaScannerConnection.scanFile (Context context, String[] paths, String[] mimeTypes, MediaScannerConnection.OnScanCompletedListener callback)   Convenience for constructing a MediaScannerConnection, calling connect () on it, and calling scanFile (Context, String[], String[], MediaScannerConnection.OnScanCompletedListener) &mdash; Convenience for constructing a MediaScannerConnection, calling connect() on it, and calling scanFile(Context, String[], String[], MediaScannerConnection.OnScanCompletedListener) with the given path and mimeType when the connection is established. <br /><br />android.media.MediaScannerConnection.disconnect () &mdash; Releases the connection to the media scanner service. <br /><br />android.media.Rating.getPercentRating () &mdash; Return the percentage-based rating value. <br /><br />android.media.Rating.hasHeart () &mdash; Return whether the rating is 'heart selected'. <br /><br />android.media.Rating.getStarRating () &mdash; Return the star-based rating value. <br /><br />android.media.Rating.newHeartRating (boolean hasHeart) &mdash; Return a Rating instance with a heart-based rating. <br /><br />android.media.Rating.newStarRating (int starRatingStyle, float starRating) &mdash; Return a Rating instance with a star-based rating. <br /><br />android.media.Rating.isThumbUp () &mdash; Return whether the rating is 'thumb up'. <br /><br />android.media.Rating.newPercentageRating (float percent) &mdash; Return a Rating instance with a percentage-based rating. <br /><br />android.media.Rating.isRated () &mdash; Return whether there is a rating value available. <br /><br />android.media.Rating.newUnratedRating (int ratingStyle) &mdash; Return a Rating instance with no rating. <br /><br />"
"android.media.Rating.newThumbRating (boolean thumbIsUp) &mdash; Return a Rating instance with a thumb-based rating. <br /><br />android.media.Rating.getRatingStyle () &mdash; Return the rating style. <br /><br />android.media.RemoteControlClient.editMetadata (boolean startEmpty) &mdash; Creates a RemoteControlClient.MetadataEditor. <br /><br />android.media.RemoteControlClient.setPlaybackState (int state) &mdash; Sets the current playback state. <br /><br />android.media.RemoteControlClient.setPlaybackState (int state, long timeInMs, float playbackSpeed) &mdash; Sets the current playback state and the matching media position for the current playback speed. <br /><br />android.media.RemoteControlClient.setTransportControlFlags (int transportControlFlags) &mdash; Sets the flags for the media transport control buttons that this client supports. <br /><br />android.media.Ringtone.isPlaying () &mdash; Whether this ringtone is currently playing. <br /><br />android.media.Ringtone.getTitle (Context context) &mdash; Returns a human-presentable title for ringtone. <br /><br />android.media.Ringtone.play () &mdash; Plays the ringtone. <br /><br />android.media.RingtoneManager.isDefault (Uri ringtoneUri) &mdash; Returns whether the given Uri is one of the default ringtones. <br /><br />android.media.RingtoneManager.setActualDefaultRingtoneUri (Context context, int type, Uri ringtoneUri) &mdash; Sets the Uri of the default sound for a given sound type. <br /><br />android.media.RingtoneManager.getCursor () &mdash; Returns a Cursor of all the ringtones available. <br /><br />android.media.RingtoneManager.getActualDefaultRingtoneUri (Context context, int type) &mdash; Gets the current default sound's Uri. <br /><br />android.media.RingtoneManager.setType (int type)   Sets which type (s) &mdash; Sets which type(s) of ringtones will be listed by this. <br /><br />android.media.RingtoneManager.getRingtone (int position) &mdash; Gets a Ringtone for the ringtone at the given position in the Cursor. <br /><br />android.media.RingtoneManager.getRingtone (Context context, Uri ringtoneUri) &mdash; Returns a Ringtone for a given sound URI. <br /><br />android.media.RingtoneManager.getDefaultUri (int type) &mdash; Returns the Uri for the default ringtone of a particular type. <br /><br />android.media.session.MediaController.getTransportControls () &mdash; Get a MediaController.TransportControls instance to send transport actions to the associated session. <br /><br />android.media.session.MediaController.sendCommand (String command, Bundle args, ResultReceiver cb) &mdash; Sends a generic command to the session. <br /><br />android.media.session.MediaController.dispatchMediaButtonEvent (KeyEvent keyEvent) &mdash; Send the specified media button event to the session. <br /><br />"
"android.media.session.MediaController.getMetadata () &mdash; Get the current metadata for this session. <br /><br />android.media.session.MediaController.getRatingType () &mdash; Get the rating type supported by the session. <br /><br />android.media.session.MediaController.getPlaybackState () &mdash; Get the current playback state for this session. <br /><br />android.media.session.MediaController.getPlaybackInfo () &mdash; Get the current playback info for this session. <br /><br />android.media.session.MediaSession.setPlaybackToLocal (AudioAttributes attributes) &mdash; Set the attributes for this session's audio. <br /><br />android.media.session.MediaSession.getSessionToken () &mdash; Retrieve a token object that can be used by apps to create a MediaController for interacting with this session. <br /><br />android.media.session.MediaSession.setPlaybackToRemote (VolumeProvider volumeProvider) &mdash; Configure this session to use remote volume handling. <br /><br />android.media.session.MediaSession.setMetadata (MediaMetadata metadata) &mdash; Update the current metadata. <br /><br />android.media.session.MediaSession.release () &mdash; This must be called when an app has finished performing playback. <br /><br />android.media.session.MediaSession.sendSessionEvent (String event, Bundle extras) &mdash; Send a proprietary event to all MediaControllers listening to this Session. <br /><br />android.media.session.MediaSession.setFlags (int flags) &mdash; Set any flags for the session. <br /><br />android.media.session.MediaSession.isActive () &mdash; Get the current active state of this session. <br /><br />android.media.session.MediaSession.setActive (boolean active) &mdash; Set if this session is currently active and ready to receive commands. <br /><br />android.media.session.MediaSession.setPlaybackState (PlaybackState state) &mdash; Update the current playback state. <br /><br />android.media.session.PlaybackState.getLastPositionUpdateTime () &mdash; Get the elapsed real time at which position was last updated. <br /><br />android.media.session.PlaybackState.getState () &mdash; Get the current state of playback. <br /><br />android.media.session.PlaybackState.getErrorMessage () &mdash; Get a user readable error message. <br /><br />android.media.session.PlaybackState.getActions () &mdash; Get the current actions available on this session. <br /><br />android.media.session.PlaybackState.getPlaybackSpeed () &mdash; Get the current playback speed as a multiple of normal playback. <br /><br />android.media.session.PlaybackState.getBufferedPosition () &mdash; Get the current buffered position in ms. <br /><br />"
"android.media.session.PlaybackState.getPosition () &mdash; Get the current playback position in ms. <br /><br />android.media.SoundPool.stop (int streamID) &mdash; Stop a playback stream. <br /><br />android.media.SoundPool.load (AssetFileDescriptor afd, int priority) &mdash; Load the sound from an asset file descriptor. <br /><br />android.media.SoundPool.pause (int streamID) &mdash; Pause a playback stream. <br /><br />android.media.SoundPool.setRate (int streamID, float rate) &mdash; Change playback rate. <br /><br />android.media.SoundPool.load (Context context, int resId, int priority) &mdash; Load the sound from the specified APK resource. <br /><br />android.media.SoundPool.load (FileDescriptor fd, long offset, long length, int priority) &mdash; Load the sound from a FileDescriptor. <br /><br />android.media.SoundPool.release () &mdash; Release the SoundPool resources. <br /><br />android.media.SoundPool.unload (int soundID) &mdash; Unload a sound from a sound ID. <br /><br />android.media.SoundPool.setVolume (int streamID, float leftVolume, float rightVolume) &mdash; Set stream volume. <br /><br />android.media.SoundPool.play (int soundID, float leftVolume, float rightVolume, int priority, int loop, float rate) &mdash; Play a sound from a sound ID. <br /><br />android.media.SoundPool.autoResume () &mdash; Resume all previously active streams. <br /><br />android.media.SoundPool.autoPause () &mdash; Pause all active streams. <br /><br />android.media.SoundPool.resume (int streamID) &mdash; Resume a playback stream. <br /><br />android.media.SoundPool.load (String path, int priority) &mdash; Load the sound from the specified path. <br /><br />android.media.ThumbnailUtils.createVideoThumbnail (String filePath, int kind) &mdash; Create a video thumbnail for a video. <br /><br />android.media.ThumbnailUtils.extractThumbnail (Bitmap source, int width, int height, int options) &mdash; Creates a centered bitmap of the desired size. <br /><br />android.media.VolumeProvider.setCurrentVolume (int currentVolume) &mdash; Notify the system that the current volume has been changed. <br /><br />android.net.ConnectivityManager.getActiveNetworkInfo () &mdash; Returns details about the currently active default data network. <br /><br />android.net.ConnectivityManager.getAllNetworkInfo () &mdash; Returns connection status information about all network types supported by the device. <br /><br />"
"android.net.ConnectivityManager.isActiveNetworkMetered () &mdash; Returns if the currently active data network is metered. <br /><br />android.net.ConnectivityManager.getNetworkInfo (Network network) &mdash; Returns connection status information about a particular Network. <br /><br />android.net.ConnectivityManager.getBackgroundDataSetting ()    This method was deprecated in API level 14. As of ICE_CREAM_SANDWICH, availability of background data depends on several combined factors, and this method will always return true. Instead, when background data is unavailable, getActiveNetworkInfo () &mdash; This method was deprecated in API level 14. As of ICE_CREAM_SANDWICH, availability of background data depends on several combined factors, and this method will always return true. Instead, when background data is unavailable, getActiveNetworkInfo() will now appear disconnected. <br /><br />android.net.ConnectivityManager.getNetworkInfo (int networkType) &mdash; Returns connection status information about a particular network type. <br /><br />android.net.http.AndroidHttpClient.getConnectionManager () &mdash; Obtains the connection manager used by this client. <br /><br />android.net.http.AndroidHttpClient.close () &mdash; Release resources associated with this client. <br /><br />android.net.http.AndroidHttpClient.getUngzippedContent (HttpEntity entity) &mdash; Gets the input stream from a response entity. <br /><br />android.net.http.AndroidHttpClient.execute (HttpUriRequest request, ResponseHandler<? extends T> responseHandler) &mdash; Executes a request using the default context and processes the response using the given response handler. <br /><br />android.net.http.AndroidHttpClient.execute (HttpUriRequest request, HttpContext context) &mdash; Executes a request using the given context. <br /><br />android.net.http.AndroidHttpClient.getParams () &mdash; Obtains the parameters for this client. <br /><br />android.net.http.AndroidHttpClient.modifyRequestToAcceptGzipResponse (HttpRequest request) &mdash; Modifies a request to indicate to the server that we would like a gzipped response. <br /><br />android.net.http.AndroidHttpClient.execute (HttpHost target, HttpRequest request) &mdash; Executes a request to the target using the default context. <br /><br />android.net.http.AndroidHttpClient.newInstance (String userAgent)    This method is deprecated. Please use URLConnection and friends instead. See SSLCertificateSocketFactory for SSL cache support. If you'd like to set a custom useragent, please use setRequestProperty (String, String) &mdash; This method is deprecated. Please use URLConnection and friends instead. See SSLCertificateSocketFactory for SSL cache support. If you'd like to set a custom useragent, please use setRequestProperty(String, String) with field set to User-Agent. <br /><br />android.net.http.AndroidHttpClient.execute (HttpHost target, HttpRequest request, HttpContext context) &mdash; Executes a request to the target using the given context. <br /><br />android.net.http.AndroidHttpClient.execute (HttpHost target, HttpRequest request, ResponseHandler<? extends T> responseHandler) &mdash; Executes a request to the target using the default context and processes the response using the given response handler. <br /><br />android.net.http.AndroidHttpClient.execute (HttpUriRequest request, ResponseHandler<? extends T> responseHandler, HttpContext context) &mdash; Executes a request using the given context and processes the response using the given response handler. <br /><br />android.net.http.AndroidHttpClient.execute (HttpUriRequest request) &mdash; Executes a request using the default context. <br /><br />android.net.http.AndroidHttpClient.execute (HttpHost target, HttpRequest request, ResponseHandler<? extends T> responseHandler, HttpContext context) &mdash; Executes a request to the target using the given context and processes the response using the given response handler. <br /><br />android.net.http.HttpResponseCache.getInstalled () &mdash; Returns the currently-installed HttpResponseCache, or null if there is no cache installed or it is not a HttpResponseCache. <br /><br />android.net.http.HttpResponseCache.flush () &mdash; Force buffered operations to the filesystem. <br /><br />"
"android.net.http.HttpResponseCache.install (File directory, long maxSize)   Creates a new HTTP response cache and &mdash; Creates a new HTTP response cache and sets it as the system default cache. <br /><br />android.net.http.SslCertificate.getValidNotAfter ()    This method was deprecated in API level 8. Use getValidNotAfterDate () &mdash; This method was deprecated in API level 8. Use getValidNotAfterDate() <br /><br />android.net.http.SslCertificate.getValidNotBefore ()    This method was deprecated in API level 8. Use getValidNotBeforeDate () &mdash; This method was deprecated in API level 8. Use getValidNotBeforeDate() <br /><br />android.net.http.SslError.getPrimaryError () &mdash; Gets the most severe SSL error in this object's set of errors. <br /><br />android.net.http.SslError.addError (int error) &mdash; Adds the supplied SSL error to the set. <br /><br />android.net.http.SslError.getCertificate () &mdash; Gets the SSL certificate associated with this object. <br /><br />android.net.http.SslError.toString () &mdash; Returns a string representation of this object. <br /><br />android.net.LocalServerSocket.close () &mdash; Closes server socket. <br /><br />android.net.LocalServerSocket.accept () &mdash; Accepts a new connection to the socket. <br /><br />android.net.LocalSocket.close () &mdash; Closes the socket. <br /><br />android.net.LocalSocket.getFileDescriptor () &mdash; Returns file descriptor or null if not yet open/already closed <br /><br />android.net.LocalSocket.getInputStream () &mdash; Retrieves the input stream for this instance. <br /><br />android.net.LocalSocket.connect (LocalSocketAddress endpoint) &mdash; Connects this socket to an endpoint. <br /><br />android.net.LocalSocket.getOutputStream () &mdash; Retrieves the output stream for this instance. <br /><br />android.net.MailTo.isMailTo (String url) &mdash; Test to see if the given string is a mailto URL <br /><br />android.net.MailTo.parse (String url) &mdash; Parse and decode a mailto scheme string. <br /><br />android.net.MailTo.getBody () &mdash; Retrieve the body line from the parsed mailto URL. <br /><br />android.net.MailTo.getTo () &mdash; Retrieve the To address line from the parsed mailto URL. <br /><br />android.net.MailTo.getCc () &mdash; Retrieve the CC address line from the parsed mailto URL. <br /><br />android.net.MailTo.getHeaders () &mdash; Retrieve all the parsed email headers from the mailto URL <br /><br />"
"android.net.MailTo.getSubject () &mdash; Retrieve the subject line from the parsed mailto URL. <br /><br />android.net.NetworkInfo.isRoaming () &mdash; Indicates whether the device is currently roaming on this network. <br /><br />android.net.NetworkInfo.isConnectedOrConnecting () &mdash; Indicates whether network connectivity exists or is in the process of being established. <br /><br />android.net.NetworkInfo.getState () &mdash; Reports the current coarse-grained state of the network. <br /><br />android.net.NetworkInfo.getType () &mdash; Reports the type of network to which the info in this NetworkInfo pertains. <br /><br />android.net.NetworkInfo.isConnected () &mdash; Indicates whether network connectivity exists and it is possible to establish connections and pass data. <br /><br />android.net.NetworkInfo.getSubtype () &mdash; Return a network-type-specific integer describing the subtype of the network. <br /><br />android.net.NetworkInfo.isAvailable () &mdash; Indicates whether network connectivity is possible. <br /><br />android.net.NetworkInfo.getExtraInfo () &mdash; Report the extra information about the network state, if any was provided by the lower networking layers. <br /><br />android.net.NetworkInfo.isFailover () &mdash; Indicates whether the current attempt to connect to the network resulted from the ConnectivityManager trying to fail over to this network following a disconnect from another network. <br /><br />android.net.NetworkInfo.getTypeName () &mdash; Return a human-readable name describe the type of the network, for example 'WIFI' or 'MOBILE'. <br /><br />android.net.NetworkInfo.getSubtypeName () &mdash; Return a human-readable name describing the subtype of the network. <br /><br />android.net.NetworkInfo.getDetailedState () &mdash; Reports the current fine-grained state of the network. <br /><br />android.net.Proxy.getDefaultHost () &mdash; This method was deprecated in API level 11. Use standard java vm proxy values to find the host, port and exclusion list. This call ignores the exclusion list and no longer reports only mobile-data apn-based proxy values. <br /><br />android.net.Proxy.getHost (Context ctx) &mdash; This method was deprecated in API level 11. Use standard java vm proxy values to find the host, port and exclusion list. This call ignores the exclusion list. <br /><br />android.net.SSLCertificateSocketFactory.getHttpSocketFactory (int handshakeTimeoutMillis, SSLSessionCache cache)    This method is deprecated. Use getDefault () &mdash; This method is deprecated. Use getDefault() along with a HttpsURLConnection instead. The Apache HTTP client is no longer maintained and may be removed in a future release. Please visit this webpage for further details. <br /><br />android.net.TrafficStats.incrementOperationCount (int operationCount) &mdash; Increment count of network operations performed under the accounting tag currently active on the calling thread. <br /><br />android.net.TrafficStats.getUidRxBytes (int uid) &mdash; Return number of bytes received by the given UID since device boot. <br /><br />android.net.TrafficStats.incrementOperationCount (int tag, int operationCount) &mdash; Increment count of network operations performed under the given accounting tag. <br /><br />android.net.TrafficStats.getTotalRxBytes () &mdash; Return number of bytes received since device boot. <br /><br />"
"android.net.TrafficStats.clearThreadStatsTag () &mdash; Clear any active tag set to account Socket traffic originating from the current thread. <br /><br />android.net.TrafficStats.getTotalTxBytes () &mdash; Return number of bytes transmitted since device boot. <br /><br />android.net.TrafficStats.getUidTxBytes (int uid) &mdash; Return number of bytes transmitted by the given UID since device boot. <br /><br />android.net.TrafficStats.tagSocket (Socket socket) &mdash; Tag the given Socket with any statistics parameters active for the current thread. <br /><br />android.net.TrafficStats.untagSocket (Socket socket) &mdash; Remove any statistics parameters from the given Socket. <br /><br />android.net.TrafficStats.getThreadStatsTag () &mdash; Get the active tag used when accounting Socket traffic originating from the current thread. <br /><br />android.net.TrafficStats.setThreadStatsTag (int tag) &mdash; Set active tag to use when accounting Socket traffic originating from the current thread. <br /><br />android.net.Uri.getQueryParameters (String key) &mdash; Searches the query string for parameter values with the given key. <br /><br />android.net.Uri.encode (String s, String allow) &mdash; Encodes characters in the given string as '%'-escaped octets using the UTF-8 scheme. <br /><br />android.net.Uri.getEncodedPath () &mdash; Gets the encoded path. <br /><br />android.net.Uri.getLastPathSegment () &mdash; Gets the decoded last segment in the path. <br /><br />android.net.Uri.getEncodedSchemeSpecificPart () &mdash; Gets the scheme-specific part of this URI, i.e. everything between the scheme separator ':' and the fragment separator '#'. <br /><br />android.net.Uri.getQueryParameter (String key) &mdash; Searches the query string for the first value with the given key. <br /><br />android.net.Uri.hashCode ()   Hashes the encoded string represention of this Uri consistently with equals (Object) &mdash; Hashes the encoded string represention of this Uri consistently with equals(Object). <br /><br />android.net.Uri.fromFile (File file) &mdash; Creates a Uri from a file. <br /><br />android.net.Uri.getScheme () &mdash; Gets the scheme of this URI. <br /><br />android.net.Uri.decode (String s) &mdash; Decodes '%'-escaped octets in the given string using the UTF-8 scheme. <br /><br />android.net.Uri.toString () &mdash; Returns the encoded string representation of this URI. <br /><br />android.net.Uri.isAbsolute () &mdash; Returns true if this URI is absolute, i.e. if it contains an explicit scheme. <br /><br />android.net.Uri.getFragment () &mdash; Gets the decoded fragment part of this URI, everything after the '#'. <br /><br />"
"android.net.Uri.isOpaque () &mdash; Returns true if this URI is opaque like 'mailto:nobody@google.com'. <br /><br />android.net.Uri.getQuery () &mdash; Gets the decoded query component from this URI. <br /><br />android.net.Uri.withAppendedPath (Uri baseUri, String pathSegment) &mdash; Creates a new Uri by appending an already-encoded path segment to a base Uri. <br /><br />android.net.Uri.getPort () &mdash; Gets the port from the authority for this URI. <br /><br />android.net.Uri.fromParts (String scheme, String ssp, String fragment) &mdash; Creates an opaque Uri from the given components. <br /><br />android.net.Uri.buildUpon () &mdash; Constructs a new builder, copying the attributes from this Uri. <br /><br />android.net.Uri.getAuthority () &mdash; Gets the decoded authority part of this URI. <br /><br />android.net.Uri.isHierarchical () &mdash; Returns true if this URI is hierarchical like 'http://google.com'. <br /><br />android.net.Uri.equals (Object o) &mdash; Compares this Uri to another object for equality. <br /><br />android.net.Uri.isRelative () &mdash; Returns true if this URI is relative, i.e. if it doesn't contain an explicit scheme. <br /><br />android.net.Uri.getQueryParameterNames () &mdash; Returns a set of the unique names of all query parameters. <br /><br />android.net.Uri.getPath () &mdash; Gets the decoded path. <br /><br />android.net.Uri.getPathSegments () &mdash; Gets the decoded path segments. <br /><br />android.net.Uri.parse (String uriString) &mdash; Creates a Uri which parses the given encoded URI string. <br /><br />android.net.Uri.getHost () &mdash; Gets the encoded host from the authority for this URI. <br /><br />android.net.Uri.getEncodedFragment () &mdash; Gets the encoded fragment part of this URI, everything after the '#'. <br /><br />android.net.Uri.getEncodedQuery () &mdash; Gets the encoded query component from this URI. <br /><br />android.net.UrlQuerySanitizer.setAllowUnregisteredParamaters (boolean allowUnregisteredParamaters) &mdash; Set whether or not unregistered parameters are allowed. <br /><br />android.net.UrlQuerySanitizer.parseQuery (String query) &mdash; Parse a query. <br /><br />android.net.UrlQuerySanitizer.parseUrl (String url) &mdash; Parse the query parameters out of an encoded URL. <br /><br />"
"android.net.UrlQuerySanitizer.getParameterList () &mdash; An array list of all of the parameter value pairs in the sanitized query, in the order they appeared in the query. <br /><br />android.net.UrlQuerySanitizer.getValue (String parameter) &mdash; Get the value for a parameter in the current sanitized query. <br /><br />android.net.UrlQuerySanitizer.getAllButNulLegal ()   Return a value sanitizer that allows everything except Nul  ('\0') &mdash; Return a value sanitizer that allows everything except Nul ('\0') characters. <br /><br />android.net.wifi.WifiInfo.getRssi () &mdash; Returns the received signal strength indicator of the current 802.11 network, in dBm. <br /><br />android.net.wifi.WifiInfo.getLinkSpeed () &mdash; Returns the current link speed in LINK_SPEED_UNITS. <br /><br />android.net.wifi.WifiInfo.getBSSID ()   Return the basic service set identifier  (BSSID) &mdash; Return the basic service set identifier (BSSID) of the current access point. <br /><br />android.net.wifi.WifiInfo.getNetworkId () &mdash; Each configured network has a unique small integer ID, used to identify the network when performing operations on the supplicant. <br /><br />android.net.wifi.WifiInfo.getSSID ()   Returns the service set identifier  (SSID) &mdash; Returns the service set identifier (SSID) of the current 802.11 network. <br /><br />android.net.wifi.WifiManager.getConfiguredNetworks () &mdash; Return a list of all the networks configured in the supplicant. <br /><br />android.net.wifi.WifiManager.addNetwork (WifiConfiguration config) &mdash; Add a new network description to the set of configured networks. <br /><br />android.net.wifi.WifiManager.getConnectionInfo () &mdash; Return dynamic information about the current Wi-Fi connection, if any is active. <br /><br />android.net.wifi.WifiManager.createWifiLock (int lockType, String tag) &mdash; Creates a new WifiLock. <br /><br />android.net.wifi.WifiManager.startScan () &mdash; Request a scan for access points. <br /><br />android.net.wifi.WifiManager.setWifiEnabled (boolean enabled) &mdash; Enable or disable Wi-Fi. <br /><br />android.net.wifi.WifiManager.disableNetwork (int netId) &mdash; Disable a configured network. <br /><br />android.net.wifi.WifiManager.enableNetwork (int netId, boolean disableOthers) &mdash; Allow a previously configured network to be associated with. <br /><br />android.net.wifi.WifiManager.calculateSignalLevel (int rssi, int numLevels) &mdash; Calculates the level of the signal. <br /><br />android.net.wifi.WifiManager.isWifiEnabled () &mdash; Return whether Wi-Fi is enabled or disabled. <br /><br />android.net.wifi.WifiManager.reconnect () &mdash; Reconnect to the currently active access point, if we are currently disconnected. <br /><br />android.net.wifi.WifiManager.getWifiState () &mdash; Gets the Wi-Fi enabled state. <br /><br />"
"android.net.wifi.WifiManager.disconnect () &mdash; Disassociate from the currently active access point. <br /><br />android.net.wifi.WifiManager.getDhcpInfo () &mdash; Return the DHCP-assigned addresses from the last successful DHCP request, if any. <br /><br />android.net.wifi.WifiManager.getScanResults () &mdash; Return the results of the latest access point scan. <br /><br />android.net.wifi.WifiManager.saveConfiguration () &mdash; Tell the supplicant to persist the current list of configured networks. <br /><br />android.net.wifi.WifiManager.removeNetwork (int netId) &mdash; Remove the specified network from the list of configured networks. <br /><br />android.nfc.NdefMessage.getRecords () &mdash; Get the NDEF Records inside this NDEF Message. <br /><br />android.nfc.NdefRecord.createApplicationRecord (String packageName)   Create a new Android Application Record  (AAR) &mdash; Create a new Android Application Record (AAR). <br /><br />android.nfc.NdefRecord.getPayload () &mdash; Returns the variable length payload. <br /><br />android.nfc.NfcAdapter.isEnabled () &mdash; Return true if this NFC Adapter has any features enabled. <br /><br />android.nfc.NfcAdapter.getDefaultAdapter (Context context) &mdash; Helper to get the default NFC Adapter. <br /><br />android.nfc.NfcManager.getDefaultAdapter () &mdash; Get the default NFC Adapter for this device. <br /><br />android.opengl.ETC1.getEncodedDataSize (int width, int height)   Return the size of the encoded image data  (does not include size of PKM header) &mdash; Return the size of the encoded image data (does not include size of PKM header). <br /><br />android.opengl.ETC1.encodeImage (Buffer in, int width, int height, int pixelSize, int stride, Buffer out) &mdash; Encode an entire image. <br /><br />android.opengl.ETC1Util.createTexture (InputStream input) &mdash; Create a new ETC1Texture from an input stream containing a PKM formatted compressed texture. <br /><br />android.opengl.ETC1Util.isETC1Supported () &mdash; Check if ETC1 texture compression is supported by the active OpenGL ES context. <br /><br />android.opengl.GLDebugHelper.wrap (EGL egl, int configFlags, Writer log) &mdash; Wrap an existing EGL interface in a new EGL interface that adds support for error checking and/or logging. <br /><br />android.opengl.GLSurfaceView.onPause () &mdash; Inform the view that the activity is paused. <br /><br />android.opengl.GLSurfaceView.setPreserveEGLContextOnPause (boolean preserveOnPause) &mdash; Control whether the EGL context is preserved when the GLSurfaceView is paused and resumed. <br /><br />android.opengl.GLSurfaceView.surfaceCreated (SurfaceHolder holder) &mdash; This method is part of the SurfaceHolder.Callback interface, and is not normally called or subclassed by clients of GLSurfaceView. <br /><br />android.opengl.GLSurfaceView.requestRender () &mdash; Request that the renderer render a frame. <br /><br />"
"android.opengl.GLSurfaceView.queueEvent (Runnable r) &mdash; Queue a runnable to be run on the GL rendering thread. <br /><br />android.opengl.GLSurfaceView.setRenderMode (int renderMode) &mdash; Set the rendering mode. <br /><br />android.opengl.GLSurfaceView.onResume () &mdash; Inform the view that the activity is resumed. <br /><br />android.opengl.GLU.gluOrtho2D (GL10 gl, float left, float right, float bottom, float top) &mdash; Set up a 2D orthographic projection matrix <br /><br />android.opengl.GLUtils.getEGLErrorString (int error) &mdash; Return a string for the EGL error code, or the hex representation if the error is unknown. <br /><br />android.opengl.GLUtils.texImage2D (int target, int level, Bitmap bitmap, int border) &mdash; A version of texImage2D that determines the internalFormat and type automatically. <br /><br />android.opengl.GLUtils.texImage2D (int target, int level, int internalformat, Bitmap bitmap, int border)   Calls glTexImage2D () &mdash; Calls glTexImage2D() on the current OpenGL context. <br /><br />android.opengl.GLUtils.texImage2D (int target, int level, int internalformat, Bitmap bitmap, int type, int border)   A version of texImage2D () &mdash; A version of texImage2D() that takes an explicit type parameter as defined by the OpenGL ES specification. <br /><br />android.opengl.GLUtils.getInternalFormat (Bitmap bitmap) &mdash; return the internal format as defined by OpenGL ES of the supplied bitmap. <br /><br />android.opengl.GLUtils.getType (Bitmap bitmap) &mdash; Return the type as defined by OpenGL ES of the supplied bitmap, if there is one. <br /><br />android.opengl.Matrix.multiplyMV (float[] resultVec, int resultVecOffset, float[] lhsMat, int lhsMatOffset, float[] rhsVec, int rhsVecOffset) &mdash; Multiplies a 4 element vector by a 4x4 matrix and stores the result in a 4-element column vector. <br /><br />android.opengl.Matrix.translateM (float[] m, int mOffset, float x, float y, float z) &mdash; Translates matrix m by x, y, and z in place. <br /><br />android.opengl.Matrix.setIdentityM (float[] sm, int smOffset) &mdash; Sets matrix m to the identity matrix. <br /><br />android.opengl.Matrix.setRotateM (float[] rm, int rmOffset, float a, float x, float y, float z)   Creates a matrix for rotation by angle a  (in degrees) around the axis  (x, y, z) &mdash; Creates a matrix for rotation by angle a (in degrees) around the axis (x, y, z). <br /><br />android.opengl.Matrix.scaleM (float[] sm, int smOffset, float[] m, int mOffset, float x, float y, float z) &mdash; Scales matrix m by x, y, and z, putting the result in sm. <br /><br />android.opengl.Matrix.rotateM (float[] rm, int rmOffset, float[] m, int mOffset, float a, float x, float y, float z)   Rotates matrix m by angle a  (in degrees) around the axis  (x, y, z) &mdash; Rotates matrix m by angle a (in degrees) around the axis (x, y, z). <br /><br />android.opengl.Matrix.orthoM (float[] m, int mOffset, float left, float right, float bottom, float top, float near, float far) &mdash; Computes an orthographic projection matrix. <br /><br />android.opengl.Matrix.rotateM (float[] m, int mOffset, float a, float x, float y, float z)   Rotates matrix m in place by angle a  (in degrees) around the axis  (x, y, z) &mdash; Rotates matrix m in place by angle a (in degrees) around the axis (x, y, z). <br /><br />android.opengl.Matrix.translateM (float[] tm, int tmOffset, float[] m, int mOffset, float x, float y, float z) &mdash; Translates matrix m by x, y, and z, putting the result in tm. <br /><br />android.opengl.Matrix.multiplyMM (float[] result, int resultOffset, float[] lhs, int lhsOffset, float[] rhs, int rhsOffset) &mdash; Multiplies two 4x4 matrices together and stores the result in a third 4x4 matrix. <br /><br />"
"android.opengl.Matrix.scaleM (float[] m, int mOffset, float x, float y, float z) &mdash; Scales matrix m in place by sx, sy, and sz. <br /><br />android.opengl.Matrix.frustumM (float[] m, int offset, float left, float right, float bottom, float top, float near, float far) &mdash; Defines a projection matrix in terms of six clip planes. <br /><br />android.os.Binder.restoreCallingIdentity (long token)   Restore the identity of the incoming IPC on the current thread back to a previously identity that was returned by clearCallingIdentity () &mdash; Restore the identity of the incoming IPC on the current thread back to a previously identity that was returned by clearCallingIdentity(). <br /><br />android.os.Binder.flushPendingCommands () &mdash; Flush any Binder commands pending in the current thread to the kernel driver. <br /><br />android.os.Binder.getCallingPid () &mdash; Return the ID of the process that sent you the current transaction that is being processed. <br /><br />android.os.Binder.getCallingUid () &mdash; Return the Linux uid assigned to the process that sent you the current transaction that is being processed. <br /><br />android.os.Binder.clearCallingIdentity () &mdash; Reset the identity of the incoming IPC on the current thread. <br /><br />android.os.Build.getRadioVersion () &mdash; Returns the version string for the radio firmware. <br /><br />android.os.Bundle.putStringArrayList (String key, ArrayList< String> value) &mdash; Inserts an ArrayList  value into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />android.os.Bundle.putFloatArray (String key, float[] value) &mdash; Inserts a float array value into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />android.os.Bundle.putParcelable (String key, Parcelable value) &mdash; Inserts a Parcelable value into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />android.os.Bundle.putSparseParcelableArray (String key, SparseArray<? extends  Parcelable> value) &mdash; Inserts a SparceArray of Parcelable values into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />android.os.Bundle.putByteArray (String key, byte[] value) &mdash; Inserts a byte array value into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />android.os.Bundle.clear () &mdash; Removes all elements from the mapping of this Bundle. <br /><br />android.os.Bundle.putByte (String key, byte value) &mdash; Inserts a byte value into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />android.os.Bundle.putCharSequence (String key, CharSequence value) &mdash; Inserts a CharSequence value into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />android.os.Bundle.putParcelableArray (String key, Parcelable[] value) &mdash; Inserts an array of Parcelable values into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />android.os.Bundle.putParcelableArrayList (String key, ArrayList<? extends  Parcelable> value) &mdash; Inserts a List of Parcelable values into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />android.os.Bundle.putCharArray (String key, char[] value) &mdash; Inserts a char array value into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />android.os.Bundle.putFloat (String key, float value) &mdash; Inserts a float value into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />"
"android.os.Bundle.setClassLoader (ClassLoader loader) &mdash; Changes the ClassLoader this Bundle uses when instantiating objects. <br /><br />android.os.Bundle.getFloat (String key) &mdash; Returns the value associated with the given key, or 0.0f if no mapping of the desired type exists for the given key. <br /><br />android.os.Bundle.putSerializable (String key, Serializable value) &mdash; Inserts a Serializable value into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />android.os.Bundle.writeToParcel (Parcel parcel, int flags) &mdash; Writes the Bundle contents to a Parcel, typically in order for it to be passed through an IBinder connection. <br /><br />android.os.Bundle.putChar (String key, char value) &mdash; Inserts a char value into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />android.os.Bundle.putShortArray (String key, short[] value) &mdash; Inserts a short array value into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />android.os.Bundle.putCharSequenceArray (String key, CharSequence[] value) &mdash; Inserts a CharSequence array value into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />android.os.Bundle.getCharSequence (String key, CharSequence defaultValue) &mdash; Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key or if a null value is explicitly associatd with the given key. <br /><br />android.os.Bundle.putAll (Bundle bundle) &mdash; Inserts all mappings from the given Bundle into this Bundle. <br /><br />android.os.Bundle.readFromParcel (Parcel parcel) &mdash; Reads the Parcel contents into this Bundle, typically in order for it to be passed through an IBinder connection. <br /><br />android.os.Bundle.putShort (String key, short value) &mdash; Inserts a short value into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />android.os.Bundle.getFloat (String key, float defaultValue) &mdash; Returns the value associated with the given key, or defaultValue if no mapping of the desired type exists for the given key. <br /><br />android.os.Bundle.putBundle (String key, Bundle value) &mdash; Inserts a Bundle value into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />android.os.Bundle.clone () &mdash; Clones the current Bundle. <br /><br />android.os.CancellationSignal.isCanceled () &mdash; Returns true if the operation has been canceled. <br /><br />android.os.CancellationSignal.cancel () &mdash; Cancels the operation and signals the cancellation listener. <br /><br />android.os.ConditionVariable.block (long timeout) &mdash; Block the current thread until the condition is opened or until timeout milliseconds have passed. <br /><br />android.os.ConditionVariable.open () &mdash; Open the condition, and release all threads that are blocked. <br /><br />android.os.ConditionVariable.close () &mdash; Reset the condition to the closed state. <br /><br />android.os.ConditionVariable.block () &mdash; Block the current thread until the condition is opened. <br /><br />"
"android.os.CountDownTimer.start () &mdash; Start the countdown. <br /><br />android.os.CountDownTimer.cancel () &mdash; Cancel the countdown. <br /><br />android.os.Debug.waitingForDebugger () &mdash; Returns 'true' if one or more threads is waiting for a debugger to attach. <br /><br />android.os.Debug.waitForDebugger () &mdash; Wait until a debugger attaches. <br /><br />android.os.Debug.getThreadAllocCount ()   Returns the thread-local count of objects allocated by the runtime between a start and &mdash; Returns the thread-local count of objects allocated by the runtime between a start and stop. <br /><br />android.os.Debug.getThreadExternalAllocSize () &mdash; This method was deprecated in API level 11. This method is now obsolete. <br /><br />android.os.Debug.getGlobalFreedCount ()   Returns the global count of objects freed by the runtime between a start and &mdash; Returns the global count of objects freed by the runtime between a start and stop. <br /><br />android.os.Debug.startMethodTracing () &mdash; Start method tracing with default log name and buffer size. <br /><br />android.os.Debug.startMethodTracing (String traceName, int bufferSize) &mdash; Start method tracing, specifying the trace log file name and the buffer size. <br /><br />android.os.Debug.getNativeHeapAllocatedSize () &mdash; Returns the amount of allocated memory in the native heap. <br /><br />android.os.Debug.getGlobalFreedSize ()   Returns the global size, in bytes, of objects freed by the runtime between a start and &mdash; Returns the global size, in bytes, of objects freed by the runtime between a start and stop. <br /><br />android.os.Debug.getNativeHeapSize () &mdash; Returns the size of the native heap. <br /><br />android.os.Debug.stopMethodTracing () &mdash; Stop method tracing. <br /><br />android.os.Debug.dumpHprofData (String fileName) &mdash; Dump 'hprof' data to the specified file. <br /><br />android.os.Debug.getThreadAllocSize ()   Returns the thread-local size of objects allocated by the runtime between a start and &mdash; Returns the thread-local size of objects allocated by the runtime between a start and stop. <br /><br />android.os.Debug.isDebuggerConnected () &mdash; Determine if a debugger is currently attached. <br /><br />android.os.Debug.getGlobalGcInvocationCount ()   Returns the number of non-concurrent GC invocations between a start and &mdash; Returns the number of non-concurrent GC invocations between a start and stop. <br /><br />android.os.Debug.startMethodTracing (String traceName) &mdash; Start method tracing, specifying the trace log file name. <br /><br />android.os.Debug.getNativeHeapFreeSize () &mdash; Returns the amount of free memory in the native heap. <br /><br />android.os.Environment.isExternalStorageEmulated () &mdash; Returns whether the primary 'external' storage device is emulated. <br /><br />"
"android.os.Environment.isExternalStorageRemovable () &mdash; Returns whether the primary 'external' storage device is removable. <br /><br />android.os.Environment.getExternalStorageDirectory () &mdash; Return the primary external storage directory. <br /><br />android.os.Environment.isExternalStorageRemovable (File path) &mdash; Returns whether the storage device that provides the given path is removable. <br /><br />android.os.Environment.getExternalStorageState () &mdash; Returns the current state of the primary 'external' storage device. <br /><br />android.os.Environment.getDownloadCacheDirectory () &mdash; Return the download/cache content directory. <br /><br />android.os.Environment.getExternalStoragePublicDirectory (String type) &mdash; Get a top-level public external storage directory for placing files of a particular type. <br /><br />android.os.Environment.getDataDirectory () &mdash; Return the user data directory. <br /><br />android.os.Environment.getStorageState (File path)    This method was deprecated in API level 21. use getExternalStorageState (File) &mdash; This method was deprecated in API level 21. use getExternalStorageState(File) <br /><br />android.os.Environment.getRootDirectory () &mdash; Return root of the 'system' partition holding the core Android OS. <br /><br />android.os.Environment.isExternalStorageEmulated (File path) &mdash; Returns whether the storage device that provides the given path is emulated. <br /><br />android.os.Environment.getExternalStorageState (File path) &mdash; Returns the current state of the storage device that provides the given path. <br /><br />android.os.FileObserver.stopWatching () &mdash; Stop watching for events. <br /><br />android.os.FileObserver.startWatching () &mdash; Start watching for events. <br /><br />android.os.Handler.postAtTime (Runnable r, long uptimeMillis) &mdash; Causes the Runnable r to be added to the message queue, to be run at a specific time given by uptimeMillis. <br /><br />android.os.Handler.removeMessages (int what) &mdash; Remove any pending posts of messages with code 'what' that are in the message queue. <br /><br />android.os.Handler.sendEmptyMessageAtTime (int what, long uptimeMillis) &mdash; Sends a Message containing only the what value, to be delivered at a specific time. <br /><br />android.os.Handler.obtainMessage (int what, Object obj)   Same as obtainMessage () &mdash; Same as obtainMessage(), except that it also sets the what and obj members of the returned Message. <br /><br />android.os.Handler.obtainMessage () &mdash; Returns a new Message from the global message pool. <br /><br />android.os.Handler.hasMessages (int what, Object object) &mdash; Check if there are any pending posts of messages with code 'what' and whose obj is 'object' in the message queue. <br /><br />android.os.Handler.removeCallbacks (Runnable r) &mdash; Remove any pending posts of Runnable r that are in the message queue. <br /><br />"
"android.os.Handler.handleMessage (Message msg) &mdash; Subclasses must implement this to receive messages. <br /><br />android.os.Handler.hasMessages (int what) &mdash; Check if there are any pending posts of messages with code 'what' in the message queue. <br /><br />android.os.Handler.removeCallbacks (Runnable r, Object token) &mdash; Remove any pending posts of Runnable r with Object token that are in the message queue. <br /><br />android.os.Handler.dispatchMessage (Message msg) &mdash; Handle system messages here. <br /><br />android.os.Handler.postDelayed (Runnable r, long delayMillis) &mdash; Causes the Runnable r to be added to the message queue, to be run after the specified amount of time elapses. <br /><br />android.os.Handler.removeCallbacksAndMessages (Object token) &mdash; Remove any pending posts of callbacks and sent messages whose obj is token. <br /><br />android.os.Handler.obtainMessage (int what)   Same as obtainMessage () &mdash; Same as obtainMessage(), except that it also sets the what member of the returned Message. <br /><br />android.os.Handler.obtainMessage (int what, int arg1, int arg2, Object obj)   Same as obtainMessage () &mdash; Same as obtainMessage(), except that it also sets the what, obj, arg1,and arg2 values on the returned Message. <br /><br />android.os.Handler.postAtFrontOfQueue (Runnable r) &mdash; Posts a message to an object that implements Runnable. <br /><br />android.os.Handler.post (Runnable r) &mdash; Causes the Runnable r to be added to the message queue. <br /><br />android.os.Handler.removeMessages (int what, Object object) &mdash; Remove any pending posts of messages with code 'what' and whose obj is 'object' that are in the message queue. <br /><br />android.os.Handler.obtainMessage (int what, int arg1, int arg2)   Same as obtainMessage () &mdash; Same as obtainMessage(), except that it also sets the what, arg1 and arg2 members of the returned Message. <br /><br />android.os.Handler.sendMessageDelayed (Message msg, long delayMillis)   Enqueue a message into the message queue after all pending messages before  (current time + delayMillis) &mdash; Enqueue a message into the message queue after all pending messages before (current time + delayMillis). <br /><br />android.os.Handler.sendMessageAtTime (Message msg, long uptimeMillis)   Enqueue a message into the message queue after all pending messages before the absolute time  (in milliseconds) &mdash; Enqueue a message into the message queue after all pending messages before the absolute time (in milliseconds) uptimeMillis. <br /><br />android.os.Handler.sendMessageAtFrontOfQueue (Message msg) &mdash; Enqueue a message at the front of the message queue, to be processed on the next iteration of the message loop. <br /><br />android.os.Handler.sendEmptyMessageDelayed (int what, long delayMillis) &mdash; Sends a Message containing only the what value, to be delivered after the specified amount of time elapses. <br /><br />android.os.Handler.sendEmptyMessage (int what) &mdash; Sends a Message containing only the what value. <br /><br />android.os.Handler.sendMessage (Message msg) &mdash; Pushes a message onto the end of the message queue after all pending messages before the current time. <br /><br />android.os.HandlerThread.run ()   Calls the run () &mdash; Calls the run() method of the Runnable object the receiver holds. <br /><br />android.os.HandlerThread.getLooper () &mdash; This method returns the Looper associated with this thread. <br /><br />"
"android.os.HandlerThread.quit () &mdash; Quits the handler thread's looper. <br /><br />android.os.IBinder.isBinderAlive () &mdash; Check to see if the process that the binder is in is still alive. <br /><br />android.os.IBinder.getInterfaceDescriptor () &mdash; Get the canonical name of the interface supported by this binder. <br /><br />android.os.IBinder.transact (int code, Parcel data, Parcel reply, int flags) &mdash; Perform a generic operation with the object. <br /><br />android.os.IBinder.queryLocalInterface (String descriptor) &mdash; Attempt to retrieve a local implementation of an interface for this Binder object. <br /><br />android.os.IBinder.dumpAsync (FileDescriptor fd, String[] args)   Like dump (FileDescriptor, String[]) &mdash; Like dump(FileDescriptor, String[]) but always executes asynchronously. <br /><br />android.os.IBinder.pingBinder () &mdash; Check to see if the object still exists. <br /><br />android.os.IBinder.dump (FileDescriptor fd, String[] args) &mdash; Print the object's state into the given stream. <br /><br />android.os.IInterface.asBinder () &mdash; Retrieve the Binder object associated with this interface. <br /><br />android.os.Looper.myLooper () &mdash; Return the Looper object associated with the current thread. <br /><br />android.os.Looper.quit () &mdash; Quits the looper. <br /><br />android.os.Looper.loop () &mdash; Run the message queue in this thread. <br /><br />android.os.Looper.prepare () &mdash; Initialize the current thread as a looper. <br /><br />android.os.Looper.getThread () &mdash; Return the Thread associated with this Looper. <br /><br />android.os.Looper.myQueue () &mdash; Return the MessageQueue object associated with the current thread. <br /><br />android.os.Looper.getMainLooper () &mdash; Returns the application's main looper, which lives in the main thread of the application. <br /><br />android.os.Message.copyFrom (Message o) &mdash; Make this message like o. <br /><br />android.os.Message.obtain (Handler h, int what, int arg1, int arg2, Object obj)   Same as obtain () &mdash; Same as obtain(), but sets the values of the target, what, arg1, arg2, and obj members. <br /><br />android.os.Message.getCallback () &mdash; Retrieve callback object that will execute when this message is handled. <br /><br />android.os.Message.obtain (Handler h)   Same as obtain () &mdash; Same as obtain(), but sets the value for the target member on the Message returned. <br /><br />"
"android.os.Message.obtain (Handler h, int what, int arg1, int arg2)   Same as obtain () &mdash; Same as obtain(), but sets the values of the target, what, arg1, and arg2 members. <br /><br />android.os.Message.obtain (Handler h, int what)   Same as obtain () &mdash; Same as obtain(), but sets the values for both target and what members on the Message. <br /><br />android.os.Message.sendToTarget ()   Sends this Message to the Handler specified by getTarget () &mdash; Sends this Message to the Handler specified by getTarget(). <br /><br />android.os.Message.obtain (Message orig)   Same as obtain (), but copies the values of an existing message  (including its target) &mdash; Same as obtain(), but copies the values of an existing message (including its target) into the new one. <br /><br />android.os.Message.obtain (Handler h, Runnable callback)   Same as obtain (Handler) &mdash; Same as obtain(Handler), but assigns a callback Runnable on the Message that is returned. <br /><br />android.os.Message.obtain (Handler h, int what, Object obj)   Same as obtain () &mdash; Same as obtain(), but sets the values of the target, what, and obj members. <br /><br />android.os.Message.obtain () &mdash; Return a new Message instance from the global pool. <br /><br />android.os.Message.getData () &mdash; Obtains a Bundle of arbitrary data associated with this event, lazily creating it if necessary. <br /><br />android.os.Message.setData (Bundle data) &mdash; Sets a Bundle of arbitrary data values. <br /><br />android.os.Messenger.send (Message message) &mdash; Send a Message to this Messenger's Handler. <br /><br />android.os.Messenger.getBinder () &mdash; Retrieve the IBinder that this Messenger is using to communicate with its associated Handler. <br /><br />android.os.Parcel.readValue (ClassLoader loader) &mdash; Read a typed object from a parcel. <br /><br />android.os.Parcel.readArrayList (ClassLoader loader)   Read and return a new ArrayList object from the parcel at the current dataPosition () &mdash; Read and return a new ArrayList object from the parcel at the current dataPosition(). <br /><br />android.os.Parcel.writeValue (Object v) &mdash; Flatten a generic object in to a parcel. <br /><br />android.os.Parcel.createBinderArrayList ()   Read and return a new ArrayList containing IBinder objects from the parcel that was written with writeBinderList (List  )  at the current dataPosition () &mdash; Read and return a new ArrayList containing IBinder objects from the parcel that was written with writeBinderList(List  )  at the current dataPosition(). <br /><br />android.os.Parcel.writeArray (Object[] val)   Flatten an Object array into the parcel at the current dataPosition (), growing dataCapacity () &mdash; Flatten an Object array into the parcel at the current dataPosition(), growing dataCapacity() if needed. <br /><br />android.os.Parcel.readArray (ClassLoader loader)   Read and return a new Object array from the parcel at the current dataPosition () &mdash; Read and return a new Object array from the parcel at the current dataPosition(). <br /><br />android.os.Parcel.dataPosition () &mdash; Returns the current position in the parcel data. <br /><br />android.os.Parcel.readStrongBinder ()   Read an object from the parcel at the current dataPosition () &mdash; Read an object from the parcel at the current dataPosition(). <br /><br />android.os.Parcel.writeList (List val)   Flatten a List into the parcel at the current dataPosition (), growing dataCapacity () &mdash; Flatten a List into the parcel at the current dataPosition(), growing dataCapacity() if needed. <br /><br />"
"android.os.Parcel.marshall () &mdash; Returns the raw bytes of the parcel. <br /><br />android.os.Parcel.readDouble ()   Read a double precision floating point value from the parcel at the current dataPosition () &mdash; Read a double precision floating point value from the parcel at the current dataPosition(). <br /><br />android.os.Parcel.writeDouble (double val)   Write a double precision floating point value into the parcel at the current dataPosition (), growing dataCapacity () &mdash; Write a double precision floating point value into the parcel at the current dataPosition(), growing dataCapacity() if needed. <br /><br />android.os.Parcel.writeByteArray (byte[] b, int offset, int len)   Write a byte array into the parcel at the current dataPosition (), growing dataCapacity () &mdash; Write a byte array into the parcel at the current dataPosition(), growing dataCapacity() if needed. <br /><br />android.os.Parcel.dataSize () &mdash; Returns the total amount of data contained in the parcel. <br /><br />android.os.Parcel.obtain () &mdash; Retrieve a new Parcel object from the pool. <br /><br />android.os.Parcel.readFloat ()   Read a floating point value from the parcel at the current dataPosition () &mdash; Read a floating point value from the parcel at the current dataPosition(). <br /><br />android.os.Parcel.readHashMap (ClassLoader loader)   Please use readBundle (ClassLoader) instead  (whose data must have been written with writeBundle (Bundle) &mdash; Please use readBundle(ClassLoader) instead (whose data must have been written with writeBundle(Bundle). <br /><br />android.os.Parcel.readParcelableArray (ClassLoader loader) &mdash; Read and return a new Parcelable array from the parcel. <br /><br />android.os.Parcel.readLong ()   Read a long integer value from the parcel at the current dataPosition () &mdash; Read a long integer value from the parcel at the current dataPosition(). <br /><br />android.os.Parcel.readInt ()   Read an integer value from the parcel at the current dataPosition () &mdash; Read an integer value from the parcel at the current dataPosition(). <br /><br />android.os.Parcel.writeParcelable (Parcelable p, int parcelableFlags) &mdash; Flatten the name of the class of the Parcelable and its contents into the parcel. <br /><br />android.os.Parcel.writeMap (Map val)   Please use writeBundle (Bundle) &mdash; Please use writeBundle(Bundle) instead. <br /><br />android.os.Parcel.writeLong (long val)   Write a long integer value into the parcel at the current dataPosition (), growing dataCapacity () &mdash; Write a long integer value into the parcel at the current dataPosition(), growing dataCapacity() if needed. <br /><br />android.os.Parcel.writeNoException () &mdash; Special function for writing information at the front of the Parcel indicating that no exception occurred. <br /><br />android.os.Parcel.writeStrongBinder (IBinder val)   Write an object into the parcel at the current dataPosition (), growing dataCapacity () &mdash; Write an object into the parcel at the current dataPosition(), growing dataCapacity() if needed. <br /><br />android.os.Parcel.readStringList (List< String> list)   Read into the given List items String objects that were written with writeStringList (List  )  at the current dataPosition () &mdash; Read into the given List items String objects that were written with writeStringList(List  )  at the current dataPosition(). <br /><br />android.os.Parcel.unmarshall (byte[] data, int offset, int length) &mdash; Set the bytes in data to be the raw bytes of this Parcel. <br /><br />android.os.Parcel.readBundle ()   Read and return a new Bundle object from the parcel at the current dataPosition () &mdash; Read and return a new Bundle object from the parcel at the current dataPosition(). <br /><br />android.os.Parcel.writeInt (int val)   Write an integer value into the parcel at the current dataPosition (), growing dataCapacity () &mdash; Write an integer value into the parcel at the current dataPosition(), growing dataCapacity() if needed. <br /><br />"
"android.os.Parcel.recycle () &mdash; Put a Parcel object back into the pool. <br /><br />android.os.Parcel.writeInterfaceToken (String interfaceName)   Store or read an IBinder interface token in the parcel at the current dataPosition () &mdash; Store or read an IBinder interface token in the parcel at the current dataPosition(). <br /><br />android.os.Parcel.writeStringList (List< String> val)   Flatten a List containing String objects into the parcel, at the current dataPosition () and growing dataCapacity () &mdash; Flatten a List containing String objects into the parcel, at the current dataPosition() and growing dataCapacity() if needed. <br /><br />android.os.Parcel.readParcelable (ClassLoader loader) &mdash; Read and return a new Parcelable from the parcel. <br /><br />android.os.Parcel.createStringArrayList ()   Read and return a new ArrayList containing String objects from the parcel that was written with writeStringList (List  )  at the current dataPosition () &mdash; Read and return a new ArrayList containing String objects from the parcel that was written with writeStringList(List  )  at the current dataPosition(). <br /><br />android.os.Parcel.writeFileDescriptor (FileDescriptor val)   Write a FileDescriptor into the parcel at the current dataPosition (), growing dataCapacity () &mdash; Write a FileDescriptor into the parcel at the current dataPosition(), growing dataCapacity() if needed. <br /><br />android.os.Parcel.readString ()   Read a string value from the parcel at the current dataPosition () &mdash; Read a string value from the parcel at the current dataPosition(). <br /><br />android.os.Parcel.readByteArray (byte[] val) &mdash; Read a byte[] object from the parcel and copy it into the given byte array. <br /><br />android.os.Parcel.writeTypedList (List<T> val)   Flatten a List containing a particular object type into the parcel, at the current dataPosition () and growing dataCapacity () &mdash; Flatten a List containing a particular object type into the parcel, at the current dataPosition() and growing dataCapacity() if needed. <br /><br />android.os.Parcel.readException (int code, String msg) &mdash; Throw an exception with the given message. <br /><br />android.os.Parcel.readBundle (ClassLoader loader)   Read and return a new Bundle object from the parcel at the current dataPosition () &mdash; Read and return a new Bundle object from the parcel at the current dataPosition(), using the given class loader to initialize the class loader of the Bundle for later retrieval of Parcelable objects. <br /><br />android.os.Parcel.writeByte (byte val)   Write a byte value into the parcel at the current dataPosition (), growing dataCapacity () &mdash; Write a byte value into the parcel at the current dataPosition(), growing dataCapacity() if needed. <br /><br />android.os.Parcel.writeFloat (float val)   Write a floating point value into the parcel at the current dataPosition (), growing dataCapacity () &mdash; Write a floating point value into the parcel at the current dataPosition(), growing dataCapacity() if needed. <br /><br />android.os.Parcel.createByteArray () &mdash; Read and return a byte[] object from the parcel. <br /><br />android.os.Parcel.writeString (String val)   Write a string value into the parcel at the current dataPosition (), growing dataCapacity () &mdash; Write a string value into the parcel at the current dataPosition(), growing dataCapacity() if needed. <br /><br />android.os.Parcel.setDataPosition (int pos) &mdash; Move the current read/write position in the parcel. <br /><br />android.os.Parcel.readByte ()   Read a byte value from the parcel at the current dataPosition () &mdash; Read a byte value from the parcel at the current dataPosition(). <br /><br />android.os.Parcel.readSerializable () &mdash; Read and return a new Serializable object from the parcel. <br /><br />android.os.Parcel.readException () &mdash; Special function for reading an exception result from the header of a parcel, to be used after receiving the result of a transaction. <br /><br />android.os.Parcel.writeBinderList (List< IBinder> val)   Flatten a List containing IBinder objects into the parcel, at the current dataPosition () and growing dataCapacity () &mdash; Flatten a List containing IBinder objects into the parcel, at the current dataPosition() and growing dataCapacity() if needed. <br /><br />"
"android.os.Parcel.writeSerializable (Serializable s) &mdash; Write a generic serializable object in to a Parcel. <br /><br />android.os.Parcel.readList (List outVal, ClassLoader loader)   Read into an existing List object from the parcel at the current dataPosition () &mdash; Read into an existing List object from the parcel at the current dataPosition(), using the given class loader to load any enclosed Parcelables. <br /><br />android.os.Parcel.writeBundle (Bundle val)   Flatten a Bundle into the parcel at the current dataPosition (), growing dataCapacity () &mdash; Flatten a Bundle into the parcel at the current dataPosition(), growing dataCapacity() if needed. <br /><br />android.os.Parcel.readFileDescriptor ()   Read a FileDescriptor from the parcel at the current dataPosition () &mdash; Read a FileDescriptor from the parcel at the current dataPosition(). <br /><br />android.os.Parcelable.describeContents () &mdash; Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />android.os.ParcelFileDescriptor.open (File file, int mode, Handler handler, ParcelFileDescriptor.OnCloseListener listener) &mdash; Create a new ParcelFileDescriptor accessing a given file. <br /><br />android.os.ParcelFileDescriptor.close () &mdash; Close the ParcelFileDescriptor. <br /><br />android.os.ParcelFileDescriptor.getFd () &mdash; Return the native fd int for this ParcelFileDescriptor. <br /><br />android.os.ParcelFileDescriptor.getStatSize ()   Return the total size of the file representing this fd, as determined by stat () &mdash; Return the total size of the file representing this fd, as determined by stat(). <br /><br />android.os.ParcelFileDescriptor.getFileDescriptor () &mdash; Retrieve the actual FileDescriptor associated with this object. <br /><br />android.os.ParcelFileDescriptor.writeToParcel (Parcel out, int flags) &mdash; Flatten this object in to a Parcel. If PARCELABLE_WRITE_RETURN_VALUE is set in flags, the file descriptor will be closed after a copy is written to the Parcel. <br /><br />android.os.ParcelFileDescriptor.createPipe () &mdash; Create two ParcelFileDescriptors structured as a data pipe. <br /><br />android.os.PowerManager.isScreenOn ()    This method was deprecated in API level 20. Use isInteractive () &mdash; This method was deprecated in API level 20. Use isInteractive() instead. <br /><br />android.os.PowerManager.newWakeLock (int levelAndFlags, String tag) &mdash; Creates a new wake lock with the specified level and flags. <br /><br />android.os.PowerManager.isInteractive () &mdash; Returns true if the device is in an interactive state. <br /><br />android.os.Process.getElapsedCpuTime () &mdash; Returns elapsed milliseconds of the time this process has run. <br /><br />android.os.Process.myPid ()   Returns the identifier of this process, which can be used with killProcess (int) and sendSignal (int, int) &mdash; Returns the identifier of this process, which can be used with killProcess(int) and sendSignal(int, int). <br /><br />android.os.Process.setThreadPriority (int priority) &mdash; Set the priority of the calling thread, based on Linux priorities. <br /><br />android.os.Process.setThreadPriority (int tid, int priority) &mdash; Set the priority of a thread, based on Linux priorities. <br /><br />android.os.Process.myUid () &mdash; Returns the identifier of this process's uid. <br /><br />"
"android.os.Process.killProcess (int pid) &mdash; Kill the process with the given PID. <br /><br />android.os.Process.getThreadPriority (int tid) &mdash; Return the current priority of a thread, based on Linux priorities. <br /><br />android.os.Process.myTid ()   Returns the identifier of the calling thread, which be used with setThreadPriority (int, int) &mdash; Returns the identifier of the calling thread, which be used with setThreadPriority(int, int). <br /><br />android.os.ResultReceiver.send (int resultCode, Bundle resultData) &mdash; Deliver a result to this receiver. <br /><br />android.os.StatFs.getBlockCount ()    This method was deprecated in API level 18. Use getBlockCountLong () &mdash; This method was deprecated in API level 18. Use getBlockCountLong() instead. <br /><br />android.os.StatFs.getBlockSizeLong () &mdash; The size, in bytes, of a block on the file system. <br /><br />android.os.StatFs.getBlockSize ()    This method was deprecated in API level 18. Use getBlockSizeLong () &mdash; This method was deprecated in API level 18. Use getBlockSizeLong() instead. <br /><br />android.os.StatFs.getFreeBlocks ()    This method was deprecated in API level 18. Use getFreeBlocksLong () &mdash; This method was deprecated in API level 18. Use getFreeBlocksLong() instead. <br /><br />android.os.StatFs.getAvailableBlocks ()    This method was deprecated in API level 18. Use getAvailableBlocksLong () &mdash; This method was deprecated in API level 18. Use getAvailableBlocksLong() instead. <br /><br />android.os.StatFs.restat (String path) &mdash; Perform a restat of the file system referenced by this object. <br /><br />android.os.StatFs.getAvailableBlocksLong () &mdash; The number of blocks that are free on the file system and available to applications. <br /><br />android.os.SystemClock.elapsedRealtimeNanos () &mdash; Returns nanoseconds since boot, including time spent in sleep. <br /><br />android.os.SystemClock.currentThreadTimeMillis () &mdash; Returns milliseconds running in the current thread. <br /><br />android.os.SystemClock.uptimeMillis () &mdash; Returns milliseconds since boot, not counting time spent in deep sleep. <br /><br />android.os.SystemClock.elapsedRealtime () &mdash; Returns milliseconds since boot, including time spent in sleep. <br /><br />android.os.SystemClock.sleep (long ms)   Waits a given number of milliseconds  (of uptimeMillis) &mdash; Waits a given number of milliseconds (of uptimeMillis) before returning. <br /><br />android.os.UserHandle.readFromParcel (Parcel in)   Read a UserHandle from a Parcel that was previously written with writeToParcel (UserHandle, Parcel) &mdash; Read a UserHandle from a Parcel that was previously written with writeToParcel(UserHandle, Parcel), returning either a null or new object as appropriate. <br /><br />android.os.Vibrator.vibrate (long milliseconds) &mdash; Vibrate constantly for the specified period of time. <br /><br />android.os.Vibrator.hasVibrator () &mdash; Check whether the hardware has a vibrator. <br /><br />android.os.Vibrator.vibrate (long[] pattern, int repeat) &mdash; Vibrate with a given pattern. <br /><br />"
"android.os.Vibrator.cancel () &mdash; Turn the vibrator off. <br /><br />android.preference.EditTextPreference.getEditText () &mdash; Returns the EditText widget that will be shown in the dialog. <br /><br />android.preference.ListPreference.setValue (String value) &mdash; Sets the value of the key. <br /><br />android.preference.ListPreference.setEntryValues (CharSequence[] entryValues) &mdash; The array to find the value to save for a preference when an entry from entries is selected. <br /><br />android.preference.ListPreference.setSummary (CharSequence summary) &mdash; Sets the summary for this Preference with a CharSequence. <br /><br />android.preference.ListPreference.findIndexOfValue (String value)   Returns the index of the given value  (in the entry values array) &mdash; Returns the index of the given value (in the entry values array). <br /><br />android.preference.ListPreference.getSummary () &mdash; Returns the summary of this ListPreference. <br /><br />android.preference.ListPreference.getEntry () &mdash; Returns the entry corresponding to the current value. <br /><br />android.preference.ListPreference.setEntries (CharSequence[] entries) &mdash; Sets the human-readable entries to be shown in the list. <br /><br />android.preference.Preference.shouldDisableDependents () &mdash; Checks whether this preference's dependents should currently be disabled. <br /><br />android.preference.Preference.setEnabled (boolean enabled) &mdash; Sets whether this Preference is enabled. <br /><br />android.preference.Preference.setSummary (int summaryResId) &mdash; Sets the summary for this Preference with a resource ID. <br /><br />android.preference.Preference.setSelectable (boolean selectable) &mdash; Sets whether this Preference is selectable. <br /><br />android.preference.Preference.setTitle (int titleResId) &mdash; Sets the title for this Preference with a resource ID. <br /><br />android.preference.Preference.setWidgetLayoutResource (int widgetLayoutResId) &mdash; Sets the layout for the controllable widget portion of this Preference. <br /><br />android.preference.Preference.setTitle (CharSequence title) &mdash; Sets the title for this Preference with a CharSequence. <br /><br />android.preference.PreferenceActivity.onPreferenceTreeClick (PreferenceScreen preferenceScreen, Preference preference) &mdash; This method was deprecated in API level 11. This function is not relevant for a modern fragment-based PreferenceActivity. <br /><br />android.preference.PreferenceFragment.findPreference (CharSequence key) &mdash; Finds a Preference based on its key. <br /><br />android.preference.PreferenceFragment.onCreateView (LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &mdash; Called to have the fragment instantiate its user interface view. <br /><br />android.preference.PreferenceManager.setSharedPreferencesName (String sharedPreferencesName) &mdash; Sets the name of the SharedPreferences file that preferences managed by this will use. <br /><br />"
"android.preference.PreferenceManager.getSharedPreferences () &mdash; Gets a SharedPreferences instance that preferences managed by this will use. <br /><br />android.preference.PreferenceManager.setSharedPreferencesMode (int sharedPreferencesMode) &mdash; Sets the mode of the SharedPreferences file that preferences managed by this will use. <br /><br />android.preference.PreferenceManager.getDefaultSharedPreferences (Context context) &mdash; Gets a SharedPreferences instance that points to the default file that is used by the preference framework in the given context. <br /><br />android.preference.PreferenceManager.setDefaultValues (Context context, String sharedPreferencesName, int sharedPreferencesMode, int resId, boolean readAgain)   Similar to setDefaultValues (Context, int, boolean) &mdash; Similar to setDefaultValues(Context, int, boolean) but allows the client to provide the filename and mode of the shared preferences file. <br /><br />android.preference.PreferenceManager.setDefaultValues (Context context, int resId, boolean readAgain) &mdash; Sets the default values from an XML preference file by reading the values defined by each Preference item's android:defaultValue attribute. <br /><br />android.print.pdf.PrintedPdfDocument.startPage (int pageNumber) &mdash; Starts a new page. <br /><br />android.print.PrintDocumentAdapter.onFinish () &mdash; Called when printing finishes. <br /><br />android.print.PrintManager.print (String printJobName, PrintDocumentAdapter documentAdapter, PrintAttributes attributes) &mdash; Creates a print job for printing a PrintDocumentAdapter with default print attributes. <br /><br />android.provider.Browser.clearHistory (ContentResolver cr) &mdash; Delete all entries from the bookmarks/history table which are not bookmarks. <br /><br />android.provider.DocumentsContract.buildDocumentUriUsingTree (Uri treeUri, String documentId) &mdash; Build URI representing the target COLUMN_DOCUMENT_ID in a document provider. <br /><br />android.provider.DocumentsContract.createDocument (ContentResolver resolver, Uri parentDocumentUri, String mimeType, String displayName) &mdash; Create a new document with given MIME type and display name. <br /><br />android.provider.DocumentsContract.getTreeDocumentId (Uri documentUri) &mdash; Extract the via COLUMN_DOCUMENT_ID from the given URI. <br /><br />android.provider.DocumentsContract.deleteDocument (ContentResolver resolver, Uri documentUri) &mdash; Delete the given document. <br /><br />android.provider.DocumentsContract.isDocumentUri (Context context, Uri uri) &mdash; Test if the given URI represents a DocumentsContract.Document backed by a DocumentsProvider. <br /><br />android.provider.DocumentsContract.buildChildDocumentsUriUsingTree (Uri treeUri, String parentDocumentId) &mdash; Build URI representing the children of the target directory in a document provider. <br /><br />android.provider.DocumentsContract.getDocumentId (Uri documentUri) &mdash; Extract the COLUMN_DOCUMENT_ID from the given URI. <br /><br />android.provider.DocumentsContract.renameDocument (ContentResolver resolver, Uri documentUri, String displayName) &mdash; Change the display name of an existing document. <br /><br />android.provider.SearchRecentSuggestions.clearHistory () &mdash; Completely delete the history. <br /><br />android.renderscript.Allocation.getType () &mdash; Get the Type of the Allocation. <br /><br />android.renderscript.Allocation.copyTo (Object array) &mdash; Copy from the Allocation into an array. <br /><br />"
"android.renderscript.Allocation.createTyped (RenderScript rs, Type type, int usage) &mdash; Creates an Allocation with the size specified by the type and no mipmaps generated by default <br /><br />android.renderscript.Allocation.copyTo (short[] d) &mdash; Copy from the Allocation into a short array. <br /><br />android.renderscript.Allocation.createTyped (RenderScript rs, Type type) &mdash; Creates an Allocation for use by scripts with a given Type and no mipmaps <br /><br />android.renderscript.Allocation.copyTo (int[] d) &mdash; Copy from the Allocation into a int array. <br /><br />android.renderscript.Allocation.copyTo (Bitmap b) &mdash; Copy from the Allocation into a Bitmap. <br /><br />android.renderscript.Allocation.copyTo (float[] d) &mdash; Copy from the Allocation into a float array. <br /><br />android.renderscript.Allocation.copyTo (byte[] d) &mdash; Copy from the Allocation into a byte array. <br /><br />android.renderscript.Allocation.createTyped (RenderScript rs, Type type, Allocation.MipmapControl mips, int usage) &mdash; Creates a new Allocation with the given Type, mipmap flag, and usage flags. <br /><br />android.renderscript.RenderScript.create (Context ctx, RenderScript.ContextType ct, int flags) &mdash; Create a RenderScript context. <br /><br />android.renderscript.ScriptIntrinsicBlur.forEach (Allocation aout, Script.LaunchOptions opt) &mdash; Apply the filter to the input and save to the specified allocation. <br /><br />android.renderscript.ScriptIntrinsicBlur.create (RenderScript rs, Element e) &mdash; Create an intrinsic for applying a blur to an allocation. <br /><br />android.renderscript.ScriptIntrinsicBlur.setRadius (float radius) &mdash; Set the radius of the Blur. <br /><br />android.renderscript.ScriptIntrinsicBlur.setInput (Allocation ain) &mdash; Set the input of the blur. <br /><br />android.service.dreams.DreamService.onDreamingStopped ()   Called when this Dream is stopped, either by external request or by calling finish () &mdash; Called when this Dream is stopped, either by external request or by calling finish(), before the window has been removed. <br /><br />android.service.dreams.DreamService.onDreamingStarted () &mdash; Called when the dream's window has been created and is visible and animation may now begin. <br /><br />android.service.notification.NotificationListenerService.onBind (Intent intent) &mdash; Return the communication channel to the service. <br /><br />android.service.notification.StatusBarNotification.getTag ()   The tag supplied to notify (int, Notification) &mdash; The tag supplied to notify(int, Notification), or null if no tag was specified. <br /><br />android.service.notification.StatusBarNotification.getPackageName () &mdash; The package of the app that posted the notification. <br /><br />android.service.notification.StatusBarNotification.getNotification ()   The Notification supplied to notify (int, Notification) &mdash; The Notification supplied to notify(int, Notification). <br /><br />android.service.notification.StatusBarNotification.getId ()   The id supplied to notify (int, Notification) &mdash; The id supplied to notify(int, Notification). <br /><br />"
"android.speech.tts.TextToSpeech.shutdown () &mdash; Releases the resources used by the TextToSpeech engine. <br /><br />android.speech.tts.TextToSpeech.speak (CharSequence text, int queueMode, Bundle params, String utteranceId) &mdash; Speaks the text using the specified queuing strategy and speech parameters, the text may be spanned with TtsSpans. <br /><br />android.speech.tts.TextToSpeech.setPitch (float pitch) &mdash; Sets the speech pitch for the TextToSpeech engine. <br /><br />android.speech.tts.TextToSpeech.getFeatures (Locale locale)    This method was deprecated in API level 21. As of API level 21, please use voices. In order to query features of the voice, call getVoices () to retrieve the list of available voices and getFeatures () &mdash; This method was deprecated in API level 21. As of API level 21, please use voices. In order to query features of the voice, call getVoices() to retrieve the list of available voices and getFeatures() to retrieve the set of features. <br /><br />android.speech.tts.TextToSpeech.playSilence (long durationInMs, int queueMode, HashMap< String,  String> params)    This method was deprecated in API level 21. As of API level 21, replaced by playSilentUtterance (long, int, String) &mdash; This method was deprecated in API level 21. As of API level 21, replaced by playSilentUtterance(long, int, String). <br /><br />android.speech.tts.TextToSpeech.stop ()   Interrupts the current utterance  (whether played or rendered to file) &mdash; Interrupts the current utterance (whether played or rendered to file) and discards other utterances in the queue. <br /><br />android.speech.tts.TextToSpeech.setSpeechRate (float speechRate) &mdash; Sets the speech rate. <br /><br />android.speech.tts.TextToSpeech.speak (String text, int queueMode, HashMap< String,  String> params)    This method was deprecated in API level 21. As of API level 21, replaced by speak (CharSequence, int, Bundle, String) &mdash; This method was deprecated in API level 21. As of API level 21, replaced by speak(CharSequence, int, Bundle, String). <br /><br />android.speech.tts.TextToSpeech.setOnUtteranceProgressListener (UtteranceProgressListener listener) &mdash; Sets the listener that will be notified of various events related to the synthesis of a given utterance. <br /><br />android.support.multidex.MultiDex.install (Context context) &mdash; Patches the application context class loader by appending extra dex files loaded from the application apk. <br /><br />android.support.v13.app.FragmentCompat.setMenuVisibility (Fragment f, boolean visible)   Call Fragment.setMenuVisibility (boolean) &mdash; Call Fragment.setMenuVisibility(boolean) if running on an appropriate version of the platform. <br /><br />android.support.v13.app.FragmentCompat.setUserVisibleHint (Fragment f, boolean deferStart)   Call setUserVisibleHint (boolean) &mdash; Call setUserVisibleHint(boolean) if running on an appropriate version of the platform. <br /><br />android.support.v13.app.FragmentPagerAdapter.getItem (int position) &mdash; Return the Fragment associated with a specified position. <br /><br />android.support.v13.app.FragmentPagerAdapter.getItemId (int position) &mdash; Return a unique identifier for the item at the given position. <br /><br />android.support.v4.app.ActionBarDrawerToggle.onDrawerStateChanged (int newState) &mdash; DrawerLayout.DrawerListener callback method. <br /><br />android.support.v4.app.ActionBarDrawerToggle.setHomeAsUpIndicator (int resId) &mdash; Set the up indicator to display when the drawer indicator is not enabled. <br /><br />android.support.v4.app.ActionBarDrawerToggle.setDrawerIndicatorEnabled (boolean enable) &mdash; Enable or disable the drawer indicator. <br /><br />android.support.v4.app.ActionBarDrawerToggle.onConfigurationChanged (Configuration newConfig)   This method should always be called by your Activity's &mdash; This method should always be called by your Activity's onConfigurationChanged method. <br /><br />android.support.v4.app.ActionBarDrawerToggle.syncState () &mdash; Synchronize the state of the drawer indicator/affordance with the linked DrawerLayout. <br /><br />android.support.v4.app.ActionBarDrawerToggle.onOptionsItemSelected (MenuItem item)   This method should be called by your Activity's &mdash; This method should be called by your Activity's onOptionsItemSelected method. <br /><br />"
"android.support.v4.app.ActivityCompat.finishAffinity (Activity activity) &mdash; Finish this activity, and tries to finish all activities immediately below it in the current task that have the same affinity. <br /><br />android.support.v4.app.DialogFragment.onDetach () &mdash; Called when the fragment is no longer attached to its activity. <br /><br />android.support.v4.app.DialogFragment.onDestroyView () &mdash; Remove dialog. <br /><br />android.support.v4.app.DialogFragment.onCancel (DialogInterface dialog) &mdash; This method will be invoked when the dialog is canceled. <br /><br />android.support.v4.app.DialogFragment.onCreateDialog (Bundle savedInstanceState) &mdash; Override to build your own custom Dialog container. <br /><br />android.support.v4.app.DialogFragment.onDismiss (DialogInterface dialog) &mdash; This method will be invoked when the dialog is dismissed. <br /><br />android.support.v4.app.DialogFragment.dismissAllowingStateLoss ()   Version of dismiss () that uses FragmentTransaction.commitAllowingStateLoss () &mdash; Version of dismiss() that uses FragmentTransaction.commitAllowingStateLoss(). <br /><br />android.support.v4.app.Fragment.getExitTransition () &mdash; Returns the Transition that will be used to move Views out of the scene when the fragment is removed, hidden, or detached when not popping the back stack. <br /><br />android.support.v4.app.Fragment.getSharedElementEnterTransition () &mdash; Returns the Transition that will be used for shared elements transferred into the content Scene. <br /><br />android.support.v4.app.Fragment.getFragmentManager () &mdash; Return the FragmentManager for interacting with fragments associated with this fragment's activity. <br /><br />android.support.v4.app.Fragment.getAllowEnterTransitionOverlap () &mdash; Returns whether the the exit transition and enter transition overlap or not. <br /><br />android.support.v4.app.Fragment.onDestroyOptionsMenu () &mdash; Called when this fragment's option menu items are no longer being included in the overall options menu. <br /><br />android.support.v4.app.Fragment.getEnterTransition () &mdash; Returns the Transition that will be used to move Views into the initial scene. <br /><br />android.support.v4.app.Fragment.startActivity (Intent intent)   Call startActivity (Intent) &mdash; Call startActivity(Intent) on the fragment's containing Activity. <br /><br />android.support.v4.app.Fragment.getReturnTransition () &mdash; Returns the Transition that will be used to move Views out of the scene when the Fragment is preparing to be removed, hidden, or detached because of popping the back stack. <br /><br />android.support.v4.app.Fragment.onHiddenChanged (boolean hidden)   Called when the hidden state  (as returned by isHidden () &mdash; Called when the hidden state (as returned by isHidden() of the fragment has changed. <br /><br />android.support.v4.app.Fragment.getAllowReturnTransitionOverlap () &mdash; Returns whether the the return transition and reenter transition overlap or not. <br /><br />android.support.v4.app.Fragment.getReenterTransition () &mdash; Returns the Transition that will be used to move Views in to the scene when returning due to popping a back stack. <br /><br />android.support.v4.app.Fragment.startActivityForResult (Intent intent, int requestCode)   Call startActivityForResult (Intent, int) &mdash; Call startActivityForResult(Intent, int) on the fragment's containing Activity. <br /><br />android.support.v4.app.Fragment.getLoaderManager () &mdash; Return the LoaderManager for this fragment, creating it if needed. <br /><br />"
"android.support.v4.app.Fragment.getChildFragmentManager () &mdash; Return a private FragmentManager for placing and managing Fragments inside of this Fragment. <br /><br />android.support.v4.app.Fragment.setTargetFragment (Fragment fragment, int requestCode) &mdash; Optional target for this fragment. <br /><br />android.support.v4.app.Fragment.equals (Object o)   Subclasses can not override equals () &mdash; Subclasses can not override equals(). <br /><br />android.support.v4.app.Fragment.onViewCreated (View view, Bundle savedInstanceState)   Called immediately after onCreateView (LayoutInflater, ViewGroup, Bundle) &mdash; Called immediately after onCreateView(LayoutInflater, ViewGroup, Bundle) has returned, but before any saved state has been restored in to the view. <br /><br />android.support.v4.app.Fragment.onCreateAnimation (int transit, boolean enter, int nextAnim) &mdash; Called when a fragment loads an animation. <br /><br />android.support.v4.app.Fragment.onViewStateRestored (Bundle savedInstanceState) &mdash; Called when all saved state has been restored into the view hierarchy of the fragment. <br /><br />android.support.v4.app.Fragment.getSharedElementReturnTransition () &mdash; Return the Transition that will be used for shared elements transferred back during a pop of the back stack. <br /><br />android.support.v4.app.Fragment.dump (String prefix, FileDescriptor fd, PrintWriter writer, String[] args) &mdash; Print the Fragments's state into the given stream. <br /><br />android.support.v4.app.FragmentActivity.startActivityForResult (Intent intent, int requestCode) &mdash; Modifies the standard behavior to allow results to be delivered to fragments. <br /><br />android.support.v4.app.FragmentActivity.onBackPressed () &mdash; Take care of popping the fragment back stack or finishing the activity as appropriate. <br /><br />android.support.v4.app.FragmentActivity.supportInvalidateOptionsMenu ()   Support library version of invalidateOptionsMenu () &mdash; Support library version of invalidateOptionsMenu(). <br /><br />android.support.v4.app.FragmentActivity.onPreparePanel (int featureId, View view, Menu menu)   Dispatch onPrepareOptionsMenu () &mdash; Dispatch onPrepareOptionsMenu() to fragments. <br /><br />android.support.v4.app.FragmentActivity.onCreatePanelMenu (int featureId, Menu menu)   Dispatch to Fragment.onCreateOptionsMenu () &mdash; Dispatch to Fragment.onCreateOptionsMenu(). <br /><br />android.support.v4.app.FragmentActivity.onRetainCustomNonConfigurationInstance ()   Use this instead of onRetainNonConfigurationInstance () &mdash; Use this instead of onRetainNonConfigurationInstance(). <br /><br />android.support.v4.app.FragmentActivity.onConfigurationChanged (Configuration newConfig) &mdash; Dispatch configuration change to all fragments. <br /><br />android.support.v4.app.FragmentActivity.startActivityFromFragment (Fragment fragment, Intent intent, int requestCode)   Called by Fragment.startActivityForResult () &mdash; Called by Fragment.startActivityForResult() to implement its behavior. <br /><br />android.support.v4.app.FragmentActivity.onAttachFragment (Fragment fragment) &mdash; Called when a fragment is attached to the activity. <br /><br />android.support.v4.app.FragmentActivity.onKeyDown (int keyCode, KeyEvent event)   Take care of calling onBackPressed () &mdash; Take care of calling onBackPressed() for pre-Eclair platforms. <br /><br />android.support.v4.app.FragmentActivity.onMenuItemSelected (int featureId, MenuItem item) &mdash; Dispatch context and options menu to fragments. <br /><br />android.support.v4.app.FragmentManager.findFragmentById (int id) &mdash; Finds a fragment that was identified by the given id either when inflated from XML or as the container ID when added in a transaction. <br /><br />"
"android.support.v4.app.FragmentManager.getBackStackEntryAt (int index) &mdash; Return the BackStackEntry at index index in the back stack; entries start index 0 being the bottom of the stack. <br /><br />android.support.v4.app.FragmentManager.dump (String prefix, FileDescriptor fd, PrintWriter writer, String[] args) &mdash; Print the FragmentManager's state into the given stream. <br /><br />android.support.v4.app.FragmentPagerAdapter.setPrimaryItem (ViewGroup container, int position, Object object) &mdash; Called to inform the adapter of which item is currently considered to be the 'primary', that is the one show to the user as the current page. <br /><br />android.support.v4.app.FragmentPagerAdapter.instantiateItem (ViewGroup container, int position) &mdash; Create the page for the given position. <br /><br />android.support.v4.app.FragmentPagerAdapter.destroyItem (ViewGroup container, int position, Object object) &mdash; Remove a page for the given position. <br /><br />android.support.v4.app.FragmentTabHost.setup ()    This method is deprecated. Don't call the original TabHost setup, you must instead call setup (Context, FragmentManager) or setup (Context, FragmentManager, int) &mdash; This method is deprecated. Don't call the original TabHost setup, you must instead call setup(Context, FragmentManager) or setup(Context, FragmentManager, int). <br /><br />android.support.v4.app.FragmentTransaction.setCustomAnimations (int enter, int exit, int popEnter, int popExit) &mdash; Set specific animation resources to run for the fragments that are entering and exiting in this transaction. <br /><br />android.support.v4.app.FragmentTransaction.attach (Fragment fragment)   Re-attach a fragment after it had previously been deatched from the UI with detach (Fragment) &mdash; Re-attach a fragment after it had previously been deatched from the UI with detach(Fragment). <br /><br />android.support.v4.app.FragmentTransaction.disallowAddToBackStack ()   Disallow calls to addToBackStack (String) &mdash; Disallow calls to addToBackStack(String). <br /><br />android.support.v4.app.FragmentTransaction.hide (Fragment fragment) &mdash; Hides an existing fragment. <br /><br />android.support.v4.app.FragmentTransaction.show (Fragment fragment) &mdash; Shows a previously hidden fragment. <br /><br />android.support.v4.app.ListFragment.onListItemClick (ListView l, View v, int position, long id) &mdash; This method will be called when an item in the list is selected. <br /><br />android.support.v4.app.ListFragment.onViewCreated (View view, Bundle savedInstanceState) &mdash; Attach to list view once the view hierarchy has been created. <br /><br />android.support.v4.app.ListFragment.onDestroyView () &mdash; Detach from list view. <br /><br />android.support.v4.app.ListFragment.onCreateView (LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &mdash; Provide default implementation to return a simple list view. <br /><br />android.support.v4.app.LoaderManager.destroyLoader (int id) &mdash; Stops and removes the loader with the given ID. <br /><br />android.support.v4.app.LoaderManager.getLoader (int id) &mdash; Return the Loader with the given id or null if no matching Loader is found. <br /><br />android.support.v4.app.NavUtils.navigateUpTo (Activity sourceActivity, Intent upIntent) &mdash; Navigate from sourceActivity to the activity specified by upIntent, finishing sourceActivity in the process. <br /><br />android.support.v4.app.NavUtils.shouldUpRecreateTask (Activity sourceActivity, Intent targetIntent) &mdash; Returns true if sourceActivity should recreate the task when navigating 'up' by using targetIntent. <br /><br />android.support.v4.app.NavUtils.getParentActivityName (Activity sourceActivity) &mdash; Return the fully qualified class name of sourceActivity's parent activity as specified by a PARENT_ACTIVITY <meta-data> element within the activity element in the application's manifest. <br /><br />"
"android.support.v4.app.NavUtils.getParentActivityIntent (Context context, Class<?> sourceActivityClass) &mdash; Obtain an Intent that will launch an explicit target activity specified by sourceActivityClass's PARENT_ACTIVITY <meta-data> element in the application's manifest. <br /><br />android.support.v4.app.NavUtils.getParentActivityIntent (Activity sourceActivity) &mdash; Obtain an Intent that will launch an explicit target activity specified by sourceActivity's PARENT_ACTIVITY <meta-data> element in the application's manifest. <br /><br />android.support.v4.app.NavUtils.getParentActivityName (Context context, ComponentName componentName) &mdash; Return the fully qualified class name of a source activity's parent activity as specified by a PARENT_ACTIVITY <meta-data> element within the activity element in the application's manifest. <br /><br />android.support.v4.app.NotificationCompat.getExtras (Notification notif) &mdash; Gets the extras field from a notification in a backwards compatible manner. <br /><br />android.support.v4.app.NotificationCompatSideChannelService.cancelAll (String packageName) &mdash; Handle the side-channelled cancelling of all notifications for a package. <br /><br />android.support.v4.app.NotificationCompatSideChannelService.notify (String packageName, int id, String tag, Notification notification) &mdash; Handle a side-channeled notification being posted. <br /><br />android.support.v4.app.NotificationCompatSideChannelService.cancel (String packageName, int id, String tag) &mdash; Handle a side-channelled notification being cancelled. <br /><br />android.support.v4.app.NotificationManagerCompat.notify (int id, Notification notification) &mdash; Post a notification to be shown in the status bar, stream, etc. <br /><br />android.support.v4.app.NotificationManagerCompat.getEnabledListenerPackages (Context context) &mdash; Get the set of packages that have an enabled notification listener component within them. <br /><br />android.support.v4.app.ShareCompat.getCallingActivity (Activity calledActivity) &mdash; Retrieve the ComponentName of the activity that launched calledActivity from a share intent. <br /><br />android.support.v4.app.ShareCompat.getCallingPackage (Activity calledActivity) &mdash; Retrieve the name of the package that launched calledActivity from a share intent. <br /><br />android.support.v4.app.SharedElementCallback.onMapSharedElements (List< String> names, Map< String,  View> sharedElements) &mdash; Lets the SharedElementCallback adjust the mapping of shared element names to Views. <br /><br />android.support.v4.app.SharedElementCallback.onCreateSnapshotView (Context context, Parcelable snapshot)   Reconstitutes a snapshot View from a Parcelable returned in onCaptureSharedElementSnapshot (android.view.View, android.graphics.Matrix, android.graphics.RectF) to be used in onSharedElementStart (java.util.List, java.util.List, java.util.List) and onSharedElementEnd (java.util.List, java.util.List, java.util.List) &mdash; Reconstitutes a snapshot View from a Parcelable returned in onCaptureSharedElementSnapshot(android.view.View, android.graphics.Matrix, android.graphics.RectF) to be used in onSharedElementStart(java.util.List, java.util.List, java.util.List) and onSharedElementEnd(java.util.List, java.util.List, java.util.List). <br /><br />android.support.v4.app.SharedElementCallback.onRejectSharedElements (List< View> rejectedSharedElements)   Called after onMapSharedElements (java.util.List, java.util.Map) &mdash; Called after onMapSharedElements(java.util.List, java.util.Map) when transferring shared elements in. <br /><br />android.support.v4.app.SharedElementCallback.onSharedElementEnd (List< String> sharedElementNames, List< View> sharedElements, List< View> sharedElementSnapshots) &mdash; Called after the end state is set for the shared element, but before the end state is captured by the shared element transition. <br /><br />android.support.v4.app.SharedElementCallback.onSharedElementStart (List< String> sharedElementNames, List< View> sharedElements, List< View> sharedElementSnapshots) &mdash; Called immediately after the start state is set for the shared element. <br /><br />android.support.v4.app.SharedElementCallback.onCaptureSharedElementSnapshot (View sharedElement, Matrix viewToGlobalMatrix, RectF screenBounds)   Creates a snapshot of a shared element to be used by the remote Activity and reconstituted with onCreateSnapshotView (android.content.Context, android.os.Parcelable) &mdash; Creates a snapshot of a shared element to be used by the remote Activity and reconstituted with onCreateSnapshotView(android.content.Context, android.os.Parcelable). <br /><br />android.support.v4.content.ContextCompat.startActivities (Context context, Intent[] intents) &mdash; Start a set of activities as a synthesized task stack, if able. <br /><br />android.support.v4.content.ContextCompat.getDrawable (Context context, int id) &mdash; Return a drawable object associated with a particular resource ID. <br /><br />android.support.v4.content.CursorLoader.deliverResult (Cursor cursor) &mdash; Sends the result of the load to the registered listener. <br /><br />"
"android.support.v4.content.CursorLoader.onCanceled (Cursor cursor) &mdash; Called if the task was canceled before it was completed. <br /><br />android.support.v4.content.FileProvider.getUriForFile (Context context, String authority, File file) &mdash; Return a content URI for a given File. <br /><br />android.support.v4.content.FileProvider.query (Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)   Use a content URI returned by getUriForFile () &mdash; Use a content URI returned by getUriForFile() to get information about a file managed by the FileProvider. <br /><br />android.support.v4.content.LocalBroadcastManager.registerReceiver (BroadcastReceiver receiver, IntentFilter filter) &mdash; Register a receive for any local broadcasts that match the given IntentFilter. <br /><br />android.support.v4.content.LocalBroadcastManager.sendBroadcastSync (Intent intent)   Like sendBroadcast (Intent) &mdash; Like sendBroadcast(Intent), but if there are any receivers for the Intent this function will block and immediately dispatch them before returning. <br /><br />android.support.v4.graphics.drawable.RoundedBitmapDrawableFactory.create (Resources res, InputStream is) &mdash; Returns a new drawable, creating it by decoding a bitmap from the given input stream. <br /><br />android.support.v4.graphics.drawable.RoundedBitmapDrawableFactory.create (Resources res, Bitmap bitmap) &mdash; Returns a new drawable by creating it from a bitmap, setting initial target density based on the display metrics of the resources. <br /><br />android.support.v4.graphics.drawable.RoundedBitmapDrawableFactory.create (Resources res, String filepath) &mdash; Returns a new drawable, creating it by opening a given file path and decoding the bitmap. <br /><br />android.support.v4.media.MediaMetadataCompat.getRating (String key) &mdash; Return a RatingCompat for the given key or null if no rating exists for the given key. <br /><br />android.support.v4.media.MediaMetadataCompat.getMediaMetadata () &mdash; Gets the underlying framework MediaMetadata object. <br /><br />android.support.v4.media.MediaMetadataCompat.getBitmap (String key) &mdash; Return a Bitmap for the given key or null if no bitmap exists for the given key. <br /><br />android.support.v4.media.MediaMetadataCompat.fromMediaMetadata (Object metadataObj) &mdash; Creates an instance from a framework MediaMetadata object. <br /><br />android.support.v4.media.RatingCompat.getRating () &mdash; Gets the underlying framework Rating object. <br /><br />android.support.v4.media.RatingCompat.fromRating (Object ratingObj) &mdash; Creates an instance from a framework Rating object. <br /><br />android.support.v4.media.session.MediaSessionCompat.getSessionToken () &mdash; Retrieve a token object that can be used by apps to create a MediaControllerCompat for interacting with this session. <br /><br />android.support.v4.media.session.PlaybackStateCompat.fromPlaybackState (Object stateObj) &mdash; Creates an instance from a framework PlaybackState object. <br /><br />android.support.v4.media.session.PlaybackStateCompat.getPlaybackState () &mdash; Gets the underlying framework PlaybackState object. <br /><br />android.support.v4.media.TransportPerformer.onGetDuration () &mdash; Request to return the duration of the current media, in milliseconds. <br /><br />android.support.v4.media.TransportPerformer.onStop () &mdash; Request to completely stop playback of the media, clearing whatever state the player thinks is appropriate. <br /><br />android.support.v4.media.TransportPerformer.onSeekTo (long pos) &mdash; Request to move the current playback position. <br /><br />"
"android.support.v4.media.TransportPerformer.onMediaButtonUp (int keyCode, KeyEvent event) &mdash; Report that a media button has been released. <br /><br />android.support.v4.media.TransportPerformer.onGetBufferPercentage () &mdash; Request to find out how much of the media has been buffered on the local device. <br /><br />android.support.v4.media.TransportPerformer.onAudioFocusChange (int focusChange) &mdash; Report that audio focus has changed on the app. <br /><br />android.support.v4.media.TransportPerformer.onGetCurrentPosition () &mdash; Request to return the current playback position, in milliseconds. <br /><br />android.support.v4.media.TransportPerformer.onIsPlaying () &mdash; Request to find out whether the player is currently playing its media. <br /><br />android.support.v4.media.TransportPerformer.onMediaButtonDown (int keyCode, KeyEvent event) &mdash; Report that a media button has been pressed. <br /><br />android.support.v4.media.TransportPerformer.onPause ()   Request to pause playback of the media, staying at the current playback position and other state so a later call to onStart () &mdash; Request to pause playback of the media, staying at the current playback position and other state so a later call to onStart() will resume at the same place. <br /><br />android.support.v4.media.TransportPerformer.onGetTransportControlFlags () &mdash; Retrieves the flags for the media transport control buttons that this transport supports. <br /><br />android.support.v4.media.TransportPerformer.onStart ()   Request to start playback on the media, resuming from whatever current state  (position etc) &mdash; Request to start playback on the media, resuming from whatever current state (position etc) it is in. <br /><br />android.support.v4.media.TransportStateListener.onTransportControlsChanged (TransportController controller) &mdash; The available controls of the transport changed. <br /><br />android.support.v4.media.TransportStateListener.onPlayingChanged (TransportController controller) &mdash; The play state of the transport changed. <br /><br />android.support.v4.media.VolumeProviderCompat.onAdjustVolume (int direction) &mdash; Override to handle requests to adjust the volume of the current output. <br /><br />android.support.v4.media.VolumeProviderCompat.getVolumeProvider () &mdash; Gets the underlying framework VolumeProvider object. <br /><br />android.support.v4.media.VolumeProviderCompat.onSetVolumeTo (int volume) &mdash; Override to handle requests to set the volume of the current output. <br /><br />android.support.v4.os.ParcelableCompat.newCreator (ParcelableCompatCreatorCallbacks<T> callbacks) &mdash; Factory method for Parcelable.Creator. <br /><br />android.support.v4.print.PrintHelper.systemSupportsPrint () &mdash; Gets whether the system supports printing. <br /><br />android.support.v4.provider.DocumentFile.getName () &mdash; Return the display name of this document. <br /><br />android.support.v4.provider.DocumentFile.listFiles () &mdash; Returns an array of files contained in the directory represented by this file. <br /><br />android.support.v4.text.ICUCompat.getScript (String locale)   Returns the script  (language code) &mdash; Returns the script (language code) of a script. <br /><br />android.support.v4.text.ICUCompat.addLikelySubtags (String locale) &mdash; Add the likely subtags for a provided locale ID, per the algorithm described in the following CLDR technical report: http://www.unicode.org/reports/tr35/#Likely_Subtags If locale is already in the maximal form, or there is no data available for maximization, it will be just returned. <br /><br />"
"android.support.v4.text.TextDirectionHeuristicCompat.isRtl (CharSequence cs, int start, int count) &mdash; Guess if a CharSequence is in the RTL direction or not. <br /><br />android.support.v4.text.TextDirectionHeuristicCompat.isRtl (char[] array, int start, int count) &mdash; Guess if a chars array is in the RTL direction or not. <br /><br />android.support.v4.text.TextUtilsCompat.getLayoutDirectionFromLocale (Locale locale) &mdash; Return the layout direction for a given Locale <br /><br />android.support.v4.util.AtomicFile.openRead () &mdash; Open the atomic file for reading. <br /><br />android.support.v4.view.accessibility.AccessibilityEventCompat.asRecord (AccessibilityEvent event) &mdash; Creates an AccessibilityRecordCompat from an AccessibilityEvent that can be used to manipulate the event properties defined in AccessibilityRecord. <br /><br />android.support.v4.view.accessibility.AccessibilityManagerCompat.isTouchExplorationEnabled (AccessibilityManager manager) &mdash; Returns if the touch exploration in the system is enabled. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setSource (View root, int virtualDescendantId) &mdash; Sets the source to be a virtual descendant of the given root. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setClickable (boolean clickable) &mdash; Sets whether this node is clickable. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.isVisibleToUser () &mdash; Sets whether this node is visible to the user. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.isFocused () &mdash; Gets whether this node is focused. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setBoundsInScreen (Rect bounds) &mdash; Sets the node bounds in screen coordinates. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setScrollable (boolean scrollable) &mdash; Sets if the node is scrollable. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.addAction (int action) &mdash; Adds an action that can be performed on the node. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setMovementGranularities (int granularities) &mdash; Sets the movement granularities for traversing the text of this node. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.addChild (View root, int virtualDescendantId) &mdash; Adds a virtual child which is a descendant of the given root. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setLongClickable (boolean longClickable) &mdash; Sets whether this node is long clickable. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.isAccessibilityFocused () &mdash; Gets whether this node is accessibility focused. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setEnabled (boolean enabled) &mdash; Sets whether this node is enabled. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.isFocusable () &mdash; Gets whether this node is focusable. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.isLongClickable () &mdash; Gets whether this node is long clickable. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.addChild (View child) &mdash; Adds a child. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.isScrollable () &mdash; Gets if the node is scrollable. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getActions () &mdash; Gets the actions that can be performed on the node. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.obtain () &mdash; Returns a cached instance if such is available otherwise a new one. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.isPassword () &mdash; Gets whether this node is a password. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getContentDescription () &mdash; Gets the content description of this node. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.isSelected () &mdash; Gets whether this node is selected. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getClassName () &mdash; Gets the class this node comes from. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getPackageName () &mdash; Gets the package this node comes from. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setFocused (boolean focused) &mdash; Sets whether this node is focused. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setSelected (boolean selected) &mdash; Sets whether this node is selected. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setParent (View parent) &mdash; Sets the parent. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setPackageName (CharSequence packageName) &mdash; Sets the package this node comes from. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getViewIdResourceName () &mdash; Gets the fully qualified resource name of the source view's id. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setAccessibilityFocused (boolean focused) &mdash; Sets whether this node is accessibility focused. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setParent (View root, int virtualDescendantId) &mdash; Sets the parent to be a virtual descendant of the given root. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.isChecked () &mdash; Gets whether this node is checked. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setClassName (CharSequence className) &mdash; Sets the class this node comes from. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setBoundsInParent (Rect bounds) &mdash; Sets the node bounds in parent coordinates. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getText () &mdash; Gets the text of this node. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.isClickable () &mdash; Gets whether this node is clickable. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.obtain (View root, int virtualDescendantId) &mdash; Returns a cached instance if such is available otherwise a new one and sets the source. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setContentDescription (CharSequence contentDescription) &mdash; Sets the content description of this node. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.obtain (AccessibilityNodeInfoCompat info) &mdash; Returns a cached instance if such is available or a new one is create. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getBoundsInScreen (Rect outBounds) &mdash; Gets the node bounds in screen coordinates. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.isEnabled () &mdash; Gets whether this node is enabled. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.recycle () &mdash; Return an instance back to be reused. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setFocusable (boolean focusable) &mdash; Sets whether this node is focusable. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setSource (View source) &mdash; Sets the source. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getBoundsInParent (Rect outBounds) &mdash; Gets the node bounds in parent coordinates. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getMovementGranularities () &mdash; Gets the movement granularities for traversing the text of this node. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.isCheckable () &mdash; Gets whether this node is checkable. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeProviderCompat.performAction (int virtualViewId, int action, Bundle arguments) &mdash; Performs an accessibility action on a virtual view, i.e. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeProviderCompat.createAccessibilityNodeInfo (int virtualViewId) &mdash; Returns an AccessibilityNodeInfoCompat representing a virtual view, i.e. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeProviderCompat.findAccessibilityNodeInfosByText (String text, int virtualViewId) &mdash; Finds AccessibilityNodeInfoCompats by text. <br /><br />android.support.v4.view.accessibility.AccessibilityNodeProviderCompat.findFocus (int focus) &mdash; Find the virtual view, i.e. <br /><br />android.support.v4.view.accessibility.AccessibilityRecordCompat.setToIndex (int toIndex) &mdash; Sets the index of text selection end or the index of the last visible item when scrolling. <br /><br />android.support.v4.view.accessibility.AccessibilityRecordCompat.setScrollable (boolean scrollable) &mdash; Sets if the source is scrollable. <br /><br />android.support.v4.view.accessibility.AccessibilityRecordCompat.obtain (AccessibilityRecordCompat record) &mdash; Returns a cached instance if such is available or a new one is instantiated. <br /><br />android.support.v4.view.accessibility.AccessibilityRecordCompat.setFromIndex (int fromIndex) &mdash; Sets the index of the first character of the changed sequence or the beginning of a text selection or the index of the first visible item when scrolling. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.setItemCount (int itemCount) &mdash; Sets the number of items that can be visited. <br /><br />android.support.v4.view.accessibility.AccessibilityRecordCompat.getImpl () &mdash; This method is deprecated. This method will be removed in a subsequent release of the support library. <br /><br />android.support.v4.view.accessibility.AccessibilityRecordCompat.setSource (View source) &mdash; Sets the event source. <br /><br />android.support.v4.view.AccessibilityDelegateCompat.sendAccessibilityEventUnchecked (View host, AccessibilityEvent event) &mdash; Sends an accessibility event. <br /><br />android.support.v4.view.AccessibilityDelegateCompat.onInitializeAccessibilityNodeInfo (View host, AccessibilityNodeInfoCompat info) &mdash; Initializes an AccessibilityNodeInfoCompat with information about the host view. <br /><br />android.support.v4.view.AccessibilityDelegateCompat.onPopulateAccessibilityEvent (View host, AccessibilityEvent event) &mdash; Gives a chance to the host View to populate the accessibility event with its text content. <br /><br />android.support.v4.view.AccessibilityDelegateCompat.onInitializeAccessibilityEvent (View host, AccessibilityEvent event) &mdash; Initializes an AccessibilityEvent with information about the the host View which is the event source. <br /><br />android.support.v4.view.AccessibilityDelegateCompat.performAccessibilityAction (View host, int action, Bundle args) &mdash; Performs the specified accessibility action on the view. <br /><br />android.support.v4.view.AccessibilityDelegateCompat.sendAccessibilityEvent (View host, int eventType) &mdash; Sends an accessibility event of the given type. <br /><br />android.support.v4.view.AccessibilityDelegateCompat.dispatchPopulateAccessibilityEvent (View host, AccessibilityEvent event) &mdash; Dispatches an AccessibilityEvent to the host View first and then to its children for adding their text content to the event. <br /><br />android.support.v4.view.AccessibilityDelegateCompat.onRequestSendAccessibilityEvent (ViewGroup host, View child, AccessibilityEvent event)   Called when a child of the host View has requested sending an AccessibilityEvent and gives an opportunity to the parent  (the host) &mdash; Called when a child of the host View has requested sending an AccessibilityEvent and gives an opportunity to the parent (the host) to augment the event. <br /><br />android.support.v4.view.AccessibilityDelegateCompat.getAccessibilityNodeProvider (View host) &mdash; Gets the provider for managing a virtual view hierarchy rooted at this View and reported to AccessibilityServices that explore the window content. <br /><br />android.support.v4.view.ActionProvider.onPerformDefaultAction () &mdash; Performs an optional default action. <br /><br />android.support.v4.view.ActionProvider.refreshVisibility ()   If this ActionProvider is associated with an item in a menu, refresh the visibility of the item based on overridesItemVisibility () and isVisible () &mdash; If this ActionProvider is associated with an item in a menu, refresh the visibility of the item based on overridesItemVisibility() and isVisible(). <br /><br />android.support.v4.view.ActionProvider.onPrepareSubMenu (SubMenu subMenu) &mdash; Called to prepare an associated submenu for the menu item backed by this ActionProvider. <br /><br />android.support.v4.view.ActionProvider.onCreateActionView () &mdash; Factory method for creating new action views. <br /><br />android.support.v4.view.ActionProvider.hasSubMenu () &mdash; Determines if this ActionProvider has a submenu associated with it. <br /><br />android.support.v4.view.ActionProvider.overridesItemVisibility ()   The result of this method determines whether or not isVisible () &mdash; The result of this method determines whether or not isVisible() will be used by the MenuItem this ActionProvider is bound to help determine its visibility. <br /><br />android.support.v4.view.ActionProvider.onCreateActionView (MenuItem forItem) &mdash; Factory method called by the Android framework to create new action views. <br /><br />android.support.v4.view.ActionProvider.isVisible ()   If overridesItemVisibility () &mdash; If overridesItemVisibility() returns true, the return value of this method will help determine the visibility of the MenuItem this ActionProvider is bound to. <br /><br />"
"android.support.v4.view.ActionProvider.getContext () &mdash; Gets the context associated with this action provider. <br /><br />android.support.v4.view.GestureDetectorCompat.onTouchEvent (MotionEvent event) &mdash; Analyzes the given motion event and if applicable triggers the appropriate callbacks on the GestureDetector.OnGestureListener supplied. <br /><br />android.support.v4.view.GravityCompat.getAbsoluteGravity (int gravity, int layoutDirection) &mdash; Convert script specific gravity to absolute horizontal value. <br /><br />android.support.v4.view.GravityCompat.apply (int gravity, int w, int h, Rect container, Rect outRect, int layoutDirection) &mdash; Apply a gravity constant to an object and take care if layout direction is RTL or not. <br /><br />android.support.v4.view.GravityCompat.apply (int gravity, int w, int h, Rect container, int xAdj, int yAdj, Rect outRect, int layoutDirection) &mdash; Apply a gravity constant to an object. <br /><br />android.support.v4.view.MenuItemCompat.isActionViewExpanded (MenuItem item) &mdash; Returns true if this menu item's action view has been expanded. <br /><br />android.support.v4.view.MenuItemCompat.setShowAsAction (MenuItem item, int actionEnum) &mdash; Sets how this item should display in the presence of a compatible Action Bar. <br /><br />android.support.v4.view.MenuItemCompat.collapseActionView (MenuItem item) &mdash; Collapse the action view associated with this menu item. <br /><br />android.support.v4.view.MenuItemCompat.setActionProvider (MenuItem item, ActionProvider provider) &mdash; Sets the ActionProvider responsible for creating an action view if the item is placed on the action bar. <br /><br />android.support.v4.view.MenuItemCompat.expandActionView (MenuItem item) &mdash; Expand the action view associated with this menu item. <br /><br />android.support.v4.view.MenuItemCompat.setActionView (MenuItem item, View view) &mdash; Set an action view for this menu item. <br /><br />android.support.v4.view.MenuItemCompat.getActionView (MenuItem item) &mdash; Returns the currently set action view for this menu item. <br /><br />android.support.v4.view.MotionEventCompat.getY (MotionEvent event, int pointerIndex)   Call getY (int) &mdash; Call getY(int). <br /><br />android.support.v4.view.MotionEventCompat.findPointerIndex (MotionEvent event, int pointerId)   Call findPointerIndex (int) &mdash; Call findPointerIndex(int). <br /><br />android.support.v4.view.MotionEventCompat.getPointerId (MotionEvent event, int pointerIndex)   Call getPointerId (int) &mdash; Call getPointerId(int). <br /><br />android.support.v4.view.MotionEventCompat.getActionMasked (MotionEvent event)   Call getAction () &mdash; Call getAction(), returning only the ACTION_MASK portion. <br /><br />android.support.v4.view.MotionEventCompat.getX (MotionEvent event, int pointerIndex)   Call getX (int) &mdash; Call getX(int). <br /><br />android.support.v4.view.MotionEventCompat.getActionIndex (MotionEvent event)   Call getAction () &mdash; Call getAction(), returning only the pointer index portion <br /><br />android.support.v4.view.MotionEventCompat.getPointerCount (MotionEvent event) &mdash; The number of pointers of data contained in this event. <br /><br />android.support.v4.view.OnApplyWindowInsetsListener.onApplyWindowInsets (View v, WindowInsetsCompat insets)   When &mdash; When set on a View, this listener method will be called instead of the view's own onApplyWindowInsets method. <br /><br />"
"android.support.v4.view.PagerAdapter.unregisterDataSetObserver (DataSetObserver observer) &mdash; Unregister an observer from callbacks related to the adapter's data changing. <br /><br />android.support.v4.view.PagerAdapter.saveState () &mdash; Save any instance state associated with this adapter and its pages that should be restored if the current UI state needs to be reconstructed. <br /><br />android.support.v4.view.PagerAdapter.registerDataSetObserver (DataSetObserver observer) &mdash; Register an observer to receive callbacks related to the adapter's data changing. <br /><br />android.support.v4.view.PagerAdapter.finishUpdate (ViewGroup container) &mdash; Called when the a change in the shown pages has been completed. <br /><br />android.support.v4.view.PagerAdapter.getPageWidth (int position) &mdash; Returns the proportional width of a given page as a percentage of the ViewPager's measured width from (0.f-1.f] <br /><br />android.support.v4.view.PagerAdapter.getCount () &mdash; Return the number of views available. <br /><br />android.support.v4.view.PagerAdapter.startUpdate (ViewGroup container) &mdash; Called when a change in the shown pages is going to start being made. <br /><br />android.support.v4.view.PagerAdapter.restoreState (Parcelable state, ClassLoader loader)   Restore any instance state associated with this adapter and its pages that was previously saved by saveState () &mdash; Restore any instance state associated with this adapter and its pages that was previously saved by saveState(). <br /><br />android.support.v4.view.PagerAdapter.instantiateItem (View container, int position)    This method is deprecated. Use instantiateItem (ViewGroup, int) &mdash; This method is deprecated. Use instantiateItem(ViewGroup, int) <br /><br />android.support.v4.view.PagerAdapter.getItemPosition (Object object) &mdash; Called when the host view is attempting to determine if an item's position has changed. <br /><br />android.support.v4.view.PagerAdapter.setPrimaryItem (View container, int position, Object object)    This method is deprecated. Use setPrimaryItem (ViewGroup, int, Object) &mdash; This method is deprecated. Use setPrimaryItem(ViewGroup, int, Object) <br /><br />android.support.v4.view.PagerAdapter.getPageTitle (int position) &mdash; This method may be called by the ViewPager to obtain a title string to describe the specified page. <br /><br />android.support.v4.view.PagerAdapter.destroyItem (View container, int position, Object object)    This method is deprecated. Use destroyItem (ViewGroup, int, Object) &mdash; This method is deprecated. Use destroyItem(ViewGroup, int, Object) <br /><br />android.support.v4.view.PagerAdapter.startUpdate (View container)    This method is deprecated. Use startUpdate (ViewGroup) &mdash; This method is deprecated. Use startUpdate(ViewGroup) <br /><br />android.support.v4.view.PagerAdapter.finishUpdate (View container)    This method is deprecated. Use finishUpdate (ViewGroup) &mdash; This method is deprecated. Use finishUpdate(ViewGroup) <br /><br />android.support.v4.view.PagerAdapter.isViewFromObject (View view, Object object)   Determines whether a page View is associated with a specific key object as returned by instantiateItem (ViewGroup, int) &mdash; Determines whether a page View is associated with a specific key object as returned by instantiateItem(ViewGroup, int). <br /><br />android.support.v4.view.PagerAdapter.notifyDataSetChanged () &mdash; This method should be called by the application if the data backing this adapter has changed and associated views should update. <br /><br />android.support.v4.view.PagerTabStrip.setPadding (int left, int top, int right, int bottom) &mdash; Sets the padding. <br /><br />android.support.v4.view.PagerTabStrip.setTabIndicatorColor (int color) &mdash; Set the color of the tab indicator bar. <br /><br />android.support.v4.view.PagerTabStrip.setTextSpacing (int textSpacing) &mdash; Set the required spacing between title segments. <br /><br />"
"android.support.v4.view.PagerTitleStrip.setNonPrimaryAlpha (float alpha) &mdash; Set the alpha value used for non-primary page titles. <br /><br />android.support.v4.view.PagerTitleStrip.requestLayout () &mdash; Call this when something has changed which has invalidated the layout of this view. <br /><br />android.support.v4.view.PagerTitleStrip.setTextSize (int unit, float size) &mdash; Set the default text size to a given unit and value. <br /><br />android.support.v4.view.VelocityTrackerCompat.getYVelocity (VelocityTracker tracker, int pointerId)   Call getYVelocity (int) &mdash; Call getYVelocity(int). <br /><br />android.support.v4.view.VelocityTrackerCompat.getXVelocity (VelocityTracker tracker, int pointerId)   Call getXVelocity (int) &mdash; Call getXVelocity(int). <br /><br />android.support.v4.view.ViewCompat.canScrollVertically (View v, int direction) &mdash; Check if this view can be scrolled vertically in a certain direction. <br /><br />android.support.v4.view.ViewCompat.getOverScrollMode (View v) &mdash; Returns the over-scroll mode for this view. <br /><br />android.support.v4.view.ViewCompat.setScaleY (View view, float value) &mdash; Sets the amount that the view is scaled in Y around the pivot point, as a proportion of the view's unscaled width. <br /><br />android.support.v4.view.ViewCompat.setAccessibilityDelegate (View v, AccessibilityDelegateCompat delegate) &mdash; Sets a delegate for implementing accessibility support via compositon as opposed to inheritance. <br /><br />android.support.v4.view.ViewCompat.getLayerType (View view) &mdash; Indicates what type of layer is currently associated with this view. <br /><br />android.support.v4.view.ViewCompat.getFitsSystemWindows (View v) &mdash; Returns true if this view should adapt to fit system window insets. <br /><br />android.support.v4.view.ViewCompat.onInitializeAccessibilityEvent (View v, AccessibilityEvent event) &mdash; Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />android.support.v4.view.ViewCompat.setScaleX (View view, float value) &mdash; Sets the amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width. <br /><br />android.support.v4.view.ViewCompat.setImportantForAccessibility (View view, int mode) &mdash; Sets how to determine whether this view is important for accessibility which is if it fires accessibility events and if it is reported to accessibility services that query the screen. <br /><br />android.support.v4.view.ViewCompat.postInvalidateOnAnimation (View view) &mdash; Cause an invalidate to happen on the next animation time step, typically the next display frame. <br /><br />android.support.v4.view.ViewCompat.postInvalidateOnAnimation (View view, int left, int top, int right, int bottom) &mdash; Cause an invalidate of the specified area to happen on the next animation time step, typically the next display frame. <br /><br />android.support.v4.view.ViewCompat.getParentForAccessibility (View view) &mdash; Gets the parent for accessibility purposes. <br /><br />android.support.v4.view.ViewCompat.isOpaque (View view) &mdash; Indicates whether this View is opaque. <br /><br />android.support.v4.view.ViewCompat.postOnAnimationDelayed (View view, Runnable action, long delayMillis) &mdash; Causes the Runnable to execute on the next animation time step, after the specified amount of time elapses. <br /><br />android.support.v4.view.ViewCompat.setLayerPaint (View view, Paint paint)   Updates the Paint object used with the current layer  (used only if the current layer type is not set to LAYER_TYPE_NONE) &mdash; Updates the Paint object used with the current layer (used only if the current layer type is not set to LAYER_TYPE_NONE). <br /><br />"
"android.support.v4.view.ViewCompat.setElevation (View view, float elevation) &mdash; Sets the base elevation of this view, in pixels. <br /><br />android.support.v4.view.ViewCompat.setChildrenDrawingOrderEnabled (ViewGroup viewGroup, boolean enabled)   Tells the ViewGroup whether to draw its children in the order defined by the method ViewGroup.getChildDrawingOrder (int, int) &mdash; Tells the ViewGroup whether to draw its children in the order defined by the method ViewGroup.getChildDrawingOrder(int, int). <br /><br />android.support.v4.view.ViewCompat.onInitializeAccessibilityNodeInfo (View v, AccessibilityNodeInfoCompat info) &mdash; Initializes an AccessibilityNodeInfo with information about this view. <br /><br />android.support.v4.view.ViewCompat.canScrollHorizontally (View v, int direction) &mdash; Check if this view can be scrolled horizontally in a certain direction. <br /><br />android.support.v4.view.ViewCompat.getAlpha (View view) &mdash; The opacity of the view. <br /><br />android.support.v4.view.ViewCompat.getLayoutDirection (View view) &mdash; Returns the resolved layout direction for this view. <br /><br />android.support.v4.view.ViewCompat.setLayerType (View view, int layerType, Paint paint) &mdash; Specifies the type of layer backing this view. <br /><br />android.support.v4.view.ViewCompat.postOnAnimation (View view, Runnable action) &mdash; Causes the Runnable to execute on the next animation time step. <br /><br />android.support.v4.view.ViewCompat.getImportantForAccessibility (View view) &mdash; Gets the mode for determining whether this View is important for accessibility which is if it fires accessibility events and if it is reported to accessibility services that query the screen. <br /><br />android.support.v4.view.ViewConfigurationCompat.getScaledPagingTouchSlop (ViewConfiguration config)   Call getScaledPagingTouchSlop () &mdash; Call getScaledPagingTouchSlop(). <br /><br />android.support.v4.view.ViewGroupCompat.setMotionEventSplittingEnabled (ViewGroup group, boolean split) &mdash; Enable or disable the splitting of MotionEvents to multiple children during touch event dispatch. <br /><br />android.support.v4.view.ViewPager.onRestoreInstanceState (Parcelable state)   Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState () &mdash; Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState(). <br /><br />android.support.v4.view.ViewPager.setPageMargin (int marginPixels) &mdash; Set the margin between pages. <br /><br />android.support.v4.view.ViewPager.setCurrentItem (int item, boolean smoothScroll) &mdash; Set the currently selected page. <br /><br />android.support.v4.view.ViewPager.removeView (View view)   Note: do not invoke this method from draw (android.graphics.Canvas), onDraw (android.graphics.Canvas), dispatchDraw (android.graphics.Canvas) &mdash; Note: do not invoke this method from draw(android.graphics.Canvas), onDraw(android.graphics.Canvas), dispatchDraw(android.graphics.Canvas) or any related method. <br /><br />android.support.v4.view.ViewPager.onSaveInstanceState () &mdash; Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. <br /><br />android.support.v4.view.ViewPager.beginFakeDrag () &mdash; Start a fake drag of the pager. <br /><br />android.support.v4.view.ViewPager.endFakeDrag () &mdash; End a fake drag of the pager. <br /><br />android.support.v4.view.ViewPager.setPageMarginDrawable (Drawable d) &mdash; Set a drawable that will be used to fill the margin between pages. <br /><br />android.support.v4.view.ViewPager.setOffscreenPageLimit (int limit) &mdash; Set the number of pages that should be retained to either side of the current page in the view hierarchy in an idle state. <br /><br />"
"android.support.v4.view.ViewPager.setAdapter (PagerAdapter adapter) &mdash; Set a PagerAdapter that will supply views for this pager as needed. <br /><br />android.support.v4.view.ViewPager.isFakeDragging () &mdash; Returns true if a fake drag is in progress. <br /><br />android.support.v4.view.ViewPager.getAdapter () &mdash; Retrieve the current adapter supplying pages. <br /><br />android.support.v4.view.ViewPager.executeKeyEvent (KeyEvent event) &mdash; You can call this function yourself to have the scroll view perform scrolling from a key event, just as if the event had been dispatched to it by the view hierarchy. <br /><br />android.support.v4.view.ViewPager.onInterceptTouchEvent (MotionEvent ev) &mdash; Implement this method to intercept all touch screen motion events. <br /><br />android.support.v4.view.ViewPager.onTouchEvent (MotionEvent ev) &mdash; Implement this method to handle touch screen motion events. <br /><br />android.support.v4.view.ViewPager.fakeDragBy (float xOffset) &mdash; Fake drag by an offset in pixels. <br /><br />android.support.v4.view.ViewParentCompat.requestSendAccessibilityEvent (ViewParent parent, View child, AccessibilityEvent event) &mdash; Called by a child to request from its parent to send an AccessibilityEvent. <br /><br />android.support.v4.view.ViewPropertyAnimatorListener.onAnimationCancel (View view) &mdash; Notifies the cancellation of the animation. <br /><br />android.support.v4.view.ViewPropertyAnimatorUpdateListener.onAnimationUpdate (View view) &mdash; Notifies the occurrence of another frame of the animation. <br /><br />android.support.v4.widget.AutoScrollHelper.canTargetScrollHorizontally (int direction) &mdash; Override this method to return whether the target view can be scrolled horizontally in a certain direction. <br /><br />android.support.v4.widget.AutoScrollHelper.setRampUpDuration (int durationMillis) &mdash; Sets the amount of time after activation of auto-scrolling that is takes to reach target velocity for the current touch position. <br /><br />android.support.v4.widget.AutoScrollHelper.setMinimumVelocity (float horizontalMin, float verticalMin) &mdash; Sets the absolute minimum scrolling velocity. <br /><br />android.support.v4.widget.AutoScrollHelper.setRelativeEdges (float horizontal, float vertical) &mdash; Sets the activation edge size relative to the host view's dimensions. <br /><br />android.support.v4.widget.AutoScrollHelper.scrollTargetBy (int deltaX, int deltaY) &mdash; Override this method to scroll the target view by the specified number of pixels. <br /><br />android.support.v4.widget.AutoScrollHelper.setEdgeType (int type) &mdash; Sets the activation edge type, one of:  EDGE_TYPE_INSIDE for edges that respond to touches inside the bounds of the host view. <br /><br />android.support.v4.widget.AutoScrollHelper.setMaximumVelocity (float horizontalMax, float verticalMax) &mdash; Sets the absolute maximum scrolling velocity. <br /><br />android.support.v4.widget.AutoScrollHelper.setActivationDelay (int delayMillis) &mdash; Sets the delay after entering an activation edge before activation of auto-scrolling. <br /><br />android.support.v4.widget.AutoScrollHelper.canTargetScrollVertically (int direction) &mdash; Override this method to return whether the target view can be scrolled vertically in a certain direction. <br /><br />android.support.v4.widget.AutoScrollHelper.setRelativeVelocity (float horizontal, float vertical) &mdash; Sets the target scrolling velocity relative to the host view's dimensions. <br /><br />"
"android.support.v4.widget.AutoScrollHelper.setRampDownDuration (int durationMillis) &mdash; Sets the amount of time after de-activation of auto-scrolling that is takes to slow to a stop. <br /><br />android.support.v4.widget.AutoScrollHelper.setMaximumEdges (float horizontalMax, float verticalMax) &mdash; Sets the absolute maximum edge size. <br /><br />android.support.v4.widget.CursorAdapter.bindView (View view, Context context, Cursor cursor) &mdash; Bind an existing view to the data pointed to by cursor <br /><br />android.support.v4.widget.CursorAdapter.newView (Context context, Cursor cursor, ViewGroup parent) &mdash; Makes a new view to hold the data pointed to by cursor. <br /><br />android.support.v4.widget.CursorAdapter.swapCursor (Cursor newCursor) &mdash; Swap in a new Cursor, returning the old Cursor. <br /><br />android.support.v4.widget.CursorAdapter.getCursor () &mdash; Returns the cursor. <br /><br />android.support.v4.widget.CursorAdapter.newDropDownView (Context context, Cursor cursor, ViewGroup parent) &mdash; Makes a new drop down view to hold the data pointed to by cursor. <br /><br />android.support.v4.widget.CursorAdapter.convertToString (Cursor cursor) &mdash; Converts the cursor into a CharSequence. <br /><br />android.support.v4.widget.CursorAdapter.changeCursor (Cursor cursor) &mdash; Change the underlying cursor to a new cursor. <br /><br />android.support.v4.widget.DrawerLayout.setDrawerLockMode (int lockMode, int edgeGravity) &mdash; Enable or disable interaction with the given drawer. <br /><br />android.support.v4.widget.DrawerLayout.getDrawerTitle (int edgeGravity) &mdash; Returns the title of the drawer with the given gravity. <br /><br />android.support.v4.widget.DrawerLayout.isDrawerOpen (View drawer) &mdash; Check if the given drawer view is currently in an open state. <br /><br />android.support.v4.widget.DrawerLayout.isDrawerVisible (View drawer) &mdash; Check if a given drawer view is currently visible on-screen. <br /><br />android.support.v4.widget.DrawerLayout.closeDrawer (int gravity) &mdash; Close the specified drawer by animating it out of view. <br /><br />android.support.v4.widget.DrawerLayout.setDrawerShadow (int resId, int gravity) &mdash; Set a simple drawable used for the left or right shadow. <br /><br />android.support.v4.widget.DrawerLayout.closeDrawers () &mdash; Close all currently open drawer views by animating them out of view. <br /><br />android.support.v4.widget.DrawerLayout.setDrawerLockMode (int lockMode) &mdash; Enable or disable interaction with all drawers. <br /><br />android.support.v4.widget.DrawerLayout.getDrawerLockMode (View drawerView) &mdash; Check the lock mode of the given drawer view. <br /><br />android.support.v4.widget.DrawerLayout.getDrawerLockMode (int edgeGravity) &mdash; Check the lock mode of the drawer with the given gravity. <br /><br />android.support.v4.widget.DrawerLayout.openDrawer (int gravity) &mdash; Open the specified drawer by animating it out of view. <br /><br />"
"android.support.v4.widget.DrawerLayout.closeDrawer (View drawerView) &mdash; Close the specified drawer view by animating it into view. <br /><br />android.support.v4.widget.DrawerLayout.openDrawer (View drawerView) &mdash; Open the specified drawer view by animating it into view. <br /><br />android.support.v4.widget.EdgeEffectCompat.finish () &mdash; Immediately finish the current animation. <br /><br />android.support.v4.widget.EdgeEffectCompat.onRelease () &mdash; Call when the object is released after being pulled. <br /><br />android.support.v4.widget.EdgeEffectCompat.isFinished () &mdash; Reports if this EdgeEffectCompat's animation is finished. <br /><br />android.support.v4.widget.EdgeEffectCompat.setSize (int width, int height) &mdash; Set the size of this edge effect in pixels. <br /><br />android.support.v4.widget.EdgeEffectCompat.onPull (float deltaDistance, float displacement) &mdash; A view should call this when content is pulled away from an edge by the user. <br /><br />android.support.v4.widget.EdgeEffectCompat.draw (Canvas canvas) &mdash; Draw into the provided canvas. <br /><br />android.support.v4.widget.EdgeEffectCompat.onPull (float deltaDistance)    This method is deprecated. use onPull (float, float) &mdash; This method is deprecated. use onPull(float, float) <br /><br />android.support.v4.widget.ExploreByTouchHelper.invalidateVirtualView (int virtualViewId) &mdash; Notifies the accessibility framework that the properties of a particular item have changed. <br /><br />android.support.v4.widget.ExploreByTouchHelper.sendEventForVirtualView (int virtualViewId, int eventType) &mdash; Populates an event of the specified type with information about an item and attempts to send it up through the view hierarchy. <br /><br />android.support.v4.widget.NestedScrollView.dispatchNestedPreFling (float velocityX, float velocityY) &mdash; Dispatch a fling to a nested scrolling parent before it is processed by this view. <br /><br />android.support.v4.widget.NestedScrollView.startNestedScroll (int axes) &mdash; Begin a nestable scroll operation along the given axes. <br /><br />android.support.v4.widget.NestedScrollView.getNestedScrollAxes () &mdash; Return the current axes of nested scrolling for this ViewGroup. <br /><br />android.support.v4.widget.NestedScrollView.dispatchNestedPreScroll (int dx, int dy, int[] consumed, int[] offsetInWindow) &mdash; Dispatch one step of a nested scroll in progress before this view consumes any portion of it. <br /><br />android.support.v4.widget.NestedScrollView.stopNestedScroll () &mdash; Stop a nested scroll in progress. <br /><br />android.support.v4.widget.NestedScrollView.scrollTo (int x, int y) &mdash; Set the scrolled position of your view. This version also clamps the scrolling to the bounds of our child. <br /><br />android.support.v4.widget.NestedScrollView.hasNestedScrollingParent () &mdash; Returns true if this view has a nested scrolling parent. <br /><br />android.support.v4.widget.NestedScrollView.dispatchNestedScroll (int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[] offsetInWindow) &mdash; Dispatch one step of a nested scroll in progress. <br /><br />android.support.v4.widget.NestedScrollView.dispatchNestedFling (float velocityX, float velocityY, boolean consumed) &mdash; Dispatch a fling to a nested scrolling parent. <br /><br />"
"android.support.v4.widget.ResourceCursorAdapter.newView (Context context, Cursor cursor, ViewGroup parent)   Inflates view (s) &mdash; Inflates view(s) from the specified XML file. <br /><br />android.support.v4.widget.ScrollerCompat.computeScrollOffset () &mdash; Call this when you want to know the new location. <br /><br />android.support.v4.widget.ScrollerCompat.isFinished () &mdash; Returns whether the scroller has finished scrolling. <br /><br />android.support.v4.widget.ScrollerCompat.getCurrX () &mdash; Returns the current X offset in the scroll. <br /><br />android.support.v4.widget.ScrollerCompat.fling (int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY) &mdash; Start scrolling based on a fling gesture. <br /><br />android.support.v4.widget.ScrollerCompat.startScroll (int startX, int startY, int dx, int dy) &mdash; Start scrolling by providing a starting point and the distance to travel. <br /><br />android.support.v4.widget.ScrollerCompat.getCurrY () &mdash; Returns the current Y offset in the scroll. <br /><br />android.support.v4.widget.SimpleCursorAdapter.setViewText (TextView v, String text)   Called by bindView () &mdash; Called by bindView() to set the text for a TextView but only if there is no existing ViewBinder or if the existing ViewBinder cannot handle binding to an TextView. <br /><br />android.support.v4.widget.SimpleCursorAdapter.setViewImage (ImageView v, String value)   Called by bindView () &mdash; Called by bindView() to set the image for an ImageView but only if there is no existing ViewBinder or if the existing ViewBinder cannot handle binding to an ImageView. <br /><br />android.support.v4.widget.SlidingPaneLayout.openPane () &mdash; Open the sliding pane if it is currently slideable. <br /><br />android.support.v4.widget.SlidingPaneLayout.setShadowDrawable (Drawable d)    This method is deprecated. Renamed to setShadowDrawableLeft (Drawable) to support LTR  (left to right language) and setShadowDrawableRight (Drawable) to support RTL  (right to left language) &mdash; This method is deprecated. Renamed to setShadowDrawableLeft(Drawable) to support LTR (left to right language) and setShadowDrawableRight(Drawable) to support RTL (right to left language) during opening/closing. <br /><br />android.support.v4.widget.SlidingPaneLayout.closePane () &mdash; Close the sliding pane if it is currently slideable. <br /><br />android.support.v4.widget.SlidingPaneLayout.isOpen () &mdash; Check if the layout is completely open. <br /><br />android.support.v4.widget.SlidingPaneLayout.isSlideable () &mdash; Check if the content in this layout cannot fully fit side by side and therefore the content pane can be slid back and forth. <br /><br />android.support.v4.widget.SlidingPaneLayout.setShadowDrawableRight (Drawable d) &mdash; Set a drawable to use as a shadow cast by the left pane onto the right pane during opening/closing to support right to left language. <br /><br />android.support.v4.widget.SlidingPaneLayout.setShadowDrawableLeft (Drawable d) &mdash; Set a drawable to use as a shadow cast by the right pane onto the left pane during opening/closing. <br /><br />android.support.v4.widget.SwipeRefreshLayout.setRefreshing (boolean refreshing) &mdash; Notify the widget that refresh state has changed. <br /><br />android.support.v4.widget.ViewDragHelper.checkTouchSlop (int directions, int pointerId) &mdash; Check if the specified pointer tracked in the current gesture has crossed the required slop threshold. <br /><br />android.support.v4.widget.ViewDragHelper.checkTouchSlop (int directions) &mdash; Check if any pointer tracked in the current gesture has crossed the required slop threshold. <br /><br />android.support.v4.widget.ViewDragHelper.isEdgeTouched (int edges, int pointerId) &mdash; Check if any of the edges specified were initially touched by the pointer with the specified ID. <br /><br />"
"android.support.v4.widget.ViewDragHelper.settleCapturedViewAt (int finalLeft, int finalTop)   Settle the captured view at the given  (left, top) &mdash; Settle the captured view at the given (left, top) position. <br /><br />android.support.v4.widget.ViewDragHelper.findTopChildUnder (int x, int y) &mdash; Find the topmost child under the given point within the parent view's coordinate system. <br /><br />android.support.v4.widget.ViewDragHelper.continueSettling (boolean deferCallbacks) &mdash; Move the captured settling view by the appropriate amount for the current time. <br /><br />android.support.v4.widget.ViewDragHelper.smoothSlideViewTo (View child, int finalLeft, int finalTop)   Animate the view child to the given  (left, top) &mdash; Animate the view child to the given (left, top) position. <br /><br />android.support.v4.widget.ViewDragHelper.cancel ()   The result of a call to this method is equivalent to processTouchEvent (android.view.MotionEvent) &mdash; The result of a call to this method is equivalent to processTouchEvent(android.view.MotionEvent) receiving an ACTION_CANCEL event. <br /><br />android.support.v4.widget.ViewDragHelper.isEdgeTouched (int edges) &mdash; Check if any of the edges specified were initially touched in the currently active gesture. <br /><br />android.support.v4.widget.ViewDragHelper.isCapturedViewUnder (int x, int y) &mdash; Determine if the currently captured view is under the given point in the parent view's coordinate system. <br /><br />android.support.v4.widget.ViewDragHelper.processTouchEvent (MotionEvent ev) &mdash; Process a touch event received by the parent view. <br /><br />android.support.v4.widget.ViewDragHelper.shouldInterceptTouchEvent (MotionEvent ev) &mdash; Check if this event as provided to the parent view's onInterceptTouchEvent should cause the parent to intercept the touch event stream. <br /><br />android.support.v4.widget.ViewDragHelper.isPointerDown (int pointerId)   Check if the given pointer ID represents a pointer that is currently down  (to the best of the ViewDragHelper's knowledge) &mdash; Check if the given pointer ID represents a pointer that is currently down (to the best of the ViewDragHelper's knowledge). <br /><br />android.support.v4.widget.ViewDragHelper.captureChildView (View childView, int activePointerId) &mdash; Capture a specific child view for dragging within the parent. <br /><br />android.support.v4.widget.ViewDragHelper.getViewDragState () &mdash; Retrieve the current drag state of this helper. <br /><br />android.support.v4.widget.ViewDragHelper.setMinVelocity (float minVel) &mdash; Set the minimum velocity that will be detected as having a magnitude greater than zero in pixels per second. <br /><br />android.support.v4.widget.ViewDragHelper.abort ()   cancel () &mdash; cancel(), but also abort all motion in progress and snap to the end of any animation. <br /><br />android.support.v4.widget.ViewDragHelper.getEdgeSize () &mdash; Return the size of an edge. <br /><br />android.support.v4.widget.ViewDragHelper.setEdgeTrackingEnabled (int edgeFlags) &mdash; Enable edge tracking for the selected edges of the parent view. <br /><br />android.support.v4.widget.ViewDragHelper.isViewUnder (View view, int x, int y) &mdash; Determine if the supplied view is under the given point in the parent view's coordinate system. <br /><br />android.support.v7.view.ActionMode.getMenu () &mdash; Returns the menu of actions that this action mode presents. <br /><br />android.support.v7.view.ActionMode.setTitleOptionalHint (boolean titleOptional) &mdash; Set whether or not the title/subtitle display for this action mode is optional. <br /><br />android.support.v7.view.ActionMode.finish () &mdash; Finish and close this action mode. <br /><br />"
"android.support.v7.view.CollapsibleActionView.onActionViewCollapsed () &mdash; Called when this view is collapsed as an action view. <br /><br />android.support.v7.view.CollapsibleActionView.onActionViewExpanded () &mdash; Called when this view is expanded as an action view. <br /><br />android.support.v7.widget.RecyclerView.setHasFixedSize (boolean hasFixedSize) &mdash; RecyclerView can perform several optimizations if it can know in advance that changes in adapter content cannot change the size of the RecyclerView itself. <br /><br />android.support.v7.widget.RecyclerView.getLayoutManager () &mdash; Return the RecyclerView.LayoutManager currently responsible for layout policy for this RecyclerView. <br /><br />android.support.v7.widget.RecyclerView.scrollBy (int x, int y) &mdash; Move the scrolled position of your view. <br /><br />android.support.v7.widget.RecyclerView.getAdapter () &mdash; Retrieves the previously set adapter or null if no adapter is set. <br /><br />android.support.v7.widget.RecyclerView.requestChildRectangleOnScreen (View child, Rect rect, boolean immediate) &mdash; Called when a child of this group wants a particular rectangle to be positioned onto the screen. <br /><br />android.support.v7.widget.SearchView.setMaxWidth (int maxpixels) &mdash; Makes the view at most this many pixels wide <br /><br />android.support.v7.widget.SearchView.setInputType (int inputType) &mdash; Sets the input type on the query text field. <br /><br />android.support.v7.widget.SearchView.setIconified (boolean iconify) &mdash; Iconifies or expands the SearchView. <br /><br />android.support.v7.widget.SearchView.isIconified () &mdash; Returns the current iconified state of the SearchView. <br /><br />android.support.v7.widget.SearchView.setIconifiedByDefault (boolean iconified) &mdash; Sets the default or resting state of the search field. <br /><br />android.support.v7.widget.SearchView.setQueryHint (CharSequence hint) &mdash; Sets the hint text to display in the query text field. <br /><br />android.support.v7.widget.SearchView.setImeOptions (int imeOptions) &mdash; Sets the IME options on the query text field. <br /><br />android.support.v7.widget.Toolbar.getSubtitle () &mdash; Return the subtitle of this toolbar. <br /><br />android.support.v7.widget.Toolbar.getTitle () &mdash; Returns the title of this toolbar. <br /><br />android.system.Os.posix_fallocate (FileDescriptor fd, long offset, long length)   See posix_fallocate (2) &mdash; See posix_fallocate(2). <br /><br />android.telephony.PhoneNumberUtils.stripSeparators (String phoneNumber) &mdash; Strips separators from a phone number string. <br /><br />android.telephony.PhoneNumberUtils.formatNumber (String phoneNumber, String defaultCountryIso) &mdash; Format a phone number. <br /><br />android.telephony.PhoneNumberUtils.formatNumber (String phoneNumber, String phoneNumberE164, String defaultCountryIso) &mdash; Format the phone number only if the given number hasn't been formatted. <br /><br />"
"android.telephony.PhoneNumberUtils.formatNumber (Editable text, int defaultFormattingType)    This method was deprecated in API level 21. Use link #formatNumber (String phoneNumber, String defaultCountryIso) &mdash; This method was deprecated in API level 21. Use link #formatNumber(String phoneNumber, String defaultCountryIso) instead <br /><br />android.telephony.PhoneNumberUtils.isEmergencyNumber (String number) &mdash; Checks a given number against the list of emergency numbers provided by the RIL and SIM card. <br /><br />android.telephony.PhoneNumberUtils.toCallerIDMinMatch (String phoneNumber)   Returns the rightmost MIN_MATCH  (5) characters in the network portion in *reversed* order This can be used to do a database lookup against the column that stores getStrippedReversed () &mdash; Returns the rightmost MIN_MATCH (5) characters in the network portion in *reversed* order This can be used to do a database lookup against the column that stores getStrippedReversed() Returns null if phoneNumber == null <br /><br />android.telephony.PhoneStateListener.onServiceStateChanged (ServiceState serviceState) &mdash; Callback invoked when device service state changes. <br /><br />android.telephony.PhoneStateListener.onCallStateChanged (int state, String incomingNumber) &mdash; Callback invoked when device call state changes. <br /><br />android.telephony.ServiceState.getRoaming ()   Get current roaming indicator of phone  (note: not just decoding from TS 27.007 7.2) &mdash; Get current roaming indicator of phone (note: not just decoding from TS 27.007 7.2) <br /><br />android.telephony.ServiceState.getState () &mdash; Get current voice service state <br /><br />android.telephony.SmsManager.getDefault () &mdash; Get the SmsManager associated with the default subscription id. <br /><br />android.telephony.SmsManager.sendMultipartTextMessage (String destinationAddress, String scAddress, ArrayList< String> parts, ArrayList< PendingIntent> sentIntents, ArrayList< PendingIntent> deliveryIntents) &mdash; Send a multi-part text based SMS. <br /><br />android.telephony.SmsManager.sendTextMessage (String destinationAddress, String scAddress, String text, PendingIntent sentIntent, PendingIntent deliveryIntent) &mdash; Send a text based SMS. <br /><br />android.telephony.SmsManager.divideMessage (String text) &mdash; Divide a message text into several fragments, none bigger than the maximum SMS message size. <br /><br />android.telephony.SmsMessage.getMessageBody () &mdash; Returns the message body as a String, if it exists and is text based. <br /><br />android.telephony.SmsMessage.getTimestampMillis ()   Returns the service centre timestamp in currentTimeMillis () &mdash; Returns the service centre timestamp in currentTimeMillis() format <br /><br />android.telephony.SmsMessage.getOriginatingAddress ()   Returns the originating address  (sender) &mdash; Returns the originating address (sender) of this SMS message in String form or null if unavailable <br /><br />android.telephony.SmsMessage.createFromPdu (byte[] pdu) &mdash; Create an SmsMessage from a raw PDU. <br /><br />android.telephony.SmsMessage.getDisplayMessageBody () &mdash; Returns the message body, or email message body if this message was from an email gateway. <br /><br />android.telephony.TelephonyManager.getSimState () &mdash; Returns a constant indicating the state of the default SIM card. <br /><br />android.telephony.TelephonyManager.getSubscriberId () &mdash; Returns the unique subscriber ID, for example, the IMSI for a GSM phone. <br /><br />android.telephony.TelephonyManager.getDataActivity ()   Returns a constant indicating the type of activity on a data connection  (cellular) &mdash; Returns a constant indicating the type of activity on a data connection (cellular). <br /><br />android.telephony.TelephonyManager.getLine1Number () &mdash; Returns the phone number string for line 1, for example, the MSISDN for a GSM phone. <br /><br />"
"android.telephony.TelephonyManager.getNetworkCountryIso ()   Returns the ISO country code equivalent of the current registered operator's MCC  (Mobile Country Code) &mdash; Returns the ISO country code equivalent of the current registered operator's MCC (Mobile Country Code). <br /><br />android.telephony.TelephonyManager.isNetworkRoaming () &mdash; Returns true if the device is considered roaming on the current network, for GSM purposes. <br /><br />android.telephony.TelephonyManager.getSimCountryIso () &mdash; Returns the ISO country code equivalent for the SIM provider's country code. <br /><br />android.telephony.TelephonyManager.getPhoneType () &mdash; Returns a constant indicating the device phone type. <br /><br />android.telephony.TelephonyManager.getCellLocation () &mdash; Returns the current location of the device. <br /><br />android.telephony.TelephonyManager.getDeviceId () &mdash; Returns the unique device ID, for example, the IMEI for GSM and the MEID or ESN for CDMA phones. <br /><br />android.telephony.TelephonyManager.listen (PhoneStateListener listener, int events) &mdash; Registers a listener object to receive notification of changes in specified telephony states. <br /><br />android.telephony.TelephonyManager.getSimSerialNumber () &mdash; Returns the serial number of the SIM, if applicable. <br /><br />android.telephony.TelephonyManager.getSimOperatorName ()   Returns the Service Provider Name  (SPN) &mdash; Returns the Service Provider Name (SPN). <br /><br />android.telephony.TelephonyManager.getSimOperator ()   Returns the MCC+MNC  (mobile country code + mobile network code) &mdash; Returns the MCC+MNC (mobile country code + mobile network code) of the provider of the SIM. <br /><br />android.telephony.TelephonyManager.getNetworkOperator ()   Returns the numeric name  (MCC+MNC) &mdash; Returns the numeric name (MCC+MNC) of current registered operator. <br /><br />android.telephony.TelephonyManager.getNetworkOperatorName () &mdash; Returns the alphabetic name of current registered operator. <br /><br />android.telephony.TelephonyManager.getNeighboringCellInfo () &mdash; Returns the neighboring cell information of the device. <br /><br />android.telephony.TelephonyManager.getCallState ()   Returns a constant indicating the call state  (cellular) &mdash; Returns a constant indicating the call state (cellular) on the device. <br /><br />android.text.ClipboardManager.setText (CharSequence text) &mdash; Sets the contents of the clipboard to the specified text. <br /><br />android.text.ClipboardManager.hasText () &mdash; Returns true if the clipboard contains text; false otherwise. <br /><br />android.text.ClipboardManager.getText () &mdash; Returns the text on the clipboard. <br /><br />android.text.Editable.append (CharSequence text)   Convenience for replace (length (), length (), text, 0, text.length ()) &mdash; Convenience for replace(length(), length(), text, 0, text.length()) <br /><br />android.text.Editable.insert (int where, CharSequence text)   Convenience for replace (where, where, text, 0, text.length ()) &mdash; Convenience for replace(where, where, text, 0, text.length()); <br /><br />android.text.Editable.append (char text)   Convenience for append (String.valueOf (text)) &mdash; Convenience for append(String.valueOf(text)). <br /><br />"
"android.text.Editable.insert (int where, CharSequence text, int start, int end)   Convenience for replace (where, where, text, start, end) &mdash; Convenience for replace(where, where, text, start, end) <br /><br />android.text.Editable.delete (int st, int en)   Convenience for replace (st, en, '', 0, 0) &mdash; Convenience for replace(st, en, '', 0, 0) <br /><br />android.text.Editable.replace (int st, int en, CharSequence source, int start, int end)   Replaces the specified range  (st en) &mdash; Replaces the specified range ( st en) of text in this Editable with a copy of the slice start end from source. <br /><br />android.text.Editable.replace (int st, int en, CharSequence text)   Convenience for replace (st, en, text, 0, text.length ()) &mdash; Convenience for replace(st, en, text, 0, text.length()) <br /><br />android.text.Editable.append (CharSequence text, int start, int end)   Convenience for replace (length (), length (), text, start, end) &mdash; Convenience for replace(length(), length(), text, start, end) <br /><br />android.text.format.DateFormat.format (CharSequence inFormat, long inTimeInMillis) &mdash; Given a format string and a time in milliseconds since Jan 1, 1970 GMT, returns a CharSequence containing the requested date. <br /><br />android.text.format.DateFormat.is24HourFormat (Context context) &mdash; Returns true if user preference is set to 24-hour format. <br /><br />android.text.format.DateFormat.format (CharSequence inFormat, Calendar inDate) &mdash; Given a format string and a Calendar object, returns a CharSequence containing the requested date. <br /><br />android.text.format.DateFormat.getTimeFormat (Context context) &mdash; Returns a DateFormat object that can format the time according to the current locale and the user's 12-/24-hour clock preference. <br /><br />android.text.format.DateFormat.format (CharSequence inFormat, Date inDate) &mdash; Given a format string and a Date object, returns a CharSequence containing the requested date. <br /><br />android.text.format.DateFormat.getDateFormat (Context context)   Returns a DateFormat object that can format the date in short form  (such as 12/31/1999) &mdash; Returns a DateFormat object that can format the date in short form (such as 12/31/1999) according to the current locale and the user's date-order preference. <br /><br />android.text.format.DateUtils.getRelativeTimeSpanString (long time, long now, long minResolution) &mdash; Returns a string describing 'time' as a time relative to 'now'. <br /><br />android.text.format.DateUtils.getRelativeTimeSpanString (Context c, long millis) &mdash; Convenience function to return relative time string without preposition. <br /><br />android.text.format.DateUtils.getDayOfWeekString (int dayOfWeek, int abbrev) &mdash; This method was deprecated in API level 17. Use SimpleDateFormat instead. <br /><br />android.text.format.DateUtils.formatDateRange (Context context, long startMillis, long endMillis, int flags) &mdash; Formats a date or a time range according to the local conventions. <br /><br />android.text.format.DateUtils.formatSameDayTime (long then, long now, int dateStyle, int timeStyle) &mdash; Format a date / time such that if the then is on the same day as now, it shows just the time and if it's a different day, it shows just the date. <br /><br />android.text.format.DateUtils.formatDateTime (Context context, long millis, int flags) &mdash; Formats a date or a time according to the local conventions. <br /><br />android.text.format.DateUtils.getRelativeTimeSpanString (long startTime) &mdash; Returns a string describing the elapsed time since startTime. <br /><br />android.text.format.Formatter.formatIpAddress (int ipv4Address)    This method was deprecated in API level 12. Use getHostAddress () &mdash; This method was deprecated in API level 12. Use getHostAddress(), which supports both IPv4 and IPv6 addresses. This method does not support IPv6 addresses. <br /><br />android.text.format.Formatter.formatFileSize (Context context, long number) &mdash; Formats a content size to be in the form of bytes, kilobytes, megabytes, etc <br /><br />"
"android.text.format.Time.toMillis (boolean ignoreDst) &mdash; Converts this time to milliseconds. <br /><br />android.text.format.Time.set (int monthDay, int month, int year) &mdash; Sets the date from the given fields. <br /><br />android.text.format.Time.set (int second, int minute, int hour, int monthDay, int month, int year) &mdash; Sets the fields. <br /><br />android.text.format.Time.setToNow () &mdash; Sets the time of the given Time object to the current time. <br /><br />android.text.format.Time.getActualMaximum (int field) &mdash; Return the maximum possible value for the given field given the value of the other fields. <br /><br />android.text.format.Time.set (Time that) &mdash; Copy the value of that to this Time object. <br /><br />android.text.format.Time.format3339 (boolean allDay) &mdash; Return a string in the RFC 3339 format. <br /><br />android.text.format.Time.getCurrentTimezone () &mdash; Returns the timezone string that is currently set for the device. <br /><br />android.text.format.Time.normalize (boolean ignoreDst) &mdash; Ensures the values in each field are in range. <br /><br />android.text.format.Time.parse (String s) &mdash; Parses a date-time string in either the RFC 2445 format or an abbreviated format that does not include the 'time' field. <br /><br />android.text.format.Time.getJulianDay (long millis, long gmtoff) &mdash; Computes the Julian day number for a point in time in a particular timezone. <br /><br />android.text.format.Time.format2445 () &mdash; Format according to RFC 2445 DATE-TIME type. <br /><br />android.text.format.Time.compare (Time a, Time b) &mdash; Compare two Time objects and return a negative number if a is less than b, a positive number if a is greater than b, or 0 if they are equal. <br /><br />android.text.format.Time.switchTimezone (String timezone) &mdash; Convert this time object so the time represented remains the same, but is instead located in a different timezone. <br /><br />android.text.format.Time.format (String format) &mdash; Print the current value given the format string provided. <br /><br />android.text.format.Time.set (long millis) &mdash; Sets the fields in this Time object given the UTC milliseconds. <br /><br />android.text.format.Time.isEpoch (Time time)   Returns true if the day of the given time is the epoch on the Julian Calendar  (January 1, 1970 on the Gregorian calendar) &mdash; Returns true if the day of the given time is the epoch on the Julian Calendar (January 1, 1970 on the Gregorian calendar). <br /><br />android.text.format.Time.parse3339 (String s) &mdash; Parse a time in RFC 3339 format. <br /><br />android.text.Layout.getDesiredWidth (CharSequence source, int start, int end, TextPaint paint) &mdash; Return how wide a layout must be in order to display the specified text slice with one line per paragraph. <br /><br />android.text.Layout.draw (Canvas c) &mdash; Draw this Layout on the specified Canvas. <br /><br />"
"android.text.Layout.draw (Canvas canvas, Path highlight, Paint highlightPaint, int cursorOffsetVertical) &mdash; Draw this Layout on the specified canvas, with the highlight path drawn between the background and the text. <br /><br />android.text.Layout.getDesiredWidth (CharSequence source, TextPaint paint) &mdash; Return how wide a layout must be in order to display the specified text with one line per paragraph. <br /><br />android.text.Layout.getLineBounds (int line, Rect bounds)   Return the baseline for the specified line  (0 getLineCount () - 1) &mdash; Return the baseline for the specified line (0 getLineCount() - 1) If bounds is not null, return the top, left, right, bottom extents of the specified line in it. <br /><br />android.text.Layout.getOffsetForHorizontal (int line, float horiz) &mdash; Get the character offset on the specified line whose position is closest to the specified horizontal position. <br /><br />android.text.Layout.getHeight () &mdash; Return the total height of this layout. <br /><br />android.text.Layout.getLineTop (int line)   Return the vertical position of the top of the specified line  (0 getLineCount ()) &mdash; Return the vertical position of the top of the specified line (0 getLineCount()). <br /><br />android.text.Layout.getLineRight (int line) &mdash; Get the rightmost position that should be exposed for horizontal scrolling on the specified line. <br /><br />android.text.Layout.getWidth () &mdash; Return the width of this layout. <br /><br />android.text.Layout.getSpacingAdd () &mdash; Return the number of units of leading that are added to each line. <br /><br />android.text.Layout.getLineForVertical (int vertical) &mdash; Get the line number corresponding to the specified vertical position. <br /><br />android.text.Layout.getLineDescent (int line)   Return the descent of the specified line (0 getLineCount () - 1) &mdash; Return the descent of the specified line(0 getLineCount() - 1). <br /><br />android.text.Layout.getLineBaseline (int line) &mdash; Return the vertical position of the baseline of the specified line. <br /><br />android.text.Layout.getLineWidth (int line) &mdash; Gets the unsigned horizontal extent of the specified line, including leading margin indent and trailing whitespace. <br /><br />android.text.Layout.getText () &mdash; Return the text that is displayed by this Layout. <br /><br />android.text.Layout.getLineCount () &mdash; Return the number of lines of text in this layout. <br /><br />android.text.Layout.getPaint () &mdash; Return the base Paint properties for this layout. <br /><br />android.text.Layout.getPrimaryHorizontal (int offset) &mdash; Get the primary horizontal position for the specified text offset. <br /><br />android.text.Layout.getLineLeft (int line) &mdash; Get the leftmost position that should be exposed for horizontal scrolling on the specified line. <br /><br />android.text.Layout.getLineForOffset (int offset) &mdash; Get the line number on which the specified text offset appears. <br /><br />android.text.Layout.getSpacingMultiplier () &mdash; Return what the text height is multiplied by to get the line height. <br /><br />"
"android.text.method.DigitsKeyListener.getInstance () &mdash; Returns a DigitsKeyListener that accepts the digits 0 through 9. <br /><br />android.text.method.DigitsKeyListener.getInstance (String accepted) &mdash; Returns a DigitsKeyListener that accepts only the characters that appear in the specified String. <br /><br />android.text.method.DigitsKeyListener.getInstance (boolean sign, boolean decimal)   Returns a DigitsKeyListener that accepts the digits 0 through 9, plus the minus sign  (only at the beginning) and/or decimal point  (only one per field) &mdash; Returns a DigitsKeyListener that accepts the digits 0 through 9, plus the minus sign (only at the beginning) and/or decimal point (only one per field) if specified. <br /><br />android.text.method.QwertyKeyListener.markAsReplaced (Spannable content, int start, int end, String original) &mdash; Marks the specified region of content as having contained original prior to AutoText replacement. <br /><br />android.text.method.TextKeyListener.getInstance () &mdash; Returns a new or existing instance with no automatic capitalization or correction. <br /><br />android.text.method.TextKeyListener.getInstance (boolean autotext, TextKeyListener.Capitalize cap) &mdash; Returns a new or existing instance with the specified capitalization and correction properties. <br /><br />android.text.Selection.setSelection (Spannable text, int start, int stop) &mdash; Set the selection anchor to start and the selection edge to stop. <br /><br />android.text.Selection.setSelection (Spannable text, int index) &mdash; Move the cursor to offset index. <br /><br />android.text.Selection.getSelectionStart (CharSequence text) &mdash; Return the offset of the selection anchor or cursor, or -1 if there is no selection or cursor. <br /><br />android.text.Selection.removeSelection (Spannable text) &mdash; Remove the selection or cursor, if any, from the text. <br /><br />android.text.Selection.getSelectionEnd (CharSequence text) &mdash; Return the offset of the selection edge or cursor, or -1 if there is no selection or cursor. <br /><br />android.text.Spannable.removeSpan (Object what) &mdash; Remove the specified object from the range of text to which it was attached, if any. <br /><br />android.text.Spannable.setSpan (Object what, int start, int end, int flags) &mdash; Attach the specified markup object to the range start end of the text, or move the object to that range if it was already attached elsewhere. <br /><br />android.text.SpannableString.getSpanEnd (Object what) &mdash; Return the end of the range of text to which the specified markup object is attached, or -1 if the object is not attached. <br /><br />android.text.SpannableString.length () &mdash; Returns the number of characters in this sequence. <br /><br />android.text.SpannableString.getSpans (int queryStart, int queryEnd, Class<T> kind) &mdash; Return an array of the markup objects attached to the specified slice of this CharSequence and whose type is the specified type or a subclass of it. <br /><br />android.text.SpannableString.getSpanStart (Object what) &mdash; Return the beginning of the range of text to which the specified markup object is attached, or -1 if the object is not attached. <br /><br />android.text.SpannableString.subSequence (int start, int end)   Returns a CharSequence from the start index  (inclusive) to the end index  (exclusive) &mdash; Returns a CharSequence from the start index (inclusive) to the end index (exclusive) of this sequence. <br /><br />android.text.SpannableStringBuilder.getSpanEnd (Object what) &mdash; Return the buffer offset of the end of the specified markup object, or -1 if it is not attached to this buffer. <br /><br />android.text.SpannableStringBuilder.length () &mdash; Return the number of chars in the buffer. <br /><br />"
"android.text.SpannableStringBuilder.getSpans (int queryStart, int queryEnd, Class<T> kind) &mdash; Return an array of the spans of the specified type that overlap the specified range of the buffer. <br /><br />android.text.SpannableStringBuilder.toString () &mdash; Return a String containing a copy of the chars in this buffer. <br /><br />android.text.SpannableStringBuilder.clearSpans ()   Removes all spans from the Editable, as if by calling removeSpan (Object) &mdash; Removes all spans from the Editable, as if by calling removeSpan(Object) on each of them. <br /><br />android.text.SpannableStringBuilder.append (CharSequence text, Object what, int flags) &mdash; Appends the character sequence text and spans what over the appended part. <br /><br />android.text.SpannableStringBuilder.getSpanStart (Object what) &mdash; Return the buffer offset of the beginning of the specified markup object, or -1 if it is not attached to this buffer. <br /><br />android.text.SpannableStringBuilder.setSpan (Object what, int start, int end, int flags) &mdash; Mark the specified range of text with the specified object. <br /><br />android.text.SpannableStringBuilder.getSpanFlags (Object what) &mdash; Return the flags of the end of the specified markup object, or 0 if it is not attached to this buffer. <br /><br />android.text.SpannableStringBuilder.clear ()   Convenience for replace (0, length (), '', 0, 0) &mdash; Convenience for replace(0, length(), '', 0, 0) <br /><br />android.text.SpannableStringBuilder.charAt (int where) &mdash; Return the char at the specified offset within the buffer. <br /><br />android.text.StaticLayout.getLineStart (int line)   Return the text offset of the beginning of the specified line  (0 getLineCount ()) &mdash; Return the text offset of the beginning of the specified line ( 0 getLineCount()). <br /><br />android.text.style.ClickableSpan.updateDrawState (TextPaint ds) &mdash; Makes the text underlined and in the link color. <br /><br />android.text.style.ClickableSpan.onClick (View widget) &mdash; Performs the click action associated with this span. <br /><br />android.text.style.ImageSpan.getDrawable () &mdash; Your subclass must implement this method to provide the bitmap to be drawn. <br /><br />android.text.TextPaint.set (TextPaint tp) &mdash; Copy the fields from tp into this TextPaint, including the fields inherited from Paint. <br /><br />android.text.TextUtils.join (CharSequence delimiter, Object[] tokens) &mdash; Returns a string containing the tokens joined by delimiters. <br /><br />android.text.TextUtils.isDigitsOnly (CharSequence str) &mdash; Returns whether the given CharSequence contains only digits. <br /><br />android.text.TextUtils.equals (CharSequence a, CharSequence b) &mdash; Returns true if a and b are equal, including if they are both null. <br /><br />android.text.TextUtils.isGraphic (char c) &mdash; Returns whether this character is a printable character. <br /><br />android.text.TextUtils.writeToParcel (CharSequence cs, Parcel p, int parcelableFlags) &mdash; Flatten a CharSequence and whatever styles can be copied across processes into the parcel. <br /><br />android.text.TextUtils.htmlEncode (String s) &mdash; Html-encode the string. <br /><br />"
"android.text.TextUtils.isGraphic (CharSequence str) &mdash; Returns whether the given CharSequence contains any printable characters. <br /><br />android.text.TextUtils.copySpansFrom (Spanned source, int start, int end, Class kind, Spannable dest, int destoff) &mdash; Copies the spans from the region start...end in source to the region destoff...destoff+end-start in dest. <br /><br />android.text.TextUtils.split (String text, Pattern pattern) &mdash; Splits a string on a pattern. <br /><br />android.text.TextUtils.isEmpty (CharSequence str) &mdash; Returns true if the string is null or 0-length. <br /><br />android.text.TextUtils.getTrimmedLength (CharSequence s)   Returns the length that the specified CharSequence would have if spaces and control characters were trimmed from the start and end, as by trim () &mdash; Returns the length that the specified CharSequence would have if spaces and control characters were trimmed from the start and end, as by trim(). <br /><br />android.text.TextUtils.split (String text, String expression)   String.split () &mdash; String.split() returns [''] when the string to be split is empty. <br /><br />android.text.TextUtils.substring (CharSequence source, int start, int end) &mdash; Create a new String object containing the given range of characters from the source string. <br /><br />android.text.TextWatcher.afterTextChanged (Editable s) &mdash; This method is called to notify you that, somewhere within s, the text has been changed. <br /><br />android.text.util.Linkify.addLinks (Spannable text, int mask) &mdash; Scans the text of the provided Spannable and turns all occurrences of the link types indicated in the mask into clickable links. <br /><br />android.text.util.Linkify.addLinks (TextView text, Pattern p, String scheme, Linkify.MatchFilter matchFilter, Linkify.TransformFilter transformFilter) &mdash; Applies a regex to the text of a TextView turning the matches into links. <br /><br />android.text.util.Linkify.addLinks (TextView text, int mask) &mdash; Scans the text of the provided TextView and turns all occurrences of the link types indicated in the mask into clickable links. <br /><br />android.text.util.Linkify.addLinks (Spannable s, Pattern p, String scheme, Linkify.MatchFilter matchFilter, Linkify.TransformFilter transformFilter) &mdash; Applies a regex to a Spannable turning the matches into links. <br /><br />android.text.util.Rfc822Token.getName () &mdash; Returns the name part. <br /><br />android.text.util.Rfc822Token.getAddress () &mdash; Returns the address part. <br /><br />android.text.util.Rfc822Token.toString ()   Returns the name  (with quoting added if necessary), the comment  (in parentheses), and the address  (in angle brackets) &mdash; Returns the name (with quoting added if necessary), the comment (in parentheses), and the address (in angle brackets). <br /><br />android.text.util.Rfc822Tokenizer.tokenize (CharSequence text, Collection< Rfc822Token> out)   This constructor will try to take a string like 'Foo Bar  (something) <foo\@google.com>, blah\@google.com  (something) &mdash; This constructor will try to take a string like 'Foo Bar (something) <foo\@google.com>, blah\@google.com (something)' and convert it into one or more Rfc822Tokens, output into the supplied collection. <br /><br />android.text.util.Rfc822Tokenizer.tokenize (CharSequence text)   This method will try to take a string like 'Foo Bar  (something) <foo\@google.com>, blah\@google.com  (something) &mdash; This method will try to take a string like 'Foo Bar (something) <foo\@google.com>, blah\@google.com (something)' and convert it into one or more Rfc822Tokens. <br /><br />android.transition.Transition.excludeTarget (View target, boolean exclude) &mdash; Whether to add the given target to the list of targets to exclude from this transition. <br /><br />android.transition.Transition.removeTarget (View target) &mdash; Removes the given target from the list of targets that this Transition is interested in animating. <br /><br />android.transition.Transition.addTarget (Class targetType) &mdash; Adds the Class of a target view that this Transition is interested in animating. <br /><br />"
"android.transition.Transition.removeTarget (String targetName) &mdash; Removes the given targetName from the list of transitionNames that this Transition is interested in animating. <br /><br />android.transition.Transition.excludeTarget (String targetName, boolean exclude) &mdash; Whether to add the given transitionName to the list of target transitionNames to exclude from this transition. <br /><br />android.transition.Transition.excludeTarget (Class type, boolean exclude) &mdash; Whether to add the given type to the list of types to exclude from this transition. <br /><br />android.transition.Transition.addTarget (View target) &mdash; Sets the target view instances that this Transition is interested in animating. <br /><br />android.transition.Transition.removeTarget (int targetId) &mdash; Removes the given targetId from the list of ids that this Transition is interested in animating. <br /><br />android.transition.Transition.getTargets () &mdash; Returns the list of target views that this transition limits itself to tracking and animating. <br /><br />android.transition.Transition.getTargetNames () &mdash; Returns the list of target transitionNames that this transition limits itself to tracking and animating. <br /><br />android.transition.Transition.addTarget (int targetId) &mdash; Adds the id of a target view that this Transition is interested in animating. <br /><br />android.transition.Transition.addTarget (String targetName) &mdash; Adds the transitionName of a target view that this Transition is interested in animating. <br /><br />android.transition.Transition.excludeTarget (int targetId, boolean exclude) &mdash; Whether to add the given id to the list of target ids to exclude from this transition. <br /><br />android.transition.Transition.getTargetIds () &mdash; Returns the list of target IDs that this transition limits itself to tracking and animating. <br /><br />android.transition.TransitionManager.beginDelayedTransition (ViewGroup sceneRoot) &mdash; Convenience method to animate, using the default transition, to a new scene defined by all changes within the given scene root between calling this method and the next rendering frame. <br /><br />android.transition.TransitionManager.beginDelayedTransition (ViewGroup sceneRoot, Transition transition) &mdash; Convenience method to animate to a new scene defined by all changes within the given scene root between calling this method and the next rendering frame. <br /><br />android.transition.TransitionSet.addTransition (Transition transition) &mdash; Adds child transition to this set. <br /><br />android.transition.TransitionSet.getTransitionCount () &mdash; Returns the number of child transitions in the TransitionSet. <br /><br />android.transition.TransitionSet.getTransitionAt (int index) &mdash; Returns the child Transition at the specified position in the TransitionSet. <br /><br />android.transition.TransitionSet.setOrdering (int ordering) &mdash; Sets the play order of this set's child transitions. <br /><br />android.util.AttributeSet.getAttributeIntValue (String namespace, String attribute, int defaultValue) &mdash; Return the integer value of 'attribute'. <br /><br />android.util.AttributeSet.getAttributeUnsignedIntValue (String namespace, String attribute, int defaultValue) &mdash; Return the boolean value of 'attribute' that is formatted as an unsigned value. <br /><br />android.util.AttributeSet.getAttributeIntValue (int index, int defaultValue) &mdash; Return the integer value of attribute at 'index'. <br /><br />"
"android.util.AttributeSet.getAttributeValue (int index) &mdash; Returns the value of the specified attribute as a string representation. <br /><br />android.util.AttributeSet.getAttributeName (int index) &mdash; Returns the name of the specified attribute. <br /><br />android.util.AttributeSet.getAttributeFloatValue (String namespace, String attribute, float defaultValue) &mdash; Return the float value of 'attribute'. <br /><br />android.util.AttributeSet.getAttributeBooleanValue (String namespace, String attribute, boolean defaultValue) &mdash; Return the boolean value of 'attribute'. <br /><br />android.util.AttributeSet.getAttributeUnsignedIntValue (int index, int defaultValue) &mdash; Return the integer value of attribute at 'index' that is formatted as an unsigned value. <br /><br />android.util.AttributeSet.getAttributeBooleanValue (int index, boolean defaultValue) &mdash; Return the boolean value of attribute at 'index'. <br /><br />android.util.AttributeSet.getAttributeFloatValue (int index, float defaultValue) &mdash; Return the float value of attribute at 'index'. <br /><br />android.util.AttributeSet.getAttributeCount () &mdash; Returns the number of attributes available in the set. <br /><br />android.util.AttributeSet.getAttributeResourceValue (String namespace, String attribute, int defaultValue) &mdash; Return the value of 'attribute' as a resource identifier. <br /><br />android.util.AttributeSet.getPositionDescription () &mdash; Returns a description of the current position of the attribute set. <br /><br />android.util.AttributeSet.getStyleAttribute () &mdash; Return the value of the 'style' attribute or 0 if there is not one. <br /><br />android.util.AttributeSet.getAttributeResourceValue (int index, int defaultValue) &mdash; Return the value of attribute at 'index' as a resource identifier. <br /><br />android.util.Base64.encodeToString (byte[] input, int flags) &mdash; Base64-encode the given data and return a newly allocated String with the result. <br /><br />android.util.Base64.decode (byte[] input, int offset, int len, int flags) &mdash; Decode the Base64-encoded data in input and return the data in a new byte array. <br /><br />android.util.Base64.encode (byte[] input, int flags) &mdash; Base64-encode the given data and return a newly allocated byte[] with the result. <br /><br />android.util.Base64OutputStream.write (byte[] b, int off, int len) &mdash; Writes count bytes from the byte array buffer starting at offset to the target stream. <br /><br />android.util.Base64OutputStream.write (int b) &mdash; Writes one byte to the target stream. <br /><br />android.util.Base64OutputStream.close () &mdash; Closes this stream. <br /><br />android.util.FloatMath.floor (float value) &mdash; Returns the float conversion of the most positive (i.e. <br /><br />android.util.FloatMath.sqrt (float value) &mdash; Returns the closest float approximation of the square root of the argument. <br /><br />"
"android.util.FloatMath.cos (float angle) &mdash; Returns the closest float approximation of the cosine of the argument. <br /><br />android.util.FloatMath.ceil (float value) &mdash; Returns the float conversion of the most negative (i.e. <br /><br />android.util.FloatMath.sin (float angle) &mdash; Returns the closest float approximation of the sine of the argument. <br /><br />android.util.JsonReader.nextName () &mdash; Returns the next token, a property name, and consumes it. <br /><br />android.util.JsonReader.hasNext () &mdash; Returns true if the current array or object has another element. <br /><br />android.util.JsonReader.close () &mdash; Closes this JSON reader and the underlying Reader. <br /><br />android.util.JsonReader.nextString () &mdash; Returns the string value of the next token, consuming it. <br /><br />android.util.JsonReader.beginObject () &mdash; Consumes the next token from the JSON stream and asserts that it is the beginning of a new object. <br /><br />android.util.JsonReader.endArray () &mdash; Consumes the next token from the JSON stream and asserts that it is the end of the current array. <br /><br />android.util.JsonReader.skipValue () &mdash; Skips the next value recursively. <br /><br />android.util.JsonReader.beginArray () &mdash; Consumes the next token from the JSON stream and asserts that it is the beginning of a new array. <br /><br />android.util.JsonReader.peek () &mdash; Returns the type of the next token without consuming it. <br /><br />android.util.JsonWriter.close () &mdash; Flushes and closes this writer and the underlying Writer. <br /><br />android.util.JsonWriter.value (long value) &mdash; Encodes value. <br /><br />android.util.JsonWriter.beginObject () &mdash; Begins encoding a new object. <br /><br />android.util.JsonWriter.endArray () &mdash; Ends encoding the current array. <br /><br />android.util.JsonWriter.endObject () &mdash; Ends encoding the current object. <br /><br />android.util.JsonWriter.nullValue () &mdash; Encodes null. <br /><br />android.util.JsonWriter.beginArray () &mdash; Begins encoding a new array. <br /><br />android.util.JsonWriter.name (String name) &mdash; Encodes the property name. <br /><br />"
"android.util.Log.wtf (String tag, String msg, Throwable tr) &mdash; What a Terrible Failure: Report an exception that should never happen. <br /><br />android.util.Log.isLoggable (String tag, int level) &mdash; Checks to see whether or not a log for the specified tag is loggable at the specified level. <br /><br />android.util.Log.e (String tag, String msg) &mdash; Send an ERROR log message. <br /><br />android.util.Log.wtf (String tag, String msg) &mdash; What a Terrible Failure: Report a condition that should never happen. <br /><br />android.util.Log.getStackTraceString (Throwable tr) &mdash; Handy function to get a loggable stack trace from a Throwable <br /><br />android.util.Log.w (String tag, String msg) &mdash; Send a WARN log message. <br /><br />android.util.Log.e (String tag, String msg, Throwable tr) &mdash; Send a ERROR log message and log the exception. <br /><br />android.util.Log.d (String tag, String msg, Throwable tr) &mdash; Send a DEBUG log message and log the exception. <br /><br />android.util.Log.v (String tag, String msg, Throwable tr) &mdash; Send a VERBOSE log message and log the exception. <br /><br />android.util.Log.println (int priority, String tag, String msg) &mdash; Low-level logging call. <br /><br />android.util.Log.d (String tag, String msg) &mdash; Send a DEBUG log message. <br /><br />android.util.Log.i (String tag, String msg, Throwable tr) &mdash; Send a INFO log message and log the exception. <br /><br />android.util.Log.w (String tag, String msg, Throwable tr) &mdash; Send a WARN log message and log the exception. <br /><br />android.util.Log.v (String tag, String msg) &mdash; Send a VERBOSE log message. <br /><br />android.util.Log.i (String tag, String msg) &mdash; Send an INFO log message. <br /><br />android.util.SparseBooleanArray.keyAt (int index)   Given an index in the range 0...size () &mdash; Given an index in the range 0...size()-1, returns the key from the indexth key-value mapping that this SparseBooleanArray stores. <br /><br />android.util.SparseBooleanArray.get (int key) &mdash; Gets the boolean mapped from the specified key, or false if no such mapping has been made. <br /><br />android.util.SparseBooleanArray.clear () &mdash; Removes all key-value mappings from this SparseBooleanArray. <br /><br />android.util.SparseBooleanArray.valueAt (int index)   Given an index in the range 0...size () &mdash; Given an index in the range 0...size()-1, returns the value from the indexth key-value mapping that this SparseBooleanArray stores. <br /><br />android.util.SparseBooleanArray.delete (int key) &mdash; Removes the mapping from the specified key, if there was any. <br /><br />"
"android.util.SparseBooleanArray.size () &mdash; Returns the number of key-value mappings that this SparseBooleanArray currently stores. <br /><br />android.util.SparseBooleanArray.put (int key, boolean value) &mdash; Adds a mapping from the specified key to the specified value, replacing the previous mapping from the specified key if there was one. <br /><br />android.util.SparseBooleanArray.get (int key, boolean valueIfKeyNotFound) &mdash; Gets the boolean mapped from the specified key, or the specified value if no such mapping has been made. <br /><br />android.util.SparseIntArray.indexOfKey (int key)   Returns the index for which keyAt (int) &mdash; Returns the index for which keyAt(int) would return the specified key, or a negative number if the specified key is not mapped. <br /><br />android.util.SparseIntArray.keyAt (int index)   Given an index in the range 0...size () &mdash; Given an index in the range 0...size()-1, returns the key from the indexth key-value mapping that this SparseIntArray stores. <br /><br />android.util.SparseIntArray.size () &mdash; Returns the number of key-value mappings that this SparseIntArray currently stores. <br /><br />android.util.SparseIntArray.clear () &mdash; Removes all key-value mappings from this SparseIntArray. <br /><br />android.util.SparseIntArray.get (int key) &mdash; Gets the int mapped from the specified key, or 0 if no such mapping has been made. <br /><br />android.util.SparseIntArray.get (int key, int valueIfKeyNotFound) &mdash; Gets the int mapped from the specified key, or the specified value if no such mapping has been made. <br /><br />android.util.TimingLogger.dumpToLog ()   Dumps the timings to the log using Log.d () &mdash; Dumps the timings to the log using Log.d(). <br /><br />android.util.TimingLogger.addSplit (String splitLabel) &mdash; Add a split for the current time, labeled with splitLabel. <br /><br />android.util.TypedValue.complexToDimensionPixelSize (int data, DisplayMetrics metrics) &mdash; Converts a complex data value holding a dimension to its final value as an integer pixel size. <br /><br />android.util.TypedValue.getDimension (DisplayMetrics metrics) &mdash; Return the data for this value as a dimension. <br /><br />android.util.TypedValue.applyDimension (int unit, float value, DisplayMetrics metrics) &mdash; Converts an unpacked complex data value holding a dimension to its final floating point value. <br /><br />android.util.TypedValue.getFraction (float base, float pbase) &mdash; Return the data for this value as a fraction. <br /><br />android.util.Xml.newSerializer () &mdash; Creates a new xml serializer. <br /><br />android.util.Xml.newPullParser () &mdash; Returns a new pull parser with namespace support. <br /><br />android.util.Xml.asAttributeSet (XmlPullParser parser) &mdash; Return an AttributeSet interface for use with the given XmlPullParser. <br /><br />android.view.accessibility.AccessibilityEvent.appendRecord (AccessibilityRecord record) &mdash; Appends an AccessibilityRecord to the end of event records. <br /><br />android.view.accessibility.AccessibilityEvent.getPackageName () &mdash; Gets the package name of the source. <br /><br />"
"android.view.accessibility.AccessibilityEvent.getEventTime () &mdash; Gets the time in which this event was sent. <br /><br />android.view.accessibility.AccessibilityEvent.setPackageName (CharSequence packageName) &mdash; Sets the package name of the source. <br /><br />android.view.accessibility.AccessibilityEvent.obtain (AccessibilityEvent event) &mdash; Returns a cached instance if such is available or a new one is created. <br /><br />android.view.accessibility.AccessibilityEvent.getRecordCount () &mdash; Gets the number of records contained in the event. <br /><br />android.view.accessibility.AccessibilityEvent.setEventTime (long eventTime) &mdash; Sets the time in which this event was sent. <br /><br />android.view.accessibility.AccessibilityEvent.getEventType () &mdash; Gets the event type. <br /><br />android.view.accessibility.AccessibilityEvent.recycle () &mdash; Recycles an instance back to be reused. <br /><br />android.view.accessibility.AccessibilityEvent.getRecord (int index) &mdash; Gets the record at a given index. <br /><br />android.view.accessibility.AccessibilityEvent.obtain (int eventType) &mdash; Returns a cached instance if such is available or a new one is instantiated with its type property set. <br /><br />android.view.accessibility.AccessibilityNodeInfo.setChecked (boolean checked) &mdash; Sets whether this node is checked. <br /><br />android.view.accessibility.AccessibilityNodeInfo.setText (CharSequence text) &mdash; Sets the text of this node. <br /><br />android.view.accessibility.AccessibilityNodeInfo.focusSearch (int direction) &mdash; Searches for the nearest view in the specified direction that can take the input focus. <br /><br />android.view.accessibility.AccessibilityNodeInfo.setLiveRegion (int mode) &mdash; Sets the node's live region mode. <br /><br />android.view.accessibility.AccessibilityNodeInfo.getRangeInfo () &mdash; Gets the range info if this node is a range. <br /><br />android.view.accessibility.AccessibilityNodeInfo.addAction (int action)    This method was deprecated in API level 21. This has been deprecated for addAction (AccessibilityAction) &mdash; This method was deprecated in API level 21. This has been deprecated for addAction(AccessibilityAction) <br /><br />android.view.accessibility.AccessibilityNodeInfo.getCollectionInfo () &mdash; Gets the collection info if the node is a collection. <br /><br />android.view.accessibility.AccessibilityNodeInfo.findAccessibilityNodeInfosByText (String text) &mdash; Finds AccessibilityNodeInfos by text. <br /><br />android.view.accessibility.AccessibilityNodeInfo.getWindowId () &mdash; Gets the id of the window from which the info comes from. <br /><br />android.view.accessibility.AccessibilityNodeInfo.performAction (int action) &mdash; Performs an action on the node. <br /><br />android.view.accessibility.AccessibilityNodeInfo.setPassword (boolean password) &mdash; Sets whether this node is a password. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.findFocus (int focus) &mdash; Find the view that has the specified focus type. <br /><br />android.view.accessibility.AccessibilityNodeInfo.setViewIdResourceName (String viewIdResName) &mdash; Sets the fully qualified resource name of the source view's id. <br /><br />android.view.accessibility.AccessibilityNodeInfo.getChild (int index) &mdash; Get the child at given index. <br /><br />android.view.accessibility.AccessibilityNodeInfo.getLiveRegion () &mdash; Gets the node's live region mode. <br /><br />android.view.accessibility.AccessibilityNodeInfo.setCheckable (boolean checkable) &mdash; Sets whether this node is checkable. <br /><br />android.view.accessibility.AccessibilityNodeInfo.getActions ()    This method was deprecated in API level 21. Use getActionList () &mdash; This method was deprecated in API level 21. Use getActionList(). <br /><br />android.view.accessibility.AccessibilityNodeInfo.getChildCount () &mdash; Gets the number of children. <br /><br />android.view.accessibility.AccessibilityNodeInfo.getParent () &mdash; Gets the parent. <br /><br />android.view.accessibility.AccessibilityNodeInfo.getCollectionItemInfo () &mdash; Gets the collection item info if the node is a collection item. <br /><br />android.view.accessibility.AccessibilityRecord.getClassName () &mdash; Gets the class name of the source. <br /><br />android.view.accessibility.AccessibilityRecord.setScrollY (int scrollY) &mdash; Sets the scroll offset of the source top edge in pixels. <br /><br />android.view.accessibility.AccessibilityRecord.setAddedCount (int addedCount) &mdash; Sets the number of added characters. <br /><br />android.view.accessibility.AccessibilityRecord.getScrollY () &mdash; Gets the scroll offset of the source top edge in pixels. <br /><br />android.view.accessibility.AccessibilityRecord.getScrollX () &mdash; Gets the scroll offset of the source left edge in pixels. <br /><br />android.view.accessibility.AccessibilityRecord.setCurrentItemIndex (int currentItemIndex) &mdash; Sets the index of the source in the list of items that can be visited. <br /><br />android.view.accessibility.AccessibilityRecord.setBeforeText (CharSequence beforeText) &mdash; Sets the text before a change. <br /><br />android.view.accessibility.AccessibilityRecord.setRemovedCount (int removedCount) &mdash; Sets the number of removed characters. <br /><br />android.view.accessibility.AccessibilityRecord.setMaxScrollY (int maxScrollY) &mdash; Sets the max scroll offset of the source top edge in pixels. <br /><br />android.view.accessibility.AccessibilityRecord.getParcelableData () &mdash; Gets the Parcelable data. <br /><br />android.view.accessibility.AccessibilityRecord.isChecked () &mdash; Gets if the source is checked. <br /><br />"
"android.view.accessibility.AccessibilityRecord.setClassName (CharSequence className) &mdash; Sets the class name of the source. <br /><br />android.view.accessibility.AccessibilityRecord.setPassword (boolean isPassword) &mdash; Sets if the source is a password field. <br /><br />android.view.accessibility.AccessibilityRecord.getFromIndex () &mdash; Gets the index of the first character of the changed sequence, or the beginning of a text selection or the index of the first visible item when scrolling. <br /><br />android.view.accessibility.AccessibilityRecord.setParcelableData (Parcelable parcelableData) &mdash; Sets the Parcelable data of the event. <br /><br />android.view.accessibility.AccessibilityRecord.setChecked (boolean isChecked) &mdash; Sets if the source is checked. <br /><br />android.view.accessibility.AccessibilityRecord.setScrollX (int scrollX) &mdash; Sets the scroll offset of the source left edge in pixels. <br /><br />android.view.accessibility.AccessibilityRecord.setMaxScrollX (int maxScrollX) &mdash; Sets the max scroll offset of the source left edge in pixels. <br /><br />android.view.accessibility.AccessibilityRecord.getMaxScrollY () &mdash; Gets the max scroll offset of the source top edge in pixels. <br /><br />android.view.accessibility.AccessibilityRecord.getItemCount () &mdash; Gets the number of items that can be visited. <br /><br />android.view.accessibility.AccessibilityRecord.getText () &mdash; Gets the text of the event. <br /><br />android.view.accessibility.AccessibilityRecord.getSource () &mdash; Gets the AccessibilityNodeInfo of the event source. <br /><br />android.view.accessibility.AccessibilityRecord.getToIndex () &mdash; Gets the index of text selection end or the index of the last visible item when scrolling. <br /><br />android.view.accessibility.AccessibilityRecord.setContentDescription (CharSequence contentDescription) &mdash; Sets the description of the source. <br /><br />android.view.accessibility.AccessibilityRecord.isScrollable () &mdash; Gets if the source is scrollable. <br /><br />android.view.accessibility.AccessibilityRecord.getCurrentItemIndex () &mdash; Gets the index of the source in the list of items the can be visited. <br /><br />android.view.accessibility.AccessibilityRecord.getAddedCount () &mdash; Gets the number of added characters. <br /><br />android.view.accessibility.AccessibilityRecord.setEnabled (boolean isEnabled) &mdash; Sets if the source is enabled. <br /><br />android.view.accessibility.AccessibilityRecord.getRemovedCount () &mdash; Gets the number of removed characters. <br /><br />android.view.accessibility.AccessibilityRecord.isEnabled () &mdash; Gets if the source is enabled. <br /><br />android.view.accessibility.AccessibilityRecord.isFullScreen () &mdash; Gets if the source is taking the entire screen. <br /><br />"
"android.view.accessibility.AccessibilityRecord.getMaxScrollX () &mdash; Gets the max scroll offset of the source left edge in pixels. <br /><br />android.view.accessibility.AccessibilityRecord.isPassword () &mdash; Gets if the source is a password field. <br /><br />android.view.accessibility.AccessibilityRecord.getContentDescription () &mdash; Gets the description of the source. <br /><br />android.view.accessibility.AccessibilityRecord.getWindowId () &mdash; Gets the id of the window from which the event comes from. <br /><br />android.view.accessibility.AccessibilityRecord.setFullScreen (boolean isFullScreen) &mdash; Sets if the source is taking the entire screen. <br /><br />android.view.ActionMode.getTag () &mdash; Retrieve the tag object associated with this ActionMode. <br /><br />android.view.ActionMode.setTag (Object tag) &mdash; Set a tag object associated with this ActionMode. <br /><br />android.view.ActionMode.setSubtitle (int resId) &mdash; Set the subtitle of the action mode. <br /><br />android.view.ActionMode.setCustomView (View view) &mdash; Set a custom view for this action mode. <br /><br />android.view.ActionMode.setTitle (int resId) &mdash; Set the title of the action mode. <br /><br />android.view.ActionMode.getSubtitle () &mdash; Returns the current subtitle of this action mode. <br /><br />android.view.ActionMode.getCustomView () &mdash; Returns the current custom view for this action mode. <br /><br />android.view.ActionMode.getMenuInflater () &mdash; Returns a MenuInflater with the ActionMode's context. <br /><br />android.view.ActionMode.getTitle () &mdash; Returns the current title of this action mode. <br /><br />android.view.ActionMode.invalidate () &mdash; Invalidate the action mode and refresh menu content. <br /><br />android.view.animation.Animation.setStartOffset (long startOffset) &mdash; When this animation should start relative to the start time. <br /><br />android.view.animation.Animation.setDuration (long durationMillis) &mdash; How long this animation should last. <br /><br />android.view.animation.Animation.setFillBefore (boolean fillBefore) &mdash; If fillBefore is true, this animation will apply its transformation before the start time of the animation. <br /><br />android.view.animation.Animation.startNow () &mdash; Convenience method to start the animation at the current time in milliseconds. <br /><br />android.view.animation.Animation.start ()   Convenience method to start the animation the first time getTransformation (long, Transformation) &mdash; Convenience method to start the animation the first time getTransformation(long, Transformation) is invoked. <br /><br />"
"android.view.animation.Animation.hasStarted () &mdash; Indicates whether this animation has started or not. <br /><br />android.view.animation.Animation.getTransformation (long currentTime, Transformation outTransformation) &mdash; Gets the transformation to apply at a specified point in time. <br /><br />android.view.animation.Animation.initialize (int width, int height, int parentWidth, int parentHeight) &mdash; Initialize this animation with the dimensions of the object being animated as well as the objects parents. <br /><br />android.view.animation.Animation.hasEnded () &mdash; Indicates whether this animation has ended or not. <br /><br />android.view.animation.Animation.cancel () &mdash; Cancel the animation. <br /><br />android.view.animation.Animation.getDuration () &mdash; How long this animation should last <br /><br />android.view.animation.Animation.setInterpolator (Context context, int resID) &mdash; Sets the acceleration curve for this animation. <br /><br />android.view.animation.Animation.setStartTime (long startTimeMillis) &mdash; When this animation should start. <br /><br />android.view.animation.Animation.setFillEnabled (boolean fillEnabled) &mdash; If fillEnabled is true, the animation will apply the value of fillBefore. <br /><br />android.view.animation.Animation.setFillAfter (boolean fillAfter) &mdash; If fillAfter is true, the transformation that this animation performed will persist when it is finished. <br /><br />android.view.animation.Animation.reset () &mdash; Reset the initialization state of this animation. <br /><br />android.view.animation.AnimationSet.addAnimation (Animation a) &mdash; Add a child animation to this animation set. <br /><br />android.view.animation.AnimationSet.setDuration (long durationMillis) &mdash; Sets the duration of every child animation. <br /><br />android.view.animation.AnimationSet.getDuration () &mdash; The duration of an AnimationSet is defined to be the duration of the longest child animation. <br /><br />android.view.animation.AnimationUtils.loadAnimation (Context context, int id) &mdash; Loads an Animation object from a resource <br /><br />android.view.animation.AnimationUtils.loadLayoutAnimation (Context context, int id) &mdash; Loads a LayoutAnimationController object from a resource <br /><br />android.view.animation.AnimationUtils.currentAnimationTimeMillis () &mdash; Returns the current animation time in milliseconds. <br /><br />android.view.animation.AnimationUtils.loadInterpolator (Context context, int id) &mdash; Loads an Interpolator object from a resource <br /><br />android.view.animation.LayoutAnimationController.setOrder (int order) &mdash; Sets the order used to compute the delay of each child's animation. <br /><br />android.view.animation.LayoutAnimationController.setDelay (float delay) &mdash; Sets the delay, as a fraction of the animation duration, by which the children's animations are offset. <br /><br />"
"android.view.animation.Transformation.setAlpha (float alpha) &mdash; Sets the degree of transparency <br /><br />android.view.ContextMenu.setHeaderTitle (CharSequence title) &mdash; Sets the context menu header's title to the title given in title. <br /><br />android.view.ContextMenu.setHeaderTitle (int titleRes) &mdash; Sets the context menu header's title to the title given in titleRes resource identifier. <br /><br />android.view.Display.getRefreshRate () &mdash; Gets the refresh rate of this display in frames per second. <br /><br />android.view.Display.getCurrentSizeRange (Point outSmallestSize, Point outLargestSize) &mdash; Return the range of display sizes an application can expect to encounter under normal operation, as long as there is no physical change in screen size. <br /><br />android.view.Display.getRealMetrics (DisplayMetrics outMetrics) &mdash; Gets display metrics based on the real size of this display. <br /><br />android.view.Display.getDisplayId () &mdash; Gets the display id. <br /><br />android.view.Display.getMetrics (DisplayMetrics outMetrics) &mdash; Gets display metrics that describe the size and density of this display. <br /><br />android.view.Display.getPixelFormat () &mdash; This method was deprecated in API level 17. This method is no longer supported. The result is always RGBA_8888. <br /><br />android.view.Display.getRotation () &mdash; Returns the rotation of the screen from its 'natural' orientation. <br /><br />android.view.Display.getRealSize (Point outSize) &mdash; Gets the real size of the display without subtracting any window decor or applying any compatibility scale factors. <br /><br />android.view.Display.getOrientation ()    This method was deprecated in API level 8. use getRotation () &mdash; This method was deprecated in API level 8. use getRotation() <br /><br />android.view.Display.getWidth ()    This method was deprecated in API level 13. Use getSize (Point) &mdash; This method was deprecated in API level 13. Use getSize(Point) instead. <br /><br />android.view.Display.getSize (Point outSize) &mdash; Gets the size of the display, in pixels. <br /><br />android.view.DragEvent.getClipData ()   Returns the ClipData object sent to the system as part of the call to startDrag () &mdash; Returns the ClipData object sent to the system as part of the call to startDrag(). <br /><br />android.view.DragEvent.getAction () &mdash; Inspect the action value of this event. <br /><br />android.view.DragEvent.getClipDescription ()   Returns the ClipDescription object contained in the ClipData object sent to the system as part of the call to startDrag () &mdash; Returns the ClipDescription object contained in the ClipData object sent to the system as part of the call to startDrag(). <br /><br />android.view.FocusFinder.findNextFocus (ViewGroup root, View focused, int direction) &mdash; Find the next view to take focus in root's descendants, starting from the view that currently is focused. <br /><br />android.view.FocusFinder.getInstance () &mdash; Get the focus finder for this thread. <br /><br />android.view.FocusFinder.findNextFocusFromRect (ViewGroup root, Rect focusedRect, int direction) &mdash; Find the next view to take focus in root's descendants, searching from a particular rectangle in root's coordinates. <br /><br />"
"android.view.GestureDetector.setIsLongpressEnabled (boolean isLongpressEnabled) &mdash; Set whether longpress is enabled, if this is enabled when a user presses and holds down you get a longpress event and nothing further. <br /><br />android.view.Gravity.applyDisplay (int gravity, Rect display, Rect inoutObj) &mdash; Apply additional gravity behavior based on the overall 'display' that an object exists in. <br /><br />android.view.InputDevice.isVirtual ()   Returns true if the device is a virtual input device rather than a real one, such as the virtual keyboard  (see VIRTUAL_KEYBOARD) &mdash; Returns true if the device is a virtual input device rather than a real one, such as the virtual keyboard (see VIRTUAL_KEYBOARD). <br /><br />android.view.InputDevice.getMotionRanges () &mdash; Gets the ranges for all axes supported by the device. <br /><br />android.view.InputDevice.getDescriptor () &mdash; Gets the input device descriptor, which is a stable identifier for an input device. <br /><br />android.view.InputDevice.getName () &mdash; Gets the name of this input device. <br /><br />android.view.InputDevice.getSources () &mdash; Gets the input sources supported by this input device as a combined bitfield. <br /><br />android.view.inputmethod.InputConnectionWrapper.deleteSurroundingText (int beforeLength, int afterLength) &mdash; Delete beforeLength characters of text before the current cursor position, and delete afterLength characters of text after the current cursor position, excluding the selection. <br /><br />android.view.inputmethod.InputMethodInfo.getPackageName () &mdash; Return the .apk package that implements this input method. <br /><br />android.view.inputmethod.InputMethodInfo.getServiceInfo () &mdash; Return the raw information about the Service implementing this input method. <br /><br />android.view.inputmethod.InputMethodInfo.getId () &mdash; Return a unique ID for this input method. <br /><br />android.view.inputmethod.InputMethodManager.isActive (View view) &mdash; Return true if the given view is the currently active view for the input method. <br /><br />android.view.inputmethod.InputMethodManager.restartInput (View view) &mdash; If the input method is currently connected to the given view, restart it with its new contents. <br /><br />android.view.inputmethod.InputMethodManager.showSoftInput (View view, int flags)   Synonym for showSoftInput (View, int, ResultReceiver) &mdash; Synonym for showSoftInput(View, int, ResultReceiver) without a result receiver: explicitly request that the current input method's soft input area be shown to the user, if needed. <br /><br />android.view.inputmethod.InputMethodManager.isFullscreenMode () &mdash; Allows you to discover whether the attached input method is running in fullscreen mode. <br /><br />android.view.inputmethod.InputMethodManager.hideSoftInputFromInputMethod (IBinder token, int flags) &mdash; Close/hide the input method's soft input area, so the user no longer sees it or can interact with it. <br /><br />android.view.inputmethod.InputMethodManager.toggleSoftInputFromWindow (IBinder windowToken, int showFlags, int hideFlags) &mdash; This method toggles the input method window display. <br /><br />android.view.inputmethod.InputMethodManager.showSoftInputFromInputMethod (IBinder token, int flags) &mdash; Show the input method's soft input area, so the user sees the input method window and can interact with it. <br /><br />android.view.inputmethod.InputMethodManager.hideSoftInputFromWindow (IBinder windowToken, int flags)   Synonym for hideSoftInputFromWindow (IBinder, int, ResultReceiver) &mdash; Synonym for hideSoftInputFromWindow(IBinder, int, ResultReceiver) without a result: request to hide the soft input window from the context of the window that is currently accepting input. <br /><br />android.view.inputmethod.InputMethodManager.showSoftInput (View view, int flags, ResultReceiver resultReceiver) &mdash; Explicitly request that the current input method's soft input area be shown to the user, if needed. <br /><br />"
"android.view.inputmethod.InputMethodManager.isActive () &mdash; Return true if any view is currently active in the input method. <br /><br />android.view.inputmethod.InputMethodManager.hideSoftInputFromWindow (IBinder windowToken, int flags, ResultReceiver resultReceiver) &mdash; Request to hide the soft input window from the context of the window that is currently accepting input. <br /><br />android.view.KeyCharacterMap.load (int deviceId) &mdash; Loads the key character maps for the keyboard with the specified device id. <br /><br />android.view.KeyCharacterMap.deviceHasKey (int keyCode) &mdash; Queries the framework about whether any physical keys exist on the any keyboard attached to the device that are capable of producing the given key code. <br /><br />android.view.KeyCharacterMap.getKeyboardType () &mdash; Gets the keyboard type. <br /><br />android.view.KeyEvent.getMetaState () &mdash; Returns the state of the meta keys. <br /><br />android.view.KeyEvent.isShiftPressed () &mdash; Returns the pressed state of the SHIFT meta key. <br /><br />android.view.KeyEvent.getNumber () &mdash; Gets the number or symbol associated with the key. <br /><br />android.view.KeyEvent.getUnicodeChar (int metaState) &mdash; Gets the Unicode character generated by the specified key and meta key state combination. <br /><br />android.view.KeyEvent.isSymPressed () &mdash; Returns the pressed state of the SYM meta key. <br /><br />android.view.KeyEvent.isAltPressed () &mdash; Returns the pressed state of the ALT meta key. <br /><br />android.view.KeyEvent.isLongPress () &mdash; For ACTION_DOWN events, indicates that the event has been canceled as per FLAG_LONG_PRESS. <br /><br />android.view.KeyEvent.getFlags () &mdash; Returns the flags for this key event. <br /><br />android.view.KeyEvent.isCanceled () &mdash; For ACTION_UP events, indicates that the event has been canceled as per FLAG_CANCELED. <br /><br />android.view.KeyEvent.getMaxKeyCode () &mdash; Returns the maximum keycode. <br /><br />android.view.KeyEvent.getEventTime ()   Retrieve the time this event occurred, in the uptimeMillis () &mdash; Retrieve the time this event occurred, in the uptimeMillis() time base. <br /><br />android.view.KeyEvent.getAction () &mdash; Retrieve the action of this key event. <br /><br />android.view.KeyEvent.hasNoModifiers () &mdash; Returns true if no modifier keys are pressed. <br /><br />android.view.KeyEvent.isSystem () &mdash; Is this a system key? System keys can not be used for menu shortcuts. <br /><br />android.view.KeyEvent.getRepeatCount () &mdash; Retrieve the repeat count of the event. <br /><br />"
"android.view.KeyEvent.normalizeMetaState (int metaState) &mdash; Normalizes the specified meta state. <br /><br />android.view.KeyEvent.metaStateHasModifiers (int metaState, int modifiers) &mdash; Returns true if only the specified modifier keys are pressed according to the specified meta state. <br /><br />android.view.KeyEvent.isModifierKey (int keyCode) &mdash; Returns true if this key code is a modifier key. <br /><br />android.view.KeyEvent.metaStateHasNoModifiers (int metaState) &mdash; Returns true if no modifiers keys are pressed according to the specified meta state. <br /><br />android.view.KeyEvent.getDeviceId () &mdash; Gets the id for the device that this event came from. <br /><br />android.view.KeyEvent.startTracking ()   Call this during onKeyDown (int, KeyEvent) to have the system track the key through its final up  (possibly including a long press) &mdash; Call this during onKeyDown(int, KeyEvent) to have the system track the key through its final up (possibly including a long press). <br /><br />android.view.KeyEvent.isTracking () &mdash; For ACTION_UP events, indicates that the event is still being tracked from its initial down event as per FLAG_TRACKING. <br /><br />android.view.KeyEvent.isGamepadButton (int keyCode) &mdash; Returns true if the specified keycode is a gamepad button. <br /><br />android.view.KeyEvent.getDownTime ()   Retrieve the time of the most recent key down event, in the uptimeMillis () &mdash; Retrieve the time of the most recent key down event, in the uptimeMillis() time base. <br /><br />android.view.KeyEvent.getKeyCode () &mdash; Retrieve the key code of the key event. <br /><br />android.view.LayoutInflater.inflate (int resource, ViewGroup root, boolean attachToRoot) &mdash; Inflate a new view hierarchy from the specified xml resource. <br /><br />android.view.LayoutInflater.cloneInContext (Context newContext) &mdash; Create a copy of the existing LayoutInflater object, with the copy pointing to a different Context than the original. <br /><br />android.view.LayoutInflater.inflate (XmlPullParser parser, ViewGroup root, boolean attachToRoot) &mdash; Inflate a new view hierarchy from the specified XML node. <br /><br />android.view.LayoutInflater.getFactory ()   Return the current LayoutInflater.Factory  (or null) &mdash; Return the current LayoutInflater.Factory (or null). <br /><br />android.view.LayoutInflater.createView (String name, String prefix, AttributeSet attrs) &mdash; Low-level function for instantiating a view by name. <br /><br />android.view.LayoutInflater.from (Context context) &mdash; Obtains the LayoutInflater from the given context. <br /><br />android.view.LayoutInflater.inflate (XmlPullParser parser, ViewGroup root) &mdash; Inflate a new view hierarchy from the specified xml node. <br /><br />android.view.LayoutInflater.getContext () &mdash; Return the context we are running in, for access to resources, class loader, etc. <br /><br />android.view.Menu.addSubMenu (int titleRes) &mdash; Add a new sub-menu to the menu. <br /><br />android.view.Menu.add (int titleRes) &mdash; Add a new item to the menu. <br /><br />"
"android.view.Menu.removeGroup (int groupId) &mdash; Remove all items in the given group. <br /><br />android.view.Menu.isShortcutKey (int keyCode, KeyEvent event) &mdash; Is a keypress one of the defined shortcut keys for this window. <br /><br />android.view.Menu.close () &mdash; Closes the menu, if open. <br /><br />android.view.Menu.addIntentOptions (int groupId, int itemId, int order, ComponentName caller, Intent[] specifics, Intent intent, int flags, MenuItem[] outSpecificItems) &mdash; Add a group of menu items corresponding to actions that can be performed for a particular Intent. <br /><br />android.view.Menu.setGroupVisible (int group, boolean visible) &mdash; Show or hide all menu items that are in the given group. <br /><br />android.view.Menu.size () &mdash; Get the number of items in the menu. <br /><br />android.view.Menu.add (int groupId, int itemId, int order, int titleRes)   Variation on add (int, int, int, CharSequence) &mdash; Variation on add(int, int, int, CharSequence) that takes a string resource identifier instead of the string itself. <br /><br />android.view.Menu.findItem (int id) &mdash; Return the menu item with a particular identifier. <br /><br />android.view.Menu.clear () &mdash; Remove all existing items from the menu, leaving it empty as if it had just been created. <br /><br />android.view.Menu.removeItem (int id) &mdash; Remove the item with the given identifier. <br /><br />android.view.Menu.hasVisibleItems () &mdash; Return whether the menu currently has item items that are visible. <br /><br />android.view.Menu.setGroupCheckable (int group, boolean checkable, boolean exclusive) &mdash; Control whether a particular group of items can show a check mark. <br /><br />android.view.Menu.performShortcut (int keyCode, KeyEvent event, int flags) &mdash; Execute the menu item action associated with the given shortcut character. <br /><br />android.view.Menu.setGroupEnabled (int group, boolean enabled) &mdash; Enable or disable all menu items that are in the given group. <br /><br />android.view.Menu.getItem (int index) &mdash; Gets the menu item at the given index. <br /><br />android.view.Menu.addSubMenu (int groupId, int itemId, int order, int titleRes)   Variation on addSubMenu (int, int, int, CharSequence) &mdash; Variation on addSubMenu(int, int, int, CharSequence) that takes a string resource identifier for the title instead of the string itself. <br /><br />android.view.Menu.performIdentifierAction (int id, int flags) &mdash; Execute the menu item action associated with the given menu identifier. <br /><br />android.view.Menu.setQwertyMode (boolean isQwerty)   Control whether the menu should be running in qwerty mode  (alphabetic shortcuts) or 12-key mode  (numeric shortcuts) &mdash; Control whether the menu should be running in qwerty mode (alphabetic shortcuts) or 12-key mode (numeric shortcuts). <br /><br />android.view.MenuInflater.inflate (int menuRes, Menu menu) &mdash; Inflate a menu hierarchy from the specified XML resource. <br /><br />android.view.MenuItem.getIntent () &mdash; Return the Intent associated with this item. <br /><br />"
"android.view.MenuItem.getIcon ()   Returns the icon for this item as a Drawable  (getting it from resources if it hasn't been loaded before) &mdash; Returns the icon for this item as a Drawable (getting it from resources if it hasn't been loaded before). <br /><br />android.view.MenuItem.setChecked (boolean checked) &mdash; Control whether this item is shown with a check mark. <br /><br />android.view.MenuItem.isVisible () &mdash; Return the visibility of the menu item. <br /><br />android.view.MenuItem.setTitle (int title) &mdash; Change the title associated with this item. <br /><br />android.view.MenuItem.setAlphabeticShortcut (char alphaChar) &mdash; Change the alphabetic shortcut associated with this item. <br /><br />android.view.MenuItem.setTitleCondensed (CharSequence title) &mdash; Change the condensed title associated with this item. <br /><br />android.view.MenuItem.hasSubMenu () &mdash; Check whether this item has an associated sub-menu. <br /><br />android.view.MenuItem.setIcon (Drawable icon) &mdash; Change the icon associated with this item. <br /><br />android.view.MenuItem.getMenuInfo () &mdash; Gets the extra information linked to this menu item. <br /><br />android.view.MenuItem.setIntent (Intent intent) &mdash; Change the Intent associated with this item. <br /><br />android.view.MenuItem.getNumericShortcut ()   Return the char for this menu item's numeric  (12-key) &mdash; Return the char for this menu item's numeric (12-key) shortcut. <br /><br />android.view.MenuItem.getGroupId () &mdash; Return the group identifier that this menu item is part of. <br /><br />android.view.MenuItem.setShortcut (char numericChar, char alphaChar) &mdash; Change both the numeric and alphabetic shortcut associated with this item. <br /><br />android.view.MenuItem.setNumericShortcut (char numericChar) &mdash; Change the numeric shortcut associated with this item. <br /><br />android.view.MenuItem.setEnabled (boolean enabled) &mdash; Sets whether the menu item is enabled. <br /><br />android.view.MenuItem.setVisible (boolean visible) &mdash; Sets the visibility of the menu item. <br /><br />android.view.MenuItem.getTitle () &mdash; Retrieve the current title of the item. <br /><br />android.view.MenuItem.getItemId () &mdash; Return the identifier for this menu item. <br /><br />android.view.MenuItem.isChecked () &mdash; Return whether the item is currently displaying a check mark. <br /><br />android.view.MenuItem.setShowAsAction (int actionEnum) &mdash; Sets how this item should display in the presence of an Action Bar. <br /><br />"
"android.view.MenuItem.getActionProvider () &mdash; Gets the ActionProvider. <br /><br />android.view.MenuItem.getSubMenu () &mdash; Get the sub-menu to be invoked when this item is selected, if it has one. <br /><br />android.view.MenuItem.isEnabled () &mdash; Return the enabled state of the menu item. <br /><br />android.view.MenuItem.getTitleCondensed () &mdash; Retrieve the current condensed title of the item. <br /><br />android.view.MenuItem.getOrder () &mdash; Return the category and order within the category of this item. <br /><br />android.view.MenuItem.setCheckable (boolean checkable) &mdash; Control whether this item can display a check mark. <br /><br />android.view.MenuItem.getAlphabeticShortcut () &mdash; Return the char for this menu item's alphabetic shortcut. <br /><br />android.view.MenuItem.isCheckable () &mdash; Return whether the item can currently display a check mark. <br /><br />android.view.MotionEvent.getHistoricalY (int pointerIndex, int pos)   Returns a historical Y coordinate, as per getY (int) &mdash; Returns a historical Y coordinate, as per getY(int), that occurred between this event and the previous event for the given pointer. <br /><br />android.view.MotionEvent.getMetaState () &mdash; Returns the state of any meta / modifier keys that were in effect when the event was generated. <br /><br />android.view.MotionEvent.obtain (long downTime, long eventTime, int action, int pointerCount, int[] pointerIds, PointerCoords[] pointerCoords, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags, int source, int flags)    This method was deprecated in API level 14. Use obtain (long, long, int, int, PointerProperties[], PointerCoords[], int, int, float, float, int, int, int, int) &mdash; This method was deprecated in API level 14. Use obtain(long, long, int, int, PointerProperties[], PointerCoords[], int, int, float, float, int, int, int, int) instead. <br /><br />android.view.MotionEvent.getHistoricalPressure (int pointerIndex, int pos)   Returns a historical pressure coordinate, as per getPressure (int) &mdash; Returns a historical pressure coordinate, as per getPressure(int), that occurred between this event and the previous event for the given pointer. <br /><br />android.view.MotionEvent.getHistoricalY (int pos)   getHistoricalY (int, int) for the first pointer index  (may be an arbitrary pointer identifier) &mdash; getHistoricalY(int, int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />android.view.MotionEvent.obtain (MotionEvent other) &mdash; Create a new MotionEvent, copying from an existing one. <br /><br />android.view.MotionEvent.getAxisValue (int axis, int pointerIndex)   Returns the value of the requested axis for the given pointer index  (use getPointerId (int) to find the pointer identifier for this index) &mdash; Returns the value of the requested axis for the given pointer index (use getPointerId(int) to find the pointer identifier for this index). <br /><br />android.view.MotionEvent.getActionIndex ()   For ACTION_POINTER_DOWN or ACTION_POINTER_UP as returned by getActionMasked () &mdash; For ACTION_POINTER_DOWN or ACTION_POINTER_UP as returned by getActionMasked(), this returns the associated pointer index. <br /><br />android.view.MotionEvent.getActionMasked () &mdash; Return the masked action being performed, without pointer index information. <br /><br />android.view.MotionEvent.getToolType (int pointerIndex) &mdash; Gets the tool type of a pointer for the given pointer index. <br /><br />android.view.MotionEvent.getHistoricalX (int pointerIndex, int pos)   Returns a historical X coordinate, as per getX (int) &mdash; Returns a historical X coordinate, as per getX(int), that occurred between this event and the previous event for the given pointer. <br /><br />android.view.MotionEvent.getSize ()   getSize (int) for the first pointer index  (may be an arbitrary pointer identifier) &mdash; getSize(int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />"
"android.view.MotionEvent.getHistoricalTouchMajor (int pos)   getHistoricalTouchMajor (int, int) for the first pointer index  (may be an arbitrary pointer identifier) &mdash; getHistoricalTouchMajor(int, int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />android.view.MotionEvent.getPressure ()   getPressure (int) for the first pointer index  (may be an arbitrary pointer identifier) &mdash; getPressure(int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />android.view.MotionEvent.getTouchMajor (int pointerIndex)   Returns the length of the major axis of an ellipse that describes the touch area at the point of contact for the given pointer index  (use getPointerId (int) to find the pointer identifier for this index) &mdash; Returns the length of the major axis of an ellipse that describes the touch area at the point of contact for the given pointer index (use getPointerId(int) to find the pointer identifier for this index). <br /><br />android.view.MotionEvent.getFlags () &mdash; Gets the motion event flags. <br /><br />android.view.MotionEvent.getXPrecision () &mdash; Return the precision of the X coordinates being reported. <br /><br />android.view.MotionEvent.transform (Matrix matrix) &mdash; Applies a transformation matrix to all of the points in the event. <br /><br />android.view.MotionEvent.getTouchMajor ()   getTouchMajor (int) for the first pointer index  (may be an arbitrary pointer identifier) &mdash; getTouchMajor(int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />android.view.MotionEvent.getHistoricalTouchMajor (int pointerIndex, int pos)   Returns a historical touch major axis coordinate, as per getTouchMajor (int) &mdash; Returns a historical touch major axis coordinate, as per getTouchMajor(int), that occurred between this event and the previous event for the given pointer. <br /><br />android.view.MotionEvent.getHistoricalX (int pos)   getHistoricalX (int, int) for the first pointer index  (may be an arbitrary pointer identifier) &mdash; getHistoricalX(int, int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />android.view.MotionEvent.getX ()   getX (int) for the first pointer index  (may be an arbitrary pointer identifier) &mdash; getX(int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />android.view.MotionEvent.getAction () &mdash; Return the kind of action being performed. <br /><br />android.view.MotionEvent.getY (int pointerIndex)   Returns the Y coordinate of this event for the given pointer index  (use getPointerId (int) to find the pointer identifier for this index) &mdash; Returns the Y coordinate of this event for the given pointer index (use getPointerId(int) to find the pointer identifier for this index). <br /><br />android.view.MotionEvent.setLocation (float x, float y) &mdash; Set this event's location. <br /><br />android.view.MotionEvent.getHistoricalPressure (int pos)   getHistoricalPressure (int, int) for the first pointer index  (may be an arbitrary pointer identifier) &mdash; getHistoricalPressure(int, int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />android.view.MotionEvent.getSize (int pointerIndex)   Returns a scaled value of the approximate size for the given pointer index  (use getPointerId (int) to find the pointer identifier for this index) &mdash; Returns a scaled value of the approximate size for the given pointer index (use getPointerId(int) to find the pointer identifier for this index). <br /><br />android.view.MotionEvent.getDownTime ()   Returns the time  (in ms) &mdash; Returns the time (in ms) when the user originally pressed down to start a stream of position events. <br /><br />android.view.MotionEvent.obtainNoHistory (MotionEvent other) &mdash; Create a new MotionEvent, copying from an existing one, but not including any historical point information. <br /><br />android.view.MotionEvent.getYPrecision () &mdash; Return the precision of the Y coordinates being reported. <br /><br />android.view.MotionEvent.getY ()   getY (int) for the first pointer index  (may be an arbitrary pointer identifier) &mdash; getY(int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />android.view.MotionEvent.findPointerIndex (int pointerId) &mdash; Given a pointer identifier, find the index of its data in the event. <br /><br />"
"android.view.MotionEvent.getRawX () &mdash; Returns the original raw X coordinate of this event. <br /><br />android.view.MotionEvent.getX (int pointerIndex)   Returns the X coordinate of this event for the given pointer index  (use getPointerId (int) to find the pointer identifier for this index) &mdash; Returns the X coordinate of this event for the given pointer index (use getPointerId(int) to find the pointer identifier for this index). <br /><br />android.view.MotionEvent.getEdgeFlags () &mdash; Returns a bitfield indicating which edges, if any, were touched by this MotionEvent. <br /><br />android.view.MotionEvent.obtain (long downTime, long eventTime, int action, float x, float y, int metaState) &mdash; Create a new MotionEvent, filling in a subset of the basic motion values. <br /><br />android.view.MotionEvent.getRawY () &mdash; Returns the original raw Y coordinate of this event. <br /><br />android.view.MotionEvent.getButtonState () &mdash; Gets the state of all buttons that are pressed such as a mouse or stylus button. <br /><br />android.view.MotionEvent.getHistoricalEventTime (int pos)   Returns the time that a historical movement occurred between this event and the previous event, in the uptimeMillis () &mdash; Returns the time that a historical movement occurred between this event and the previous event, in the uptimeMillis() time base. <br /><br />android.view.MotionEvent.offsetLocation (float deltaX, float deltaY) &mdash; Adjust this event's location. <br /><br />android.view.MotionEvent.obtain (long downTime, long eventTime, int action, int pointerCount, PointerProperties[] pointerProperties, PointerCoords[] pointerCoords, int metaState, int buttonState, float xPrecision, float yPrecision, int deviceId, int edgeFlags, int source, int flags) &mdash; Create a new MotionEvent, filling in all of the basic values that define the motion. <br /><br />android.view.MotionEvent.getPressure (int pointerIndex)   Returns the current pressure of this event for the given pointer index  (use getPointerId (int) to find the pointer identifier for this index) &mdash; Returns the current pressure of this event for the given pointer index (use getPointerId(int) to find the pointer identifier for this index). <br /><br />android.view.MotionEvent.obtain (long downTime, long eventTime, int action, int pointerCount, float x, float y, float pressure, float size, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags)    This method was deprecated in API level 9. Use obtain (long, long, int, float, float, float, float, int, float, float, int, int) &mdash; This method was deprecated in API level 9. Use obtain(long, long, int, float, float, float, float, int, float, float, int, int) instead. <br /><br />android.view.MotionEvent.getSource () &mdash; Gets the source of the event. <br /><br />android.view.MotionEvent.setAction (int action) &mdash; Sets this event's action. <br /><br />android.view.MotionEvent.getAxisValue (int axis)   getAxisValue (int) for the first pointer index  (may be an arbitrary pointer identifier) &mdash; getAxisValue(int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />android.view.MotionEvent.recycle () &mdash; Recycle the MotionEvent, to be re-used by a later caller. <br /><br />android.view.MotionEvent.getHistorySize () &mdash; Returns the number of historical points in this event. <br /><br />android.view.MotionEvent.getPointerId (int pointerIndex) &mdash; Return the pointer identifier associated with a particular pointer data index is this event. <br /><br />android.view.OrientationEventListener.disable () &mdash; Disables the OrientationEventListener. <br /><br />android.view.OrientationEventListener.enable ()   Enables the OrientationEventListener so it will monitor the sensor and call onOrientationChanged (int) &mdash; Enables the OrientationEventListener so it will monitor the sensor and call onOrientationChanged(int) when the device orientation changes. <br /><br />android.view.ScaleGestureDetector.getScaleFactor () &mdash; Return the scaling factor from the previous scale event to the current event. <br /><br />"
"android.view.ScaleGestureDetector.getCurrentSpan () &mdash; Return the average distance between each of the pointers forming the gesture in progress through the focal point. <br /><br />android.view.ScaleGestureDetector.getPreviousSpanX () &mdash; Return the previous average X distance between each of the pointers forming the gesture in progress through the focal point. <br /><br />android.view.ScaleGestureDetector.getPreviousSpan () &mdash; Return the previous average distance between each of the pointers forming the gesture in progress through the focal point. <br /><br />android.view.ScaleGestureDetector.isInProgress () &mdash; Returns true if a scale gesture is in progress. <br /><br />android.view.ScaleGestureDetector.getCurrentSpanX () &mdash; Return the average X distance between each of the pointers forming the gesture in progress through the focal point. <br /><br />android.view.ScaleGestureDetector.setQuickScaleEnabled (boolean scales) &mdash; Set whether the associated ScaleGestureDetector.OnScaleGestureListener should receive onScale callbacks when the user performs a doubleTap followed by a swipe. <br /><br />android.view.ScaleGestureDetector.getFocusX () &mdash; Get the X coordinate of the current gesture's focal point. <br /><br />android.view.ScaleGestureDetector.getFocusY () &mdash; Get the Y coordinate of the current gesture's focal point. <br /><br />android.view.ScaleGestureDetector.getPreviousSpanY () &mdash; Return the previous average Y distance between each of the pointers forming the gesture in progress through the focal point. <br /><br />android.view.ScaleGestureDetector.onTouchEvent (MotionEvent event) &mdash; Accepts MotionEvents and dispatches events to a ScaleGestureDetector.OnScaleGestureListener when appropriate. <br /><br />android.view.ScaleGestureDetector.isQuickScaleEnabled () &mdash; Return whether the quick scale gesture, in which the user performs a double tap followed by a swipe, should perform scaling. <br /><br />android.view.ScaleGestureDetector.getCurrentSpanY () &mdash; Return the average Y distance between each of the pointers forming the gesture in progress through the focal point. <br /><br />android.view.SoundEffectConstants.getContantForFocusDirection (int direction) &mdash; Get the sonification constant for the focus directions. <br /><br />android.view.SubMenu.setHeaderIcon (Drawable icon) &mdash; Sets the submenu header's icon to the icon given in icon Drawable. <br /><br />android.view.SubMenu.setHeaderTitle (CharSequence title) &mdash; Sets the submenu header's title to the title given in title. <br /><br />android.view.SubMenu.getItem () &mdash; Gets the MenuItem that represents this submenu in the parent menu. <br /><br />android.view.SubMenu.setHeaderTitle (int titleRes) &mdash; Sets the submenu header's title to the title given in titleRes resource identifier. <br /><br />android.view.SubMenu.clearHeader () &mdash; Clears the header of the submenu. <br /><br />android.view.SubMenu.setIcon (int iconRes) &mdash; Change the icon associated with this submenu's item in its parent menu. <br /><br />android.view.SubMenu.setHeaderView (View view) &mdash; Sets the header of the submenu to the View given in view. <br /><br />"
"android.view.SubMenu.setHeaderIcon (int iconRes) &mdash; Sets the submenu header's icon to the icon given in iconRes resource id. <br /><br />android.view.Surface.isValid () &mdash; Returns true if this object holds a valid surface. <br /><br />android.view.Surface.release () &mdash; Release the local reference to the server-side surface. <br /><br />android.view.SurfaceHolder.setFormat (int format) &mdash; Set the desired PixelFormat of the surface. <br /><br />android.view.SurfaceHolder.unlockCanvasAndPost (Canvas canvas) &mdash; Finish editing pixels in the surface. <br /><br />android.view.SurfaceHolder.lockCanvas (Rect dirty)   Just like lockCanvas () &mdash; Just like lockCanvas() but allows specification of a dirty rectangle. <br /><br />android.view.SurfaceHolder.lockCanvas () &mdash; Start editing the pixels in the surface. <br /><br />android.view.SurfaceHolder.setType (int type) &mdash; This method was deprecated in API level 11. this is ignored, this value is set automatically when needed. <br /><br />android.view.SurfaceHolder.setFixedSize (int width, int height) &mdash; Make the surface a fixed size. <br /><br />android.view.SurfaceHolder.isCreating () &mdash; Use this method to find out if the surface is in the process of being created from Callback methods. <br /><br />android.view.SurfaceHolder.getSurfaceFrame () &mdash; Retrieve the current size of the surface. <br /><br />android.view.SurfaceHolder.setKeepScreenOn (boolean screenOn) &mdash; Enable or disable option to keep the screen turned on while this surface is displayed. <br /><br />android.view.SurfaceHolder.setSizeFromLayout ()   Allow the surface to resized based on layout of its container  (this is the default) &mdash; Allow the surface to resized based on layout of its container (this is the default). <br /><br />android.view.SurfaceHolder.getSurface () &mdash; Direct access to the surface object. <br /><br />android.view.SurfaceView.setZOrderOnTop (boolean onTop) &mdash; Control whether the surface view's surface is placed on top of its window. <br /><br />android.view.SurfaceView.setVisibility (int visibility) &mdash; Set the enabled state of this view. <br /><br />android.view.SurfaceView.getHolder () &mdash; Return the SurfaceHolder providing access and control over this SurfaceView's underlying surface. <br /><br />android.view.SurfaceView.setZOrderMediaOverlay (boolean isMediaOverlay)   Control whether the surface view's surface is placed on top of another regular surface view in the window  (but still behind the window itself) &mdash; Control whether the surface view's surface is placed on top of another regular surface view in the window (but still behind the window itself). <br /><br />android.view.TouchDelegate.onTouchEvent (MotionEvent event) &mdash; Will forward touch events to the delegate view if the event is within the bounds specified in the constructor. <br /><br />android.view.VelocityTracker.computeCurrentVelocity (int units, float maxVelocity) &mdash; Compute the current velocity based on the points that have been collected. <br /><br />"
"android.view.VelocityTracker.getXVelocity (int id) &mdash; Retrieve the last computed X velocity. <br /><br />android.view.VelocityTracker.getYVelocity (int id) &mdash; Retrieve the last computed Y velocity. <br /><br />android.view.VelocityTracker.clear () &mdash; Reset the velocity tracker back to its initial state. <br /><br />android.view.VelocityTracker.recycle () &mdash; Return a VelocityTracker object back to be re-used by others. <br /><br />android.view.VelocityTracker.obtain () &mdash; Retrieve a new VelocityTracker object to watch the velocity of a motion. <br /><br />android.view.VelocityTracker.addMovement (MotionEvent event) &mdash; Add a user's movement to the tracker. <br /><br />android.view.VelocityTracker.computeCurrentVelocity (int units)   Equivalent to invoking computeCurrentVelocity (int, float) &mdash; Equivalent to invoking computeCurrentVelocity(int, float) with a maximum velocity of Float.MAX_VALUE. <br /><br />android.view.View.setRotationX (float rotationX) &mdash; Sets the degrees that the view is rotated around the horizontal axis through the pivot point. <br /><br />android.view.View.isInEditMode () &mdash; Indicates whether this View is currently in edit mode. <br /><br />android.view.View.setSaveEnabled (boolean enabled)   Controls whether the saving of this view's state is enabled  (that is, whether its onSaveInstanceState () method will be called) &mdash; Controls whether the saving of this view's state is enabled (that is, whether its onSaveInstanceState() method will be called). <br /><br />android.view.View.getMeasuredWidthAndState ()   Return the full width measurement information for this view as computed by the most recent call to measure (int, int) &mdash; Return the full width measurement information for this view as computed by the most recent call to measure(int, int). <br /><br />android.view.View.performHapticFeedback (int feedbackConstant) &mdash; BZZZTT!!1! Provide haptic feedback to the user for this view. <br /><br />android.view.View.isLongClickable () &mdash; Indicates whether this view reacts to long click events or not. <br /><br />android.view.View.getMeasuredHeightAndState ()   Return the full height measurement information for this view as computed by the most recent call to measure (int, int) &mdash; Return the full height measurement information for this view as computed by the most recent call to measure(int, int). <br /><br />android.view.View.jumpDrawablesToCurrentState ()   Call Drawable.jumpToCurrentState () &mdash; Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view. <br /><br />android.view.View.findFocus () &mdash; Find the view in the hierarchy rooted at this view that currently has focus. <br /><br />android.view.View.isSelected () &mdash; Indicates the selection state of this view. <br /><br />android.view.View.playSoundEffect (int soundConstant) &mdash; Play a sound effect for this view. <br /><br />android.view.View.getKeyDispatcherState () &mdash; Return the global KeyEvent.DispatcherState for this view's window. <br /><br />android.view.View.showContextMenu () &mdash; Bring up the context menu for this view. <br /><br />"
"android.view.View.performHapticFeedback (int feedbackConstant, int flags)   BZZZTT!!1! Like performHapticFeedback (int) &mdash; BZZZTT!!1! Like performHapticFeedback(int), with additional options. <br /><br />android.view.View.setOutlineProvider (ViewOutlineProvider provider) &mdash; Sets the ViewOutlineProvider of the view, which generates the Outline that defines the shape of the shadow it casts, and enables outline clipping. <br /><br />android.view.View.layout (int l, int t, int r, int b) &mdash; Assign a size and position to a view and all of its descendants This is the second phase of the layout mechanism. <br /><br />android.view.View.isClickable () &mdash; Indicates whether this view reacts to click events or not. <br /><br />android.view.View.isEnabled () &mdash; Returns the enabled status for this view. <br /><br />android.view.View.isVerticalScrollBarEnabled () &mdash; Indicate whether the vertical scrollbar should be drawn or not. <br /><br />android.view.View.getRight () &mdash; Right position of this view relative to its parent. <br /><br />android.view.View.getWindowId () &mdash; Retrieve the WindowId for the window this view is currently attached to. <br /><br />android.view.View.addTouchables (ArrayList< View> views)   Add any touchable views that are descendants of this view  (possibly including this view if it is touchable itself) &mdash; Add any touchable views that are descendants of this view (possibly including this view if it is touchable itself) to views. <br /><br />android.view.View.findViewWithTag (Object tag) &mdash; Look for a child view with the given tag. <br /><br />android.view.View.getVisibility () &mdash; Returns the visibility status for this view. <br /><br />android.view.View.requestRectangleOnScreen (Rect rectangle, boolean immediate) &mdash; Request that a rectangle of this view be visible on the screen, scrolling if necessary just enough. <br /><br />android.view.View.getLeft () &mdash; Left position of this view relative to its parent. <br /><br />android.view.View.getMeasuredState ()   Return only the state bits of getMeasuredWidthAndState () and getMeasuredHeightAndState () &mdash; Return only the state bits of getMeasuredWidthAndState() and getMeasuredHeightAndState(), combined into one integer. <br /><br />android.view.View.getGlobalVisibleRect (Rect r, Point globalOffset)   If some part of this view is not clipped by any of its parents, then return that area in r in global  (root) &mdash; If some part of this view is not clipped by any of its parents, then return that area in r in global (root) coordinates. <br /><br />android.view.View.isFocusable () &mdash; Returns whether this View is able to take focus. <br /><br />android.view.View.getRotationX () &mdash; The degrees that the view is rotated around the horizontal axis through the pivot point. <br /><br />android.view.View.getAnimation () &mdash; Get the animation currently associated with this view. <br /><br />android.view.View.onTrackballEvent (MotionEvent event) &mdash; Implement this method to handle trackball motion events. <br /><br />android.view.View.hasFocus () &mdash; Returns true if this view has focus iteself, or is the ancestor of the view that has focus. <br /><br />"
"android.view.View.isHorizontalScrollBarEnabled () &mdash; Indicate whether the horizontal scrollbar should be drawn or not. <br /><br />android.view.View.getTranslationX ()   The horizontal location of this view relative to its &mdash; The horizontal location of this view relative to its left position. <br /><br />android.view.View.getId () &mdash; Returns this view's identifier. <br /><br />android.view.View.setHapticFeedbackEnabled (boolean hapticFeedbackEnabled) &mdash; Set whether this view should have haptic feedback for events such as long presses. <br /><br />android.view.View.saveHierarchyState (SparseArray< Parcelable> container) &mdash; Store this view hierarchy's frozen state into the given container. <br /><br />android.view.View.getDrawingCache ()   Calling this method is equivalent to calling getDrawingCache (false) &mdash; Calling this method is equivalent to calling getDrawingCache(false). <br /><br />android.view.View.setSelected (boolean selected) &mdash; Changes the selection state of this view. <br /><br />android.view.View.onCheckIsTextEditor () &mdash; Check whether the called view is a text editor, in which case it would make sense to automatically display a soft input window for it. <br /><br />android.view.View.requestFocus (int direction) &mdash; Call this to try to give focus to a specific view or to one of its descendants and give it a hint about what direction focus is heading. <br /><br />android.view.View.setScrollX (int value) &mdash; Set the horizontal scrolled position of your view. <br /><br />android.view.View.isLayoutRequested () &mdash; Indicates whether or not this view's layout will be requested during the next hierarchy layout pass. <br /><br />android.view.View.getBaseline () &mdash; Return the offset of the widget's text baseline from the widget's top boundary. <br /><br />android.view.View.dispatchWindowFocusChanged (boolean hasFocus) &mdash; Called when the window containing this view gains or loses window focus. <br /><br />android.view.View.getElevation () &mdash; The base elevation of this view relative to its parent, in pixels. <br /><br />android.view.View.getWindowVisibility ()   Returns the current visibility of the window this view is attached to  (either GONE, INVISIBLE, or VISIBLE) &mdash; Returns the current visibility of the window this view is attached to (either GONE, INVISIBLE, or VISIBLE). <br /><br />android.view.View.getViewTreeObserver () &mdash; Returns the ViewTreeObserver for this view's hierarchy. <br /><br />android.view.View.getParent () &mdash; Gets the parent of this view. <br /><br />android.view.View.setClickable (boolean clickable) &mdash; Enables or disables click events for this view. <br /><br />android.view.View.getPaddingRight () &mdash; Returns the right padding of this view. <br /><br />android.view.View.isAttachedToWindow () &mdash; Returns true if this view is currently attached to a window. <br /><br />"
"android.view.View.getScrollX () &mdash; Return the scrolled left position of this view. <br /><br />android.view.View.setId (int id) &mdash; Sets the identifier for this view. <br /><br />android.view.View.setRotationY (float rotationY) &mdash; Sets the degrees that the view is rotated around the vertical axis through the pivot point. <br /><br />android.view.View.getHeight () &mdash; Return the height of your view. <br /><br />android.view.View.setLongClickable (boolean longClickable) &mdash; Enables or disables long click events for this view. <br /><br />android.view.View.requestFocus () &mdash; Call this to try to give focus to a specific view or to one of its descendants. <br /><br />android.view.View.getRotationY () &mdash; The degrees that the view is rotated around the vertical axis through the pivot point. <br /><br />android.view.View.setDrawingCacheEnabled (boolean enabled) &mdash; Enables or disables the drawing cache. <br /><br />android.view.View.isDrawingCacheEnabled () &mdash; Indicates whether the drawing cache is enabled for this view. <br /><br />android.view.View.setWillNotDraw (boolean willNotDraw) &mdash; If this view doesn't do any drawing on its own, set this flag to allow further optimizations. <br /><br />android.view.View.dispatchUnhandledMove (View focused, int direction) &mdash; This method is the last chance for the focused view and its ancestors to respond to an arrow key. <br /><br />android.view.View.dispatchTouchEvent (MotionEvent event) &mdash; Pass the touch screen motion event down to the target view, or this view if it is the target. <br /><br />android.view.View.cancelPendingInputEvents () &mdash; Cancel any deferred high-level input events that were previously posted to the event queue. <br /><br />android.view.View.refreshDrawableState () &mdash; Call this to force a view to update its drawable state. <br /><br />android.view.View.getTransitionName () &mdash; Returns the name of the View to be used to identify Views in Transitions. <br /><br />android.view.View.inflate (Context context, int resource, ViewGroup root) &mdash; Inflate a view from an XML resource. <br /><br />android.view.View.getWidth () &mdash; Return the width of the your view. <br /><br />android.view.View.setMinimumWidth (int minWidth) &mdash; Sets the minimum width of the view. <br /><br />android.view.View.getDrawingCache (boolean autoScale) &mdash; Returns the bitmap in which this view drawing is cached. <br /><br />android.view.View.getScaleX () &mdash; The amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width. <br /><br />"
"android.view.View.removeCallbacks (Runnable action) &mdash; Removes the specified Runnable from the message queue. <br /><br />android.view.View.setActivated (boolean activated) &mdash; Changes the activated state of this view. <br /><br />android.view.View.getBackground () &mdash; Gets the background drawable <br /><br />android.view.View.bringToFront () &mdash; Change the view's z order in the tree, so it's on top of other sibling views. <br /><br />android.view.View.setCameraDistance (float distance)   Sets the distance along the Z axis  (orthogonal to the X/Y plane on which views are drawn) &mdash; Sets the distance along the Z axis (orthogonal to the X/Y plane on which views are drawn) from the camera to this view. <br /><br />android.view.View.getMeasuredHeight ()   Like getMeasuredHeightAndState (), but only returns the raw width component  (that is the result is masked by MEASURED_SIZE_MASK) &mdash; Like getMeasuredHeightAndState(), but only returns the raw width component (that is the result is masked by MEASURED_SIZE_MASK). <br /><br />android.view.View.getScrollY () &mdash; Return the scrolled top position of this view. <br /><br />android.view.View.onHoverEvent (MotionEvent event) &mdash; Implement this method to handle hover events. <br /><br />android.view.View.getApplicationWindowToken () &mdash; Retrieve a unique token identifying the top-level 'real' window of the window that this view is attached to. <br /><br />android.view.View.getLabelFor () &mdash; Gets the id of a view for which this view serves as a label for accessibility purposes. <br /><br />android.view.View.setTranslationZ (float translationZ)   Sets the depth location of this view relative to its &mdash; Sets the depth location of this view relative to its elevation. <br /><br />android.view.View.offsetTopAndBottom (int offset) &mdash; Offset this view's vertical location by the specified number of pixels. <br /><br />android.view.View.clearAnimation () &mdash; Cancels any animations for this view. <br /><br />android.view.View.resolveSizeAndState (int size, int measureSpec, int childMeasuredState) &mdash; Utility to reconcile a desired size and state, with constraints imposed by a MeasureSpec. <br /><br />android.view.View.getMeasuredWidth ()   Like getMeasuredWidthAndState (), but only returns the raw width component  (that is the result is masked by MEASURED_SIZE_MASK) &mdash; Like getMeasuredWidthAndState(), but only returns the raw width component (that is the result is masked by MEASURED_SIZE_MASK). <br /><br />android.view.View.performClick () &mdash; Call this view's OnClickListener, if it is defined. <br /><br />android.view.View.buildDrawingCache ()   Calling this method is equivalent to calling buildDrawingCache (false) &mdash; Calling this method is equivalent to calling buildDrawingCache(false). <br /><br />android.view.View.setSystemUiVisibility (int visibility) &mdash; Request that the visibility of the status bar or other screen/window decorations be changed. <br /><br />android.view.View.getLayoutParams () &mdash; Get the LayoutParams associated with this view. <br /><br />android.view.View.animate () &mdash; This method returns a ViewPropertyAnimator object, which can be used to animate specific properties on this View. <br /><br />"
"android.view.View.isDuplicateParentStateEnabled () &mdash; Indicates whether this duplicates its drawable state from its parent. <br /><br />android.view.View.setBackground (Drawable background) &mdash; Set the background to a given Drawable, or remove the background. <br /><br />android.view.View.setTransitionName (String transitionName) &mdash; Sets the name of the View to be used to identify Views in Transitions. <br /><br />android.view.View.setBackgroundDrawable (Drawable background)    This method was deprecated in API level 16. use setBackground (Drawable) &mdash; This method was deprecated in API level 16. use setBackground(Drawable) instead <br /><br />android.view.View.postDelayed (Runnable action, long delayMillis) &mdash; Causes the Runnable to be added to the message queue, to be run after the specified amount of time elapses. <br /><br />android.view.View.setDuplicateParentStateEnabled (boolean enabled) &mdash; Enables or disables the duplication of the parent's state into this view. <br /><br />android.view.View.onStartTemporaryDetach ()   This is called when a container is going to temporarily detach a child, with &mdash; This is called when a container is going to temporarily detach a child, with ViewGroup.detachViewFromParent. <br /><br />android.view.View.setBackgroundColor (int color) &mdash; Sets the background color for this view. <br /><br />android.view.View.requestFocus (int direction, Rect previouslyFocusedRect) &mdash; Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from. <br /><br />android.view.View.setPaddingRelative (int start, int top, int end, int bottom) &mdash; Sets the relative padding. <br /><br />android.view.View.resolveSize (int size, int measureSpec)   Version of resolveSizeAndState (int, int, int) &mdash; Version of resolveSizeAndState(int, int, int) returning only the MEASURED_SIZE_MASK bits of the result. <br /><br />android.view.View.getWindowVisibleDisplayFrame (Rect outRect) &mdash; Retrieve the overall visible display size in which the window this view is attached to has been positioned in. <br /><br />android.view.View.draw (Canvas canvas)   Manually render this view  (and all of its children) &mdash; Manually render this view (and all of its children) to the given Canvas. <br /><br />android.view.View.setLayoutDirection (int layoutDirection) &mdash; Set the layout direction for this view. <br /><br />android.view.View.getScaleY () &mdash; The amount that the view is scaled in y around the pivot point, as a proportion of the view's unscaled height. <br /><br />android.view.View.findViewById (int id) &mdash; Look for a child view with the given id. <br /><br />android.view.View.isHardwareAccelerated () &mdash; Indicates whether this view is attached to a hardware accelerated window or not. <br /><br />android.view.View.getSystemUiVisibility ()   Returns the last setSystemUiVisibility (int) &mdash; Returns the last setSystemUiVisibility(int) that this view has requested. <br /><br />android.view.View.getResources () &mdash; Returns the resources associated with this view. <br /><br />android.view.View.isFocused () &mdash; Returns true if this view has focus <br /><br />"
"android.view.View.dispatchApplyWindowInsets (WindowInsets insets) &mdash; Request to apply the given window insets to this view or another view in its subtree. <br /><br />android.view.View.setHasTransientState (boolean hasTransientState) &mdash; Set whether this view is currently tracking transient state that the framework should attempt to preserve when possible. <br /><br />android.view.View.getHitRect (Rect outRect) &mdash; Hit rectangle in parent's coordinates <br /><br />android.view.View.getPivotY ()   The y location of the point around which the view is rotated and &mdash; The y location of the point around which the view is rotated and scaled. <br /><br />android.view.View.dispatchTrackballEvent (MotionEvent event) &mdash; Pass a trackball motion event down to the focused view. <br /><br />android.view.View.getPaddingTop () &mdash; Returns the top padding of this view. <br /><br />android.view.View.postInvalidateDelayed (long delayMilliseconds) &mdash; Cause an invalidate to happen on a subsequent cycle through the event loop. <br /><br />android.view.View.post (Runnable action) &mdash; Causes the Runnable to be added to the message queue. <br /><br />android.view.View.onPopulateAccessibilityEvent (AccessibilityEvent event)   Called from dispatchPopulateAccessibilityEvent (AccessibilityEvent) &mdash; Called from dispatchPopulateAccessibilityEvent(AccessibilityEvent) giving a chance to this View to populate the accessibility event with its text content. <br /><br />android.view.View.getPivotX ()   The x location of the point around which the view is rotated and &mdash; The x location of the point around which the view is rotated and scaled. <br /><br />android.view.View.invalidate (int l, int t, int r, int b)   Mark the area defined by the rect  (l,t,r,b) &mdash; Mark the area defined by the rect (l,t,r,b) as needing to be drawn. <br /><br />android.view.View.cancelLongPress () &mdash; Cancels a pending long press. <br /><br />android.view.View.setRotation (float rotation) &mdash; Sets the degrees that the view is rotated around the pivot point. <br /><br />android.view.View.setTag (int key, Object tag) &mdash; Sets a tag associated with this view and a key. <br /><br />android.view.View.invalidate (Rect dirty) &mdash; Mark the area defined by dirty as needing to be drawn. <br /><br />android.view.View.setY (float y) &mdash; Sets the visual y position of this view, in pixels. <br /><br />android.view.View.getPaddingLeft () &mdash; Returns the left padding of this view. <br /><br />android.view.View.getLocationOnScreen (int[] location) &mdash; Computes the coordinates of this view on the screen. <br /><br />android.view.View.setTouchDelegate (TouchDelegate delegate) &mdash; Sets the TouchDelegate for this View. <br /><br />android.view.View.getPaddingStart () &mdash; Returns the start padding of this view depending on its resolved layout direction. <br /><br />"
"android.view.View.getTag (int key) &mdash; Returns the tag associated with this view and the specified key. <br /><br />android.view.View.getTranslationZ ()   The depth location of this view relative to its &mdash; The depth location of this view relative to its elevation. <br /><br />android.view.View.setPressed (boolean pressed) &mdash; Sets the pressed state for this view. <br /><br />android.view.View.setKeepScreenOn (boolean keepScreenOn) &mdash; Controls whether the screen should remain on, modifying the value of KEEP_SCREEN_ON. <br /><br />android.view.View.setAlpha (float alpha) &mdash; Sets the opacity of the view. <br /><br />android.view.View.setAnimation (Animation animation) &mdash; Sets the next animation to play for this view. <br /><br />android.view.View.hasTransientState () &mdash; Indicates whether the view is currently tracking transient state that the app should not need to concern itself with saving and restoring, but that the framework should take special note to preserve when possible. <br /><br />android.view.View.requestFitSystemWindows ()    This method was deprecated in API level 20. Use requestApplyInsets () &mdash; This method was deprecated in API level 20. Use requestApplyInsets() for newer platform versions. <br /><br />android.view.View.setOverScrollMode (int overScrollMode) &mdash; Set the over-scroll mode for this view. <br /><br />android.view.View.setTranslationY (float translationY)   Sets the vertical location of this view relative to its &mdash; Sets the vertical location of this view relative to its top position. <br /><br />android.view.View.setScrollbarFadingEnabled (boolean fadeScrollbars) &mdash; Define whether scrollbars will fade when the view is not scrolling. <br /><br />android.view.View.getTranslationY ()   The vertical location of this view relative to its &mdash; The vertical location of this view relative to its top position. <br /><br />android.view.View.setAccessibilityLiveRegion (int mode) &mdash; Sets the live region mode for this view. <br /><br />android.view.View.setSaveFromParentEnabled (boolean enabled) &mdash; Controls whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent. <br /><br />android.view.View.setX (float x) &mdash; Sets the visual x position of this view, in pixels. <br /><br />android.view.View.addFocusables (ArrayList< View> views, int direction, int focusableMode)   Adds any focusable views that are descendants of this view  (possibly including this view if it is focusable itself) &mdash; Adds any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views. <br /><br />android.view.View.onFinishTemporaryDetach ()   Called after onStartTemporaryDetach () &mdash; Called after onStartTemporaryDetach() when the container is done changing the view. <br /><br />android.view.View.setPivotY (float pivotY)   Sets the y location of the point around which the view is rotated and &mdash; Sets the y location of the point around which the view is rotated and scaled. <br /><br />android.view.View.getRotation () &mdash; The degrees that the view is rotated around the pivot point. <br /><br />android.view.View.clearFocus () &mdash; Called when this view wants to give up focus. <br /><br />"
"android.view.View.setClipToOutline (boolean clipToOutline) &mdash; Sets whether the View's Outline should be used to clip the contents of the View. <br /><br />android.view.View.setPivotX (float pivotX)   Sets the x location of the point around which the view is rotated and &mdash; Sets the x location of the point around which the view is rotated and scaled. <br /><br />android.view.View.getWindowToken () &mdash; Retrieve a unique token identifying the window this view is attached to. <br /><br />android.view.View.restoreHierarchyState (SparseArray< Parcelable> container) &mdash; Restore this view hierarchy's frozen state from the given container. <br /><br />android.view.View.isPressed () &mdash; Indicates whether the view is currently in pressed state. <br /><br />android.view.View.setFocusable (boolean focusable) &mdash; Set whether this view can receive the focus. <br /><br />android.view.View.getTop () &mdash; Top position of this view relative to its parent. <br /><br />android.view.View.invalidate () &mdash; Invalidate the whole view. <br /><br />android.view.View.getTag () &mdash; Returns this view's tag. <br /><br />android.view.View.isShown () &mdash; Returns the visibility of this view and all of its ancestors <br /><br />android.view.View.setMinimumHeight (int minHeight) &mdash; Sets the minimum height of the view. <br /><br />android.view.View.focusSearch (int direction) &mdash; Find the nearest view in the specified direction that can take focus. <br /><br />android.view.View.getMatrix () &mdash; The transform matrix of this view, which is calculated based on the current rotation, scale, and pivot properties. <br /><br />android.view.View.setTag (Object tag) &mdash; Sets the tag associated with this view. <br /><br />android.view.View.performLongClick () &mdash; Call this view's OnLongClickListener, if it is defined. <br /><br />android.view.View.setTranslationX (float translationX)   Sets the horizontal location of this view relative to its &mdash; Sets the horizontal location of this view relative to its left position. <br /><br />android.view.View.getMinimumHeight () &mdash; Returns the minimum height of the view. <br /><br />android.view.View.measure (int widthMeasureSpec, int heightMeasureSpec) &mdash; This is called to find out how big a view should be. <br /><br />android.view.View.invalidateDrawable (Drawable drawable) &mdash; Invalidates the specified Drawable. <br /><br />android.view.View.getPaddingBottom () &mdash; Returns the bottom padding of this view. <br /><br />"
"android.view.View.getFitsSystemWindows ()   Check for state of setFitsSystemWindows (boolean) &mdash; Check for state of setFitsSystemWindows(boolean). <br /><br />android.view.View.getRootView () &mdash; Finds the topmost view in the current view hierarchy. <br /><br />android.view.View.getMinimumWidth () &mdash; Returns the minimum width of the view. <br /><br />android.view.View.dispatchGenericMotionEvent (MotionEvent event) &mdash; Dispatch a generic motion event. <br /><br />android.view.View.getAccessibilityLiveRegion () &mdash; Gets the live region mode for this View. <br /><br />android.view.View.getX () &mdash; The visual x position of this view, in pixels. <br /><br />android.view.View.startAnimation (Animation animation) &mdash; Start the specified animation now. <br /><br />android.view.View.postInvalidateDelayed (long delayMilliseconds, int left, int top, int right, int bottom) &mdash; Cause an invalidate of the specified area to happen on a subsequent cycle through the event loop. <br /><br />android.view.View.getY () &mdash; The visual y position of this view, in pixels. <br /><br />android.view.View.isInTouchMode () &mdash; Returns whether the device is currently in touch mode. <br /><br />android.view.View.willNotDraw () &mdash; Returns whether or not this View draws on its own. <br /><br />android.view.View.getBottom () &mdash; Bottom position of this view relative to its parent. <br /><br />android.view.View.getContext () &mdash; Returns the context the view is running in, through which it can access the current theme, resources, etc. <br /><br />android.view.View.onKeyDown (int keyCode, KeyEvent event)   Default implementation of KeyEvent.Callback.onKeyDown () &mdash; Default implementation of KeyEvent.Callback.onKeyDown(): perform press of the view when KEYCODE_DPAD_CENTER or KEYCODE_ENTER is released, if the view is enabled and clickable. <br /><br />android.view.View.setFocusableInTouchMode (boolean focusableInTouchMode) &mdash; Set whether this view can receive focus while in touch mode. <br /><br />android.view.View.buildDrawingCache (boolean autoScale) &mdash; Forces the drawing cache to be built if the drawing cache is invalid. <br /><br />android.view.View.hasWindowFocus () &mdash; Returns true if this view is in a window that currently has window focus. <br /><br />android.view.View.setHorizontalScrollBarEnabled (boolean horizontalScrollBarEnabled) &mdash; Define whether the horizontal scrollbar should be drawn or not. <br /><br />android.view.View.destroyDrawingCache () &mdash; Frees the resources used by the drawing cache. <br /><br />android.view.View.dispatchPopulateAccessibilityEvent (AccessibilityEvent event) &mdash; Dispatches an AccessibilityEvent to the View first and then to its children for adding their text content to the event. <br /><br />"
"android.view.View.getCameraDistance () &mdash; Gets the distance along the Z axis from the camera to this view. <br /><br />android.view.View.requestApplyInsets ()   Ask that a new dispatch of onApplyWindowInsets (WindowInsets) &mdash; Ask that a new dispatch of onApplyWindowInsets(WindowInsets) be performed. <br /><br />android.view.View.getDisplay () &mdash; Gets the logical display to which the view's window has been attached. <br /><br />android.view.View.getLocationInWindow (int[] location) &mdash; Computes the coordinates of this view in its window. <br /><br />android.view.View.getPaddingEnd () &mdash; Returns the end padding of this view depending on its resolved layout direction. <br /><br />android.view.View.setScrollY (int value) &mdash; Set the vertical scrolled position of your view. <br /><br />android.view.View.setLabelFor (int id) &mdash; Sets the id of a view for which this view serves as a label for accessibility purposes. <br /><br />android.view.View.offsetLeftAndRight (int offset) &mdash; Offset this view's horizontal location by the specified amount of pixels. <br /><br />android.view.View.scrollTo (int x, int y) &mdash; Set the scrolled position of your view. <br /><br />android.view.View.onKeyUp (int keyCode, KeyEvent event)   Default implementation of KeyEvent.Callback.onKeyUp () &mdash; Default implementation of KeyEvent.Callback.onKeyUp(): perform clicking of the view when KEYCODE_DPAD_CENTER or KEYCODE_ENTER is released. <br /><br />android.view.View.setContentDescription (CharSequence contentDescription) &mdash; Sets the View description. <br /><br />android.view.View.getWindowSystemUiVisibility () &mdash; Returns the current system UI visibility that is currently set for the entire window. <br /><br />android.view.View.setVerticalScrollBarEnabled (boolean verticalScrollBarEnabled) &mdash; Define whether the vertical scrollbar should be drawn or not. <br /><br />android.view.View.addFocusables (ArrayList< View> views, int direction)   Add any focusable views that are descendants of this view  (possibly including this view if it is focusable itself) &mdash; Add any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views. <br /><br />android.view.View.setDrawingCacheBackgroundColor (int color) &mdash; Setting a solid background color for the drawing cache's bitmaps will improve performance and memory usage. <br /><br />android.view.View.setBackgroundResource (int resid) &mdash; Set the background to a given resource. <br /><br />android.view.View.getDrawingRect (Rect outRect) &mdash; Return the visible drawing bounds of your view. <br /><br />android.view.ViewConfiguration.getScrollFriction () &mdash; The amount of friction applied to scrolls and flings. <br /><br />android.view.ViewConfiguration.getTouchSlop ()    This method was deprecated in API level 3. Use getScaledTouchSlop () &mdash; This method was deprecated in API level 3. Use getScaledTouchSlop() instead. <br /><br />android.view.ViewConfiguration.getZoomControlsTimeout () &mdash; The amount of time that the zoom controls should be displayed on the screen expressed in milliseconds. <br /><br />"
"android.view.ViewConfiguration.get (Context context) &mdash; Returns a configuration for the specified context. <br /><br />android.view.ViewConfiguration.hasPermanentMenuKey () &mdash; Report if the device has a permanent menu key available to the user. <br /><br />android.view.ViewGroup.removeViewInLayout (View view) &mdash; Removes a view during layout. <br /><br />android.view.ViewGroup.removeViewAt (int index) &mdash; Removes the view at the specified position in the group. <br /><br />android.view.ViewGroup.addView (View child, int width, int height) &mdash; Adds a child view with this ViewGroup's default layout parameters and the specified width and height. <br /><br />android.view.ViewGroup.setDescendantFocusability (int focusability) &mdash; Set the descendant focusability of this view group. <br /><br />android.view.ViewGroup.getLayoutAnimation () &mdash; Returns the layout animation controller used to animate the group's children. <br /><br />android.view.ViewGroup.addView (View child, int index, ViewGroup.LayoutParams params) &mdash; Adds a child view with the specified layout parameters. <br /><br />android.view.ViewGroup.setTransitionGroup (boolean isTransitionGroup) &mdash; Changes whether or not this ViewGroup should be treated as a single entity during Activity Transitions. <br /><br />android.view.ViewGroup.getChildAt (int index) &mdash; Returns the view at the specified position in the group. <br /><br />android.view.ViewGroup.setLayoutMode (int layoutMode) &mdash; Sets the basis of alignment during the layout of this ViewGroup. <br /><br />android.view.ViewGroup.focusableViewAvailable (View v) &mdash; Tells the parent that a new focusable view has become available. <br /><br />android.view.ViewGroup.dispatchKeyEvent (KeyEvent event) &mdash; Dispatch a key event to the next view on the focus path. <br /><br />android.view.ViewGroup.indexOfChild (View child) &mdash; Returns the position in the group of the specified child view. <br /><br />android.view.ViewGroup.bringChildToFront (View child) &mdash; Change the z order of the child so it's on top of all other children. <br /><br />android.view.ViewGroup.removeAllViewsInLayout () &mdash; Called by a ViewGroup subclass to remove child views from itself, when it must first know its size on screen before it can calculate how many child views it will render. <br /><br />android.view.ViewGroup.addView (View child, int index) &mdash; Adds a child view. <br /><br />android.view.ViewGroup.onRequestSendAccessibilityEvent (View child, AccessibilityEvent event) &mdash; Called when a child has requested sending an AccessibilityEvent and gives an opportunity to its parent to augment the event. <br /><br />android.view.ViewGroup.focusSearch (View focused, int direction) &mdash; Find the nearest view in the specified direction that wants to take focus. <br /><br />android.view.ViewGroup.requestChildFocus (View child, View focused) &mdash; Called when a child of this parent wants focus <br /><br />"
"android.view.ViewGroup.hasFocus () &mdash; Returns true if this view has or contains focus <br /><br />android.view.ViewGroup.clearChildFocus (View child) &mdash; Called when a child of this parent is giving up focus <br /><br />android.view.ViewGroup.removeAllViews () &mdash; Call this method to remove all child views from the ViewGroup. <br /><br />android.view.ViewGroup.getChildMeasureSpec (int spec, int padding, int childDimension) &mdash; Does the hard part of measureChildren: figuring out the MeasureSpec to pass to a particular child. <br /><br />android.view.ViewGroup.getLayoutMode () &mdash; Returns the basis of alignment during layout operations on this ViewGroup: either LAYOUT_MODE_CLIP_BOUNDS or LAYOUT_MODE_OPTICAL_BOUNDS. <br /><br />android.view.ViewGroup.removeViews (int start, int count) &mdash; Removes the specified range of views from the group. <br /><br />android.view.ViewGroup.setLayoutTransition (LayoutTransition transition) &mdash; Sets the LayoutTransition object for this ViewGroup. <br /><br />android.view.ViewGroup.isTransitionGroup () &mdash; Returns true if this ViewGroup should be considered as a single entity for removal when executing an Activity transition. <br /><br />android.view.ViewGroup.getLayoutTransition () &mdash; Gets the LayoutTransition object for this ViewGroup. <br /><br />android.view.ViewGroup.setClipToPadding (boolean clipToPadding) &mdash; Sets whether this ViewGroup will clip its children to its padding, if padding is present. <br /><br />android.view.ViewGroup.requestDisallowInterceptTouchEvent (boolean disallowIntercept)   Called when a child does not want this parent and its ancestors to intercept touch events with onInterceptTouchEvent (MotionEvent) &mdash; Called when a child does not want this parent and its ancestors to intercept touch events with onInterceptTouchEvent(MotionEvent). <br /><br />android.view.ViewGroup.setLayoutAnimation (LayoutAnimationController controller) &mdash; Sets the layout animation controller used to animate the group's children after the first layout. <br /><br />android.view.ViewGroup.generateLayoutParams (AttributeSet attrs) &mdash; Returns a new set of layout parameters based on the supplied attributes set. <br /><br />android.view.ViewGroup.getChildCount () &mdash; Returns the number of children in the group. <br /><br />android.view.ViewParent.onNestedPreScroll (View target, int dx, int dy, int[] consumed) &mdash; React to a nested scroll in progress before the target view consumes a portion of the scroll. <br /><br />android.view.ViewParent.onStartNestedScroll (View child, View target, int nestedScrollAxes) &mdash; React to a descendant view initiating a nestable scroll operation, claiming the nested scroll operation if appropriate. <br /><br />android.view.ViewParent.onNestedScrollAccepted (View child, View target, int nestedScrollAxes) &mdash; React to the successful claiming of a nested scroll operation. <br /><br />android.view.ViewParent.onStopNestedScroll (View target) &mdash; React to a nested scroll operation ending. <br /><br />android.view.ViewParent.onNestedScroll (View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) &mdash; React to a nested scroll in progress. <br /><br />android.view.ViewParent.onNestedFling (View target, float velocityX, float velocityY, boolean consumed) &mdash; Request a fling from a nested scroll. <br /><br />"
"android.view.ViewParent.showContextMenuForChild (View originalView) &mdash; Bring up a context menu for the specified view or its ancestors. <br /><br />android.view.ViewParent.requestLayout () &mdash; Called when something has changed which has invalidated the layout of a child of this view parent. <br /><br />android.view.ViewParent.getParent () &mdash; Returns the parent if it exists, or null. <br /><br />android.view.ViewParent.onNestedPreFling (View target, float velocityX, float velocityY) &mdash; React to a nested fling before the target view consumes it. <br /><br />android.view.ViewPropertyAnimator.setDuration (long duration) &mdash; Sets the duration for the underlying animator that animates the requested properties. <br /><br />android.view.ViewPropertyAnimator.scaleXBy (float value) &mdash; This method will cause the View's scaleX property to be animated by the specified value. <br /><br />android.view.ViewPropertyAnimator.translationX (float value) &mdash; This method will cause the View's translationX property to be animated to the specified value. <br /><br />android.view.ViewPropertyAnimator.rotationX (float value) &mdash; This method will cause the View's rotationX property to be animated to the specified value. <br /><br />android.view.ViewPropertyAnimator.alphaBy (float value) &mdash; This method will cause the View's alpha property to be animated by the specified value. <br /><br />android.view.ViewPropertyAnimator.setStartDelay (long startDelay) &mdash; Sets the startDelay for the underlying animator that animates the requested properties. <br /><br />android.view.ViewPropertyAnimator.setInterpolator (TimeInterpolator interpolator) &mdash; Sets the interpolator for the underlying animator that animates the requested properties. <br /><br />android.view.ViewPropertyAnimator.withLayer ()   The View associated with this ViewPropertyAnimator will have its &mdash; The View associated with this ViewPropertyAnimator will have its layer type set to LAYER_TYPE_HARDWARE for the duration of the next animation. <br /><br />android.view.ViewPropertyAnimator.scaleY (float value) &mdash; This method will cause the View's scaleY property to be animated to the specified value. <br /><br />android.view.ViewPropertyAnimator.y (float value) &mdash; This method will cause the View's y property to be animated to the specified value. <br /><br />android.view.ViewPropertyAnimator.withEndAction (Runnable runnable) &mdash; Specifies an action to take place when the next animation ends. <br /><br />android.view.ViewPropertyAnimator.cancel () &mdash; Cancels all property animations that are currently running or pending. <br /><br />android.view.ViewPropertyAnimator.translationYBy (float value) &mdash; This method will cause the View's translationY property to be animated by the specified value. <br /><br />android.view.ViewPropertyAnimator.withStartAction (Runnable runnable) &mdash; Specifies an action to take place when the next animation runs. <br /><br />android.view.ViewPropertyAnimator.getDuration () &mdash; Returns the current duration of property animations. <br /><br />android.view.ViewPropertyAnimator.scaleYBy (float value) &mdash; This method will cause the View's scaleY property to be animated by the specified value. <br /><br />"
"android.view.ViewPropertyAnimator.translationXBy (float value) &mdash; This method will cause the View's translationX property to be animated by the specified value. <br /><br />android.view.ViewPropertyAnimator.rotation (float value) &mdash; This method will cause the View's rotation property to be animated to the specified value. <br /><br />android.view.ViewPropertyAnimator.rotationYBy (float value) &mdash; This method will cause the View's rotationY property to be animated by the specified value. <br /><br />android.view.ViewPropertyAnimator.start () &mdash; Starts the currently pending property animations immediately. <br /><br />android.view.ViewPropertyAnimator.rotationXBy (float value) &mdash; This method will cause the View's rotationX property to be animated by the specified value. <br /><br />android.view.ViewPropertyAnimator.getStartDelay () &mdash; Returns the current startDelay of property animations. <br /><br />android.view.ViewPropertyAnimator.yBy (float value) &mdash; This method will cause the View's y property to be animated by the specified value. <br /><br />android.view.ViewPropertyAnimator.xBy (float value) &mdash; This method will cause the View's x property to be animated by the specified value. <br /><br />android.view.ViewPropertyAnimator.rotationBy (float value) &mdash; This method will cause the View's rotation property to be animated by the specified value. <br /><br />android.view.ViewPropertyAnimator.scaleX (float value) &mdash; This method will cause the View's scaleX property to be animated to the specified value. <br /><br />android.view.ViewPropertyAnimator.translationY (float value) &mdash; This method will cause the View's translationY property to be animated to the specified value. <br /><br />android.view.ViewPropertyAnimator.alpha (float value) &mdash; This method will cause the View's alpha property to be animated to the specified value. <br /><br />android.view.ViewPropertyAnimator.x (float value) &mdash; This method will cause the View's x property to be animated to the specified value. <br /><br />android.view.ViewPropertyAnimator.rotationY (float value) &mdash; This method will cause the View's rotationY property to be animated to the specified value. <br /><br />android.view.ViewPropertyAnimator.getInterpolator () &mdash; Returns the timing interpolator that this animation uses. <br /><br />android.view.ViewStub.setLayoutResource (int layoutResource)   Specifies the layout resource to inflate when this StubbedView becomes visible or invisible or when inflate () &mdash; Specifies the layout resource to inflate when this StubbedView becomes visible or invisible or when inflate() is invoked. <br /><br />android.view.ViewStub.inflate ()   Inflates the layout resource identified by getLayoutResource () &mdash; Inflates the layout resource identified by getLayoutResource() and replaces this StubbedView in its parent by the inflated layout resource. <br /><br />android.view.ViewStub.setVisibility (int visibility)   When visibility is set to VISIBLE or INVISIBLE, inflate () &mdash; When visibility is set to VISIBLE or INVISIBLE, inflate() is invoked and this StubbedView is replaced in its parent by the inflated layout resource. <br /><br />android.view.Window.setContentView (View view)   Convenience for setContentView (View, android.view.ViewGroup.LayoutParams) &mdash; Convenience for setContentView(View, android.view.ViewGroup.LayoutParams) set the screen content to an explicit view. <br /><br />android.view.Window.getCallback () &mdash; Return the current Callback interface for this window. <br /><br />"
"android.view.Window.clearFlags (int flags)   Convenience function to clear the flag bits as specified in flags, as per setFlags (int, int) &mdash; Convenience function to clear the flag bits as specified in flags, as per setFlags(int, int). <br /><br />android.view.Window.setFormat (int format) &mdash; Set the format of window, as per the PixelFormat types. <br /><br />android.view.Window.setFeatureDrawableAlpha (int featureId, int alpha) &mdash; Set a custom alpha value for the given drawable feature, controlling how much the background is visible through it. <br /><br />android.view.Window.setBackgroundDrawableResource (int resId) &mdash; Change the background of this window to a Drawable resource. <br /><br />android.view.Window.setType (int type) &mdash; Set the type of the window, as per the WindowManager.LayoutParams types. <br /><br />android.view.Window.setWindowAnimations (int resId) &mdash; Specify custom animations to use for the window, as per WindowManager.LayoutParams.windowAnimations. <br /><br />android.view.Window.setSoftInputMode (int mode) &mdash; Specify an explicit soft input mode to use for the window, as per WindowManager.LayoutParams.softInputMode. <br /><br />android.view.Window.setFeatureInt (int featureId, int value) &mdash; Set the integer value for a feature. <br /><br />android.view.Window.setStatusBarColor (int color) &mdash; Sets the color of the status bar to . <br /><br />android.view.Window.setFlags (int flags, int mask) &mdash; Set the flags of the window, as per the WindowManager.LayoutParams flags. <br /><br />android.view.Window.setWindowManager (WindowManager wm, IBinder appToken, String appName, boolean hardwareAccelerated) &mdash; Set the window manager for use by this Window to, for example, display panels. <br /><br />android.view.Window.hasFeature (int feature) &mdash; Query for the availability of a certain feature. <br /><br />android.view.Window.setLayout (int width, int height) &mdash; Set the width and height layout parameters of the window. <br /><br />android.view.Window.getDecorView ()   Retrieve the top-level window decor view  (containing the standard window frame/decorations and the client's content inside of that) &mdash; Retrieve the top-level window decor view (containing the standard window frame/decorations and the client's content inside of that), which can be added as a window to the window manager. <br /><br />android.view.Window.peekDecorView () &mdash; Retrieve the current decor view, but only if it has already been created; otherwise returns null. <br /><br />android.view.Window.addFlags (int flags)   Convenience function to set the flag bits as specified in flags, as per setFlags (int, int) &mdash; Convenience function to set the flag bits as specified in flags, as per setFlags(int, int). <br /><br />android.view.Window.getContext () &mdash; Return the Context this window policy is running in, for retrieving resources and other information. <br /><br />android.view.Window.setUiOptions (int uiOptions) &mdash; Set extra options that will influence the UI for this window. <br /><br />android.view.Window.getWindowManager () &mdash; Return the window manager allowing this Window to display its own windows. <br /><br />android.view.Window.isFloating ()   Return whether this window is being displayed with a floating style  (based on the windowIsFloating attribute in the style/theme) &mdash; Return whether this window is being displayed with a floating style (based on the windowIsFloating attribute in the style/theme). <br /><br />"
"android.view.Window.requestFeature (int featureId) &mdash; Enable extended screen features. <br /><br />android.view.Window.getCurrentFocus () &mdash; Return the view in this Window that currently has focus, or null if there are none. <br /><br />android.view.Window.setGravity (int gravity) &mdash; Set the gravity of the window, as per the Gravity constants. <br /><br />android.view.Window.setBackgroundDrawable (Drawable drawable) &mdash; Change the background of this window to a custom Drawable. <br /><br />android.view.Window.getAttributes () &mdash; Retrieve the current window attributes associated with this panel. <br /><br />android.view.Window.setContentView (int layoutResID)   Convenience for setContentView (View, android.view.ViewGroup.LayoutParams) &mdash; Convenience for setContentView(View, android.view.ViewGroup.LayoutParams) to set the screen content from a layout resource. <br /><br />android.view.WindowInsets.consumeStableInsets () &mdash; Returns a copy of this WindowInsets with the stable insets fully consumed. <br /><br />android.view.WindowInsets.hasStableInsets () &mdash; Returns true if this WindowInsets has nonzero stable insets. <br /><br />android.view.WindowInsets.isRound () &mdash; Returns true if the associated window has a round shape. <br /><br />android.view.WindowInsets.hasSystemWindowInsets () &mdash; Returns true if this WindowInsets has nonzero system window insets. <br /><br />android.view.WindowInsets.consumeSystemWindowInsets () &mdash; Returns a copy of this WindowInsets with the system window insets fully consumed. <br /><br />android.view.WindowInsets.getStableInsetRight () &mdash; Returns the right stable inset in pixels. <br /><br />android.view.WindowInsets.hasInsets () &mdash; Returns true if this WindowInsets has any nonzero insets. <br /><br />android.view.WindowInsets.isConsumed () &mdash; Check if these insets have been fully consumed. <br /><br />android.view.WindowInsets.getStableInsetTop () &mdash; Returns the top stable inset in pixels. <br /><br />android.view.WindowInsets.getStableInsetBottom () &mdash; Returns the bottom stable inset in pixels. <br /><br />android.view.WindowInsets.getSystemWindowInsetLeft () &mdash; Returns the left system window inset in pixels. <br /><br />android.view.WindowInsets.getSystemWindowInsetBottom () &mdash; Returns the bottom system window inset in pixels. <br /><br />android.view.WindowInsets.getSystemWindowInsetTop () &mdash; Returns the top system window inset in pixels. <br /><br />android.view.WindowInsets.getSystemWindowInsetRight () &mdash; Returns the right system window inset in pixels. <br /><br />"
"android.view.WindowInsets.getStableInsetLeft () &mdash; Returns the left stable inset in pixels. <br /><br />android.view.WindowInsets.replaceSystemWindowInsets (int left, int top, int right, int bottom) &mdash; Returns a copy of this WindowInsets with selected system window insets replaced with new values. <br /><br />android.webkit.CookieManager.getCookie (String url) &mdash; Gets the cookies for the given URL. <br /><br />android.webkit.CookieManager.getInstance () &mdash; Gets the singleton CookieManager instance. <br /><br />android.webkit.CookieManager.hasCookies () &mdash; Gets whether there are stored cookies. <br /><br />android.webkit.CookieManager.removeSessionCookie ()    This method was deprecated in API level 21. use removeSessionCookies (ValueCallback) &mdash; This method was deprecated in API level 21. use removeSessionCookies(ValueCallback) instead. <br /><br />android.webkit.CookieManager.setAcceptCookie (boolean accept) &mdash; Sets whether the application's WebView instances should send and accept cookies. <br /><br />android.webkit.CookieManager.setCookie (String url, String value) &mdash; Sets a cookie for the given URL. <br /><br />android.webkit.CookieManager.removeExpiredCookie () &mdash; This method was deprecated in API level 21. The WebView handles removing expired cookies automatically. <br /><br />android.webkit.CookieManager.removeAllCookie ()    This method was deprecated in API level 21. Use removeAllCookies (ValueCallback) &mdash; This method was deprecated in API level 21. Use removeAllCookies(ValueCallback) instead. <br /><br />android.webkit.CookieSyncManager.stopSync () &mdash; This method is deprecated. Calling stopSync is no longer useful as the WebView automatically syncs cookies. <br /><br />android.webkit.CookieSyncManager.getInstance () &mdash; Singleton access to a CookieSyncManager. <br /><br />android.webkit.CookieSyncManager.createInstance (Context context) &mdash; Create a singleton CookieSyncManager within a context <br /><br />android.webkit.CookieSyncManager.startSync () &mdash; This method is deprecated. Calling startSync is no longer necessary as the WebView automatically syncs cookies. <br /><br />android.webkit.CookieSyncManager.sync ()    This method is deprecated. Use flush () &mdash; This method is deprecated. Use flush() instead. <br /><br />android.webkit.HttpAuthHandler.cancel () &mdash; Instructs the WebView to cancel the authentication request. <br /><br />android.webkit.HttpAuthHandler.proceed (String username, String password) &mdash; Instructs the WebView to proceed with the authentication with the given credentials. <br /><br />android.webkit.JsPromptResult.confirm (String result) &mdash; Handle a confirmation response from the user. <br /><br />android.webkit.JsResult.cancel () &mdash; Handle the result if the user cancelled the dialog. <br /><br />android.webkit.MimeTypeMap.getMimeTypeFromExtension (String extension) &mdash; Return the MIME type for the given extension. <br /><br />"
"android.webkit.MimeTypeMap.getExtensionFromMimeType (String mimeType) &mdash; Return the registered extension for the given MIME type. <br /><br />android.webkit.MimeTypeMap.getSingleton () &mdash; Get the singleton instance of MimeTypeMap. <br /><br />android.webkit.MimeTypeMap.getFileExtensionFromUrl (String url) &mdash; Returns the file extension or an empty string iff there is no extension. <br /><br />android.webkit.SslErrorHandler.proceed () &mdash; Proceed with the SSL certificate. <br /><br />android.webkit.SslErrorHandler.cancel () &mdash; Cancel this request and all pending requests for the WebView that had the error. <br /><br />android.webkit.URLUtil.guessUrl (String inUrl)   Cleans up  (if possible) &mdash; Cleans up (if possible) user-entered web addresses <br /><br />android.webkit.WebBackForwardList.getSize () &mdash; Get the total size of the back/forward list. <br /><br />android.webkit.WebBackForwardList.getItemAtIndex (int index) &mdash; Get the history item at the given index. <br /><br />android.webkit.WebBackForwardList.getCurrentIndex () &mdash; Get the index of the current history item. <br /><br />android.webkit.WebBackForwardList.getCurrentItem () &mdash; Return the current history item. <br /><br />android.webkit.WebChromeClient.onConsoleMessage (ConsoleMessage consoleMessage) &mdash; Report a JavaScript console message to the host application. <br /><br />android.webkit.WebChromeClient.onCloseWindow (WebView window) &mdash; Notify the host application to close the given WebView and remove it from the view system if necessary. <br /><br />android.webkit.WebChromeClient.onProgressChanged (WebView view, int newProgress) &mdash; Tell the host application the current progress of loading a page. <br /><br />android.webkit.WebChromeClient.onJsConfirm (WebView view, String url, String message, JsResult result) &mdash; Tell the client to display a confirm dialog to the user. <br /><br />android.webkit.WebChromeClient.onConsoleMessage (String message, int lineNumber, String sourceID)    This method was deprecated in API level 8. Use onConsoleMessage (ConsoleMessage) &mdash; This method was deprecated in API level 8. Use onConsoleMessage(ConsoleMessage) instead. <br /><br />android.webkit.WebChromeClient.onCreateWindow (WebView view, boolean isDialog, boolean isUserGesture, Message resultMsg) &mdash; Request the host application to create a new window. <br /><br />android.webkit.WebChromeClient.onJsPrompt (WebView view, String url, String message, String defaultValue, JsPromptResult result) &mdash; Tell the client to display a prompt dialog to the user. <br /><br />android.webkit.WebChromeClient.onReceivedIcon (WebView view, Bitmap icon) &mdash; Notify the host application of a new favicon for the current page. <br /><br />android.webkit.WebChromeClient.onJsAlert (WebView view, String url, String message, JsResult result) &mdash; Tell the client to display a javascript alert dialog. <br /><br />android.webkit.WebChromeClient.onHideCustomView () &mdash; Notify the host application that the current page would like to hide its custom view. <br /><br />"
"android.webkit.WebChromeClient.onRequestFocus (WebView view) &mdash; Request display and focus for this WebView. <br /><br />android.webkit.WebChromeClient.getVideoLoadingProgressView () &mdash; When the user starts to playback a video element, it may take time for enough data to be buffered before the first frames can be rendered. <br /><br />android.webkit.WebChromeClient.onJsBeforeUnload (WebView view, String url, String message, JsResult result) &mdash; Tell the client to display a dialog to confirm navigation away from the current page. <br /><br />android.webkit.WebChromeClient.onReceivedTitle (WebView view, String title) &mdash; Notify the host application of a change in the document title. <br /><br />android.webkit.WebHistoryItem.getFavicon () &mdash; Return the favicon of this history item or null if no favicon was found. <br /><br />android.webkit.WebHistoryItem.getTitle () &mdash; Return the document title of this history item. <br /><br />android.webkit.WebHistoryItem.getOriginalUrl () &mdash; Return the original url of this history item. <br /><br />android.webkit.WebHistoryItem.getUrl () &mdash; Return the url of this history item. <br /><br />android.webkit.WebIconDatabase.releaseIconForPageUrl (String url) &mdash; Release the icon for the given page url. <br /><br />android.webkit.WebIconDatabase.removeAllIcons () &mdash; Removes all the icons in the database. <br /><br />android.webkit.WebIconDatabase.getInstance () &mdash; Get the global instance of WebIconDatabase. <br /><br />android.webkit.WebIconDatabase.open (String path) &mdash; Open a the icon database and store the icons in the given path. <br /><br />android.webkit.WebIconDatabase.close () &mdash; Close the shared instance of the icon database. <br /><br />android.webkit.WebIconDatabase.retainIconForPageUrl (String url) &mdash; Retain the icon for the given page url. <br /><br />android.webkit.WebResourceResponse.setStatusCodeAndReasonPhrase (int statusCode, String reasonPhrase) &mdash; Sets the resource response's status code and reason phrase. <br /><br />android.webkit.WebResourceResponse.setResponseHeaders (Map< String,  String> headers) &mdash; Sets the headers for the resource response. <br /><br />android.webkit.WebSettings.setSaveFormData (boolean save) &mdash; Sets whether the WebView should save form data. <br /><br />android.webkit.WebSettings.setAppCacheMaxSize (long appCacheMaxSize) &mdash; This method was deprecated in API level 18. In future quota will be managed automatically. <br /><br />android.webkit.WebSettings.setEnableSmoothTransition (boolean enable) &mdash; This method was deprecated in API level 17. This method is now obsolete, and will become a no-op in future. <br /><br />android.webkit.WebSettings.getLoadsImagesAutomatically () &mdash; Gets whether the WebView loads image resources. <br /><br />"
"android.webkit.WebSettings.getUserAgentString () &mdash; Gets the WebView's user-agent string. <br /><br />android.webkit.WebSettings.getDefaultUserAgent (Context context) &mdash; Returns the default User-Agent used by a WebView. <br /><br />android.webkit.WebSettings.setDefaultTextEncodingName (String encoding) &mdash; Sets the default text encoding name to use when decoding html pages. <br /><br />android.webkit.WebSettings.getCacheMode () &mdash; Gets the current setting for overriding the cache mode. <br /><br />android.webkit.WebSettings.setAppCacheEnabled (boolean flag) &mdash; Sets whether the Application Caches API should be enabled. <br /><br />android.webkit.WebSettings.setUserAgentString (String ua) &mdash; Sets the WebView's user-agent string. <br /><br />android.webkit.WebSettings.setMixedContentMode (int mode) &mdash; Configures the WebView's behavior when a secure origin attempts to load a resource from an insecure origin. <br /><br />android.webkit.WebSettings.setMinimumLogicalFontSize (int size) &mdash; Sets the minimum logical font size. <br /><br />android.webkit.WebSettings.setDefaultFontSize (int size) &mdash; Sets the default font size. <br /><br />android.webkit.WebSettings.setLoadsImagesAutomatically (boolean flag) &mdash; Sets whether the WebView should load image resources. <br /><br />android.webkit.WebSettings.setSupportMultipleWindows (boolean support) &mdash; Sets whether the WebView whether supports multiple windows. <br /><br />android.webkit.WebSettings.setBlockNetworkImage (boolean flag)   Sets whether the WebView should not load image resources from the network  (resources accessed via http and https URI schemes) &mdash; Sets whether the WebView should not load image resources from the network (resources accessed via http and https URI schemes). <br /><br />android.webkit.WebSettings.setAllowContentAccess (boolean allow) &mdash; Enables or disables content URL access within WebView. <br /><br />android.webkit.WebSettings.setAllowFileAccessFromFileURLs (boolean flag) &mdash; Sets whether JavaScript running in the context of a file scheme URL should be allowed to access content from other file scheme URLs. <br /><br />android.webkit.WebSettings.setDomStorageEnabled (boolean flag) &mdash; Sets whether the DOM storage API is enabled. <br /><br />android.webkit.WebSettings.setJavaScriptCanOpenWindowsAutomatically (boolean flag) &mdash; Tells JavaScript to open windows automatically. <br /><br />android.webkit.WebSettings.setLightTouchEnabled (boolean enabled) &mdash; This method was deprecated in API level 18. From JELLY_BEAN this setting is obsolete and has no effect. <br /><br />android.webkit.WebSettings.getBlockNetworkImage () &mdash; Gets whether the WebView does not load image resources from the network. <br /><br />android.webkit.WebSettings.setSavePassword (boolean save) &mdash; This method was deprecated in API level 18. Saving passwords in WebView will not be supported in future versions. <br /><br />android.webkit.WebSettings.setGeolocationDatabasePath (String databasePath) &mdash; Sets the path where the Geolocation databases should be saved. <br /><br />"
"android.webkit.WebSettings.setAllowUniversalAccessFromFileURLs (boolean flag) &mdash; Sets whether JavaScript running in the context of a file scheme URL should be allowed to access content from any origin. <br /><br />android.webkit.WebSettings.setCacheMode (int mode) &mdash; Overrides the way the cache is used. <br /><br />android.webkit.WebSettings.setJavaScriptEnabled (boolean flag) &mdash; Tells the WebView to enable JavaScript execution. <br /><br />android.webkit.WebSettings.setBuiltInZoomControls (boolean enabled) &mdash; Sets whether the WebView should use its built-in zoom mechanisms. <br /><br />android.webkit.WebSettings.setBlockNetworkLoads (boolean flag) &mdash; Sets whether the WebView should not load resources from the network. <br /><br />android.webkit.WebSettings.setAppCachePath (String appCachePath) &mdash; Sets the path to the Application Caches files. <br /><br />android.webkit.WebSettings.setSupportZoom (boolean support) &mdash; Sets whether the WebView should support zooming using its on-screen zoom controls and gestures. <br /><br />android.webkit.WebSettings.setNeedInitialFocus (boolean flag)   Tells the WebView whether it needs to set a node to have focus when requestFocus (int, android.graphics.Rect) &mdash; Tells the WebView whether it needs to set a node to have focus when requestFocus(int, android.graphics.Rect) is called. <br /><br />android.webkit.WebSettings.setLoadWithOverviewMode (boolean overview) &mdash; Sets whether the WebView loads pages in overview mode, that is, zooms out the content to fit on screen by width. <br /><br />android.webkit.WebSettings.setDisplayZoomControls (boolean enabled) &mdash; Sets whether the WebView should display on-screen zoom controls when using the built-in zoom mechanisms. <br /><br />android.webkit.WebSettings.setDatabaseEnabled (boolean flag) &mdash; Sets whether the database storage API is enabled. <br /><br />android.webkit.WebSettings.getJavaScriptEnabled () &mdash; Gets whether JavaScript is enabled. <br /><br />android.webkit.WebSettings.setDatabasePath (String databasePath) &mdash; This method was deprecated in API level 19. Database paths are managed by the implementation and calling this method will have no effect. <br /><br />android.webkit.WebSettings.setMediaPlaybackRequiresUserGesture (boolean require) &mdash; Sets whether the WebView requires a user gesture to play media. <br /><br />android.webkit.WebSettings.setDefaultFixedFontSize (int size) &mdash; Sets the default fixed font size. <br /><br />android.webkit.WebSettings.setMinimumFontSize (int size) &mdash; Sets the minimum font size. <br /><br />android.webkit.WebSettings.setUseWideViewPort (boolean use) &mdash; Sets whether the WebView should enable support for the 'viewport' HTML meta tag or should use a wide viewport. <br /><br />android.webkit.WebSettings.setAllowFileAccess (boolean allow) &mdash; Enables or disables file access within WebView. <br /><br />android.webkit.WebSettings.setGeolocationEnabled (boolean flag) &mdash; Sets whether Geolocation is enabled. <br /><br />android.webkit.WebSettings.setTextZoom (int textZoom) &mdash; Sets the text zoom of the page in percent. <br /><br />"
"android.webkit.WebView.clearSslPreferences () &mdash; Clears the SSL preferences table stored in response to proceeding with SSL certificate errors. <br /><br />android.webkit.WebView.setHorizontalScrollbarOverlay (boolean overlay) &mdash; Specifies whether the horizontal scrollbar has overlay style. <br /><br />android.webkit.WebView.setWebContentsDebuggingEnabled (boolean enabled)   Enables debugging of web contents  (HTML / CSS / JavaScript) &mdash; Enables debugging of web contents (HTML / CSS / JavaScript) loaded into any WebViews of this application. <br /><br />android.webkit.WebView.clearCache (boolean includeDiskFiles) &mdash; Clears the resource cache. <br /><br />android.webkit.WebView.evaluateJavascript (String script, ValueCallback< String> resultCallback) &mdash; Asynchronously evaluates JavaScript in the context of the currently displayed page. <br /><br />android.webkit.WebView.clearHistory () &mdash; Tells this WebView to clear its internal back/forward list. <br /><br />android.webkit.WebView.getOriginalUrl () &mdash; Gets the original URL for the current page. <br /><br />android.webkit.WebView.onResume ()   Resumes a WebView after a previous call to onPause () &mdash; Resumes a WebView after a previous call to onPause(). <br /><br />android.webkit.WebView.resumeTimers () &mdash; Resumes all layout, parsing, and JavaScript timers for all WebViews. <br /><br />android.webkit.WebView.setWebChromeClient (WebChromeClient client) &mdash; Sets the chrome handler. <br /><br />android.webkit.WebView.canGoBack () &mdash; Gets whether this WebView has a back history item. <br /><br />android.webkit.WebView.setWebViewClient (WebViewClient client) &mdash; Sets the WebViewClient that will receive various notifications and requests. <br /><br />android.webkit.WebView.setScrollBarStyle (int style) &mdash; Specify the style of the scrollbars. <br /><br />android.webkit.WebView.reload () &mdash; Reloads the current URL. <br /><br />android.webkit.WebView.loadUrl (String url, Map< String,  String> additionalHttpHeaders) &mdash; Loads the given URL with the specified additional HTTP headers. <br /><br />android.webkit.WebView.stopLoading () &mdash; Stops the current load. <br /><br />android.webkit.WebView.pauseTimers () &mdash; Pauses all layout, parsing, and JavaScript timers for all WebViews. <br /><br />android.webkit.WebView.destroy () &mdash; Destroys the internal state of this WebView. <br /><br />android.webkit.WebView.setVerticalScrollbarOverlay (boolean overlay) &mdash; Specifies whether the vertical scrollbar has overlay style. <br /><br />android.webkit.WebView.loadDataWithBaseURL (String baseUrl, String data, String mimeType, String encoding, String historyUrl) &mdash; Loads the given data into this WebView, using baseUrl as the base URL for the content. <br /><br />"
"android.webkit.WebView.setInitialScale (int scaleInPercent) &mdash; Sets the initial scale for this WebView. <br /><br />android.webkit.WebView.onPause () &mdash; Pauses any extra processing associated with this WebView and its associated DOM, plugins, JavaScript etc. <br /><br />android.webkit.WebView.getProgress () &mdash; Gets the progress for the current page. <br /><br />android.webkit.WebView.getHitTestResult () &mdash; Gets a HitTestResult based on the current cursor node. <br /><br />android.webkit.WebView.getTitle () &mdash; Gets the title for the current page. <br /><br />android.webkit.WebView.onWindowFocusChanged (boolean hasWindowFocus) &mdash; Called when the window containing this view gains or loses focus. <br /><br />android.webkit.WebView.canGoBackOrForward (int steps) &mdash; Gets whether the page can go back or forward the given number of steps. <br /><br />android.webkit.WebView.canGoForward () &mdash; Gets whether this WebView has a forward history item. <br /><br />android.webkit.WebView.getUrl () &mdash; Gets the URL for the current page. <br /><br />android.webkit.WebView.saveState (Bundle outState)   Saves the state of this WebView used in onSaveInstanceState (Bundle) &mdash; Saves the state of this WebView used in onSaveInstanceState(Bundle). <br /><br />android.webkit.WebView.getContentHeight () &mdash; Gets the height of the HTML content. <br /><br />android.webkit.WebView.requestFocus (int direction, Rect previouslyFocusedRect)   Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from. Looks for a view to give focus to respecting the setting specified by getDescendantFocusability () &mdash; Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from. Looks for a view to give focus to respecting the setting specified by getDescendantFocusability(). <br /><br />android.webkit.WebView.goBack () &mdash; Goes back in the history of this WebView. <br /><br />android.webkit.WebView.goBackOrForward (int steps) &mdash; Goes to the history item that is the number of steps away from the current item. <br /><br />android.webkit.WebView.addJavascriptInterface (Object object, String name) &mdash; Injects the supplied Java object into this WebView. <br /><br />android.webkit.WebView.setDownloadListener (DownloadListener listener) &mdash; Registers the interface to be used when content can not be handled by the rendering engine, and should be downloaded instead. <br /><br />android.webkit.WebView.clearFormData () &mdash; Removes the autocomplete popup from the currently focused form field, if present. <br /><br />android.webkit.WebView.restoreState (Bundle inState) &mdash; Restores the state of this WebView from the given Bundle. <br /><br />android.webkit.WebView.copyBackForwardList () &mdash; Gets the WebBackForwardList for this WebView. <br /><br />android.webkit.WebView.loadUrl (String url) &mdash; Loads the given URL. <br /><br />"
"android.webkit.WebView.setNetworkAvailable (boolean networkUp) &mdash; Informs WebView of the network state. <br /><br />android.webkit.WebView.clearView ()    This method was deprecated in API level 18. Use WebView.loadUrl ('about:blank') to reliably reset the view state and release page resources  (including any running JavaScript) &mdash; This method was deprecated in API level 18. Use WebView.loadUrl('about:blank') to reliably reset the view state and release page resources (including any running JavaScript). <br /><br />android.webkit.WebView.loadData (String data, String mimeType, String encoding) &mdash; Loads the given data into this WebView using a 'data' scheme URL. <br /><br />android.webkit.WebView.goForward () &mdash; Goes forward in the history of this WebView. <br /><br />android.webkit.WebView.postUrl (String url, byte[] postData) &mdash; Loads the URL with postData using 'POST' method into this WebView. <br /><br />android.webkit.WebView.getSettings () &mdash; Gets the WebSettings object used to control the settings for this WebView. <br /><br />android.webkit.WebViewClient.shouldInterceptRequest (WebView view, WebResourceRequest request) &mdash; Notify the host application of a resource request and allow the application to return the data. <br /><br />android.webkit.WebViewClient.onFormResubmission (WebView view, Message dontResend, Message resend) &mdash; As the host application if the browser should resend data as the requested page was a result of a POST. <br /><br />android.webkit.WebViewClient.shouldOverrideUrlLoading (WebView view, String url) &mdash; Give the host application a chance to take over the control when a new url is about to be loaded in the current WebView. <br /><br />android.webkit.WebViewClient.onScaleChanged (WebView view, float oldScale, float newScale) &mdash; Notify the host application that the scale applied to the WebView has changed. <br /><br />android.webkit.WebViewClient.shouldOverrideKeyEvent (WebView view, KeyEvent event) &mdash; Give the host application a chance to handle the key event synchronously. <br /><br />android.webkit.WebViewClient.onReceivedHttpAuthRequest (WebView view, HttpAuthHandler handler, String host, String realm) &mdash; Notifies the host application that the WebView received an HTTP authentication request. <br /><br />android.webkit.WebViewClient.onPageStarted (WebView view, String url, Bitmap favicon) &mdash; Notify the host application that a page has started loading. <br /><br />android.webkit.WebViewClient.onReceivedSslError (WebView view, SslErrorHandler handler, SslError error) &mdash; Notify the host application that an SSL error occurred while loading a resource. <br /><br />android.webkit.WebViewClient.shouldInterceptRequest (WebView view, String url)    This method was deprecated in API level 21. Use shouldInterceptRequest (WebView, WebResourceRequest) &mdash; This method was deprecated in API level 21. Use shouldInterceptRequest(WebView, WebResourceRequest) instead. <br /><br />android.webkit.WebViewClient.onLoadResource (WebView view, String url) &mdash; Notify the host application that the WebView will load the resource specified by the given url. <br /><br />android.webkit.WebViewClient.onPageFinished (WebView view, String url) &mdash; Notify the host application that a page has finished loading. <br /><br />android.webkit.WebViewClient.onTooManyRedirects (WebView view, Message cancelMsg, Message continueMsg) &mdash; This method was deprecated in API level 8. This method is no longer called. When the WebView encounters a redirect loop, it will cancel the load. <br /><br />android.webkit.WebViewClient.onReceivedError (WebView view, int errorCode, String description, String failingUrl) &mdash; Report an error to the host application. <br /><br />android.webkit.WebViewDatabase.clearFormData () &mdash; Clears any saved data for web forms. <br /><br />"
"android.webkit.WebViewDatabase.clearHttpAuthUsernamePassword () &mdash; Clears any saved credentials for HTTP authentication. <br /><br />android.widget.AbsListView.smoothScrollBy (int distance, int duration) &mdash; Smoothly scroll by distance pixels over duration milliseconds. <br /><br />android.widget.AbsListView.setAdapter (ListAdapter adapter) &mdash; Sets the adapter that provides the data and the views to represent the data in this widget. <br /><br />android.widget.AbsListView.setChoiceMode (int choiceMode) &mdash; Defines the choice behavior for the List. <br /><br />android.widget.Adapter.unregisterDataSetObserver (DataSetObserver observer)   Unregister an observer that has previously been registered with this adapter via registerDataSetObserver (DataSetObserver) &mdash; Unregister an observer that has previously been registered with this adapter via registerDataSetObserver(DataSetObserver). <br /><br />android.widget.Adapter.getItem (int position) &mdash; Get the data item associated with the specified position in the data set. <br /><br />android.widget.Adapter.getViewTypeCount ()    Returns the number of types of Views that will be created by getView (int, View, ViewGroup) &mdash; Returns the number of types of Views that will be created by getView(int, View, ViewGroup). <br /><br />android.widget.Adapter.registerDataSetObserver (DataSetObserver observer) &mdash; Register an observer that is called when changes happen to the data used by this adapter. <br /><br />android.widget.Adapter.getView (int position, View convertView, ViewGroup parent) &mdash; Get a View that displays the data at the specified position in the data set. <br /><br />android.widget.Adapter.getCount () &mdash; How many items are in the data set represented by this Adapter. <br /><br />android.widget.Adapter.hasStableIds () &mdash; Indicates whether the item ids are stable across changes to the underlying data. <br /><br />android.widget.Adapter.getItemViewType (int position)   Get the type of View that will be created by getView (int, View, ViewGroup) &mdash; Get the type of View that will be created by getView(int, View, ViewGroup) for the specified item. <br /><br />android.widget.Adapter.getItemId (int position) &mdash; Get the row id associated with the specified position in the list. <br /><br />android.widget.Advanceable.fyiWillBeAdvancedByHostKThx ()   Called by the AppWidgetHost once before it begins to call advance () &mdash; Called by the AppWidgetHost once before it begins to call advance(), allowing the collection to do any required setup. <br /><br />android.widget.Advanceable.advance () &mdash; Advances this collection, eg. <br /><br />android.widget.AlphabetIndexer.getSectionForPosition (int position) &mdash; Returns the section index for a given position in the list by querying the item and comparing it with all items in the section array. <br /><br />android.widget.AlphabetIndexer.getPositionForSection (int sectionIndex) &mdash; Performs a binary search or cache lookup to find the first row that matches a given section's starting letter. <br /><br />android.widget.AlphabetIndexer.getSections () &mdash; Returns the section array constructed from the alphabet provided in the constructor. <br /><br />android.widget.AutoCompleteTextView.dismissDropDown () &mdash; Closes the drop down if present on screen. <br /><br />android.widget.AutoCompleteTextView.onFilterComplete (int count) &mdash; Notifies the end of a filtering operation. <br /><br />"
"android.widget.AutoCompleteTextView.showDropDown () &mdash; Displays the drop down on screen. <br /><br />android.widget.AutoCompleteTextView.enoughToFilter ()   Returns true if the amount of text in the field meets or exceeds the getThreshold () &mdash; Returns true if the amount of text in the field meets or exceeds the getThreshold() requirement. <br /><br />android.widget.AutoCompleteTextView.onKeyPreIme (int keyCode, KeyEvent event) &mdash; Handle a key event before it is processed by any input method associated with the view hierarchy. <br /><br />android.widget.AutoCompleteTextView.setThreshold (int threshold) &mdash; Specifies the minimum number of characters the user has to type in the edit box before the drop down list is shown. <br /><br />android.widget.BaseAdapter.isEnabled (int position) &mdash; Returns true if the item at the specified position is not a separator. <br /><br />android.widget.BaseAdapter.notifyDataSetInvalidated () &mdash; Notifies the attached observers that the underlying data is no longer valid or available. <br /><br />android.widget.BaseAdapter.getDropDownView (int position, View convertView, ViewGroup parent) &mdash; Get a View that displays in the drop down popup the data at the specified position in the data set. <br /><br />android.widget.BaseAdapter.areAllItemsEnabled () &mdash; Indicates whether all the items in this adapter are enabled. <br /><br />android.widget.BaseAdapter.notifyDataSetChanged () &mdash; Notifies the attached observers that the underlying data has been changed and any View reflecting the data set should refresh itself. <br /><br />android.widget.BaseExpandableListAdapter.onGroupExpanded (int groupPosition) &mdash; Called when a group is expanded. <br /><br />android.widget.BaseExpandableListAdapter.onGroupCollapsed (int groupPosition) &mdash; Called when a group is collapsed. <br /><br />android.widget.BaseExpandableListAdapter.getCombinedChildId (long groupId, long childId)   Override this method if you foresee a clash in IDs based on this scheme:  Base implementation returns a long:   bit 0: Whether this ID points to a child  (unset) or group  (set) &mdash; Override this method if you foresee a clash in IDs based on this scheme:  Base implementation returns a long:   bit 0: Whether this ID points to a child (unset) or group (set), so for this method this bit will be 1. <br /><br />android.widget.Checkable.toggle () &mdash; Change the checked state of the view to the inverse of its current state <br /><br />android.widget.Checkable.setChecked (boolean checked) &mdash; Change the checked state of the view <br /><br />android.widget.CheckedTextView.setChecked (boolean checked) &mdash; Changes the checked state of this text view. <br /><br />android.widget.CheckedTextView.setCheckMarkDrawable (Drawable d) &mdash; Set the checkmark to a given Drawable. <br /><br />android.widget.CheckedTextView.setCheckMarkDrawable (int resid) &mdash; Set the checkmark to a given Drawable, identified by its resourece id. <br /><br />android.widget.CompoundButton.setChecked (boolean checked) &mdash; Changes the checked state of this button. <br /><br />android.widget.CompoundButton.getCompoundPaddingRight () &mdash; Returns the right padding of the view, plus space for the right Drawable if any. <br /><br />android.widget.CursorAdapter.setFilterQueryProvider (FilterQueryProvider filterQueryProvider) &mdash; Sets the query filter provider used to filter the current Cursor. <br /><br />"
"android.widget.CursorAdapter.getFilter () &mdash; Returns a filter that can be used to constrain data with a filtering pattern. <br /><br />android.widget.EdgeEffect.isFinished () &mdash; Reports if this EdgeEffect's animation is finished. <br /><br />android.widget.EdgeEffect.onAbsorb (int velocity) &mdash; Call when the effect absorbs an impact at the given velocity. <br /><br />android.widget.EditText.setSelection (int start, int stop)   Convenience for setSelection (Spannable, int, int) &mdash; Convenience for setSelection(Spannable, int, int). <br /><br />android.widget.EditText.getText () &mdash; Return the text the TextView is displaying. <br /><br />android.widget.EditText.selectAll ()   Convenience for selectAll (Spannable) &mdash; Convenience for selectAll(Spannable). <br /><br />android.widget.EditText.setSelection (int index)   Convenience for setSelection (Spannable, int) &mdash; Convenience for setSelection(Spannable, int). <br /><br />android.widget.ExpandableListAdapter.getChild (int groupPosition, int childPosition) &mdash; Gets the data associated with the given child within the given group. <br /><br />android.widget.ExpandableListAdapter.getGroupCount () &mdash; Gets the number of groups. <br /><br />android.widget.ExpandableListView.isGroupExpanded (int groupPosition) &mdash; Whether the given group is currently expanded. <br /><br />android.widget.ExpandableListView.collapseGroup (int groupPos) &mdash; Collapse a group in the grouped list view <br /><br />android.widget.ExpandableListView.getPackedPositionChild (long packedPosition)   Gets the child position from a packed position that is of PACKED_POSITION_TYPE_CHILD type  (use getPackedPositionType (long)) &mdash; Gets the child position from a packed position that is of PACKED_POSITION_TYPE_CHILD type (use getPackedPositionType(long)). <br /><br />android.widget.ExpandableListView.getPackedPositionGroup (long packedPosition) &mdash; Gets the group position from a packed position. <br /><br />android.widget.ExpandableListView.setAdapter (ListAdapter adapter)   This overloaded method should not be used, instead use setAdapter (ExpandableListAdapter) &mdash; This overloaded method should not be used, instead use setAdapter(ExpandableListAdapter). <br /><br />android.widget.ExpandableListView.expandGroup (int groupPos) &mdash; Expand a group in the grouped list view <br /><br />android.widget.ExpandableListView.setAdapter (ExpandableListAdapter adapter) &mdash; Sets the adapter that provides data to this view. <br /><br />android.widget.Filter.filter (CharSequence constraint) &mdash; Starts an asynchronous filtering operation. <br /><br />android.widget.FilterQueryProvider.runQuery (CharSequence constraint) &mdash; Runs a query with the specified constraint. <br /><br />android.widget.FrameLayout.setForeground (Drawable d) &mdash; Supply a Drawable that is to be rendered on top of all of the child views in the frame layout. <br /><br />android.widget.GridView.setAdapter (ListAdapter adapter) &mdash; Sets the data behind this GridView. <br /><br />"
"android.widget.GridView.setVerticalSpacing (int verticalSpacing)   Set the amount of vertical  (y) &mdash; Set the amount of vertical (y) spacing to place between each item in the grid. <br /><br />android.widget.GridView.setColumnWidth (int columnWidth) &mdash; Set the width of columns in the grid. <br /><br />android.widget.GridView.setNumColumns (int numColumns) &mdash; Set the number of columns in the grid <br /><br />android.widget.GridView.getNumColumns () &mdash; Get the number of columns in the grid. <br /><br />android.widget.GridView.getAdapter () &mdash; Returns the adapter currently associated with this widget. <br /><br />android.widget.HeaderViewListAdapter.getWrappedAdapter () &mdash; Returns the adapter wrapped by this list adapter. <br /><br />android.widget.HorizontalScrollView.setSmoothScrollingEnabled (boolean smoothScrollingEnabled) &mdash; Set whether arrow scrolling will animate its transition. <br /><br />android.widget.HorizontalScrollView.smoothScrollTo (int x, int y)   Like scrollTo (int, int) &mdash; Like scrollTo(int, int), but scroll smoothly instead of immediately. <br /><br />android.widget.HorizontalScrollView.setFillViewport (boolean fillViewport) &mdash; Indicates this HorizontalScrollView whether it should stretch its content width to fill the viewport or not. <br /><br />android.widget.HorizontalScrollView.fullScroll (int direction) &mdash; Handles scrolling in response to a 'home/end' shortcut press. <br /><br />android.widget.ImageView.setColorFilter (ColorFilter cf) &mdash; Apply an arbitrary colorfilter to the image. <br /><br />android.widget.ImageView.setMaxWidth (int maxWidth) &mdash; An optional argument to supply a maximum width for this view. <br /><br />android.widget.ImageView.onCreateDrawableState (int extraSpace) &mdash; Generate the new Drawable state for this view. <br /><br />android.widget.ImageView.setMaxHeight (int maxHeight) &mdash; An optional argument to supply a maximum height for this view. <br /><br />android.widget.ImageView.setImageAlpha (int alpha) &mdash; Sets the alpha value that should be applied to the image. <br /><br />android.widget.ImageView.setImageResource (int resId) &mdash; Sets a drawable as the content of this ImageView. <br /><br />android.widget.ImageView.setImageLevel (int level) &mdash; Sets the image level, when it is constructed from a LevelListDrawable. <br /><br />android.widget.ImageView.getScaleType () &mdash; Return the current scale type in use by this ImageView. <br /><br />android.widget.ImageView.setColorFilter (int color, PorterDuff.Mode mode) &mdash; Set a tinting option for the image. <br /><br />android.widget.ImageView.getDrawable () &mdash; Return the view's drawable, or null if no drawable has been assigned. <br /><br />"
"android.widget.ImageView.setImageURI (Uri uri) &mdash; Sets the content of this ImageView to the specified Uri. <br /><br />android.widget.ImageView.setImageBitmap (Bitmap bm) &mdash; Sets a Bitmap as the content of this ImageView. <br /><br />android.widget.ImageView.setAdjustViewBounds (boolean adjustViewBounds) &mdash; Set this to true if you want the ImageView to adjust its bounds to preserve the aspect ratio of its drawable. <br /><br />android.widget.ImageView.setAlpha (int alpha)    This method was deprecated in API level 16. use #setImageAlpha (int) &mdash; This method was deprecated in API level 16. use #setImageAlpha(int) instead <br /><br />android.widget.ImageView.getImageMatrix () &mdash; Return the view's optional matrix. <br /><br />android.widget.LinearLayout.setWeightSum (float weightSum) &mdash; Defines the desired weights sum. <br /><br />android.widget.LinearLayout.setShowDividers (int showDividers) &mdash; Set how dividers should be shown between items in this layout <br /><br />android.widget.LinearLayout.setOrientation (int orientation) &mdash; Should the layout be a column or a row. <br /><br />android.widget.LinearLayout.setDividerDrawable (Drawable divider) &mdash; Set a drawable to be used as a divider between items. <br /><br />android.widget.LinearLayout.setGravity (int gravity) &mdash; Describes how the child views are positioned. <br /><br />android.widget.ListPopupWindow.setAdapter (ListAdapter adapter) &mdash; Sets the adapter that provides the data and the views to represent the data in this popup window. <br /><br />android.widget.ListPopupWindow.setWidth (int width) &mdash; Sets the width of the popup window in pixels. <br /><br />android.widget.ListPopupWindow.setAnchorView (View anchor) &mdash; Sets the popup's anchor view. <br /><br />android.widget.ListPopupWindow.setBackgroundDrawable (Drawable d) &mdash; Sets a drawable to be the background for the popup window. <br /><br />android.widget.ListPopupWindow.dismiss () &mdash; Dismiss the popup window. <br /><br />android.widget.ListPopupWindow.setHorizontalOffset (int offset) &mdash; Set the horizontal offset of this popup from its anchor view in pixels. <br /><br />android.widget.ListPopupWindow.setVerticalOffset (int offset) &mdash; Set the vertical offset of this popup from its anchor view in pixels. <br /><br />android.widget.ListPopupWindow.createDragToOpenListener (View src) &mdash; Returns an View.OnTouchListener that can be added to the source view to implement drag-to-open behavior. <br /><br />android.widget.ListPopupWindow.setModal (boolean modal) &mdash; Set whether this window should be modal when shown. <br /><br />android.widget.ListPopupWindow.show () &mdash; Show the popup list. <br /><br />"
"android.widget.ListPopupWindow.setContentWidth (int width) &mdash; Sets the width of the popup window by the size of its content. <br /><br />android.widget.ListView.setAdapter (ListAdapter adapter) &mdash; Sets the data behind this ListView. <br /><br />android.widget.ListView.removeHeaderView (View v) &mdash; Removes a previously-added header view. <br /><br />android.widget.ListView.setCacheColorHint (int color) &mdash; When set to a non-zero value, the cache color hint indicates that this list is always drawn on top of a solid, single-color, opaque background. <br /><br />android.widget.ListView.setDivider (Drawable divider) &mdash; Sets the drawable that will be drawn between each item in the list. <br /><br />android.widget.ListView.setDividerHeight (int height) &mdash; Sets the height of the divider that will be drawn between each item in the list. <br /><br />android.widget.ListView.getHeaderViewsCount () &mdash; Returns the number of header views in the list. <br /><br />android.widget.ListView.setItemsCanFocus (boolean itemsCanFocus) &mdash; Indicates that the views created by the ListAdapter can contain focusable items. <br /><br />android.widget.ListView.getFooterViewsCount () &mdash; Returns the number of footer views in the list. <br /><br />android.widget.ListView.smoothScrollToPosition (int position) &mdash; Smoothly scroll to the specified adapter position. <br /><br />android.widget.ListView.addFooterView (View v) &mdash; Add a fixed view to appear at the bottom of the list. <br /><br />android.widget.ListView.setSelectionAfterHeaderView () &mdash; setSelectionAfterHeaderView set the selection to be the first list item after the header views. <br /><br />android.widget.ListView.setHeaderDividersEnabled (boolean headerDividersEnabled) &mdash; Enables or disables the drawing of the divider for header views. <br /><br />android.widget.ListView.addHeaderView (View v) &mdash; Add a fixed view to appear at the top of the list. <br /><br />android.widget.ListView.removeFooterView (View v) &mdash; Removes a previously-added footer view. <br /><br />android.widget.ListView.setSelection (int position) &mdash; Sets the currently selected item. <br /><br />android.widget.ListView.setFooterDividersEnabled (boolean footerDividersEnabled) &mdash; Enables or disables the drawing of the divider for footer views. <br /><br />android.widget.ListView.getAdapter () &mdash; Returns the adapter currently in use in this ListView. <br /><br />android.widget.MediaController.setAnchorView (View view) &mdash; Set the view that acts as the anchor for the control view. <br /><br />android.widget.MediaController.hide () &mdash; Remove the controller from the screen. <br /><br />"
"android.widget.MediaController.show () &mdash; Show the controller on screen. <br /><br />android.widget.OverScroller.getFinalX () &mdash; Returns where the scroll will end. <br /><br />android.widget.OverScroller.setFriction (float friction) &mdash; The amount of friction applied to flings. <br /><br />android.widget.OverScroller.notifyVerticalEdgeReached (int startY, int finalY, int overY) &mdash; Notify the scroller that we've reached a vertical boundary. <br /><br />android.widget.OverScroller.notifyHorizontalEdgeReached (int startX, int finalX, int overX) &mdash; Notify the scroller that we've reached a horizontal boundary. <br /><br />android.widget.OverScroller.forceFinished (boolean finished) &mdash; Force the finished field to a particular value. <br /><br />android.widget.OverScroller.getCurrVelocity () &mdash; Returns the absolute value of the current velocity. <br /><br />android.widget.OverScroller.isOverScrolled () &mdash; Returns whether the current Scroller is currently returning to a valid position. <br /><br />android.widget.OverScroller.springBack (int startX, int startY, int minX, int maxX, int minY, int maxY) &mdash; Call this when you want to 'spring back' into a valid coordinate range. <br /><br />android.widget.PopupMenu.show () &mdash; Show the menu popup anchored to the view specified during construction. <br /><br />android.widget.PopupMenu.getDragToOpenListener () &mdash; Returns an View.OnTouchListener that can be added to the anchor view to implement drag-to-open behavior. <br /><br />android.widget.PopupWindow.setClippingEnabled (boolean enabled) &mdash; Allows the popup window to extend beyond the bounds of the screen. <br /><br />android.widget.PopupWindow.setOutsideTouchable (boolean touchable) &mdash; Controls whether the pop-up will be informed of touch events outside of its window. <br /><br />android.widget.PopupWindow.setWindowLayoutMode (int widthSpec, int heightSpec) &mdash; Change the width and height measure specs that are given to the window manager by the popup. <br /><br />android.widget.PopupWindow.setWidth (int width) &mdash; Change the popup's width MeasureSpec If the popup is showing, calling this method will take effect only the next time the popup is shown. <br /><br />android.widget.PopupWindow.update (int x, int y, int width, int height) &mdash; Updates the position and the dimension of the popup window. <br /><br />android.widget.PopupWindow.getContentView () &mdash; Return the view used as the content of the popup window. <br /><br />android.widget.PopupWindow.setTouchable (boolean touchable) &mdash; Changes the touchability of the popup window. <br /><br />android.widget.PopupWindow.getHeight () &mdash; Return this popup's height MeasureSpec <br /><br />android.widget.PopupWindow.dismiss () &mdash; Dispose of the popup window. <br /><br />"
"android.widget.PopupWindow.isShowing () &mdash; Indicate whether this popup window is showing on screen. <br /><br />android.widget.PopupWindow.showAsDropDown (View anchor) &mdash; Display the content view in a popup window anchored to the bottom-left corner of the anchor view. <br /><br />android.widget.PopupWindow.showAsDropDown (View anchor, int xoff, int yoff, int gravity) &mdash; Display the content view in a popup window anchored to the bottom-left corner of the anchor view offset by the specified x and y coordinates. <br /><br />android.widget.PopupWindow.getSoftInputMode ()   Returns the current value in setSoftInputMode (int) &mdash; Returns the current value in setSoftInputMode(int). <br /><br />android.widget.PopupWindow.showAtLocation (View parent, int gravity, int x, int y) &mdash; Display the content view in a popup window at the specified location. <br /><br />android.widget.PopupWindow.update () &mdash; Updates the state of the popup window, if it is currently being displayed, from the currently set state. <br /><br />android.widget.PopupWindow.update (int width, int height) &mdash; Updates the dimension of the popup window. <br /><br />android.widget.PopupWindow.getWidth () &mdash; Return this popup's width MeasureSpec <br /><br />android.widget.PopupWindow.setSoftInputMode (int mode) &mdash; Sets the operating mode for the soft input area. <br /><br />android.widget.PopupWindow.setBackgroundDrawable (Drawable background) &mdash; Specifies the background drawable for this popup window. <br /><br />android.widget.PopupWindow.getInputMethodMode ()   Return the current value in setInputMethodMode (int) &mdash; Return the current value in setInputMethodMode(int). <br /><br />android.widget.PopupWindow.setAnimationStyle (int animationStyle) &mdash; Change the animation style resource for this popup. <br /><br />android.widget.PopupWindow.setContentView (View contentView) &mdash; Change the popup's content. <br /><br />android.widget.PopupWindow.isAboveAnchor ()   Indicates whether the popup is showing above  (the y coordinate of the popup's bottom is less than the y coordinate of the anchor) or below the anchor view  (the y coordinate of the popup is greater than y coordinate of the anchor's bottom) &mdash; Indicates whether the popup is showing above (the y coordinate of the popup's bottom is less than the y coordinate of the anchor) or below the anchor view (the y coordinate of the popup is greater than y coordinate of the anchor's bottom). <br /><br />android.widget.PopupWindow.getAnimationStyle () &mdash; Return the animation style to use the popup appears and disappears <br /><br />android.widget.PopupWindow.setHeight (int height) &mdash; Change the popup's height MeasureSpec If the popup is showing, calling this method will take effect only the next time the popup is shown. <br /><br />android.widget.PopupWindow.setFocusable (boolean focusable) &mdash; Changes the focusability of the popup window. <br /><br />android.widget.PopupWindow.getBackground () &mdash; Return the drawable used as the popup window's background. <br /><br />android.widget.PopupWindow.setInputMethodMode (int mode) &mdash; Control how the popup operates with an input method: one of INPUT_METHOD_FROM_FOCUSABLE, INPUT_METHOD_NEEDED, or INPUT_METHOD_NOT_NEEDED. <br /><br />android.widget.ProgressBar.setIndeterminate (boolean indeterminate) &mdash; Change the indeterminate mode for this progress bar. <br /><br />"
"android.widget.ProgressBar.getProgressDrawable () &mdash; Get the drawable used to draw the progress bar in progress mode. <br /><br />android.widget.ProgressBar.getMax () &mdash; Return the upper limit of this progress bar's range. <br /><br />android.widget.ProgressBar.getProgress () &mdash; Get the progress bar's current level of progress. <br /><br />android.widget.ProgressBar.setIndeterminateDrawable (Drawable d) &mdash; Define the drawable used to draw the progress bar in indeterminate mode. <br /><br />android.widget.ProgressBar.setProgress (int progress) &mdash; Set the current progress to the specified value. <br /><br />android.widget.ProgressBar.setProgressDrawable (Drawable d) &mdash; Define the drawable used to draw the progress bar in progress mode. <br /><br />android.widget.ProgressBar.incrementProgressBy (int diff) &mdash; Increase the progress bar's progress by the specified amount. <br /><br />android.widget.ProgressBar.setSecondaryProgress (int secondaryProgress) &mdash; Set the current secondary progress to the specified value. <br /><br />android.widget.ProgressBar.incrementSecondaryProgressBy (int diff) &mdash; Increase the progress bar's secondary progress by the specified amount. <br /><br />android.widget.ProgressBar.getIndeterminateDrawable () &mdash; Get the drawable used to draw the progress bar in indeterminate mode. <br /><br />android.widget.ProgressBar.setMax (int max) &mdash; Set the range of the progress bar to 0... <br /><br />android.widget.ProgressBar.isIndeterminate () &mdash; Indicate whether this progress bar is in indeterminate mode. <br /><br />android.widget.RadioButton.toggle () &mdash; Change the checked state of the view to the inverse of its current state  If the radio button is already checked, this method will not toggle the radio button. <br /><br />android.widget.RadioGroup.getCheckedRadioButtonId () &mdash; Returns the identifier of the selected radio button in this group. <br /><br />android.widget.RadioGroup.check (int id) &mdash; Sets the selection to the radio button whose identifier is passed in parameter. <br /><br />android.widget.RadioGroup.clearCheck () &mdash; Clears the selection. <br /><br />android.widget.RatingBar.setStepSize (float stepSize)   Sets the step size  (granularity) &mdash; Sets the step size (granularity) of this rating bar. <br /><br />android.widget.RatingBar.setRating (float rating)   Sets the rating  (the number of stars filled) &mdash; Sets the rating (the number of stars filled). <br /><br />android.widget.RatingBar.setNumStars (int numStars) &mdash; Sets the number of stars to show. <br /><br />android.widget.RatingBar.setIsIndicator (boolean isIndicator)   Whether this rating bar should only be an indicator  (thus non-changeable by the user) &mdash; Whether this rating bar should only be an indicator (thus non-changeable by the user). <br /><br />"
"android.widget.RatingBar.getRating ()   Gets the current rating  (number of stars filled) &mdash; Gets the current rating (number of stars filled). <br /><br />android.widget.RemoteViews.apply (Context context, ViewGroup parent) &mdash; Inflates the view hierarchy represented by this object and applies all of the actions. <br /><br />android.widget.RemoteViews.getLayoutId () &mdash; Reutrns the layout id of the root layout associated with this RemoteViews. <br /><br />android.widget.RemoteViews.setImageViewBitmap (int viewId, Bitmap bitmap) &mdash; Equivalent to calling ImageView.setImageBitmap <br /><br />android.widget.RemoteViews.setOnClickPendingIntent (int viewId, PendingIntent pendingIntent)   Equivalent to calling setOnClickListener (android.view.View.OnClickListener) &mdash; Equivalent to calling setOnClickListener(android.view.View.OnClickListener) to launch the provided PendingIntent. <br /><br />android.widget.RemoteViews.setFloat (int viewId, String methodName, float value) &mdash; Call a method taking one float on a view in the layout for this RemoteViews. <br /><br />android.widget.RemoteViews.setTextViewText (int viewId, CharSequence text) &mdash; Equivalent to calling TextView.setText <br /><br />android.widget.RemoteViews.setImageViewUri (int viewId, Uri uri) &mdash; Equivalent to calling ImageView.setImageURI <br /><br />android.widget.RemoteViews.removeAllViews (int viewId)   Equivalent to calling removeAllViews () &mdash; Equivalent to calling removeAllViews(). <br /><br />android.widget.RemoteViews.setViewVisibility (int viewId, int visibility) &mdash; Equivalent to calling View.setVisibility <br /><br />android.widget.RemoteViews.setProgressBar (int viewId, int max, int progress, boolean indeterminate)   Equivalent to calling ProgressBar.setMax, ProgressBar.setProgress, and &mdash; Equivalent to calling ProgressBar.setMax, ProgressBar.setProgress, and ProgressBar.setIndeterminate If indeterminate is true, then the values for max and progress are ignored. <br /><br />android.widget.RemoteViews.addView (int viewId, RemoteViews nestedView)   Equivalent to calling addView (View) &mdash; Equivalent to calling addView(View) after inflating the given RemoteViews. <br /><br />android.widget.RemoteViews.setTextColor (int viewId, int color)   Equivalent to calling setTextColor (int) &mdash; Equivalent to calling setTextColor(int). <br /><br />android.widget.RemoteViews.setImageViewResource (int viewId, int srcId) &mdash; Equivalent to calling ImageView.setImageResource <br /><br />android.widget.RemoteViews.setInt (int viewId, String methodName, int value) &mdash; Call a method taking one int on a view in the layout for this RemoteViews. <br /><br />android.widget.Scroller.setFinalX (int newX)   Sets the final position  (X) &mdash; Sets the final position (X) for this scroller. <br /><br />android.widget.Scroller.timePassed () &mdash; Returns the time elapsed since the beginning of the scrolling. <br /><br />android.widget.Scroller.getCurrVelocity () &mdash; Returns the current velocity. <br /><br />android.widget.Scroller.getStartY () &mdash; Returns the start Y offset in the scroll. <br /><br />android.widget.Scroller.startScroll (int startX, int startY, int dx, int dy, int duration) &mdash; Start scrolling by providing a starting point, the distance to travel, and the duration of the scroll. <br /><br />"
"android.widget.Scroller.getDuration () &mdash; Returns how long the scroll event will take, in milliseconds. <br /><br />android.widget.ScrollView.smoothScrollBy (int dx, int dy)   Like scrollBy (int, int) &mdash; Like scrollBy(int, int), but scroll smoothly instead of immediately. <br /><br />android.widget.ScrollView.setFillViewport (boolean fillViewport) &mdash; Indicates this ScrollView whether it should stretch its content height to fill the viewport or not. <br /><br />android.widget.SearchView.getQuery () &mdash; Returns the query string currently in the text field. <br /><br />android.widget.SearchView.setQueryRefinementEnabled (boolean enable) &mdash; Specifies if a query refinement button should be displayed alongside each suggestion or if it should depend on the flags set in the individual items retrieved from the suggestions provider. <br /><br />android.widget.SearchView.setSubmitButtonEnabled (boolean enabled) &mdash; Enables showing a submit button when the query is non-empty. <br /><br />android.widget.SearchView.setQuery (CharSequence query, boolean submit) &mdash; Sets a query string in the text field and optionally submits the query as well. <br /><br />android.widget.SearchView.setSearchableInfo (SearchableInfo searchable) &mdash; Sets the SearchableInfo for this SearchView. <br /><br />android.widget.SearchView.isQueryRefinementEnabled () &mdash; Returns whether query refinement is enabled for all items or only specific ones. <br /><br />android.widget.SearchView.isSubmitButtonEnabled () &mdash; Returns whether the submit button is enabled when necessary or never displayed. <br /><br />android.widget.SectionIndexer.getSectionForPosition (int position) &mdash; Given a position within the adapter, returns the index of the corresponding section within the array of section objects. <br /><br />android.widget.SectionIndexer.getPositionForSection (int sectionIndex) &mdash; Given the index of a section within the array of section objects, returns the starting position of that section within the adapter. <br /><br />android.widget.SectionIndexer.getSections () &mdash; Returns an array of objects representing sections of the list. <br /><br />android.widget.ShareActionProvider.setShareIntent (Intent shareIntent) &mdash; Sets an intent with information about the share action. <br /><br />android.widget.ShareActionProvider.setShareHistoryFileName (String shareHistoryFile) &mdash; Sets the file name of a file for persisting the share history which history will be used for ordering share targets. <br /><br />android.widget.Spinner.setAdapter (SpinnerAdapter adapter) &mdash; Sets the Adapter used to provide the data which backs this Spinner. <br /><br />android.widget.TabHost.setup (LocalActivityManager activityGroup)   If you are using setContent (android.content.Intent) &mdash; If you are using setContent(android.content.Intent), this must be called since the activityGroup is needed to launch the local activity. <br /><br />android.widget.TabHost.setup ()   Call setup () before adding tabs if loading TabHost using findViewById () &mdash; Call setup() before adding tabs if loading TabHost using findViewById(). <br /><br />android.widget.TabHost.newTabSpec (String tag) &mdash; Get a new TabHost.TabSpec associated with this tab host. <br /><br />android.widget.TableLayout.setStretchAllColumns (boolean stretchAllColumns) &mdash; Convenience method to mark all columns as stretchable. <br /><br />"
"android.widget.TableLayout.setColumnShrinkable (int columnIndex, boolean isShrinkable) &mdash; Makes the given column shrinkable or not. <br /><br />android.widget.TableLayout.setColumnStretchable (int columnIndex, boolean isStretchable) &mdash; Makes the given column stretchable or not. <br /><br />android.widget.TabWidget.getChildTabViewAt (int index) &mdash; Returns the tab indicator view at the given index. <br /><br />android.widget.TextSwitcher.setText (CharSequence text) &mdash; Sets the text of the next view and switches to the next view. <br /><br />android.widget.TextView.setText (CharSequence text) &mdash; Sets the string value of the TextView. <br /><br />android.widget.TextView.setHintTextColor (ColorStateList colors) &mdash; Sets the color of the hint text. <br /><br />android.widget.TextView.setMovementMethod (MovementMethod movement)   Sets the movement method  (arrow key handler) &mdash; Sets the movement method (arrow key handler) to be used for this TextView. <br /><br />android.widget.TextView.getCompoundDrawablesRelative () &mdash; Returns drawables for the start, top, end, and bottom borders. <br /><br />android.widget.TextView.setLinkTextColor (int color) &mdash; Sets the color of links in the text. <br /><br />android.widget.TextView.setLineSpacing (float add, float mult) &mdash; Sets line spacing for this TextView. <br /><br />android.widget.TextView.getTextColors ()   Gets the text colors for the different states  (normal, selected, focused) &mdash; Gets the text colors for the different states (normal, selected, focused) of the TextView. <br /><br />android.widget.TextView.setAutoLinkMask (int mask) &mdash; Sets the autolink mask of the text. <br /><br />android.widget.TextView.setCompoundDrawablesRelativeWithIntrinsicBounds (Drawable start, Drawable top, Drawable end, Drawable bottom)   Sets the Drawables  (if any) &mdash; Sets the Drawables (if any) to appear to the start of, above, to the end of, and below the text. <br /><br />android.widget.TextView.getSelectionEnd ()   Convenience for getSelectionEnd (CharSequence) &mdash; Convenience for getSelectionEnd(CharSequence). <br /><br />android.widget.TextView.setTextIsSelectable (boolean selectable) &mdash; Sets whether the content of this view is selectable by the user. <br /><br />android.widget.TextView.setShadowLayer (float radius, float dx, float dy, int color) &mdash; Gives the text a shadow of the specified blur radius and color, the specified distance from its drawn position. <br /><br />android.widget.TextView.getCompoundDrawables () &mdash; Returns drawables for the left, top, right, and bottom borders. <br /><br />android.widget.TextView.setLines (int lines) &mdash; Makes the TextView exactly this many lines tall. <br /><br />android.widget.TextView.setHint (int resid) &mdash; Sets the text to be displayed when the text of the TextView is empty, from a resource. <br /><br />android.widget.TextView.getSelectionStart ()   Convenience for getSelectionStart (CharSequence) &mdash; Convenience for getSelectionStart(CharSequence). <br /><br />"
"android.widget.TextView.setSingleLine (boolean singleLine)   If true, sets the properties of this field  (number of lines, horizontally scrolling, transformation method) &mdash; If true, sets the properties of this field (number of lines, horizontally scrolling, transformation method) to be for a single-line input; if false, restores these to the default conditions. <br /><br />android.widget.TextView.setTypeface (Typeface tf) &mdash; Sets the typeface and style in which the text should be displayed. <br /><br />android.widget.TextView.append (CharSequence text, int start, int end) &mdash; Convenience method: Append the specified text slice to the TextView's display buffer, upgrading it to BufferType.EDITABLE if it was not already editable. <br /><br />android.widget.TextView.setCompoundDrawablePadding (int pad) &mdash; Sets the size of the padding between the compound drawables and the text. <br /><br />android.widget.TextView.getTotalPaddingLeft () &mdash; Returns the total left padding of the view, including the left Drawable if any. <br /><br />android.widget.TextView.setError (CharSequence error, Drawable icon) &mdash; Sets the right-hand compound drawable of the TextView to the specified icon and sets an error message that will be displayed in a popup when the TextView has focus. <br /><br />android.widget.TextView.setCompoundDrawablesWithIntrinsicBounds (Drawable left, Drawable top, Drawable right, Drawable bottom)   Sets the Drawables  (if any) &mdash; Sets the Drawables (if any) to appear to the left of, above, to the right of, and below the text. <br /><br />android.widget.TextView.removeTextChangedListener (TextWatcher watcher) &mdash; Removes the specified TextWatcher from the list of those whose methods are called whenever this TextView's text changes. <br /><br />android.widget.TextView.getTotalPaddingTop () &mdash; Returns the total top padding of the view, including the top Drawable if any, the extra space to keep more than maxLines from showing, and the vertical offset for gravity, if any. <br /><br />android.widget.TextView.setTypeface (Typeface tf, int style) &mdash; Sets the typeface and style in which the text should be displayed, and turns on the fake bold and italic bits in the Paint if the Typeface that you provided does not have all the bits in the style that you specified. <br /><br />android.widget.TextView.getGravity () &mdash; Returns the horizontal and vertical alignment of this TextView. <br /><br />android.widget.TextView.setIncludeFontPadding (boolean includepad) &mdash; Set whether the TextView includes extra top and bottom padding to make room for accents that go above the normal ascent and descent. <br /><br />android.widget.TextView.setText (char[] text, int start, int len) &mdash; Sets the TextView to display the specified slice of the specified char array. <br /><br />android.widget.TextView.setFilters (InputFilter[] filters) &mdash; Sets the list of input filters that will be used if the buffer is Editable. <br /><br />android.widget.TextView.setHighlightColor (int color) &mdash; Sets the color used to display the selection highlight. <br /><br />android.widget.TextView.setTextAppearance (Context context, int resid) &mdash; Sets the text color, size, style, hint color, and highlight color from the specified TextAppearance resource. <br /><br />android.widget.TextView.setTransformationMethod (TransformationMethod method) &mdash; Sets the transformation that is applied to the text that this TextView is displaying. <br /><br />android.widget.TextView.setCursorVisible (boolean visible) &mdash; Set whether the cursor is visible. <br /><br />android.widget.TextView.setHeight (int pixels) &mdash; Makes the TextView exactly this many pixels tall. <br /><br />android.widget.TextView.addTextChangedListener (TextWatcher watcher) &mdash; Adds a TextWatcher to the list of those whose methods are called whenever this TextView's text changes. <br /><br />"
"android.widget.TextView.length () &mdash; Returns the length, in characters, of the text managed by this TextView <br /><br />android.widget.TextView.setMaxHeight (int maxHeight) &mdash; Makes the TextView at most this many pixels tall. <br /><br />android.widget.TextView.setMaxLines (int maxlines) &mdash; Makes the TextView at most this many lines tall. <br /><br />android.widget.TextView.setLinksClickable (boolean whether)   Sets whether the movement method will automatically be set to LinkMovementMethod if setAutoLinkMask (int) has been set to nonzero and links are detected in setText (char[], int, int) &mdash; Sets whether the movement method will automatically be set to LinkMovementMethod if setAutoLinkMask(int) has been set to nonzero and links are detected in setText(char[], int, int). <br /><br />android.widget.TextView.setHintTextColor (int color)   Sets the color of the hint text for all the states  (disabled, focussed, selected...) &mdash; Sets the color of the hint text for all the states (disabled, focussed, selected...) of this TextView. <br /><br />android.widget.TextView.setMinWidth (int minpixels) &mdash; Makes the TextView at least this many pixels wide <br /><br />android.widget.TextView.append (CharSequence text) &mdash; Convenience method: Append the specified text to the TextView's display buffer, upgrading it to BufferType.EDITABLE if it was not already editable. <br /><br />android.widget.TextView.setText (CharSequence text, TextView.BufferType type)   Sets the text that this TextView is to display  (see setText (CharSequence)) &mdash; Sets the text that this TextView is to display (see setText(CharSequence)) and also sets whether it is stored in a styleable/spannable buffer and whether it is editable. <br /><br />android.widget.TextView.setMinHeight (int minHeight) &mdash; Makes the TextView at least this many pixels tall. <br /><br />android.widget.TextView.setAllCaps (boolean allCaps) &mdash; Sets the properties of this field to transform input to ALL CAPS display. <br /><br />android.widget.TextView.setHint (CharSequence hint) &mdash; Sets the text to be displayed when the text of the TextView is empty. <br /><br />android.widget.TextView.setTextSize (float size) &mdash; Set the default text size to the given value, interpreted as 'scaled pixel' units. <br /><br />android.widget.TextView.getInputType () &mdash; Get the type of the editable content. <br /><br />android.widget.TextView.setMaxWidth (int maxpixels) &mdash; Makes the TextView at most this many pixels wide <br /><br />android.widget.TextView.getImeOptions () &mdash; Get the type of the IME editor. <br /><br />android.widget.TextView.setHorizontallyScrolling (boolean whether) &mdash; Sets whether the text should be allowed to be wider than the View is. <br /><br />android.widget.TextView.setGravity (int gravity) &mdash; Sets the horizontal alignment of the text and the vertical gravity that will be used when there is extra space in the TextView beyond what is required for the text itself. <br /><br />android.widget.TextView.setError (CharSequence error) &mdash; Sets the right-hand compound drawable of the TextView to the 'error' icon and sets an error message that will be displayed in a popup when the TextView has focus. <br /><br />android.widget.TextView.setPaintFlags (int flags) &mdash; Sets flags on the Paint being used to display the text and reflows the text if they are different from the old flags. <br /><br />android.widget.TextView.setTextColor (ColorStateList colors) &mdash; Sets the text color. <br /><br />"
"android.widget.TextView.setTextColor (int color)   Sets the text color for all the states  (normal, selected, focused) &mdash; Sets the text color for all the states (normal, selected, focused) to be this color. <br /><br />android.widget.TextView.setInputType (int type) &mdash; Set the type of the content with a constant as defined for inputType. <br /><br />android.widget.TextView.getLineCount () &mdash; Return the number of lines of text, or 0 if the internal Layout has not been built. <br /><br />android.widget.TextView.setSingleLine ()   Sets the properties of this field  (lines, horizontally scrolling, transformation method) &mdash; Sets the properties of this field (lines, horizontally scrolling, transformation method) to be for a single-line input. <br /><br />android.widget.TextView.setWidth (int pixels) &mdash; Makes the TextView exactly this many pixels wide. <br /><br />android.widget.TextView.getCompoundPaddingLeft () &mdash; Returns the left padding of the view, plus space for the left Drawable if any. <br /><br />android.widget.TextView.getCurrentTextColor () &mdash; Return the current color selected for normal text. <br /><br />android.widget.TimePicker.setCurrentMinute (Integer currentMinute)   Set the current minute  (0-59) &mdash; Set the current minute (0-59). <br /><br />android.widget.TimePicker.setCurrentHour (Integer currentHour) &mdash; Set the current hour. <br /><br />android.widget.Toast.setGravity (int gravity, int xOffset, int yOffset) &mdash; Set the location at which the notification should appear on the screen. <br /><br />android.widget.Toast.setText (int resId)   Update the text in a Toast that was previously created using one of the makeText () &mdash; Update the text in a Toast that was previously created using one of the makeText() methods. <br /><br />android.widget.Toast.getView () &mdash; Return the view. <br /><br />android.widget.Toast.getYOffset () &mdash; Return the Y offset in pixels to apply to the gravity's location. <br /><br />android.widget.Toast.setMargin (float horizontalMargin, float verticalMargin) &mdash; Set the margins of the view. <br /><br />android.widget.Toast.setDuration (int duration) &mdash; Set how long to show the view for. <br /><br />android.widget.Toast.setView (View view) &mdash; Set the view to show. <br /><br />android.widget.Toast.makeText (Context context, CharSequence text, int duration) &mdash; Make a standard toast that just contains a text view. <br /><br />android.widget.Toast.show () &mdash; Show the view for the specified duration. <br /><br />android.widget.Toast.getHorizontalMargin () &mdash; Return the horizontal margin. <br /><br />android.widget.Toast.getGravity () &mdash; Get the location at which the notification should appear on the screen. <br /><br />"
"android.widget.Toast.cancel () &mdash; Close the view if it's showing, or don't show it if it isn't showing yet. <br /><br />android.widget.Toast.getXOffset () &mdash; Return the X offset in pixels to apply to the gravity's location. <br /><br />android.widget.Toast.getVerticalMargin () &mdash; Return the vertical margin. <br /><br />android.widget.Toast.makeText (Context context, int resId, int duration) &mdash; Make a standard toast that just contains a text view with the text from a resource. <br /><br />android.widget.Toast.getDuration () &mdash; Return the duration. <br /><br />android.widget.ToggleButton.setTextOff (CharSequence textOff) &mdash; Sets the text for when the button is not in the checked state. <br /><br />android.widget.VideoView.setVideoPath (String path) &mdash; Sets video path. <br /><br />android.widget.VideoView.setVideoURI (Uri uri) &mdash; Sets video URI. <br /><br />android.widget.VideoView.setVideoURI (Uri uri, Map< String,  String> headers) &mdash; Sets video URI using specific headers. <br /><br />android.widget.ViewAnimator.getCurrentView () &mdash; Returns the View corresponding to the currently displayed child. <br /><br />android.widget.ViewAnimator.setDisplayedChild (int whichChild) &mdash; Sets which child view will be displayed. <br /><br />android.widget.ViewFlipper.stopFlipping () &mdash; No more flips <br /><br />android.widget.ViewSwitcher.reset () &mdash; Reset the ViewSwitcher to hide all of the existing views and to make it think that the first time animation has not yet played. <br /><br />android.widget.ViewSwitcher.getNextView () &mdash; Returns the next view to be displayed. <br /><br />android.widget.ZoomButtonsController.setZoomOutEnabled (boolean enabled) &mdash; Whether to enable the zoom out control. <br /><br />android.widget.ZoomButtonsController.setZoomInEnabled (boolean enabled) &mdash; Whether to enable the zoom in control. <br /><br />android.widget.ZoomButtonsController.setVisible (boolean visible) &mdash; Sets whether the zoom controls should be visible to the user. <br /><br />android.widget.ZoomButtonsController.getContainer () &mdash; Gets the container that is the parent of the zoom controls. <br /><br />"
