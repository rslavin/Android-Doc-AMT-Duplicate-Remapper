"android.accessibilityservice.AccessibilityService.performGlobalAction (int action) "," Performs a global action. <br /><br />"
"android.accessibilityservice.AccessibilityService.String () "," Return the handle to a system-level service by name. <br /><br />"
"android.accessibilityservice.AccessibilityService.getWindows () "," Gets the windows on the screen. <br /><br />"
"android.accessibilityservice.AccessibilityService.onInterrupt () "," Callback for interrupting the accessibility feedback. <br /><br />"
"android.accessibilityservice.AccessibilityService.AccessibilityService () "," Gets the an AccessibilityServiceInfo describing this AccessibilityService. <br /><br />"
"android.accessibilityservice.AccessibilityService.AccessibilityEvent () "," Callback for AccessibilityEvents. <br /><br />"
"android.accessibilityservice.AccessibilityService.getRootInActiveWindow () "," Gets the root node in the currently active window if this service can retrieve window content. <br /><br />"
"android.accessibilityservice.AccessibilityService.AccessibilityServiceInfo () "," Sets the AccessibilityServiceInfo that describes this service. <br /><br />"
"android.accessibilityservice.AccessibilityService.Intent () "," Implement to return the implementation of the internal accessibility service interface. <br /><br />"
"android.accessibilityservice.AccessibilityService.findFocus (int focus) "," Find the view that has the specified focus type. <br /><br />"
"android.accessibilityservice.AccessibilityServiceInfo.getCapabilities () () "," This method was deprecated in API level 18. Use getCapabilities(). <br /><br />"
"android.accessibilityservice.AccessibilityServiceInfo.PackageManager () "," The localized description of the accessibility service. <br /><br />"
"android.accessibilityservice.AccessibilityServiceInfo.feedbackTypeToString (int feedbackType) "," Returns the string representation of a feedback type. <br /><br />"
"android.accessibilityservice.AccessibilityServiceInfo.getSettingsActivityName () "," The settings activity name. <br /><br />"
"android.accessibilityservice.AccessibilityServiceInfo.ResolveInfo () "," The service ResolveInfo. <br /><br />"
"android.accessibilityservice.AccessibilityServiceInfo.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.accessibilityservice.AccessibilityServiceInfo.getCapabilities () "," Returns the bit mask of capabilities this accessibility service has such as being able to retrieve the active window content, etc. <br /><br />"
"android.accessibilityservice.AccessibilityServiceInfo.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.accessibilityservice.AccessibilityServiceInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.accessibilityservice.AccessibilityServiceInfo.flagToString (int flag) "," Returns the string representation of a flag. <br /><br />"
"android.accessibilityservice.AccessibilityServiceInfo.loadDescription (PackageManager) () "," This method was deprecated in API level 16. Use loadDescription(PackageManager). <br /><br />"
"android.accessibilityservice.AccessibilityServiceInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.accessibilityservice.AccessibilityServiceInfo.getId () "," The accessibility service id. <br /><br />"
"android.accessibilityservice.AccessibilityServiceInfo.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.accessibilityservice.AccessibilityServiceInfo.capabilityToString (int capability) "," Returns the string representation of a capability. <br /><br />"
"android.accounts.AbstractAccountAuthenticator.String () "," Ask the authenticator for a localized label for the given authTokenType. <br /><br />"
"android.accounts.AbstractAccountAuthenticator.getIBinder () "," no description <br /><br />"
"android.accounts.AbstractAccountAuthenticator.Account () "," Checks if the removal of this account is allowed. <br /><br />"
"android.accounts.AbstractAccountAuthenticator.String[] () "," Checks if the account supports all the specified authenticator specific features. <br /><br />"
"android.accounts.AbstractAccountAuthenticator.Bundle () "," Update the locally stored credentials for an account. <br /><br />"
"android.accounts.Account.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.accounts.Account.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.accounts.Account.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.accounts.Account.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.accounts.Account.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.accounts.AccountAuthenticatorActivity.finish () "," Sends the result or a Constants.ERROR_CODE_CANCELED error if a result isn't present. <br /><br />"
"android.accounts.AccountAuthenticatorActivity.Bundle () "," Set the result that is to be sent as the result of the request that caused this Activity to be launched. <br /><br />"
"android.accounts.AccountAuthenticatorResponse.String () "," no description <br /><br />"
"android.accounts.AccountAuthenticatorResponse.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.accounts.AccountAuthenticatorResponse.Bundle () "," no description <br /><br />"
"android.accounts.AccountAuthenticatorResponse.onRequestContinued () "," no description <br /><br />"
"android.accounts.AccountAuthenticatorResponse.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.accounts.AccountManager.String () "," Sets one userdata key for an account. <br /><br />"
"android.accounts.AccountManager.Context () "," Gets an AccountManager instance associated with a Context. <br /><br />"
"android.accounts.AccountManager.removeAccount (Account, Activity, AccountManagerCallback, Handler) () "," This method is deprecated. use removeAccount(Account, Activity, AccountManagerCallback, Handler) instead <br /><br />"
"android.accounts.AccountManager.Handler () "," Asks the user to enter a new password for an account, updating the saved credentials for the account. <br /><br />"
"android.accounts.AccountManager.getAuthenticatorTypes () "," Lists the currently registered authenticators. <br /><br />"
"android.accounts.AccountManager.addOnAccountsUpdatedListener (OnAccountsUpdateListener, Handler, boolean) () "," Removes an OnAccountsUpdateListener previously registered with addOnAccountsUpdatedListener(OnAccountsUpdateListener, Handler, boolean). <br /><br />"
"android.accounts.AccountManager.
     , Handler)
     () "," This convenience helper combines the functionality of getAccountsByTypeAndFeatures(String, String[], AccountManagerCallback  , Handler) , getAuthToken(Account, String, Bundle, Activity, AccountManagerCallback  , Handler) , and addAccount(String, String, String[], Bundle, Activity, AccountManagerCallback  , Handler) . <br /><br />"
"android.accounts.AccountManager.Account () "," Rename the specified Account. <br /><br />"
"android.accounts.AccountManager.getAuthToken (Account, String, boolean, AccountManagerCallback, Handler) () "," This convenience helper synchronously gets an auth token with getAuthToken(Account, String, boolean, AccountManagerCallback, Handler). <br /><br />"
"android.accounts.AccountManager.Activity () "," Returns an intent to an Activity that prompts the user to choose from a list of accounts. <br /><br />"
"android.accounts.AccountManager.Bundle () "," Adds an account directly to the AccountManager. <br /><br />"
"android.accounts.AccountManager.getAuthToken (Account, String, android.os.Bundle, boolean, AccountManagerCallback, android.os.Handler) () "," This method was deprecated in API level 14. use getAuthToken(Account, String, android.os.Bundle, boolean, AccountManagerCallback, android.os.Handler) instead <br /><br />"
"android.accounts.AccountManager.AccountManager () "," Adds an OnAccountsUpdateListener to this instance of the AccountManager. <br /><br />"
"android.accounts.AccountManager.getAccounts () "," Lists all accounts of any type registered on the device. <br /><br />"
"android.accounts.AccountManagerCallback&lt;V&gt;.AccountManagerFuture () "," no description <br /><br />"
"android.accounts.AccountManagerFuture&lt;V&gt;.isDone () "," Returns true if this task completed. <br /><br />"
"android.accounts.AccountManagerFuture&lt;V&gt;.cancel (boolean mayInterruptIfRunning) "," Attempts to cancel execution of this task. <br /><br />"
"android.accounts.AccountManagerFuture&lt;V&gt;.AccountManagerFuture () "," Accessor for the future result the AccountManagerFuture represents. <br /><br />"
"android.accounts.AccountManagerFuture&lt;V&gt;.isCancelled () "," Returns true if this task was cancelled before it completed normally. <br /><br />"
"android.accounts.AuthenticatorDescription.String () "," A factory method for creating an AuthenticatorDescription that can be used as a key to identify the authenticator by its type. <br /><br />"
"android.accounts.AuthenticatorDescription.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.accounts.AuthenticatorDescription.hashCode () "," Returns the hashcode of the type only. <br /><br />"
"android.accounts.AuthenticatorDescription.Object () "," Compares the type only, suitable for key comparisons. <br /><br />"
"android.accounts.AuthenticatorDescription.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.accounts.AuthenticatorDescription.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.accounts.OnAccountsUpdateListener.Account[] () "," This invoked when the AccountManager starts up and whenever the account set changes. <br /><br />"
"android.animation.Animator.AnimatorListener.Animator () "," Notifies the start of the animation. <br /><br />"
"android.animation.Animator.AnimatorPauseListener.Animator () "," Notifies that the animation was resumed, after being previously paused. <br /><br />"
"android.animation.Animator.Animator.AnimatorPauseListener () "," Removes a pause listener from the set listening to this animation. <br /><br />"
"android.animation.Animator.isStarted () "," Returns whether this Animator has been started and not yet ended. <br /><br />"
"android.animation.Animator.start () (long startDelay) "," The amount of time, in milliseconds, to delay processing the animation after start() is called. <br /><br />"
"android.animation.Animator.setDuration (long duration) "," Sets the duration of the animation. <br /><br />"
"android.animation.Animator.end () "," Ends the animation. <br /><br />"
"android.animation.Animator.start () "," Starts this animation. <br /><br />"
"android.animation.Animator.Object () "," Sets the target object whose property will be animated by this animation. <br /><br />"
"android.animation.Animator.isPaused () "," Returns whether this animator is currently in a paused state. <br /><br />"
"android.animation.Animator.Animator.AnimatorListener () "," Removes a listener from the set listening to this animation. <br /><br />"
"android.animation.Animator.TimeInterpolator () "," The time interpolator used in calculating the elapsed fraction of the animation. <br /><br />"
"android.animation.Animator.isRunning () "," Returns whether this Animator is currently running (having been started and gone past any initial startDelay period and not yet ended). <br /><br />"
"android.animation.Animator.setupStartValues () "," This method tells the object to use appropriate information to extract starting values for the animation. <br /><br />"
"android.animation.Animator.resume () "," Resumes a paused animation, causing the animator to pick up where it left off when it was paused. <br /><br />"
"android.animation.Animator.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.animation.Animator.getInterpolator () "," Returns the timing interpolator that this animation uses. <br /><br />"
"android.animation.Animator.pauseListeners () "," Removes all listeners and pauseListeners from this object. <br /><br />"
"android.animation.Animator.cancel () "," Cancels the animation. <br /><br />"
"android.animation.Animator.start () () "," The amount of time, in milliseconds, to delay processing the animation after start() is called. <br /><br />"
"android.animation.Animator.pause () "," Pauses a running animation. <br /><br />"
"android.animation.Animator.setupEndValues () "," This method tells the object to use appropriate information to extract ending values for the animation. <br /><br />"
"android.animation.Animator.getDuration () "," Gets the duration of the animation. <br /><br />"
"android.animation.AnimatorInflater.Context () "," no description <br /><br />"
"android.animation.AnimatorInflater.Animator () "," Loads an Animator object from a resource <br /><br />"
"android.animation.AnimatorListenerAdapter.Animator () "," Notifies the start of the animation. <br /><br />"
"android.animation.AnimatorSet.Builder.play (Animator) () "," Sets up the given animation to play at the same time as the animation supplied in the play(Animator) call that created this Builder object. <br /><br />"
"android.animation.AnimatorSet.Builder.play (Animator) (long delay) "," Sets up the animation supplied in the play(Animator) call that created this Builder object to play when the given amount of time elapses. <br /><br />"
"android.animation.AnimatorSet.isStarted () "," Returns whether this Animator has been started and not yet ended. <br /><br />"
"android.animation.AnimatorSet.start () (long startDelay) "," The amount of time, in milliseconds, to delay starting the animation after start() is called. <br /><br />"
"android.animation.AnimatorSet.child animations () "," Sets the TimeInterpolator for all current child animations of this AnimatorSet. <br /><br />"
"android.animation.AnimatorSet.setDuration (long duration) "," Sets the length of each of the current child animations of this AnimatorSet. <br /><br />"
"android.animation.AnimatorSet.getChildAnimations () "," Returns the current list of child Animator objects controlled by this AnimatorSet. <br /><br />"
"android.animation.AnimatorSet.ObjectAnimator () "," Sets the target object for all current child animations of this AnimatorSet that take targets ( ObjectAnimator and AnimatorSet). <br /><br />"
"android.animation.AnimatorSet.Animator () "," Sets up this AnimatorSet to play all of the supplied animations at the same time. <br /><br />"
"android.animation.AnimatorSet.end () "," Ends the animation. Note that ending a AnimatorSet also ends all of the animations that it is responsible for. <br /><br />"
"android.animation.AnimatorSet.start () "," Starts this animation. Starting this AnimatorSet will, in turn, start the animations for which it is responsible. <br /><br />"
"android.animation.AnimatorSet.isRunning () "," Returns true if any of the child animations of this AnimatorSet have been started and have not yet ended. <br /><br />"
"android.animation.AnimatorSet.setupStartValues () "," This method tells the object to use appropriate information to extract starting values for the animation. <br /><br />"
"android.animation.AnimatorSet.resume () "," Resumes a paused animation, causing the animator to pick up where it left off when it was paused. <br /><br />"
"android.animation.AnimatorSet.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.animation.AnimatorSet.getInterpolator () "," Returns the timing interpolator that this animation uses. <br /><br />"
"android.animation.AnimatorSet.cancel () "," Cancels the animation. Note that canceling a AnimatorSet also cancels all of the animations that it is responsible for. <br /><br />"
"android.animation.AnimatorSet.Animator... () "," Sets up this AnimatorSet to play all of the supplied animations at the same time. <br /><br />"
"android.animation.AnimatorSet.start () () "," The amount of time, in milliseconds, to delay starting the animation after start() is called. <br /><br />"
"android.animation.AnimatorSet.pause () "," Pauses a running animation. <br /><br />"
"android.animation.AnimatorSet.setupEndValues () "," This method tells the object to use appropriate information to extract ending values for the animation. <br /><br />"
"android.animation.AnimatorSet.getDuration () "," Gets the length of each of the child animations of this AnimatorSet. <br /><br />"
"android.animation.ArgbEvaluator.Object () "," This function returns the calculated in-between value for a color given integers that represent the start and end values in the four bytes of the 32-bit int. <br /><br />"
"android.animation.BidirectionalTypeConverter&lt;T,&nbsp;V&gt;.invert () "," Returns the inverse of this converter, where the from and to classes are reversed. <br /><br />"
"android.animation.BidirectionalTypeConverter&lt;T,&nbsp;V&gt;.convertBack (V value) "," Does a conversion from the target type back to the source type. <br /><br />"
"android.animation.FloatArrayEvaluator.evaluate (float fraction, float[] startValue, float[] endValue) "," Interpolates the value at each index by the fraction. <br /><br />"
"android.animation.FloatEvaluator.Number () "," This function returns the result of linearly interpolating the start and end values, with fraction representing the proportion between the start and end values. <br /><br />"
"android.animation.IntArrayEvaluator.evaluate (float fraction, int[] startValue, int[] endValue) "," Interpolates the value at each index by the fraction. <br /><br />"
"android.animation.IntEvaluator.Integer () "," This function returns the result of linearly interpolating the start and end values, with fraction representing the proportion between the start and end values. <br /><br />"
"android.animation.Keyframe.ofObject (float fraction) "," Constructs a Keyframe object with the given time. <br /><br />"
"android.animation.Keyframe.getValue () "," Gets the value for this Keyframe. <br /><br />"
"android.animation.Keyframe.ofInt (float fraction) "," Constructs a Keyframe object with the given time. <br /><br />"
"android.animation.Keyframe.ofInt (float fraction, int value) "," Constructs a Keyframe object with the given time and value. <br /><br />"
"android.animation.Keyframe.getFraction () "," Gets the time for this keyframe, as a fraction of the overall animation duration. <br /><br />"
"android.animation.Keyframe.TimeInterpolator () "," Sets the optional interpolator for this Keyframe. <br /><br />"
"android.animation.Keyframe.ofFloat (float fraction) "," Constructs a Keyframe object with the given time. <br /><br />"
"android.animation.Keyframe.hasValue () "," Indicates whether this keyframe has a valid value. <br /><br />"
"android.animation.Keyframe.getType () "," Gets the type of keyframe. <br /><br />"
"android.animation.Keyframe.getInterpolator () "," Gets the optional interpolator for this Keyframe. <br /><br />"
"android.animation.Keyframe.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.animation.Keyframe.Object () "," Sets the value for this Keyframe. <br /><br />"
"android.animation.Keyframe.setFraction (float fraction) "," Sets the time for this keyframe, as a fraction of the overall animation duration. <br /><br />"
"android.animation.Keyframe.ofFloat (float fraction, float value) "," Constructs a Keyframe object with the given time and value. <br /><br />"
"android.animation.LayoutTransition.setDuration (long duration) "," Sets the duration to be used by all animations of this transition object. <br /><br />"
"android.animation.LayoutTransition.setAnimateParentHierarchy (boolean animateParentHierarchy) "," This flag controls whether CHANGE_APPEARING or CHANGE_DISAPPEARING animations will cause the default changing animation to be run on the parent hierarchy as well. <br /><br />"
"android.animation.LayoutTransition.Animator () "," Sets the animation used during one of the transition types that may run. <br /><br />"
"android.animation.LayoutTransition.LayoutTransition.TransitionListener () "," Remove a listener for layout changes. <br /><br />"
"android.animation.LayoutTransition.getStartDelay (int transitionType) "," Gets the start delay on one of the animation objects used by this transition. <br /><br />"
"android.animation.LayoutTransition.getTransitionListeners () "," Gets the current list of listeners for layout changes. <br /><br />"
"android.animation.LayoutTransition.isChangingLayout () "," Returns true if animations are running which animate layout-related properties. <br /><br />"
"android.animation.LayoutTransition.getAnimator (int transitionType) "," Gets the animation used during one of the transition types that may run. <br /><br />"
"android.animation.LayoutTransition.setStartDelay (int transitionType, long delay) "," Sets the start delay on one of the animation objects used by this transition. <br /><br />"
"android.animation.LayoutTransition.isTransitionTypeEnabled (int transitionType) "," Returns whether the specified transitionType is enabled for this LayoutTransition object. <br /><br />"
"android.animation.LayoutTransition.View () "," This method is called by ViewGroup when a child view is about to be made visible in the container. <br /><br />"
"android.animation.LayoutTransition.setDuration (int transitionType, long duration) "," Sets the duration on one of the animation objects used by this transition. <br /><br />"
"android.animation.LayoutTransition.TimeInterpolator () "," Sets the interpolator on one of the animation objects used by this transition. <br /><br />"
"android.animation.LayoutTransition.isRunning () "," Returns true if any of the animations in this transition are currently running. <br /><br />"
"android.animation.LayoutTransition.disableTransitionType (int transitionType) "," Disables the specified transitionType for this LayoutTransition object. <br /><br />"
"android.animation.LayoutTransition.showChild (android.view.ViewGroup, android.view.View, int) () "," This method was deprecated in API level 16. Use showChild(android.view.ViewGroup, android.view.View, int). <br /><br />"
"android.animation.LayoutTransition.enableTransitionType (int transitionType) "," Enables the specified transitionType for this LayoutTransition object. <br /><br />"
"android.animation.LayoutTransition.getInterpolator (int transitionType) "," Gets the interpolator on one of the animation objects used by this transition. <br /><br />"
"android.animation.LayoutTransition.setStagger (int transitionType, long duration) "," Sets the length of time to delay between starting each animation during one of the change animations. <br /><br />"
"android.animation.LayoutTransition.getDuration (int transitionType) "," Gets the duration on one of the animation objects used by this transition. <br /><br />"
"android.animation.LayoutTransition.getStagger (int transitionType) "," Gets the length of time to delay between starting each animation during one of the change animations. <br /><br />"
"android.animation.LayoutTransition.hideChild (android.view.ViewGroup, android.view.View, int) () "," This method was deprecated in API level 16. Use hideChild(android.view.ViewGroup, android.view.View, int). <br /><br />"
"android.animation.LayoutTransition.TransitionListener.View () "," This event is sent to listeners when any type of transition animation begins. <br /><br />"
"android.animation.ObjectAnimator.String () "," Sets the name of the property that will be animated. <br /><br />"
"android.animation.ObjectAnimator.Property () "," Sets the property that will be animated. <br /><br />"
"android.animation.ObjectAnimator.setDuration (long duration) "," Sets the length of the animation. <br /><br />"
"android.animation.ObjectAnimator.Path () "," Constructs and returns an ObjectAnimator that animates a property along a Path. <br /><br />"
"android.animation.ObjectAnimator.Float () "," Constructs and returns an ObjectAnimator that animates between float values. <br /><br />"
"android.animation.ObjectAnimator.setAutoCancel (boolean cancel) "," autoCancel controls whether an ObjectAnimator will be canceled automatically when any other ObjectAnimator with the same target and properties is started. <br /><br />"
"android.animation.ObjectAnimator.start () "," Starts this animation. <br /><br />"
"android.animation.ObjectAnimator.Object... () "," Sets the values to animate between for this animation. <br /><br />"
"android.animation.ObjectAnimator.Object () "," Sets the target object whose property will be animated by this animation. <br /><br />"
"android.animation.ObjectAnimator.setIntValues (int... values) "," Sets int values that will be animated between. <br /><br />"
"android.animation.ObjectAnimator.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.animation.ObjectAnimator.Integer () "," Constructs and returns an ObjectAnimator that animates between int values. <br /><br />"
"android.animation.ObjectAnimator.TypeEvaluator () "," Constructs and returns an ObjectAnimator that animates between Object values. <br /><br />"
"android.animation.ObjectAnimator.PropertyValuesHolder... () "," Constructs and returns an ObjectAnimator that animates between the sets of values specified in PropertyValueHolder objects. <br /><br />"
"android.animation.ObjectAnimator.setupStartValues () "," This method tells the object to use appropriate information to extract starting values for the animation. <br /><br />"
"android.animation.ObjectAnimator.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.animation.ObjectAnimator.setFloatValues (float... values) "," Sets float values that will be animated between. <br /><br />"
"android.animation.ObjectAnimator.getPropertyName () "," Gets the name of the property that will be animated. <br /><br />"
"android.animation.ObjectAnimator.getTarget () "," The target object whose property will be animated by this animation <br /><br />"
"android.animation.ObjectAnimator.setupEndValues () "," This method tells the object to use appropriate information to extract ending values for the animation. <br /><br />"
"android.animation.PointFEvaluator.PointF () "," This function returns the result of linearly interpolating the start and end PointF values, with fraction representing the proportion between the start and end values. <br /><br />"
"android.animation.PropertyValuesHolder.TypeEvaluator () "," The TypeEvaluator will be automatically determined based on the type of values supplied to PropertyValuesHolder. <br /><br />"
"android.animation.PropertyValuesHolder.Integer () "," Constructs and returns a PropertyValuesHolder with a given property and set of int values. <br /><br />"
"android.animation.PropertyValuesHolder.String () "," Sets the name of the property that will be animated. <br /><br />"
"android.animation.PropertyValuesHolder.Property () "," Sets the property that will be animated. <br /><br />"
"android.animation.PropertyValuesHolder.Path () "," Constructs and returns a PropertyValuesHolder with a given property name and a Path along which the values should be animated. <br /><br />"
"android.animation.PropertyValuesHolder.Float () "," Constructs and returns a PropertyValuesHolder with a given property and set of float values. <br /><br />"
"android.animation.PropertyValuesHolder.TypeConverter () "," Sets the converter to convert from the values type to the setter's parameter type. <br /><br />"
"android.animation.PropertyValuesHolder.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.animation.PropertyValuesHolder.setFloatValues (float... values) "," Set the animated values for this object to this set of floats. <br /><br />"
"android.animation.PropertyValuesHolder.getPropertyName () "," Gets the name of the property that will be animated. <br /><br />"
"android.animation.PropertyValuesHolder.Object... () "," Set the animated values for this object to this set of Objects. <br /><br />"
"android.animation.PropertyValuesHolder.Keyframe... () "," Set the animated values for this object to this set of Keyframes. <br /><br />"
"android.animation.PropertyValuesHolder.setIntValues (int... values) "," Set the animated values for this object to this set of ints. <br /><br />"
"android.animation.PropertyValuesHolder.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.animation.RectEvaluator.Rect () "," This function returns the result of linearly interpolating the start and end Rect values, with fraction representing the proportion between the start and end values. <br /><br />"
"android.animation.StateListAnimator.Animator () "," Associates the given animator with the provided drawable state specs so that it will be run when the View's drawable state matches the specs. <br /><br />"
"android.animation.StateListAnimator.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.animation.StateListAnimator.jumpToCurrentState () "," If there is an animation running for a recent state change, ends it. <br /><br />"
"android.animation.TimeAnimator.setCurrentPlayTime (long playTime) "," Sets the position of the animation to the specified point in time. <br /><br />"
"android.animation.TimeAnimator.start () "," Starts this animation. <br /><br />"
"android.animation.TimeAnimator.TimeAnimator.TimeListener () "," Sets a listener that is sent update events throughout the life of an animation. <br /><br />"
"android.animation.TimeAnimator.TimeListener.TimeAnimator () "," Notifies listeners of the occurrence of another frame of the animation, along with information about the elapsed time. <br /><br />"
"android.animation.TimeInterpolator.getInterpolation (float input) "," Maps a value representing the elapsed fraction of an animation to a value that represents the interpolated fraction. <br /><br />"
"android.animation.TypeConverter&lt;T,&nbsp;V&gt;.convert (T value) "," Converts a value from one type to another. <br /><br />"
"android.animation.TypeEvaluator&lt;T&gt;.evaluate (float fraction, T startValue, T endValue) "," This function returns the result of linearly interpolating the start and end values, with fraction representing the proportion between the start and end values. <br /><br />"
"android.animation.ValueAnimator.AnimatorUpdateListener.ValueAnimator () "," Notifies the occurrence of another frame of the animation. <br /><br />"
"android.animation.ValueAnimator.ofFloat (float... values) "," Constructs and returns a ValueAnimator that animates between float values. <br /><br />"
"android.animation.ValueAnimator.start () (long startDelay) "," The amount of time, in milliseconds, to delay starting the animation after start() is called. <br /><br />"
"android.animation.ValueAnimator.setDuration (long duration) "," Sets the length of the animation. <br /><br />"
"android.animation.ValueAnimator.getRepeatCount () "," Defines how many times the animation should repeat. <br /><br />"
"android.animation.ValueAnimator.reverse () "," Plays the ValueAnimator in reverse. <br /><br />"
"android.animation.ValueAnimator.setFrameDelay (long frameDelay) "," The amount of time, in milliseconds, between each frame of the animation. <br /><br />"
"android.animation.ValueAnimator.setCurrentFraction (float fraction) "," Sets the position of the animation to the specified fraction. <br /><br />"
"android.animation.ValueAnimator.getFrameDelay () "," The amount of time, in milliseconds, between each frame of the animation. <br /><br />"
"android.animation.ValueAnimator.Object... () "," Sets the values to animate between for this animation. <br /><br />"
"android.animation.ValueAnimator.setRepeatCount (int value) "," Sets how many times the animation should be repeated. <br /><br />"
"android.animation.ValueAnimator.setIntValues (int... values) "," Sets int values that will be animated between. <br /><br />"
"android.animation.ValueAnimator.ofInt (int... values) "," Constructs and returns a ValueAnimator that animates between int values. <br /><br />"
"android.animation.ValueAnimator.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.animation.ValueAnimator.TypeEvaluator () "," The type evaluator to be used when calculating the animated values of this animation. <br /><br />"
"android.animation.ValueAnimator.setCurrentPlayTime (long playTime) "," Sets the position of the animation to the specified point in time. <br /><br />"
"android.animation.ValueAnimator.TimeInterpolator () "," The time interpolator used in calculating the elapsed fraction of this animation. <br /><br />"
"android.animation.ValueAnimator.isRunning () "," Returns whether this Animator is currently running (having been started and gone past any initial startDelay period and not yet ended). <br /><br />"
"android.animation.ValueAnimator.PropertyValuesHolder... () "," Sets the values, per property, being animated between. <br /><br />"
"android.animation.ValueAnimator.resume () "," Resumes a paused animation, causing the animator to pick up where it left off when it was paused. <br /><br />"
"android.animation.ValueAnimator.setFloatValues (float... values) "," Sets float values that will be animated between. <br /><br />"
"android.animation.ValueAnimator.cancel () "," Cancels the animation. <br /><br />"
"android.animation.ValueAnimator.getAnimatedValue () "," The most recent value calculated by this ValueAnimator when there is just one property being animated. <br /><br />"
"android.animation.ValueAnimator.getDuration () "," Gets the length of the animation. <br /><br />"
"android.animation.ValueAnimator.isStarted () "," Returns whether this Animator has been started and not yet ended. <br /><br />"
"android.animation.ValueAnimator.String () "," The most recent value calculated by this ValueAnimator for propertyName. <br /><br />"
"android.animation.ValueAnimator.getRepeatMode () "," Defines what this animation should do when it reaches the end. <br /><br />"
"android.animation.ValueAnimator.end () "," Ends the animation. <br /><br />"
"android.animation.ValueAnimator.ofArgb (int... values) "," Constructs and returns a ValueAnimator that animates between color values. <br /><br />"
"android.animation.ValueAnimator.start () "," Starts this animation. <br /><br />"
"android.animation.ValueAnimator.getValues () "," Returns the values that this ValueAnimator animates between. <br /><br />"
"android.animation.ValueAnimator.getInterpolator () "," Returns the timing interpolator that this ValueAnimator uses. <br /><br />"
"android.animation.ValueAnimator.getAnimatedFraction () "," Returns the current animation fraction, which is the elapsed/interpolated fraction used in the most recent frame update on the animation. <br /><br />"
"android.animation.ValueAnimator.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.animation.ValueAnimator.getCurrentPlayTime () "," Gets the current position of the animation in time, which is equal to the current time minus the time that the animation started. <br /><br />"
"android.animation.ValueAnimator.setRepeatMode (int value) "," Defines what this animation should do when it reaches the end. <br /><br />"
"android.animation.ValueAnimator.start () () "," The amount of time, in milliseconds, to delay starting the animation after start() is called. <br /><br />"
"android.animation.ValueAnimator.pause () "," Pauses a running animation. <br /><br />"
"android.animation.ValueAnimator.ValueAnimator.AnimatorUpdateListener () "," Removes a listener from the set listening to frame updates for this animation. <br /><br />"
"android.animation.ValueAnimator.removeAllUpdateListeners () "," Removes all listeners from the set listening to frame updates for this animation. <br /><br />"
"android.app.ActionBar.setDisplayHomeAsUpEnabled (boolean showHomeAsUp) "," Set whether home should be displayed as an 'up' affordance. <br /><br />"
"android.app.ActionBar.DISPLAY_HOME_AS_UP (int resId) "," Set an alternate drawable to display next to the icon/logo/title when DISPLAY_HOME_AS_UP is enabled. <br /><br />"
"android.app.ActionBar.setDisplayOptions (int options, int mask) "," Set selected display options. <br /><br />"
"android.app.ActionBar.setSubtitle (int resId) "," Set the action bar's subtitle. <br /><br />"
"android.app.ActionBar.setElevation (float elevation) "," Set the Z-axis elevation of the action bar in pixels. <br /><br />"
"android.app.ActionBar.setTitle (int resId) "," Set the action bar's title. <br /><br />"
"android.app.ActionBar.getSubtitle () "," Returns the current ActionBar subtitle in standard mode. <br /><br />"
"android.app.ActionBar.setDisplayOptions (int options) "," Set display options. <br /><br />"
"android.app.ActionBar.hide () "," Hide the ActionBar if it is currently showing. <br /><br />"
"android.app.ActionBar.common navigation patterns (int position) "," This method was deprecated in API level 21. Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead. <br /><br />"
"android.app.ActionBar.getHeight () "," Retrieve the current height of the ActionBar. <br /><br />"
"android.app.ActionBar.isShowing () "," no description <br /><br />"
"android.app.ActionBar.Drawable () "," Set the ActionBar's stacked background. <br /><br />"
"android.app.ActionBar.setLogo (int resId) "," Set the logo to display in the 'home' section of the action bar. <br /><br />"
"android.app.ActionBar.getCustomView () "," no description <br /><br />"
"android.app.ActionBar.common navigation patterns (int mode) "," This method was deprecated in API level 21. Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead. <br /><br />"
"android.app.ActionBar.setIcon (int resId) "," Set the icon to display in the 'home' section of the action bar. <br /><br />"
"android.app.ActionBar.getDisplayOptions () "," no description <br /><br />"
"android.app.ActionBar.getTitle () "," Returns the current ActionBar title in standard mode. <br /><br />"
"android.app.ActionBar.setDisplayShowCustomEnabled (boolean showCustom) "," Set whether a custom view should be displayed, if set. <br /><br />"
"android.app.ActionBar.setHomeActionContentDescription (int resId) "," Set an alternate description for the Home/Up action, when enabled. <br /><br />"
"android.app.ActionBar.ActionBar.OnMenuVisibilityListener () "," Remove a menu visibility listener. <br /><br />"
"android.app.ActionBar.getHideOffset () "," Return the current vertical offset of the action bar. <br /><br />"
"android.app.ActionBar.ActionBar.LayoutParams () "," Set the action bar into custom navigation mode, supplying a view for custom navigation. <br /><br />"
"android.app.ActionBar.common navigation patterns () "," This method was deprecated in API level 21. Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead. <br /><br />"
"android.app.ActionBar.setDisplayShowHomeEnabled (boolean showHome) "," Set whether to include the application home affordance in the action bar. <br /><br />"
"android.app.ActionBar.setHideOffset (int offset) "," Set the current hide offset of the action bar. <br /><br />"
"android.app.ActionBar.setCustomView (int resId) "," Set the action bar into custom navigation mode, supplying a view for custom navigation. <br /><br />"
"android.app.ActionBar.setDisplayShowTitleEnabled (boolean showTitle) "," Set whether an activity title/subtitle should be displayed. <br /><br />"
"android.app.ActionBar.CharSequence () "," Set the action bar's title. <br /><br />"
"android.app.ActionBar.getElevation () "," Get the Z-axis elevation of the action bar in pixels. <br /><br />"
"android.app.ActionBar.common navigation patterns (int index) "," This method was deprecated in API level 21. Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead. <br /><br />"
"android.app.ActionBar.setHomeButtonEnabled (boolean enabled) "," Enable or disable the 'home' button in the corner of the action bar. <br /><br />"
"android.app.ActionBar.View () "," Set the action bar into custom navigation mode, supplying a view for custom navigation. <br /><br />"
"android.app.ActionBar.DISPLAY_HOME_AS_UP () "," Set an alternate drawable to display next to the icon/logo/title when DISPLAY_HOME_AS_UP is enabled. <br /><br />"
"android.app.ActionBar.Context () "," Returns a Context with an appropriate theme for creating views that will appear in the action bar. <br /><br />"
"android.app.ActionBar.show () "," Show the ActionBar if it is not currently showing. <br /><br />"
"android.app.ActionBar.setHideOnContentScrollEnabled (boolean hideOnContentScroll) "," Enable hiding the action bar on content scroll. <br /><br />"
"android.app.ActionBar.nested scrolling child () "," Return whether the action bar is configured to scroll out of sight along with a nested scrolling child. <br /><br />"
"android.app.ActionBar.setDisplayUseLogoEnabled (boolean useLogo) "," Set whether to display the activity logo rather than the activity icon. <br /><br />"
"android.app.ActionBar.OnMenuVisibilityListener.onMenuVisibilityChanged (boolean isVisible) "," Called when an action bar menu is shown or hidden. <br /><br />"
"android.app.ActionBar.OnNavigationListener.onNavigationItemSelected (int itemPosition, long itemId) "," This method is called whenever a navigation item in your action bar is selected. <br /><br />"
"android.app.ActionBar.Tab.getIcon () "," Return the icon associated with this tab. <br /><br />"
"android.app.ActionBar.Tab.select () "," Select this tab. <br /><br />"
"android.app.ActionBar.Tab.getTag () "," no description <br /><br />"
"android.app.ActionBar.Tab.setText (int resId) "," Set the text displayed on this tab. <br /><br />"
"android.app.ActionBar.Tab.CharSequence () "," Set the text displayed on this tab. <br /><br />"
"android.app.ActionBar.Tab.Object () "," Give this Tab an arbitrary object to hold for later use. <br /><br />"
"android.app.ActionBar.Tab.getText () "," Return the text of this tab. <br /><br />"
"android.app.ActionBar.Tab.View () "," Set a custom view to be used for this tab. <br /><br />"
"android.app.ActionBar.Tab.ActionBar.TabListener () "," Set the ActionBar.TabListener that will handle switching to and from this tab. <br /><br />"
"android.app.ActionBar.Tab.Drawable () "," Set the icon displayed on this tab. <br /><br />"
"android.app.ActionBar.Tab.getCustomView () "," Retrieve a previously set custom view for this tab. <br /><br />"
"android.app.ActionBar.Tab.setContentDescription (int resId) "," Set a description of this tab's content for use in accessibility support. <br /><br />"
"android.app.ActionBar.Tab.setIcon (int resId) "," Set the icon displayed on this tab. <br /><br />"
"android.app.ActionBar.Tab.getPosition () "," Return the current position of this tab in the action bar. <br /><br />"
"android.app.ActionBar.Tab.setCustomView (int layoutResId) "," Set a custom view to be used for this tab. <br /><br />"
"android.app.ActionBar.Tab.getContentDescription () "," Gets a brief description of this tab's content for use in accessibility support. <br /><br />"
"android.app.ActionBar.TabListener.FragmentTransaction () "," Called when a tab exits the selected state. <br /><br />"
"android.app.Activity.onMenuItemSelected (int, MenuItem) () "," Default implementation of onMenuItemSelected(int, MenuItem) for activities. <br /><br />"
"android.app.Activity.makeSceneTransitionAnimation (Activity, android.util.Pair[]) () "," Postpone the entering activity transition when Activity was started with makeSceneTransitionAnimation(Activity, android.util.Pair[]). <br /><br />"
"android.app.Activity.getIntent () "," Return the intent that started this activity. <br /><br />"
"android.app.Activity.navigateUpTo (Intent) () "," This is called when a child activity of this one calls its navigateUpTo(Intent) method. <br /><br />"
"android.app.Activity.onNavigateUp () "," This method is called whenever the user chooses to navigate Up within your application's activity hierarchy from the action bar. <br /><br />"
"android.app.Activity.MenuInflater () "," Returns a MenuInflater with this context. <br /><br />"
"android.app.Activity.startActivities (Intent[], Bundle) () "," Same as startActivities(Intent[], Bundle) with no options specified. <br /><br />"
"android.app.Activity.startIntentSenderForResult (IntentSender, int, Intent, int, int, int, Bundle) () "," Same as calling startIntentSenderForResult(IntentSender, int, Intent, int, int, int, Bundle) with no options. <br /><br />"
"android.app.Activity.setProgress (int progress) "," Sets the progress for the progress bars in the title. <br /><br />"
"android.app.Activity.startActivityForResult (Intent, int) (int requestCode) "," Force finish another activity that you had previously started with startActivityForResult(Intent, int). <br /><br />"
"android.app.Activity.getCallingActivity () "," Return the name of the activity that invoked this activity. <br /><br />"
"android.app.Activity.getTaskId () "," Return the identifier of the task this activity is in. <br /><br />"
"android.app.Activity.setProgressBarVisibility (boolean visible) "," Sets the visibility of the progress bar in the title. <br /><br />"
"android.app.Activity.getApplication () "," Return the application that owns this activity. <br /><br />"
"android.app.Activity.onCreate (Bundle) (int id) "," Finds a view that was identified by the id attribute from the XML that was processed in onCreate(Bundle). <br /><br />"
"android.app.Activity.onPreparePanel (int, View, Menu) () "," Default implementation of onPreparePanel(int, View, Menu) for activities. <br /><br />"
"android.app.Activity.recreate () "," Cause this Activity to be recreated with a new instance. <br /><br />"
"android.app.Activity.onSearchRequested () "," This hook is called when the user signals the desire to start a search. <br /><br />"
"android.app.Activity.takeKeyEvents (boolean get) "," Request that key events come to this activity. <br /><br />"
"android.app.Activity.closeOptionsMenu () "," Progammatically closes the options menu. <br /><br />"
"android.app.Activity.getActionBar () "," Retrieve a reference to this activity's ActionBar. <br /><br />"
"android.app.Activity.stopLockTask () "," Allow the user to switch away from the current task. <br /><br />"
"android.app.Activity.finish () () "," Check to see whether this activity is in the process of finishing, either because you called finish() on it or someone else has requested that it finished. <br /><br />"
"android.app.Activity.finish () "," Call this when your activity is done and should be closed. <br /><br />"
"android.app.Activity.getSystemService (String) () "," Standard implementation of onCreateView(String, Context, AttributeSet) used when inflating with the LayoutInflater returned by getSystemService(String). <br /><br />"
"android.app.Activity.WindowManager.LayoutParams () "," This is called whenever the current window attributes change. <br /><br />"
"android.app.Activity.setFeatureDrawableResource (int, int) (int featureId, int resId) "," Convenience for calling setFeatureDrawableResource(int, int). <br /><br />"
"android.app.Activity.getReferrer () "," Return information about who launched this activity. <br /><br />"
"android.app.Activity.setImmersive (boolean i) "," Adjust the current immersive mode setting. <br /><br />"
"android.app.Activity.startActivity (Intent, Bundle) () "," Same as startActivity(Intent, Bundle) with no options specified. <br /><br />"
"android.app.Activity.finish () (int enterAnim, int exitAnim) "," Call immediately after one of the flavors of startActivity(Intent) or finish() to specify an explicit transition animation to perform next. <br /><br />"
"android.app.Activity.startNextMatchingActivity (Intent, Bundle) () "," Same as calling startNextMatchingActivity(Intent, Bundle) with no options. <br /><br />"
"android.app.Activity.MotionEvent () "," Called when the trackball was moved and not handled by any of the views inside of the activity. <br /><br />"
"android.app.Activity.startLockTask () "," Request to put this Activity in a mode where the user is locked to the current task. <br /><br />"
"android.app.Activity.MediaController () "," Sets a MediaController to send media keys and volume changes to. <br /><br />"
"android.app.Activity.getLocalClassName () "," Returns class name for this activity with the package prefix removed. <br /><br />"
"android.app.Activity.startIntentSender (IntentSender, Intent, int, int, int, Bundle) () "," Same as calling startIntentSender(IntentSender, Intent, int, int, int, Bundle) with no options. <br /><br />"
"android.app.Activity.FragmentManager () "," This method was deprecated in API level 13. Use the new DialogFragment class with FragmentManager instead; this is also available on older platforms through the Android compatibility package. <br /><br />"
"android.app.Activity.Window (boolean hasFocus) "," Called when the current Window of the activity gains or loses focus. <br /><br />"
"android.app.Activity.onDestroy () () "," Returns true if the final onDestroy() call has been made on the Activity, so this instance is now dead. <br /><br />"
"android.app.Activity.startActivityFromFragment (Fragment, Intent, int, Bundle) () "," Same as calling startActivityFromFragment(Fragment, Intent, int, Bundle) with no options. <br /><br />"
"android.app.Activity.moveTaskToBack (boolean nonRoot) "," Move the task containing this activity to the back of the activity stack. <br /><br />"
"android.app.Activity.ActionBar () "," Set a Toolbar to act as the ActionBar for this Activity window. <br /><br />"
"android.app.Activity.onConfigurationChanged (Configuration) () "," If this activity is being destroyed because it can not handle a configuration parameter being changed (and thus its onConfigurationChanged(Configuration) method is not being called), then you can use this method to discover the set of changes that have occurred while in the process of being destroyed. <br /><br />"
"android.app.Activity.onCreatePanelView (int) (int featureId) "," Default implementation of onCreatePanelView(int) for activities. <br /><br />"
"android.app.Activity.setVisible (boolean visible) "," Control whether this activity's main window is visible. <br /><br />"
"android.app.Activity.getLoaderManager () "," Return the LoaderManager for this activity, creating it if needed. <br /><br />"
"android.app.Activity.setVolumeControlStream (int streamType) "," Suggests an audio stream whose volume should be changed by the hardware volume controls. <br /><br />"
"android.app.Activity.setTitleColor (int textColor) "," This method was deprecated in API level 21. Use action bar styles instead. <br /><br />"
"android.app.Activity.FragmentManager (int id) "," This method was deprecated in API level 13. Use the new DialogFragment class with FragmentManager instead; this is also available on older platforms through the Android compatibility package. <br /><br />"
"android.app.Activity.invalidateOptionsMenu () "," Declare that the options menu has changed, so should be recreated. <br /><br />"
"android.app.Activity.String () "," Return the handle to a system-level service by name. <br /><br />"
"android.app.Activity.ACTION_ASSIST () "," This is called when the user is requesting an assist, to build a full ACTION_ASSIST Intent with all of the context of the current application. <br /><br />"
"android.app.Activity.setTitle (int titleId) "," Change the title associated with this activity. <br /><br />"
"android.app.Activity.openOptionsMenu () "," Programmatically opens the options menu. <br /><br />"
"android.app.Activity.LoaderManager () "," This method was deprecated in API level 11. Use the new CursorLoader class with LoaderManager instead; this is also available on older platforms through the Android compatibility package. <br /><br />"
"android.app.Activity.onPause () (boolean visible) "," Activities that want to remain visible behind a translucent activity above them must call this method anytime between the start of onResume() and the return from onPause(). <br /><br />"
"android.app.Activity.setProgressBarIndeterminate (boolean indeterminate) "," Sets whether the horizontal progress bar in the title should be indeterminate (the circular is always indeterminate). <br /><br />"
"android.app.Activity.startActivityForResult (Intent, int, Bundle) () "," Same as calling startActivityForResult(Intent, int, Bundle) with no options. <br /><br />"
"android.app.Activity.setRetainInstance (boolean) () "," This method was deprecated in API level 13. Use the new Fragment API setRetainInstance(boolean) instead; this is also available on older platforms through the Android compatibility package. <br /><br />"
"android.app.Activity.CharSequence () "," Change the title associated with this activity. <br /><br />"
"android.app.Activity.startActivityFromChild (Activity, Intent, int, Bundle) () "," Same as calling startActivityFromChild(Activity, Intent, int, Bundle) with no options. <br /><br />"
"android.app.Activity.startIntentSenderForResult (IntentSender, int, Intent, int, int, int) () "," Like startActivityFromChild(Activity, Intent, int), but taking a IntentSender; see startIntentSenderForResult(IntentSender, int, Intent, int, int, int) for more information. <br /><br />"
"android.app.Activity.isChild () "," Is this activity embedded inside of another activity? <br /><br />"
"android.app.Activity.startIntentSenderFromChild (Activity, IntentSender, int, Intent, int, int, int, Bundle) () "," Same as calling startIntentSenderFromChild(Activity, IntentSender, int, Intent, int, int, int, Bundle) with no options. <br /><br />"
"android.app.Activity.onDetachedFromWindow () "," Called when the main window associated with the activity has been detached from the window manager. <br /><br />"
"android.app.Activity.getIntent () () "," Change the intent returned by getIntent(). <br /><br />"
"android.app.Activity.setContentView (int layoutResID) "," Set the activity content from a layout resource. <br /><br />"
"android.app.Activity.KeyEvent () "," Called when a key was released and not handled by any of the views inside of the activity. <br /><br />"
"android.app.Activity.setFeatureDrawableUri (int, Uri) () "," Convenience for calling setFeatureDrawableUri(int, Uri). <br /><br />"
"android.app.Activity.Bundle () "," This hook is called to launch the search UI. <br /><br />"
"android.app.Activity.onCreateDescription () "," Generate a new description for this activity. <br /><br />"
"android.app.Activity.getCurrentFocus () () "," Calls getCurrentFocus() on the Window of this Activity to return the currently focused view. <br /><br />"
"android.app.Activity.Intent () "," Returns true if the app should recreate the task when navigating 'up' from this activity by using targetIntent. <br /><br />"
"android.app.Activity.getVolumeControlStream () "," Gets the suggested audio stream whose volume should be changed by the hardware volume controls. <br /><br />"
"android.app.Activity.getComponentName () "," Returns complete component name of this activity. <br /><br />"
"android.app.Activity.onBackPressed () "," Called when the activity has detected the user's press of the back key. <br /><br />"
"android.app.Activity.finishAndRemoveTask () "," Call this when your activity is done and should be closed and the task should be completely removed as a part of finishing the Activity. <br /><br />"
"android.app.Activity.KeyEvent.Callback.onKeyLongPress () () "," Default implementation of KeyEvent.Callback.onKeyLongPress(): always returns false (doesn't handle the event). <br /><br />"
"android.app.Activity.getFragmentManager () "," Return the FragmentManager for interacting with fragments associated with this activity. <br /><br />"
"android.app.Activity.finishAfterTransition () "," Reverses the Activity Scene entry Transition and triggers the calling Activity to reverse its exit Transition. <br /><br />"
"android.app.Activity.setFinishOnTouchOutside (boolean finish) "," Sets whether this activity is finished when touched outside its window's bounds. <br /><br />"
"android.app.Activity.isImmersive () "," Bit indicating that this activity is 'immersive' and should not be interrupted by notifications if possible. <br /><br />"
"android.app.Activity.ActionMode () "," Notifies the Activity that an action mode has been started. <br /><br />"
"android.app.Activity.SharedPreferences (int mode) "," Retrieve a SharedPreferences object for accessing preferences that are private to this activity. <br /><br />"
"android.app.Activity.MenuItem () "," This hook is called whenever an item in your options menu is selected. <br /><br />"
"android.app.Activity.TransitionManager () "," Set the TransitionManager to use for default transitions in this window. <br /><br />"
"android.app.Activity.onEnterAnimationComplete () "," Activities cannot draw during the period that their windows are animating in. <br /><br />"
"android.app.Activity.getMediaController () "," Gets the controller which should be receiving media key and volume events while this activity is in the foreground. <br /><br />"
"android.app.Activity.TaskStackBuilder () "," Prepare the synthetic task stack that will be generated during Up navigation from a different task. <br /><br />"
"android.app.Activity.CursorLoader () "," This method was deprecated in API level 11. Use CursorLoader instead. <br /><br />"
"android.app.Activity.onAttachedToWindow () "," Called when the main window associated with the activity has been attached to the window manager. <br /><br />"
"android.app.Activity.persistableMode () "," This is the same as onSaveInstanceState(Bundle) but is called for activities created with the attribute persistableMode set to persistAcrossReboots. <br /><br />"
"android.app.Activity.makeSceneTransitionAnimation (Activity, android.view.View, String) () "," When makeSceneTransitionAnimation(Activity, android.view.View, String) was used to start an Activity, callback will be called to handle shared elements on the launching Activity. <br /><br />"
"android.app.Activity.String[] () "," Print the Activity's state into the given stream. <br /><br />"
"android.app.Activity.getTitle () "," no description <br /><br />"
"android.app.Activity.ActionMode.Callback () "," Start an action mode. <br /><br />"
"android.app.Activity.onPanelClosed (int, Menu) () "," Default implementation of onPanelClosed(int, Menu) for activities. <br /><br />"
"android.app.Activity.setSecondaryProgress (int secondaryProgress) "," Sets the secondary progress for the progress bar in the title. <br /><br />"
"android.app.Activity.startActivityForResult (Intent, int) () "," Like startActivityForResult(Intent, int), but allowing you to use a IntentSender to describe the activity to be started. <br /><br />"
"android.app.Activity.getTitleColor () "," no description <br /><br />"
"android.app.Activity.reportFullyDrawn () "," Report to the system that your app is now fully drawn, purely for diagnostic purposes (calling it does not impact the visible behavior of the activity). <br /><br />"
"android.app.Activity.setDefaultKeyMode (int mode) "," Select the default key handling for this activity. <br /><br />"
"android.app.Activity.ContextMenu.ContextMenuInfo () "," Called when a context menu for the view is about to be shown. <br /><br />"
"android.app.Activity.startActivityIfNeeded (Intent, int, Bundle) () "," Same as calling startActivityIfNeeded(Intent, int, Bundle) with no options. <br /><br />"
"android.app.Activity.isChangingConfigurations () "," Check to see whether this activity is in the process of being destroyed in order to be recreated with a new configuration. <br /><br />"
"android.app.Activity.onActivityResult (int, int, Intent) () "," Create a new PendingIntent object which you can hand to others for them to use to send result data back to your onActivityResult(int, int, Intent) callback. <br /><br />"
"android.app.Activity.onTrimMemory (int level) "," Called when the operating system has determined that it is a good time for a process to trim unneeded memory from its process. <br /><br />"
"android.app.Activity.onLowMemory () "," This is called when the overall system is running low on memory, and actively running processes should trim their memory usage. <br /><br />"
"android.app.Activity.getWindowManager () "," Retrieve the window manager for showing custom windows. <br /><br />"
"android.app.Activity.Fragment.onCreate () () "," Called when a Fragment is being attached to this activity, immediately after the call to its Fragment.onAttach() method and before Fragment.onCreate(). <br /><br />"
"android.app.Activity.AccessibilityEvent () "," Called to process population of AccessibilityEvents. <br /><br />"
"android.app.Activity.getLayoutInflater () () "," Convenience for calling getLayoutInflater(). <br /><br />"
"android.app.Activity.Menu () "," Prepare the Screen's standard options menu to be displayed. <br /><br />"
"android.app.Activity.Window.addContentView () "," This hook is called whenever the content view of the screen changes (due to a call to Window.setContentView or Window.addContentView). <br /><br />"
"android.app.Activity.hasWindowFocus () "," Returns true if this activity's main window currently has window focus. <br /><br />"
"android.app.Activity.setFeatureDrawable (int, Drawable) () "," Convenience for calling setFeatureDrawable(int, Drawable). <br /><br />"
"android.app.Activity.requestWindowFeature (int featureId) "," Enable extended window features. <br /><br />"
"android.app.Activity.getRequestedOrientation () "," Return the current requested orientation of the activity. <br /><br />"
"android.app.Activity.startSearch (String, boolean, Bundle, boolean) () "," Similar to startSearch(String, boolean, Bundle, boolean), but actually fires off the search query after invoking the search dialog. <br /><br />"
"android.app.Activity.setProgressBarIndeterminateVisibility (boolean visible) "," Sets the visibility of the indeterminate progress bar in the title. <br /><br />"
"android.app.Activity.setResult (int resultCode) "," Call this to set the result that your activity will return to its caller. <br /><br />"
"android.app.Activity.setRequestedOrientation (int requestedOrientation) "," Change the desired orientation of this activity. <br /><br />"
"android.app.Activity.Scene () "," Retrieve the Scene representing this window's current content. <br /><br />"
"android.app.Activity.releaseInstance () "," Ask that the local app instance of this activity be released to free up its memory. <br /><br />"
"android.app.Activity.Configuration () "," Called by the system when the device configuration changes while your activity is running. <br /><br />"
"android.app.Activity.Window () "," Retrieve the current Window for the activity. <br /><br />"
"android.app.Activity.closeContextMenu () "," Programmatically closes the most recently opened context menu, if showing. <br /><br />"
"android.app.Activity.setFeatureDrawableAlpha (int, int) (int featureId, int alpha) "," Convenience for calling setFeatureDrawableAlpha(int, int). <br /><br />"
"android.app.Activity.Canvas () "," Generate a new thumbnail for this activity. <br /><br />"
"android.app.Activity.onCreatePanelMenu (int, Menu) () "," Default implementation of onCreatePanelMenu(int, Menu) for activities. <br /><br />"
"android.app.Activity.Activity () "," This is called when a child activity of this one attempts to navigate up. <br /><br />"
"android.app.Activity.KeyEvent.Callback.onKeyMultiple () () "," Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event). <br /><br />"
"android.app.Activity.View () "," Prevents a context menu to be shown for the given view. <br /><br />"
"android.app.Activity.getCallingPackage () "," Return the name of the package that invoked this activity. <br /><br />"
"android.app.Activity.onUserInteraction () "," Called whenever a key, touch, or trackball event is dispatched to the activity. <br /><br />"
"android.app.Activity.isTaskRoot () "," Return whether this activity is the root of a task. <br /><br />"
"android.app.Activity.ViewGroup.LayoutParams () "," Set the activity content to an explicit view. <br /><br />"
"android.app.Activity.postponeEnterTransition () () "," Begin postponed transitions after postponeEnterTransition() was called. <br /><br />"
"android.app.Activity.getParent () "," Return the parent activity if this view is an embedded child. <br /><br />"
"android.app.Activity.finishAffinity () "," Finish this activity as well as all activities immediately below it in the current task that have the same affinity. <br /><br />"
"android.app.Activity.onVisibleBehindCanceled () "," Called when a translucent activity over this activity is becoming opaque or another activity is being launched. <br /><br />"
"android.app.Activity.ActivityManager.TaskDescription () "," Sets information describing the task with this activity for presentation inside the Recents System UI. <br /><br />"
"android.app.Activity.Runnable () "," Runs the specified action on the UI thread. <br /><br />"
"android.app.ActivityGroup.getLocalActivityManager () "," no description <br /><br />"
"android.app.ActivityGroup.getCurrentActivity () "," no description <br /><br />"
"android.app.ActivityManager.AppTask.moveToFront () "," Bring this task to the foreground. <br /><br />"
"android.app.ActivityManager.AppTask.finishAndRemoveTask () "," Finishes all activities in this task and removes it from the recent tasks list. <br /><br />"
"android.app.ActivityManager.AppTask.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS (boolean exclude) "," Modify the FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS flag in the root Intent of this AppTask. <br /><br />"
"android.app.ActivityManager.AppTask.getTaskInfo () "," Get the RecentTaskInfo associated with this task. <br /><br />"
"android.app.ActivityManager.AppTask.Bundle () "," Start an activity in this task. <br /><br />"
"android.app.ActivityManager.killBackgroundProcesses (String) () "," This method was deprecated in API level 8. This is now just a wrapper for killBackgroundProcesses(String); the previous behavior here is no longer available to applications because it allows them to break other applications by removing their alarms, stopping their services, etc. <br /><br />"
"android.app.ActivityManager.clearApplicationUserData () "," Permits an application to erase its own data from disk. <br /><br />"
"android.app.ActivityManager.getMemoryClass () "," Return the approximate per-application memory class of the current device. <br /><br />"
"android.app.ActivityManager.ComponentName () "," Returns a PendingIntent you can start to show a control panel for the given running service. <br /><br />"
"android.app.ActivityManager.moveTaskToFront (int, int, Bundle) (int taskId, int flags) "," Equivalent to calling moveTaskToFront(int, int, Bundle) with a null options argument. <br /><br />"
"android.app.ActivityManager.isInLockTaskMode () "," Return whether currently in lock task mode. <br /><br />"
"android.app.ActivityManager.ActivityManager.MemoryInfo () "," Return general information about the memory state of the system. <br /><br />"
"android.app.ActivityManager.getRunningServices (int maxNum) "," Return a list of the services that are currently running. <br /><br />"
"android.app.ActivityManager.addAppTask (Activity, Intent, ActivityManager.TaskDescription, Bitmap) () "," Return the current design dimensions for ActivityManager.AppTask thumbnails, for use with addAppTask(Activity, Intent, ActivityManager.TaskDescription, Bitmap). <br /><br />"
"android.app.ActivityManager.isUserAMonkey () "," Returns 'true' if the user interface is currently being messed with by a monkey. <br /><br />"
"android.app.ActivityManager.LOLLIPOP (int maxNum) "," This method was deprecated in API level 21. As of LOLLIPOP, this method is no longer available to third party applications: the introduction of document-centric recents means it can leak person information to the caller. For backwards compatibility, it will still retu rn a small subset of its data: at least the caller's own tasks, and possibly some other tasks such as home that are known to not be sensitive. <br /><br />"
"android.app.ActivityManager.ActivityManager.RunningAppProcessInfo () "," Return global memory state information for the calling process. <br /><br />"
"android.app.ActivityManager.getAppTasks () "," Get the list of tasks associated with the calling application. <br /><br />"
"android.app.ActivityManager.String () "," Have the system immediately kill all background processes associated with the given package. <br /><br />"
"android.app.ActivityManager.getProcessesInErrorState () "," Returns a list of any processes that are currently in an error condition. <br /><br />"
"android.app.ActivityManager.getDeviceConfigurationInfo () "," Get the device configuration attributes. <br /><br />"
"android.app.ActivityManager.getLauncherLargeIconSize () "," Get the preferred launcher icon size. <br /><br />"
"android.app.ActivityManager.getAppTasks () (int maxNum, int flags) "," This method was deprecated in API level 21. As of LOLLIPOP, this method is no longer available to third party applications: the introduction of document-centric recents means it can leak personal information to the caller. For backwards compatibility, it will still return a small subset of its data: at least the caller's own tasks (though see getAppTasks() for the correct supported way to retrieve that information), and possibly some other tasks such as home that are known to not be sensitive. <br /><br />"
"android.app.ActivityManager.isRunningInTestHarness () "," Returns 'true' if device is running in a test harness. <br /><br />"
"android.app.ActivityManager.isLowRamDevice () "," Returns true if this is a low-RAM device. <br /><br />"
"android.app.ActivityManager.ActivityManager.AppTask () "," Add a new ActivityManager.AppTask for the calling application. <br /><br />"
"android.app.ActivityManager.getLauncherLargeIconDensity () "," Get the preferred density of icons for the launcher. <br /><br />"
"android.app.ActivityManager.getLargeMemoryClass () "," Return the approximate per-application memory class of the current device when an application is running with a large heap. <br /><br />"
"android.app.ActivityManager.getRunningAppProcesses () "," Returns a list of application processes that are running on the device. <br /><br />"
"android.app.ActivityManager.Bundle () "," Ask that the task associated with a given task ID be moved to the front of the stack, so it is now visible to the user. <br /><br />"
"android.app.ActivityManager.getProcessMemoryInfo (int[] pids) "," Return information about the memory usage of one or more processes. <br /><br />"
"android.app.ActivityManager.MemoryInfo.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.app.ActivityManager.MemoryInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.app.ActivityManager.ProcessErrorStateInfo.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.app.ActivityManager.ProcessErrorStateInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.app.ActivityManager.RecentTaskInfo.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.app.ActivityManager.RecentTaskInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.app.ActivityManager.RunningAppProcessInfo.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.app.ActivityManager.RunningAppProcessInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.app.ActivityManager.RunningServiceInfo.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.app.ActivityManager.RunningServiceInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.app.ActivityManager.RunningTaskInfo.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.app.ActivityManager.RunningTaskInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.app.ActivityManager.TaskDescription.getIcon () "," no description <br /><br />"
"android.app.ActivityManager.TaskDescription.getPrimaryColor () "," no description <br /><br />"
"android.app.ActivityManager.TaskDescription.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.app.ActivityManager.TaskDescription.getLabel () "," no description <br /><br />"
"android.app.ActivityManager.TaskDescription.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.app.ActivityManager.TaskDescription.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.app.ActivityOptions.String () "," Create an ActivityOptions to transition between Activities using cross-Activity scene animations. <br /><br />"
"android.app.ActivityOptions.Context () "," Create an ActivityOptions specifying a custom animation to run when the activity is displayed. <br /><br />"
"android.app.ActivityOptions.makeTaskLaunchBehind () "," If set along with Intent.FLAG_ACTIVITY_NEW_DOCUMENT then the task being launched will not be presented to the user but will instead be only available through the recents task list. <br /><br />"
"android.app.ActivityOptions.Context.startActivity (Intent, Bundle) () "," Returns the created options as a Bundle, which can be passed to Context.startActivity(Intent, Bundle) and related methods. <br /><br />"
"android.app.ActivityOptions.View () "," Create an ActivityOptions specifying an animation where the new activity is scaled from a small originating area of the screen to its final full representation. <br /><br />"
"android.app.ActivityOptions.ActivityOptions () "," Update the current values in this ActivityOptions from those supplied in otherOptions. <br /><br />"
"android.app.ActivityOptions.Bitmap () "," Create an ActivityOptions specifying an animation where a thumbnail is scaled from a given position to the new activity window that is being started. <br /><br />"
"android.app.admin.DeviceAdminInfo.getActivityInfo () "," Return the raw information about the receiver implementing this device admin. <br /><br />"
"android.app.admin.DeviceAdminInfo.String () "," no description <br /><br />"
"android.app.admin.DeviceAdminInfo.getPackageName () "," Return the .apk package that implements this device admin. <br /><br />"
"android.app.admin.DeviceAdminInfo.PackageManager () "," Load the user-displayed label for this device admin. <br /><br />"
"android.app.admin.DeviceAdminInfo.getTagForPolicy (int policyIdent) "," Return the XML tag name for the given policy identifier. <br /><br />"
"android.app.admin.DeviceAdminInfo.isVisible () "," Returns whether this device admin would like to be visible to the user, even when it is not enabled. <br /><br />"
"android.app.admin.DeviceAdminInfo.getReceiverName () "," Return the class name of the receiver component that implements this device admin. <br /><br />"
"android.app.admin.DeviceAdminInfo.getComponent () "," Return the component of the receiver that implements this device admin. <br /><br />"
"android.app.admin.DeviceAdminInfo.Parcel () "," Used to package this object into a Parcel. <br /><br />"
"android.app.admin.DeviceAdminInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.app.admin.DeviceAdminInfo.usesPolicy (int policyIdent) "," Return true if the device admin has requested that it be able to use the given policy control. <br /><br />"
"android.app.admin.DeviceAdminInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.app.admin.DeviceAdminReceiver.Context () "," Retrieve the DevicePolicyManager interface for this administrator to work with the system. <br /><br />"
"android.app.admin.DeviceAdminReceiver.ACTION_PASSWORD_CHANGED () "," Called after the user has changed their password, as a result of receiving ACTION_PASSWORD_CHANGED. <br /><br />"
"android.app.admin.DeviceAdminReceiver.ACTION_DEVICE_ADMIN_DISABLE_REQUESTED () "," Called when the user has asked to disable the administrator, as a result of receiving ACTION_DEVICE_ADMIN_DISABLE_REQUESTED, giving you a chance to present a warning message to them. <br /><br />"
"android.app.admin.DeviceAdminReceiver.ACTION_DEVICE_ADMIN_ENABLED () "," Called after the administrator is first enabled, as a result of receiving ACTION_DEVICE_ADMIN_ENABLED. <br /><br />"
"android.app.admin.DeviceAdminReceiver.isLockTaskPermitted (String) () "," Called when a device is exiting lock task mode by a package authorized by isLockTaskPermitted(String) <br /><br />"
"android.app.admin.DeviceAdminReceiver.DevicePolicyManager () "," Retrieve the ComponentName describing who this device administrator is, for use in DevicePolicyManager APIs that require the administrator to identify itself. <br /><br />"
"android.app.admin.DeviceAdminReceiver.ACTION_PASSWORD_FAILED () "," Called after the user has failed at entering their current password, as a result of receiving ACTION_PASSWORD_FAILED. <br /><br />"
"android.app.admin.DeviceAdminReceiver.ACTION_PASSWORD_SUCCEEDED () "," Called after the user has succeeded at entering their current password, as a result of receiving ACTION_PASSWORD_SUCCEEDED. <br /><br />"
"android.app.admin.DeviceAdminReceiver.Intent () "," Intercept standard device administrator broadcasts. <br /><br />"
"android.app.admin.DeviceAdminReceiver.ACTION_DEVICE_ADMIN_DISABLED () "," Called prior to the administrator being disabled, as a result of receiving ACTION_DEVICE_ADMIN_DISABLED. <br /><br />"
"android.app.admin.DevicePolicyManager.String () "," Called by profile or device owners to change whether a user can uninstall a package. <br /><br />"
"android.app.admin.DevicePolicyManager.Settings.Secure () "," Called by profile or device owners to update Settings.Secure settings. <br /><br />"
"android.app.admin.DevicePolicyManager.UserHandle () "," Called by a device owner to switch the specified user to the foreground. <br /><br />"
"android.app.admin.DevicePolicyManager.Settings.Global () "," Called by device owners to update Settings.Global settings. <br /><br />"
"android.app.admin.DevicePolicyManager.getPasswordMaximumLength (int quality) "," Return the maximum password length that the device supports for a particular password quality. <br /><br />"
"android.app.admin.DevicePolicyManager.ComponentName () "," Uninstalls the given certificate from trusted user CAs, if present. <br /><br />"
"android.app.admin.DevicePolicyManager.getAccountTypesWithManagementDisabled () "," Gets the array of accounts for which account management is disabled by the profile owner. <br /><br />"
"android.app.admin.DevicePolicyManager.getCurrentFailedPasswordAttempts () "," Retrieve the number of times the user has failed at entering a password since that last successful password entry. <br /><br />"
"android.app.admin.DevicePolicyManager.getActiveAdmins () "," Return a list of all currently active device administrator's component names. <br /><br />"
"android.app.admin.DevicePolicyManager.isActivePasswordSufficient () "," Determine whether the current password the user has set is sufficient to meet the policy requirements (quality, minimum length) that have been requested by the admins of this user and its profiles. <br /><br />"
"android.app.admin.DevicePolicyManager.getStorageEncryptionStatus () "," Called by an application that is administering the device to determine the current encryption status of the device. <br /><br />"
"android.app.admin.DevicePolicyManager.IntentFilter () "," Called by the profile owner of a managed profile so that some intents sent in the managed profile can also be resolved in the parent, or vice versa. <br /><br />"
"android.app.admin.DevicePolicyManager.addPersistentPreferredActivity (ComponentName, IntentFilter, ComponentName) () "," Called by a profile owner or device owner to remove all persistent intent handler preferences associated with the given package that were set by addPersistentPreferredActivity(ComponentName, IntentFilter, ComponentName). <br /><br />"
"android.app.admin.DevicePolicyManager.String[] () "," Sets which packages may enter lock task mode. <br /><br />"
"android.app.admin.DevicePolicyManager.setTrustAgentConfiguration (ComponentName, ComponentName, PersistableBundle) () "," Gets configuration for the given trust agent based on aggregating all calls to setTrustAgentConfiguration(ComponentName, ComponentName, PersistableBundle) for all device admins. <br /><br />"
"android.app.admin.DevicePolicyManager.Bundle () "," Called by a profile or device owner to set the application restrictions for a given target application running in the profile. <br /><br />"
"android.app.admin.DevicePolicyManager.getAutoTimeRequired () "," no description <br /><br />"
"android.app.admin.DevicePolicyManager.ProxyInfo () "," Set a network-independent global HTTP proxy. <br /><br />"
"android.app.admin.DevicePolicyManager.lockNow () "," Make the device lock immediately, as if the lock screen timeout has expired at the point of this call. <br /><br />"
"android.app.admin.DevicePolicyManager.PersistableBundle () "," Sets a list of configuration features to enable for a TrustAgent component. <br /><br />"
"android.app.admin.DevicePolicyManager.Intent () "," Called by profile or device owner to re-enable system apps by intent that were disabled by default when the user was initialized. <br /><br />"
"android.app.admin.DevicePolicyManager.wipeData (int flags) "," Ask the user data be wiped. <br /><br />"
"android.app.AlarmManager.AlarmClockInfo.getTriggerTime () "," Returns the time at which the alarm is going to trigger. <br /><br />"
"android.app.AlarmManager.AlarmClockInfo.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.app.AlarmManager.AlarmClockInfo.getShowIntent () "," Returns an intent intent that can be used to show or edit details of the alarm clock in the application that scheduled it. <br /><br />"
"android.app.AlarmManager.AlarmClockInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.app.AlarmManager.String () "," Set the system default time zone. <br /><br />"
"android.app.AlarmManager.getNextAlarmClock () "," Gets information about the next alarm clock currently scheduled. <br /><br />"
"android.app.AlarmManager.setTime (long millis) "," Set the system wall clock time. <br /><br />"
"android.app.AlarmManager.PendingIntent () "," Schedule an alarm to be delivered within a given window of time. <br /><br />"
"android.app.AlarmManager.Intent () "," Remove any alarms with a matching Intent. <br /><br />"
"android.app.AlertDialog.Builder.DialogInterface.OnDismissListener () "," Sets the callback that will be called when the dialog is dismissed for any reason. <br /><br />"
"android.app.AlertDialog.Builder.ListAdapter () "," Set a list of items, which are supplied by the given ListAdapter, to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. <br /><br />"
"android.app.AlertDialog.Builder.setTitle (int titleId) "," Set the title using the given resource id. <br /><br />"
"android.app.AlertDialog.Builder.Dialog () "," Set the title displayed in the Dialog. <br /><br />"
"android.app.AlertDialog.Builder.AlertDialog () "," Creates a AlertDialog with the arguments supplied to this builder. <br /><br />"
"android.app.AlertDialog.Builder.DialogInterface.OnClickListener () "," Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. <br /><br />"
"android.app.AlertDialog.Builder.setMessage (int messageId) "," Set the message to display using the given resource id. <br /><br />"
"android.app.AlertDialog.Builder.CharSequence () "," Set the message to display. <br /><br />"
"android.app.AlertDialog.Builder.View () "," Set a custom view to be the contents of the Dialog. <br /><br />"
"android.app.AlertDialog.Builder.DialogInterface.OnKeyListener () "," Sets the callback that will be called if a key is dispatched to the dialog. <br /><br />"
"android.app.AlertDialog.Builder.setIconAttribute (int attrId) "," Set an icon as supplied by a theme attribute. <br /><br />"
"android.app.AlertDialog.Builder.Context () "," Returns a Context with the appropriate theme for dialogs created by this Builder. <br /><br />"
"android.app.AlertDialog.Builder.Drawable () "," Set the Drawable to be used in the title. <br /><br />"
"android.app.AlertDialog.Builder.show () () "," Creates a AlertDialog with the arguments supplied to this builder and show()'s the dialog. <br /><br />"
"android.app.AlertDialog.Builder.AdapterView.OnItemSelectedListener () "," Sets a listener to be invoked when an item in the list is selected. <br /><br />"
"android.app.AlertDialog.Builder.DialogInterface.OnCancelListener () "," Sets the callback that will be called if the dialog is canceled. <br /><br />"
"android.app.AlertDialog.Builder.Cursor () "," Set a list of items, which are supplied by the given Cursor, to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. <br /><br />"
"android.app.AlertDialog.Builder.setCancelable (boolean cancelable) "," Sets whether the dialog is cancelable or not. <br /><br />"
"android.app.AlertDialog.Builder.setView (int layoutResId) "," Set a custom view resource to be the contents of the Dialog. <br /><br />"
"android.app.AlertDialog.Builder.DialogInterface.OnMultiChoiceClickListener () "," Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. <br /><br />"
"android.app.AlertDialog.Builder.setInverseBackgroundForced (boolean useInverseBackground) "," Sets the Dialog to use the inverse background, regardless of what the contents is. <br /><br />"
"android.app.AlertDialog.Builder.Drawable (int iconId) "," Set the resource id of the Drawable to be used in the title. <br /><br />"
"android.app.AlertDialog.getListView () "," Gets the list view used in the dialog. <br /><br />"
"android.app.AlertDialog.Drawable () "," no description <br /><br />"
"android.app.AlertDialog.BUTTON_POSITIVE () "," This method was deprecated in API level 3. Use setButton(int, CharSequence, android.content.DialogInterface.OnClickListener) with BUTTON_POSITIVE <br /><br />"
"android.app.AlertDialog.Message () "," Set a message to be sent when a button is pressed. <br /><br />"
"android.app.AlertDialog.KeyEvent () "," A key was released. <br /><br />"
"android.app.AlertDialog.DialogInterface.OnClickListener () "," Set a listener to be invoked when the positive button of the dialog is pressed. <br /><br />"
"android.app.AlertDialog.setIcon (int resId) "," Set resId to 0 if you don't want an icon. <br /><br />"
"android.app.AlertDialog.BUTTON_NEUTRAL () "," This method was deprecated in API level 3. Use setButton(int, CharSequence, Message) with BUTTON_NEUTRAL. <br /><br />"
"android.app.AlertDialog.BUTTON_NEGATIVE () "," This method was deprecated in API level 3. Use setButton(int, CharSequence, Message) with BUTTON_NEGATIVE. <br /><br />"
"android.app.AlertDialog.setInverseBackgroundForced (boolean forceInverseBackground) "," no description <br /><br />"
"android.app.AlertDialog.CharSequence () "," Set the title text for this dialog's window. <br /><br />"
"android.app.AlertDialog.View () "," Set the view to display in that dialog. <br /><br />"
"android.app.AlertDialog.getButton (int whichButton) "," Gets one of the buttons used in the dialog. <br /><br />"
"android.app.AlertDialog.setIconAttribute (int attrId) "," Set an icon as supplied by a theme attribute. <br /><br />"
"android.app.Application.ActivityLifecycleCallbacks.Activity () "," no description <br /><br />"
"android.app.Application.ActivityLifecycleCallbacks.Bundle () "," no description <br /><br />"
"android.app.Application.onCreate () "," Called when the application is starting, before any activity, service, or receiver objects (excluding content providers) have been created. <br /><br />"
"android.app.Application.Application.OnProvideAssistDataListener () "," no description <br /><br />"
"android.app.Application.ComponentCallbacks () "," Add a new ComponentCallbacks to the base application of the Context, which will be called at the same times as the ComponentCallbacks methods of activities and other components are called. <br /><br />"
"android.app.Application.Application.ActivityLifecycleCallbacks () "," no description <br /><br />"
"android.app.Application.Configuration () "," Called by the system when the device configuration changes while your component is running. <br /><br />"
"android.app.Application.registerComponentCallbacks (ComponentCallbacks) () "," Remove a ComponentCallbacks object that was previously registered with registerComponentCallbacks(ComponentCallbacks). <br /><br />"
"android.app.Application.onTerminate () "," This method is for use in emulated process environments. <br /><br />"
"android.app.Application.onTrimMemory (int level) "," Called when the operating system has determined that it is a good time for a process to trim unneeded memory from its process. <br /><br />"
"android.app.Application.onLowMemory () "," This is called when the overall system is running low on memory, and actively running processes should trim their memory usage. <br /><br />"
"android.app.Application.OnProvideAssistDataListener.ACTION_ASSIST () "," This is called when the user is requesting an assist, to build a full ACTION_ASSIST Intent with all of the context of the current application. <br /><br />"
"android.app.ApplicationErrorReport.AnrInfo.String () "," Dump an AnrInfo instance to a Printer. <br /><br />"
"android.app.ApplicationErrorReport.AnrInfo.Parcel () "," Save an AnrInfo instance to a parcel. <br /><br />"
"android.app.ApplicationErrorReport.BatteryInfo.String () "," Dump a BatteryInfo instance to a Printer. <br /><br />"
"android.app.ApplicationErrorReport.BatteryInfo.Parcel () "," Save a BatteryInfo instance to a parcel. <br /><br />"
"android.app.ApplicationErrorReport.CrashInfo.String () "," Dump a CrashInfo instance to a Printer. <br /><br />"
"android.app.ApplicationErrorReport.CrashInfo.Parcel () "," Save a CrashInfo instance to a parcel. <br /><br />"
"android.app.ApplicationErrorReport.String () "," no description <br /><br />"
"android.app.ApplicationErrorReport.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.app.ApplicationErrorReport.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.app.ApplicationErrorReport.RunningServiceInfo.String () "," Dump a BatteryInfo instance to a Printer. <br /><br />"
"android.app.ApplicationErrorReport.RunningServiceInfo.Parcel () "," Save a RunningServiceInfo instance to a parcel. <br /><br />"
"android.app.AppOpsManager.String () "," Report that an application has started executing a long-running operation. <br /><br />"
"android.app.AppOpsManager.startWatchingMode (String, String, AppOpsManager.OnOpChangedListener) () "," Stop monitoring that was previously started with startWatchingMode(String, String, AppOpsManager.OnOpChangedListener). <br /><br />"
"android.app.AppOpsManager.MODE_ERRORED () "," Like startOp(String, int, String) but instead of throwing a SecurityException it returns MODE_ERRORED. <br /><br />"
"android.app.AppOpsManager.startOp (String, int, String) () "," Report that an application is no longer performing an operation that had previously been started with startOp(String, int, String). <br /><br />"
"android.app.AppOpsManager.AppOpsManager.OnOpChangedListener () "," Monitor for changes to the operating mode for the given op in the given app package. <br /><br />"
"android.app.AppOpsManager.OnOpChangedListener.String () "," no description <br /><br />"
"android.app.backup.BackupAgent.onCreate () "," Provided as a convenience for agent implementations that need an opportunity to do one-time initialization before the actual backup or restore operation is begun. <br /><br />"
"android.app.backup.BackupAgent.ParcelFileDescriptor () "," The application is being restored from backup and should replace any existing data with the contents of the backup. <br /><br />"
"android.app.backup.BackupAgent.onDestroy () "," Provided as a convenience for agent implementations that need to do some sort of shutdown process after backup or restore is completed. <br /><br />"
"android.app.backup.BackupAgent.File () "," Handle the data delivered via the given file descriptor during a full restore operation. <br /><br />"
"android.app.backup.BackupAgent.onRestoreFinished () "," The application's restore operation has completed. <br /><br />"
"android.app.backup.BackupAgent.FullBackupDataOutput () "," The application is having its entire file system contents backed up. <br /><br />"
"android.app.backup.BackupAgentHelper.ParcelFileDescriptor () "," Run the restore process on each of the configured handlers. <br /><br />"
"android.app.backup.BackupAgentHelper.BackupHelper () "," Add a helper for a given data subset to the agent's configuration. <br /><br />"
"android.app.backup.BackupDataInput.readEntityData (byte[] data, int offset, int size) "," Read a record's raw data from the restore stream. <br /><br />"
"android.app.backup.BackupDataInput.skipEntityData () "," Consume the current entity's data without extracting it into a buffer for further processing. <br /><br />"
"android.app.backup.BackupDataInput.readNextHeader () "," Extract the next entity header from the restore stream. <br /><br />"
"android.app.backup.BackupDataInput.getKey () "," Report the key associated with the current entity in the restore stream <br /><br />"
"android.app.backup.BackupDataInput.getDataSize () "," Report the size in bytes of the data associated with the current entity in the restore stream. <br /><br />"
"android.app.backup.BackupDataInputStream.read () "," Read one byte of entity data from the stream, returning it as an integer value. <br /><br />"
"android.app.backup.BackupDataInputStream.size () "," Report the total number of bytes of data available for the current entity. <br /><br />"
"android.app.backup.BackupDataInputStream.getKey () "," Report the key string associated with this entity within the backup data set. <br /><br />"
"android.app.backup.BackupDataInputStream.read (byte[] b) "," Read enough entity data into a byte array to fill the array. <br /><br />"
"android.app.backup.BackupDataInputStream.read (byte[] b, int offset, int size) "," Read up to size bytes of data into a byte array, beginning at position offset within the array. <br /><br />"
"android.app.backup.BackupDataOutput.String () "," Mark the beginning of one record in the backup data stream. <br /><br />"
"android.app.backup.BackupDataOutput.writeEntityData (byte[] data, int size) "," Write a chunk of data under the current entity to the backup transport. <br /><br />"
"android.app.backup.BackupHelper.ParcelFileDescriptor () "," Based on oldState, determine what application content needs to be backed up, write it to data, and fill in newState with the complete state as it exists now. <br /><br />"
"android.app.backup.BackupHelper.BackupAgentHelper () "," Called by BackupAgentHelper after a restore operation to write the backup state file corresponding to the data as processed by the helper. <br /><br />"
"android.app.backup.BackupManager.RestoreObserver () "," Restore the calling application from backup. <br /><br />"
"android.app.backup.BackupManager.String () "," Convenience method for callers who need to indicate that some other package needs a backup pass. <br /><br />"
"android.app.backup.BackupManager.dataChanged () "," Notifies the Android backup system that your application wishes to back up new changes to its data. <br /><br />"
"android.app.backup.FileBackupHelper.BackupDataInputStream () "," Restore one record [representing a single file] from the restore dataset. <br /><br />"
"android.app.backup.FileBackupHelper.ParcelFileDescriptor () "," Based on oldState, determine which of the files from the application's data directory need to be backed up, write them to the data stream, and fill in newState with the state as it exists now. <br /><br />"
"android.app.backup.FileBackupHelper.BackupAgentHelper () "," Called by BackupAgentHelper after a restore operation to write the backup state file corresponding to the data as processed by the helper. <br /><br />"
"android.app.backup.RestoreObserver.restoreStarting (int numPackages) "," The restore operation has begun. <br /><br />"
"android.app.backup.RestoreObserver.restoreFinished (int error) "," The restore process has completed. <br /><br />"
"android.app.backup.RestoreObserver.restoreStarting (int) () "," An indication of which package is being restored currently, out of the total number provided in the restoreStarting(int) callback. <br /><br />"
"android.app.backup.SharedPreferencesBackupHelper.BackupDataInputStream () "," Restores one entity from the restore data stream to its proper shared preferences file store. <br /><br />"
"android.app.backup.SharedPreferencesBackupHelper.SharedPreferences () "," Backs up the configured SharedPreferences groups. <br /><br />"
"android.app.backup.SharedPreferencesBackupHelper.BackupAgentHelper () "," Called by BackupAgentHelper after a restore operation to write the backup state file corresponding to the data as processed by the helper. <br /><br />"
"android.app.DatePickerDialog.onSaveInstanceState () "," Saves the state of the dialog into a bundle. <br /><br />"
"android.app.DatePickerDialog.updateDate (int year, int monthOfYear, int dayOfMonth) "," Sets the current date. <br /><br />"
"android.app.DatePickerDialog.DatePicker () "," Called upon a date change. <br /><br />"
"android.app.DatePickerDialog.Bundle () "," Restore the state of the dialog from a previously saved bundle. <br /><br />"
"android.app.DatePickerDialog.DialogInterface () "," This method will be invoked when a button in the dialog is clicked. <br /><br />"
"android.app.DatePickerDialog.OnDateSetListener.DatePicker () "," no description <br /><br />"
"android.app.Dialog.onBackPressed () "," Called when the dialog has detected the user's press of the back key. <br /><br />"
"android.app.Dialog.KeyEvent.Callback.onKeyLongPress () () "," Default implementation of KeyEvent.Callback.onKeyLongPress(): always returns false (doesn't handle the event). <br /><br />"
"android.app.Dialog.ActionMode () "," Called when an action mode has been started. Note that if you override this method you should always call through to the superclass implementation by calling super.onActionModeStarted(mode). <br /><br />"
"android.app.Dialog.MenuItem () "," no description <br /><br />"
"android.app.Dialog.DialogInterface.OnKeyListener () "," Sets the callback that will be called if a key is dispatched to the dialog. <br /><br />"
"android.app.Dialog.create () "," Forces immediate creation of the dialog. <br /><br />"
"android.app.Dialog.isShowing () "," no description <br /><br />"
"android.app.Dialog.dismiss () "," Dismiss this dialog, removing it from the screen. <br /><br />"
"android.app.Dialog.onCreateOptionsMenu (Menu) () "," It is usually safe to proxy this call to the owner activity's onCreateOptionsMenu(Menu) if the client desires the same menu for this Dialog. <br /><br />"
"android.app.Dialog.onAttachedToWindow () "," Called when the window has been attached to the window manager. <br /><br />"
"android.app.Dialog.cancel () "," Cancel the dialog. <br /><br />"
"android.app.Dialog.ActionMode.Callback () "," Called when an action mode is being started for this window. <br /><br />"
"android.app.Dialog.getContext () "," Retrieve the Context this Dialog is running in. <br /><br />"
"android.app.Dialog.DialogInterface.OnDismissListener () "," Set a listener to be invoked when the dialog is dismissed. <br /><br />"
"android.app.Dialog.onSearchRequested () "," This hook is called when the user signals the desire to start a search. <br /><br />"
"android.app.Dialog.takeKeyEvents (boolean get) "," Request that key events come to this dialog. <br /><br />"
"android.app.Dialog.getOwnerActivity () "," Returns the Activity that owns this Dialog. <br /><br />"
"android.app.Dialog.closeOptionsMenu () "," no description <br /><br />"
"android.app.Dialog.ContextMenu.ContextMenuInfo () "," Called when the context menu for this view is being built. <br /><br />"
"android.app.Dialog.WindowManager.LayoutParams () "," This is called whenever the current window attributes change. <br /><br />"
"android.app.Dialog.setFeatureDrawableResource (int, int) (int featureId, int resId) "," Convenience for calling setFeatureDrawableResource(int, int). <br /><br />"
"android.app.Dialog.getWindow () "," Retrieve the current Window for the activity. <br /><br />"
"android.app.Dialog.onCreatePanelView (int featureId) "," Instantiate the view to display in the panel for 'featureId'. <br /><br />"
"android.app.Dialog.AccessibilityEvent () "," Called to process population of AccessibilityEvents. <br /><br />"
"android.app.Dialog.getLayoutInflater () "," no description <br /><br />"
"android.app.Dialog.Menu () "," Prepare a panel to be displayed. <br /><br />"
"android.app.Dialog.Window.addContentView () "," This hook is called whenever the content view of the screen changes (due to a call to Window.setContentView or Window.addContentView). <br /><br />"
"android.app.Dialog.setFeatureDrawable (int, Drawable) () "," Convenience for calling setFeatureDrawable(int, Drawable). <br /><br />"
"android.app.Dialog.requestWindowFeature (int featureId) "," Enable extended window features. <br /><br />"
"android.app.Dialog.MotionEvent () "," Called when the trackball was moved and not handled by any of the views inside of the activity. <br /><br />"
"android.app.Dialog.onPrepareOptionsMenu (Menu) () "," It is usually safe to proxy this call to the owner activity's onPrepareOptionsMenu(Menu) if the client desires the same menu for this Dialog. <br /><br />"
"android.app.Dialog.onSaveInstanceState () "," Saves the state of the dialog into a bundle. <br /><br />"
"android.app.Dialog.hide () "," Hide the dialog, but do not dismiss it. <br /><br />"
"android.app.Dialog.onWindowFocusChanged (boolean hasFocus) "," This hook is called whenever the window focus changes. <br /><br />"
"android.app.Dialog.DialogInterface.OnCancelListener () "," Set a listener to be invoked when the dialog is canceled. <br /><br />"
"android.app.Dialog.DialogInterface.OnShowListener () "," Sets a listener to be invoked when the dialog is shown. <br /><br />"
"android.app.Dialog.ActionBar () "," Retrieve the ActionBar attached to this dialog, if present. <br /><br />"
"android.app.Dialog.setFeatureDrawableAlpha (int, int) (int featureId, int alpha) "," Convenience for calling setFeatureDrawableAlpha(int, int). <br /><br />"
"android.app.Dialog.setVolumeControlStream (int streamType) "," By default, this will use the owner Activity's suggested stream type. <br /><br />"
"android.app.Dialog.invalidateOptionsMenu () "," no description <br /><br />"
"android.app.Dialog.BACK (boolean flag) "," Sets whether this dialog is cancelable with the BACK key. <br /><br />"
"android.app.Dialog.setTitle (int titleId) "," Set the title text for this dialog's window. <br /><br />"
"android.app.Dialog.openOptionsMenu () "," no description <br /><br />"
"android.app.Dialog.Message () "," Set a message to be sent when the dialog is dismissed. <br /><br />"
"android.app.Dialog.CharSequence () "," Set the title text for this dialog's window. <br /><br />"
"android.app.Dialog.Activity () "," Sets the Activity that owns this dialog. <br /><br />"
"android.app.Dialog.KeyEvent.Callback.onKeyMultiple () () "," Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event). <br /><br />"
"android.app.Dialog.View () "," no description <br /><br />"
"android.app.Dialog.show () "," Start the dialog and display it on screen. <br /><br />"
"android.app.Dialog.ViewGroup.LayoutParams () "," Set the screen content to an explicit view. <br /><br />"
"android.app.Dialog.onDetachedFromWindow () "," Called when the window has been attached to the window manager. <br /><br />"
"android.app.Dialog.setCanceledOnTouchOutside (boolean cancel) "," Sets whether this dialog is canceled when touched outside the window's bounds. <br /><br />"
"android.app.Dialog.KeyEvent () "," A key was released. <br /><br />"
"android.app.Dialog.setContentView (int layoutResID) "," Set the screen content from a layout resource. <br /><br />"
"android.app.Dialog.setFeatureDrawableUri (int, Uri) () "," Convenience for calling setFeatureDrawableUri(int, Uri). <br /><br />"
"android.app.Dialog.Bundle () "," Restore the state of the dialog from a previously saved bundle. <br /><br />"
"android.app.Dialog.findViewById (int id) "," Finds a child view with the given identifier. <br /><br />"
"android.app.Dialog.getCurrentFocus () () "," Call getCurrentFocus() on the Window if this Activity to return the currently focused view. <br /><br />"
"android.app.Dialog.getVolumeControlStream () "," no description <br /><br />"
"android.app.DialogFragment.String () "," Display the dialog, adding the fragment to the given FragmentManager. <br /><br />"
"android.app.DialogFragment.onDetach () "," Called when the fragment is no longer attached to its activity. <br /><br />"
"android.app.DialogFragment.onDestroyView () "," Remove dialog. <br /><br />"
"android.app.DialogFragment.FragmentTransaction.commitAllowingStateLoss () () "," Version of dismiss() that uses FragmentTransaction.commitAllowingStateLoss(). <br /><br />"
"android.app.DialogFragment.Activity () "," Called when a fragment is first attached to its activity. <br /><br />"
"android.app.DialogFragment.onStart () "," Called when the Fragment is visible to the user. <br /><br />"
"android.app.DialogFragment.setShowsDialog (boolean) () "," Return the current value of setShowsDialog(boolean). <br /><br />"
"android.app.DialogFragment.setCancelable (boolean) () "," Return the current value of setCancelable(boolean). <br /><br />"
"android.app.DialogFragment.setShowsDialog (boolean showsDialog) "," Controls whether this fragment should be shown in a dialog. <br /><br />"
"android.app.DialogFragment.onStop () "," Called when the Fragment is no longer started. <br /><br />"
"android.app.DialogFragment.dismiss () "," Dismiss the fragment and its dialog. <br /><br />"
"android.app.DialogFragment.getTheme () "," no description <br /><br />"
"android.app.DialogFragment.setCancelable (boolean cancelable) "," Control whether the shown Dialog is cancelable. <br /><br />"
"android.app.DialogFragment.getDialog () "," no description <br /><br />"
"android.app.DialogFragment.String[] () "," Print the Fragments's state into the given stream. <br /><br />"
"android.app.DialogFragment.Bundle () "," Called to ask the fragment to save its current dynamic state, so it can later be reconstructed in a new instance of its process is restarted. <br /><br />"
"android.app.DialogFragment.DialogInterface () "," This method will be invoked when the dialog is dismissed. <br /><br />"
"android.app.DialogFragment.setStyle (int style, int theme) "," Call to customize the basic appearance and behavior of the fragment's dialog. <br /><br />"
"android.app.DownloadManager.Context () "," Returns recommended maximum size, in bytes, of downloads that may go over a mobile connection; or null if there's no recommended limit. <br /><br />"
"android.app.DownloadManager.String () "," Adds a file to the downloads database system, so it could appear in Downloads App (and thus become eligible for management by the Downloads App). <br /><br />"
"android.app.DownloadManager.Uri (long id) "," Returns the Uri of the given downloaded file id, if the file is downloaded successfully. <br /><br />"
"android.app.DownloadManager.DownloadManager.Query () "," Query the download manager about downloads that have been requested. <br /><br />"
"android.app.DownloadManager.getMimeTypeForDownloadedFile (long id) "," Returns the media type of the given downloaded file id, if the file was downloaded successfully. <br /><br />"
"android.app.DownloadManager.DownloadManager.Request () "," Enqueue a new download. <br /><br />"
"android.app.DownloadManager.remove (long... ids) "," Cancel downloads and remove them from the download manager. <br /><br />"
"android.app.DownloadManager.openDownloadedFile (long id) "," Open a downloaded file for reading. <br /><br />"
"android.app.DownloadManager.Query.setFilterById (long... ids) "," Include only the downloads with the given IDs. <br /><br />"
"android.app.DownloadManager.Query.setFilterByStatus (int flags) "," Include only downloads with status matching any the given status flags. <br /><br />"
"android.app.DownloadManager.Request.setNotificationVisibility (int) (boolean show) "," This method was deprecated in API level 11. use setNotificationVisibility(int) <br /><br />"
"android.app.DownloadManager.Request.Uri () "," Set the local destination for the downloaded file. <br /><br />"
"android.app.DownloadManager.Request.getExternalFilesDir (String) () "," Set the local destination for the downloaded file to a path within the application's external files directory (as returned by getExternalFilesDir(String). <br /><br />"
"android.app.DownloadManager.Request.String () "," Set the MIME content type of this download. <br /><br />"
"android.app.DownloadManager.Request.enqueue (Request) () "," If the file to be downloaded is to be scanned by MediaScanner, this method should be called before enqueue(Request) is called. <br /><br />"
"android.app.DownloadManager.Request.setVisibleInDownloadsUi (boolean isVisible) "," Set whether this download should be displayed in the system's Downloads UI. <br /><br />"
"android.app.DownloadManager.Request.setAllowedNetworkTypes (int flags) "," Restrict the types of networks over which this download may proceed. <br /><br />"
"android.app.DownloadManager.Request.setNotificationVisibility (int visibility) "," Control whether a system notification is posted by the download manager while this download is running or when it is completed. <br /><br />"
"android.app.DownloadManager.Request.CharSequence () "," Set the title of this download, to be displayed in notifications (if enabled). <br /><br />"
"android.app.DownloadManager.Request.setAllowedOverMetered (boolean allow) "," Set whether this download may proceed over a metered network connection. <br /><br />"
"android.app.DownloadManager.Request.setAllowedOverRoaming (boolean allowed) "," Set whether this download may proceed over a roaming connection. <br /><br />"
"android.app.DownloadManager.Request.getExternalStoragePublicDirectory (String) () "," Set the local destination for the downloaded file to a path within the public external storage directory (as returned by getExternalStoragePublicDirectory(String)). <br /><br />"
"android.app.ExpandableListActivity.getExpandableListAdapter () "," Get the ExpandableListAdapter associated with this activity's ExpandableListView. <br /><br />"
"android.app.ExpandableListActivity.onGroupExpand (int groupPosition) "," Override this for receiving callbacks when a group has been expanded. <br /><br />"
"android.app.ExpandableListActivity.ContextMenu.ContextMenuInfo () "," Override this to populate the context menu when an item is long pressed. <br /><br />"
"android.app.ExpandableListActivity.onContentChanged () "," Updates the screen state (current list and other views) when the content changes. <br /><br />"
"android.app.ExpandableListActivity.setSelectedGroup (int groupPosition) "," Sets the selection to the specified group. <br /><br />"
"android.app.ExpandableListActivity.getSelectedPosition () "," Gets the position (in packed position representation) of the currently selected group or child. <br /><br />"
"android.app.ExpandableListActivity.getExpandableListView () "," Get the activity's expandable list view widget. <br /><br />"
"android.app.ExpandableListActivity.ExpandableListAdapter () "," Provide the adapter for the expandable list. <br /><br />"
"android.app.ExpandableListActivity.onGroupCollapse (int groupPosition) "," Override this for receiving callbacks when a group has been collapsed. <br /><br />"
"android.app.ExpandableListActivity.View () "," Override this for receiving callbacks when a child has been clicked. <br /><br />"
"android.app.ExpandableListActivity.setSelectedChild (int groupPosition, int childPosition, boolean shouldExpandGroup) "," Sets the selection to the specified child. <br /><br />"
"android.app.ExpandableListActivity.getSelectedId () "," Gets the ID of the currently selected group or child. <br /><br />"
"android.app.Fragment.getResources () "," Return getActivity().getResources(). <br /><br />"
"android.app.Fragment.getExitTransition () "," Returns the Transition that will be used to move Views out of the scene when the fragment is removed, hidden, or detached when not popping the back stack. <br /><br />"
"android.app.Fragment.getTag () "," Get the tag name of the fragment, if specified. <br /><br />"
"android.app.Fragment.getSharedElementEnterTransition () "," Returns the Transition that will be used for shared elements transferred into the content Scene. <br /><br />"
"android.app.Fragment.onPause () "," Called when the Fragment is no longer resumed. <br /><br />"
"android.app.Fragment.getFragmentManager () "," Return the FragmentManager for interacting with fragments associated with this fragment's activity. <br /><br />"
"android.app.Fragment.isHidden () (boolean hidden) "," Called when the hidden state (as returned by isHidden() of the fragment has changed. <br /><br />"
"android.app.Fragment.setTargetFragment (Fragment, int) () "," Return the target request code set by setTargetFragment(Fragment, int). <br /><br />"
"android.app.Fragment.MenuItem () "," This hook is called whenever an item in your options menu is selected. <br /><br />"
"android.app.Fragment.MenuInflater () "," Initialize the contents of the Activity's standard options menu. <br /><br />"
"android.app.Fragment.onStop () "," Called when the Fragment is no longer started. <br /><br />"
"android.app.Fragment.getRetainInstance () "," no description <br /><br />"
"android.app.Fragment.onDestroy () "," Called when the fragment is no longer in use. <br /><br />"
"android.app.Fragment.format (String, Object...) () "," Return a localized formatted string from the application's package's default string table, substituting the format arguments as defined in Formatter and format(String, Object...). <br /><br />"
"android.app.Fragment.getUserVisibleHint () "," no description <br /><br />"
"android.app.Fragment.isRemoving () "," Return true if this fragment is currently being removed from its activity. <br /><br />"
"android.app.Fragment.String[] () "," Print the Fragments's state into the given stream. <br /><br />"
"android.app.Fragment.onResume () "," Called when the fragment is visible to the user and actively running. <br /><br />"
"android.app.Fragment.startActivityForResult (Intent, int) () "," Call startActivityForResult(Intent, int) from the fragment's containing Activity. <br /><br />"
"android.app.Fragment.setAllowEnterTransitionOverlap (boolean allow) "," Sets whether the the exit transition and enter transition overlap or not. <br /><br />"
"android.app.Fragment.ContextMenu.ContextMenuInfo () "," Called when a context menu for the view is about to be shown. <br /><br />"
"android.app.Fragment.getAllowEnterTransitionOverlap () "," Returns whether the the exit transition and enter transition overlap or not. <br /><br />"
"android.app.Fragment.Object () "," Subclasses can not override equals(). <br /><br />"
"android.app.Fragment.onTrimMemory (int level) "," Called when the operating system has determined that it is a good time for a process to trim unneeded memory from its process. <br /><br />"
"android.app.Fragment.onStart () "," Called when the Fragment is visible to the user. <br /><br />"
"android.app.Fragment.getText (int resId) "," Return a localized, styled CharSequence from the application's package's default string table. <br /><br />"
"android.app.Fragment.onDestroyOptionsMenu () "," Called when this fragment's option menu items are no longer being included in the overall options menu. <br /><br />"
"android.app.Fragment.onLowMemory () "," This is called when the overall system is running low on memory, and actively running processes should trim their memory usage. <br /><br />"
"android.app.Fragment.getParentFragment () "," Returns the parent Fragment containing this Fragment. <br /><br />"
"android.app.Fragment.getId () "," Return the identifier this fragment is known by. <br /><br />"
"android.app.Fragment.getEnterTransition () "," Returns the Transition that will be used to move Views into the initial scene. <br /><br />"
"android.app.Fragment.instantiate (Context, String, Bundle) () "," Like instantiate(Context, String, Bundle) but with a null argument Bundle. <br /><br />"
"android.app.Fragment.Menu () "," Prepare the Screen's standard options menu to be displayed. <br /><br />"
"android.app.Fragment.getReturnTransition () "," Returns the Transition that will be used to move Views out of the scene when the Fragment is preparing to be removed, hidden, or detached because of popping the back stack. <br /><br />"
"android.app.Fragment.startActivity (Intent, Bundle) () "," Call startActivity(Intent, Bundle) from the fragment's containing Activity. <br /><br />"
"android.app.Fragment.setUserVisibleHint (boolean isVisibleToUser) "," Set a hint to the system about whether this fragment's UI is currently visible to the user. <br /><br />"
"android.app.Fragment.isVisible () "," Return true if the fragment is currently visible to the user. <br /><br />"
"android.app.Fragment.onDetach () "," Called when the fragment is no longer attached to its activity. <br /><br />"
"android.app.Fragment.onCreateView (LayoutInflater, ViewGroup, Bundle) () "," Called immediately after onCreateView(LayoutInflater, ViewGroup, Bundle) has returned, but before any saved state has been restored in to the view. <br /><br />"
"android.app.Fragment.setAllowReturnTransitionOverlap (boolean allow) "," Sets whether the the return transition and reenter transition overlap or not. <br /><br />"
"android.app.Fragment.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.app.Fragment.setRetainInstance (boolean retain) "," Control whether a fragment instance is retained across Activity re-creation (such as from a configuration change). <br /><br />"
"android.app.Fragment.onCreateOptionsMenu (Menu, MenuInflater) (boolean hasMenu) "," Report that this fragment would like to participate in populating the options menu by receiving a call to onCreateOptionsMenu(Menu, MenuInflater) and related methods. <br /><br />"
"android.app.Fragment.getAllowReturnTransitionOverlap () "," Returns whether the the return transition and reenter transition overlap or not. <br /><br />"
"android.app.Fragment.getReenterTransition () "," Returns the Transition that will be used to move Views in to the scene when returning due to popping a back stack. <br /><br />"
"android.app.Fragment.onInflate (Activity, AttributeSet, Bundle) () "," This method was deprecated in API level 12. Use onInflate(Activity, AttributeSet, Bundle) instead. <br /><br />"
"android.app.Fragment.getString (int resId) "," Return a localized string from the application's package's default string table. <br /><br />"
"android.app.Fragment.Configuration () "," Called by the system when the device configuration changes while your component is running. <br /><br />"
"android.app.Fragment.startActivity (Intent) () "," Call startActivity(Intent) from the fragment's containing Activity. <br /><br />"
"android.app.Fragment.getLoaderManager () "," Return the LoaderManager for this fragment, creating it if needed. <br /><br />"
"android.app.Fragment.isResumed () "," Return true if the fragment is in the resumed state. <br /><br />"
"android.app.Fragment.getChildFragmentManager () "," Return a private FragmentManager for placing and managing Fragments inside of this Fragment. <br /><br />"
"android.app.Fragment.Fragment () "," Optional target for this fragment. <br /><br />"
"android.app.Fragment.getActivity () "," Return the Activity this fragment is currently associated with. <br /><br />"
"android.app.Fragment.isInLayout () "," Return true if the layout is included as part of an activity view hierarchy via the &lt;fragment&gt; tag. <br /><br />"
"android.app.Fragment.Transition () "," Sets the Transition that will be used for shared elements transferred back during a pop of the back stack. <br /><br />"
"android.app.Fragment.startActivityForResult (Intent, int, Bundle) () "," Call startActivityForResult(Intent, int, Bundle) from the fragment's containing Activity. <br /><br />"
"android.app.Fragment.Activity () "," Called when a fragment is first attached to its activity. <br /><br />"
"android.app.Fragment.isAdded () "," Return true if the fragment is currently added to its activity. <br /><br />"
"android.app.Fragment.View () "," Prevents a context menu to be shown for the given view. <br /><br />"
"android.app.Fragment.onCreateAnimator (int transit, boolean enter, int nextAnim) "," Called when a fragment loads an animation. <br /><br />"
"android.app.Fragment.isDetached () "," Return true if the fragment has been explicitly detached from the UI. <br /><br />"
"android.app.Fragment.SharedElementCallback () "," When custom transitions are used with Fragments, the exit transition callback is called when this Fragment is attached or detached when popping the back stack. <br /><br />"
"android.app.Fragment.setMenuVisibility (boolean menuVisible) "," Set a hint for whether this fragment's menu should be visible. <br /><br />"
"android.app.Fragment.getSharedElementReturnTransition () "," Return the Transition that will be used for shared elements transferred back during a pop of the back stack. <br /><br />"
"android.app.Fragment.getArguments () "," Return the arguments supplied when the fragment was instantiated, if any. <br /><br />"
"android.app.Fragment.hashCode () "," Subclasses can not override hashCode(). <br /><br />"
"android.app.Fragment.isHidden () "," Return true if the fragment has been hidden. <br /><br />"
"android.app.Fragment.Bundle () "," Supply the construction arguments for this fragment. <br /><br />"
"android.app.Fragment.FragmentManager.saveFragmentInstanceState () "," Set the initial saved state that this Fragment should restore itself from when first being constructed, as returned by FragmentManager.saveFragmentInstanceState. <br /><br />"
"android.app.Fragment.SavedState.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.app.Fragment.SavedState.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.app.FragmentBreadCrumbs.View.OnClickListener () "," Inserts an optional parent entry at the first position in the breadcrumbs. <br /><br />"
"android.app.FragmentBreadCrumbs.setMaxVisible (int visibleCrumbs) "," The maximum number of breadcrumbs to show. <br /><br />"
"android.app.FragmentBreadCrumbs.onBackStackChanged () "," Called whenever the contents of the back stack change. <br /><br />"
"android.app.FragmentBreadCrumbs.CharSequence () "," Set a custom title for the bread crumbs. <br /><br />"
"android.app.FragmentBreadCrumbs.Activity () "," Attach the bread crumbs to their activity. <br /><br />"
"android.app.FragmentBreadCrumbs.FragmentBreadCrumbs.OnBreadCrumbClickListener () "," Sets a listener for clicks on the bread crumbs. <br /><br />"
"android.app.FragmentBreadCrumbs.OnBreadCrumbClickListener.FragmentManager.BackStackEntry () "," Called when a bread crumb is clicked. <br /><br />"
"android.app.FragmentManager.BackStackEntry.getBreadCrumbShortTitleRes () "," Return the short bread crumb title resource identifier for the entry, or 0 if it does not have one. <br /><br />"
"android.app.FragmentManager.BackStackEntry.getId () "," Return the unique identifier for the entry. <br /><br />"
"android.app.FragmentManager.BackStackEntry.getBreadCrumbTitle () "," Return the full bread crumb title for the entry, or null if it does not have one. <br /><br />"
"android.app.FragmentManager.BackStackEntry.getBreadCrumbTitleRes () "," Return the full bread crumb title resource identifier for the entry, or 0 if it does not have one. <br /><br />"
"android.app.FragmentManager.BackStackEntry.FragmentTransaction.addToBackStack (String) () "," Get the name that was supplied to FragmentTransaction.addToBackStack(String) when creating this entry. <br /><br />"
"android.app.FragmentManager.BackStackEntry.getBreadCrumbShortTitle () "," Return the short bread crumb title for the entry, or null if it does not have one. <br /><br />"
"android.app.FragmentManager.findFragmentById (int id) "," Finds a fragment that was identified by the given id either when inflated from XML or as the container ID when added in a transaction. <br /><br />"
"android.app.FragmentManager.String () "," Pop the last fragment transition from the manager's fragment back stack. <br /><br />"
"android.app.FragmentManager.invalidateOptionsMenu () "," Invalidate the attached activity's options menu as necessary. <br /><br />"
"android.app.FragmentManager.getBackStackEntryCount () "," Return the number of entries currently in the back stack. <br /><br />"
"android.app.FragmentManager.putFragment (Bundle, String, Fragment) () "," Retrieve the current Fragment instance for a reference previously placed with putFragment(Bundle, String, Fragment). <br /><br />"
"android.app.FragmentManager.Fragment () "," Save the current instance state of the given Fragment. <br /><br />"
"android.app.FragmentManager.popBackStack (int, int) (int id, int flags) "," Like popBackStack(int, int), but performs the operation immediately inside of the call. <br /><br />"
"android.app.FragmentManager.popBackStack () "," Pop the top state off the back stack. <br /><br />"
"android.app.FragmentManager.beginTransaction () "," Start a series of edit operations on the Fragments associated with this FragmentManager. <br /><br />"
"android.app.FragmentManager.popBackStack (String, int) () "," Like popBackStack(String, int), but performs the operation immediately inside of the call. <br /><br />"
"android.app.FragmentManager.popBackStack (int id, int flags) "," Pop all back stack states up to the one with the given identifier. <br /><br />"
"android.app.FragmentManager.addOnBackStackChangedListener (OnBackStackChangedListener) () "," Remove a listener that was previously added with addOnBackStackChangedListener(OnBackStackChangedListener). <br /><br />"
"android.app.FragmentManager.enableDebugLogging (boolean enabled) "," Control whether the framework's internal fragment manager debugging logs are turned on. <br /><br />"
"android.app.FragmentManager.popBackStack () () "," Like popBackStack(), but performs the operation immediately inside of the call. <br /><br />"
"android.app.FragmentManager.FragmentTransaction.commit () () "," After a FragmentTransaction is committed with FragmentTransaction.commit(), it is scheduled to be executed asynchronously on the process's main thread. <br /><br />"
"android.app.FragmentManager.Activity.onDestroy () () "," Returns true if the final Activity.onDestroy() call has been made on the FragmentManager's Activity, so this instance is now dead. <br /><br />"
"android.app.FragmentManager.FragmentManager.OnBackStackChangedListener () "," Add a new listener for changes to the fragment back stack. <br /><br />"
"android.app.FragmentManager.String[] () "," Print the FragmentManager's state into the given stream. <br /><br />"
"android.app.FragmentManager.getBackStackEntryAt (int index) "," Return the BackStackEntry at index index in the back stack; entries start index 0 being the bottom of the stack. <br /><br />"
"android.app.FragmentManager.OnBackStackChangedListener.onBackStackChanged () "," Called whenever the contents of the back stack change. <br /><br />"
"android.app.FragmentTransaction.commit () "," Schedules a commit of this transaction. <br /><br />"
"android.app.FragmentTransaction.String () "," Replace an existing fragment that was added to a container. <br /><br />"
"android.app.FragmentTransaction.setCustomAnimations (int enter, int exit) "," Set specific animation resources to run for the fragments that are entering and exiting in this transaction. <br /><br />"
"android.app.FragmentTransaction.addToBackStack (String) () "," Disallow calls to addToBackStack(String). <br /><br />"
"android.app.FragmentTransaction.Fragment () "," Shows a previously hidden fragment. <br /><br />"
"android.app.FragmentTransaction.setCustomAnimations (int enter, int exit, int popEnter, int popExit) "," Set specific animation resources to run for the fragments that are entering and exiting in this transaction. <br /><br />"
"android.app.FragmentTransaction.detach (Fragment) () "," Re-attach a fragment after it had previously been detached from the UI with detach(Fragment). <br /><br />"
"android.app.FragmentTransaction.setBreadCrumbShortTitle (int) () "," Like setBreadCrumbShortTitle(int) but taking a raw string; this method is not recommended, as the string can not be changed later if the locale changes. <br /><br />"
"android.app.FragmentTransaction.setBreadCrumbTitle (int) () "," Like setBreadCrumbTitle(int) but taking a raw string; this method is not recommended, as the string can not be changed later if the locale changes. <br /><br />"
"android.app.FragmentTransaction.add (int, Fragment, String) () "," Calls add(int, Fragment, String) with a 0 containerViewId. <br /><br />"
"android.app.FragmentTransaction.isEmpty () "," no description <br /><br />"
"android.app.FragmentTransaction.isAddToBackStackAllowed () "," Returns true if this FragmentTransaction is allowed to be added to the back stack. <br /><br />"
"android.app.FragmentTransaction.replace (int, Fragment, String) () "," Calls replace(int, Fragment, String) with a null tag. <br /><br />"
"android.app.FragmentTransaction.FragmentBreadCrumbs (int res) "," Set the full title to show as a bread crumb when this transaction is on the back stack, as used by FragmentBreadCrumbs. <br /><br />"
"android.app.FragmentTransaction.commit () () "," Like commit() but allows the commit to be executed after an activity's state is saved. <br /><br />"
"android.app.FragmentTransaction.setTransitionStyle (int styleRes) "," Set a custom style resource that will be used for resolving transit animations. <br /><br />"
"android.app.FragmentTransaction.setTransition (int transit) "," Select a standard transition animation for this transaction. <br /><br />"
"android.app.Instrumentation.ActivityMonitor.getLastActivity () "," Retrieve the most recent activity class that was seen by this monitor. <br /><br />"
"android.app.Instrumentation.ActivityMonitor.getResult () "," Retrieve the result associated with this ActivityMonitor, or null if none. <br /><br />"
"android.app.Instrumentation.ActivityMonitor.getHits () "," Retrieve the number of times the monitor has been hit so far. <br /><br />"
"android.app.Instrumentation.ActivityMonitor.waitForActivity () "," Block until an Activity is created that matches this monitor, returning the resulting activity. <br /><br />"
"android.app.Instrumentation.ActivityMonitor.waitForActivityWithTimeout (long timeOut) "," Block until an Activity is created that matches this monitor, returning the resulting activity or till the timeOut period expires. <br /><br />"
"android.app.Instrumentation.ActivityMonitor.isBlocking () "," Check whether this monitor blocks activity starts (not allowing the actual activity to run) or allows them to execute normally. <br /><br />"
"android.app.Instrumentation.ActivityMonitor.getFilter () "," Retrieve the filter associated with this ActivityMonitor. <br /><br />"
"android.app.Instrumentation.ActivityResult.getResultCode () "," Retrieve the result code contained in this result. <br /><br />"
"android.app.Instrumentation.ActivityResult.getResultData () "," Retrieve the data contained in this result. <br /><br />"
"android.app.Instrumentation.getComponentName () "," Returns complete component name of this instrumentation. <br /><br />"
"android.app.Instrumentation.UiAutomation () "," Gets the UiAutomation instance. <br /><br />"
"android.app.Instrumentation.startProfiling () "," This method will start profiling if isProfiling() returns true. <br /><br />"
"android.app.Instrumentation.MotionEvent () "," Dispatch a trackball event. <br /><br />"
"android.app.Instrumentation.Application () "," Perform instantiation of the process's Application object. <br /><br />"
"android.app.Instrumentation.sendCharacterSync (int keyCode) "," Higher-level method for sending both the down and up key events for a particular character key code. <br /><br />"
"android.app.Instrumentation.stopAllocCounting () "," no description <br /><br />"
"android.app.Instrumentation.startAllocCounting () "," no description <br /><br />"
"android.app.Instrumentation.onNewIntent (Intent) () "," Perform calling of an activity's onNewIntent(Intent) method. <br /><br />"
"android.app.Instrumentation.onDestroy () "," Called when the instrumented application is stopping, after all of the normal application cleanup has occurred. <br /><br />"
"android.app.Instrumentation.onStart () () "," Perform calling of an activity's onStart() method. <br /><br />"
"android.app.Instrumentation.setInTouchMode (boolean inTouch) "," Force the global system in or out of touch mode. <br /><br />"
"android.app.Instrumentation.addMonitor (Instrumentation.ActivityMonitor) () "," Remove an Instrumentation.ActivityMonitor that was previously added with addMonitor(Instrumentation.ActivityMonitor). <br /><br />"
"android.app.Instrumentation.getContext () "," Return the Context of this instrumentation's package. <br /><br />"
"android.app.Instrumentation.String () "," Sends the key events corresponding to the text to the app being instrumented. <br /><br />"
"android.app.Instrumentation.setAutomaticPerformanceSnapshots () "," no description <br /><br />"
"android.app.Instrumentation.getTargetContext () "," Return a Context for the target application being instrumented. <br /><br />"
"android.app.Instrumentation.startPerformanceSnapshot () "," no description <br /><br />"
"android.app.Instrumentation.sendKeyDownUpSync (int key) "," Sends an up and down key event sync to the currently focused window. <br /><br />"
"android.app.Instrumentation.onRestoreInstanceState (Bundle) () "," Perform calling of an activity's onRestoreInstanceState(Bundle) method. <br /><br />"
"android.app.Instrumentation.onStop () () "," Perform calling of an activity's onStop() method. <br /><br />"
"android.app.Instrumentation.getBinderCounts () "," Returns a bundle with the counts for various binder counts for this process. <br /><br />"
"android.app.Instrumentation.start () "," Create and start a new thread in which to run instrumentation. <br /><br />"
"android.app.Instrumentation.Throwable () "," This is called whenever the system captures an unhandled exception that was thrown by the application. <br /><br />"
"android.app.Instrumentation.onResume () () "," Perform calling of an activity's onResume() method. <br /><br />"
"android.app.Instrumentation.onSaveInstanceState (Bundle) () "," Perform calling of an activity's onSaveInstanceState(Bundle) method. <br /><br />"
"android.app.Instrumentation.Activity () "," Perform instantiation of an Activity object. <br /><br />"
"android.app.Instrumentation.onStart () "," Method where the instrumentation thread enters execution. <br /><br />"
"android.app.Instrumentation.onUserLeaveHint () () "," Perform calling of an activity's onUserLeaveHint() method. <br /><br />"
"android.app.Instrumentation.stopProfiling () "," Stops profiling if isProfiling() returns true. <br /><br />"
"android.app.Instrumentation.onCreate () () "," Perform calling of the application's onCreate() method. <br /><br />"
"android.app.Instrumentation.KeyEvent () "," Send a key event to the currently focused window/view and wait for it to be processed. <br /><br />"
"android.app.Instrumentation.endPerformanceSnapshot () "," no description <br /><br />"
"android.app.Instrumentation.waitForIdleSync () "," Synchronously wait for the application to be idle. <br /><br />"
"android.app.Instrumentation.onPause () () "," Perform calling of an activity's onPause() method. <br /><br />"
"android.app.Instrumentation.isProfiling () "," Check whether this instrumentation was started with profiling enabled. <br /><br />"
"android.app.Instrumentation.Bundle () "," Provide a status report about the application. <br /><br />"
"android.app.Instrumentation.getAllocCounts () "," Returns a bundle with the current results from the allocation counting. <br /><br />"
"android.app.Instrumentation.Intent () "," Start a new activity and wait for it to begin running before returning. <br /><br />"
"android.app.Instrumentation.onRestart () () "," Perform calling of an activity's onRestart() method. <br /><br />"
"android.app.Instrumentation.onPostCreate (Bundle) () "," Perform calling of an activity's onPostCreate(Bundle) method. <br /><br />"
"android.app.Instrumentation.onCreate (Bundle) () "," Perform calling of an activity's onCreate(Bundle) method. <br /><br />"
"android.app.Instrumentation.Instrumentation.ActivityMonitor () "," Wait for an existing Instrumentation.ActivityMonitor to be hit till the timeout expires. <br /><br />"
"android.app.Instrumentation.Runnable () "," Schedule a callback for when the application's main thread goes idle (has no more events to process). <br /><br />"
"android.app.IntentService.onCreate () "," Called by the system when the service is first created. <br /><br />"
"android.app.IntentService.onStartCommand (Intent, int, int) () "," This method is deprecated. Implement onStartCommand(Intent, int, int) instead. <br /><br />"
"android.app.IntentService.onDestroy () "," Called by the system to notify a Service that it is no longer used and is being removed. <br /><br />"
"android.app.IntentService.Intent () "," You should not override this method for your IntentService. <br /><br />"
"android.app.IntentService.setIntentRedelivery (boolean enabled) "," Sets intent redelivery preferences. <br /><br />"
"android.app.job.JobInfo.Builder.setBackoffCriteria (long initialBackoffMillis, int backoffPolicy) "," Set up the back-off/retry policy. <br /><br />"
"android.app.job.JobInfo.Builder.setRequiresCharging (boolean requiresCharging) "," Specify that to run this job, the device needs to be plugged in. <br /><br />"
"android.app.job.JobInfo.Builder.setMinimumLatency (long minLatencyMillis) "," Specify that this job should be delayed by the provided amount of time. <br /><br />"
"android.app.job.JobInfo.Builder.setRequiresDeviceIdle (boolean requiresDeviceIdle) "," Specify that to run, the job needs the device to be in idle mode. <br /><br />"
"android.app.job.JobInfo.Builder.setRequiredNetworkType (int networkType) "," Set some description of the kind of network type your job needs to have. <br /><br />"
"android.app.job.JobInfo.Builder.setPeriodic (long intervalMillis) "," Specify that this job should recur with the provided interval, not more than once per period. <br /><br />"
"android.app.job.JobInfo.Builder.build () "," no description <br /><br />"
"android.app.job.JobInfo.Builder.setPersisted (boolean isPersisted) "," Set whether or not to persist this job across device reboots. <br /><br />"
"android.app.job.JobInfo.Builder.setOverrideDeadline (long maxExecutionDelayMillis) "," Set deadline which is the maximum scheduling latency. <br /><br />"
"android.app.job.JobInfo.Builder.PersistableBundle () "," Set optional extras. <br /><br />"
"android.app.job.JobInfo.getIntervalMillis () "," Set to the interval between occurrences of this job. <br /><br />"
"android.app.job.JobInfo.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.app.job.JobInfo.getMinLatencyMillis () "," Set for a job that does not recur periodically, to specify a delay after which the job will be eligible for execution. <br /><br />"
"android.app.job.JobInfo.isRequireCharging () "," Whether this job needs the device to be plugged in. <br /><br />"
"android.app.job.JobInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.app.job.JobInfo.getService () "," Name of the service endpoint that will be called back into by the JobScheduler. <br /><br />"
"android.app.job.JobInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.app.job.JobInfo.isRequireDeviceIdle () "," Whether this job needs the device to be in an Idle maintenance window. <br /><br />"
"android.app.job.JobInfo.BACKOFF_POLICY_LINEAR () "," One of either BACKOFF_POLICY_EXPONENTIAL, or BACKOFF_POLICY_LINEAR, depending on which criteria you set when creating this job. <br /><br />"
"android.app.job.JobInfo.getExtras () "," Bundle of extras which are returned to your application at execution time. <br /><br />"
"android.app.job.JobInfo.isPeriodic () "," Track whether this job will repeat with a given period. <br /><br />"
"android.app.job.JobInfo.getId () "," Unique job id associated with this class. <br /><br />"
"android.app.job.JobInfo.getInitialBackoffMillis () "," The amount of time the JobScheduler will wait before rescheduling a failed job. <br /><br />"
"android.app.job.JobInfo.NETWORK_TYPE_UNMETERED () "," One of NETWORK_TYPE_ANY, NETWORK_TYPE_NONE, or NETWORK_TYPE_UNMETERED. <br /><br />"
"android.app.job.JobInfo.setOverrideDeadline (long) () "," See setOverrideDeadline(long). <br /><br />"
"android.app.job.JobInfo.isPersisted () "," no description <br /><br />"
"android.app.job.JobParameters.getExtras () "," no description <br /><br />"
"android.app.job.JobParameters.getJobId () "," no description <br /><br />"
"android.app.job.JobParameters.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.app.job.JobParameters.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.app.job.JobParameters.setOverrideDeadline (long) () "," For jobs with setOverrideDeadline(long) set, this provides an easy way to tell whether the job is being executed due to the deadline expiring. <br /><br />"
"android.app.job.JobScheduler.getAllPendingJobs () "," no description <br /><br />"
"android.app.job.JobScheduler.JobInfo () "," no description <br /><br />"
"android.app.job.JobScheduler.cancelAll () "," Cancel all jobs that have been registered with the JobScheduler by this package. <br /><br />"
"android.app.job.JobScheduler.cancel (int jobId) "," Cancel a job that is pending in the JobScheduler. <br /><br />"
"android.app.job.JobService.jobFinished (JobParameters, boolean) () "," This method is called if the system has determined that you must stop execution of your job even before you've had a chance to call jobFinished(JobParameters, boolean). <br /><br />"
"android.app.job.JobService.JobParameters () "," Override this method with the callback logic for your job. <br /><br />"
"android.app.KeyguardManager.KeyguardLock.reenableKeyguard () "," Reenable the keyguard. <br /><br />"
"android.app.KeyguardManager.KeyguardLock.disableKeyguard () "," Disable the keyguard from showing. <br /><br />"
"android.app.KeyguardManager.OnKeyguardExitResult.onKeyguardExitResult (boolean success) "," no description <br /><br />"
"android.app.LauncherActivity.setTitle (int titleId) "," Change the title associated with this activity. <br /><br />"
"android.app.LauncherActivity.makeListItems () "," Perform the query to determine which results to show and return a list of them. <br /><br />"
"android.app.LauncherActivity.CharSequence () "," Change the title associated with this activity. <br /><br />"
"android.app.LauncherActivity.IconResizer.Drawable () "," Returns a Drawable representing the thumbnail of the specified Drawable. <br /><br />"
"android.app.ListActivity.ListAdapter () "," Provide the cursor for the list view. <br /><br />"
"android.app.ListActivity.getListView () "," Get the activity's list view widget. <br /><br />"
"android.app.ListActivity.getSelectedItemPosition () "," Get the position of the currently selected list item. <br /><br />"
"android.app.ListActivity.getListAdapter () "," Get the ListAdapter associated with this activity's ListView. <br /><br />"
"android.app.ListActivity.onContentChanged () "," Updates the screen state (current list and other views) when the content changes. <br /><br />"
"android.app.ListActivity.getSelectedItemId () "," Get the cursor row ID of the currently selected list item. <br /><br />"
"android.app.ListActivity.setSelection (int position) "," Set the currently selected list item to the specified position with the adapter's data <br /><br />"
"android.app.ListFragment.ListAdapter () "," Provide the cursor for the list view. <br /><br />"
"android.app.ListFragment.getListView () "," Get the activity's list view widget. <br /><br />"
"android.app.ListFragment.getSelectedItemPosition () "," Get the position of the currently selected list item. <br /><br />"
"android.app.ListFragment.getListAdapter () "," Get the ListAdapter associated with this activity's ListView. <br /><br />"
"android.app.ListFragment.setListShown (boolean) (boolean shown) "," Like setListShown(boolean), but no animation is used when transitioning from the previous state. <br /><br />"
"android.app.ListFragment.onDestroyView () "," Detach from list view. <br /><br />"
"android.app.ListFragment.setListShown (boolean shown) "," Control whether the list is being displayed. <br /><br />"
"android.app.ListFragment.CharSequence () "," The default content for a ListFragment has a TextView that can be shown when the list is empty. <br /><br />"
"android.app.ListFragment.Bundle () "," Attach to list view once the view hierarchy has been created. <br /><br />"
"android.app.ListFragment.getSelectedItemId () "," Get the cursor row ID of the currently selected list item. <br /><br />"
"android.app.ListFragment.setSelection (int position) "," Set the currently selected list item to the specified position with the adapter's data <br /><br />"
"android.app.ListFragment.View () "," This method will be called when an item in the list is selected. <br /><br />"
"android.app.LoaderManager.enableDebugLogging (boolean enabled) "," Control whether the framework's internal loader manager debugging logs are turned on. <br /><br />"
"android.app.LoaderManager.Loader () "," Starts a new or restarts an existing Loader in this manager, registers the callbacks to it, and (if the activity/fragment is currently started) starts loading it. <br /><br />"
"android.app.LoaderManager.LoaderCallbacks () "," Ensures a loader is initialized and active. <br /><br />"
"android.app.LoaderManager.destroyLoader (int id) "," Stops and removes the loader with the given ID. <br /><br />"
"android.app.LoaderManager.String[] () "," Print the LoaderManager's state into the given stream. <br /><br />"
"android.app.LoaderManager.getLoader (int id) "," Return the Loader with the given id or null if no matching Loader is found. <br /><br />"
"android.app.LoaderManager.LoaderCallbacks&lt;D&gt;.Loader () "," Called when a previously created loader is being reset, and thus making its data unavailable. <br /><br />"
"android.app.LoaderManager.LoaderCallbacks&lt;D&gt;.Bundle () "," Instantiate and return a new Loader for the given ID. <br /><br />"
"android.app.LocalActivityManager.onDestroy () () "," Remove all activities from this LocalActivityManager, performing an onDestroy() on any that are currently instantiated. <br /><br />"
"android.app.LocalActivityManager.String () "," Return the Activity object associated with a string ID. <br /><br />"
"android.app.LocalActivityManager.onDestroy () (boolean finishing) "," Called by the container activity in its onDestroy() so that LocalActivityManager can perform the corresponding action on the activities it holds. <br /><br />"
"android.app.LocalActivityManager.getCurrentId () "," Retrieve the ID of the activity that is currently running. <br /><br />"
"android.app.LocalActivityManager.saveInstanceState () () "," Restore a state that was previously returned by saveInstanceState(). <br /><br />"
"android.app.LocalActivityManager.onStop () () "," Called by the container activity in its onStop() so that LocalActivityManager can perform the corresponding action on the activities it holds. <br /><br />"
"android.app.LocalActivityManager.getCurrentActivity () "," Retrieve the Activity that is currently running. <br /><br />"
"android.app.LocalActivityManager.onResume () () "," Called by the container activity in its onResume() so that LocalActivityManager can perform the corresponding action on the activities it holds. <br /><br />"
"android.app.LocalActivityManager.saveInstanceState () "," Retrieve the state of all activities known by the group. <br /><br />"
"android.app.LocalActivityManager.onPause () (boolean finishing) "," Called by the container activity in its onPause() so that LocalActivityManager can perform the corresponding action on the activities it holds. <br /><br />"
"android.app.LocalActivityManager.Intent () "," Start a new activity running in the group. <br /><br />"
"android.app.MediaRouteActionProvider.onPerformDefaultAction () "," Performs an optional default action. <br /><br />"
"android.app.MediaRouteActionProvider.onCreateActionView (MenuItem) () "," This method is deprecated. use onCreateActionView(MenuItem) <br /><br />"
"android.app.MediaRouteActionProvider.View.OnClickListener () "," no description <br /><br />"
"android.app.MediaRouteActionProvider.MenuItem () "," The result of this method determines whether or not isVisible() will be used by the MenuItem this ActionProvider is bound to help determine its visibility. <br /><br />"
"android.app.MediaRouteActionProvider.setRouteTypes (int types) "," Sets the types of routes that will be shown in the media route chooser dialog launched by this button. <br /><br />"
"android.app.MediaRouteButton.performLongClick () "," Call this view's OnLongClickListener, if it is defined. <br /><br />"
"android.app.MediaRouteButton.onDetachedFromWindow () "," This is called when the view is detached from a window. <br /><br />"
"android.app.MediaRouteButton.setVisibility (int visibility) "," Set the enabled state of this view. <br /><br />"
"android.app.MediaRouteButton.View.OnClickListener () "," no description <br /><br />"
"android.app.MediaRouteButton.performClick () "," Call this view's OnClickListener, if it is defined. <br /><br />"
"android.app.MediaRouteButton.onAttachedToWindow () "," This is called when the view is attached to a window. <br /><br />"
"android.app.MediaRouteButton.Drawable.jumpToCurrentState () () "," Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view. <br /><br />"
"android.app.MediaRouteButton.showDialog () "," Show the route chooser or controller dialog. <br /><br />"
"android.app.MediaRouteButton.getRouteTypes () "," Gets the media route types for filtering the routes that the user can select using the media route chooser dialog. <br /><br />"
"android.app.MediaRouteButton.setRouteTypes (int types) "," Sets the types of routes that will be shown in the media route chooser dialog launched by this button. <br /><br />"
"android.app.NativeActivity.InputQueue () "," Called when the given InputQueue is no longer associated with the thread and thus not dispatching events. <br /><br />"
"android.app.NativeActivity.Configuration () "," Called by the system when the device configuration changes while your activity is running. <br /><br />"
"android.app.NativeActivity.Window (boolean hasFocus) "," Called when the current Window of the activity gains or loses focus. <br /><br />"
"android.app.NativeActivity.onGlobalLayout () "," Callback method to be invoked when the global layout state or the visibility of views within the view tree changes <br /><br />"
"android.app.NativeActivity.SurfaceHolder () "," Called when the application needs to redraw the content of its surface, after it is resized or for some other reason. <br /><br />"
"android.app.NativeActivity.onLowMemory () "," This is called when the overall system is running low on memory, and actively running processes should trim their memory usage. <br /><br />"
"android.app.Notification.Action.Builder.getExtras () "," Get the metadata Bundle used by this Builder. <br /><br />"
"android.app.Notification.Action.Builder.RemoteInput () "," Add an input to be collected from the user when this action is sent. <br /><br />"
"android.app.Notification.Action.Builder.Bundle () "," Merge additional metadata into this builder. <br /><br />"
"android.app.Notification.Action.Builder.Notification.Action.Extender () "," Apply an extender to this action builder. <br /><br />"
"android.app.Notification.Action.Builder.Notification.Action () "," Combine all of the options that have been set and return a new Notification.Action object. <br /><br />"
"android.app.Notification.Action.Extender.Notification.Action.Builder () "," Apply this extender to a notification action builder. <br /><br />"
"android.app.Notification.Action.getExtras () "," Get additional metadata carried around with this Action. <br /><br />"
"android.app.Notification.Action.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.app.Notification.Action.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.app.Notification.Action.getRemoteInputs () "," Get the list of inputs to be collected from the user when this action is sent. <br /><br />"
"android.app.Notification.Action.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.app.Notification.Action.WearableExtender.setAvailableOffline (boolean availableOffline) "," Set whether this action is available when the wearable device is not connected to a companion device. <br /><br />"
"android.app.Notification.Action.WearableExtender.getInProgressLabel () "," Get the label to display while the wearable is preparing to automatically execute the action. <br /><br />"
"android.app.Notification.Action.WearableExtender.getCancelLabel () "," Get the label to display to cancel the action. <br /><br />"
"android.app.Notification.Action.WearableExtender.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.app.Notification.Action.WearableExtender.Notification.Action.Builder () "," Apply wearable extensions to a notification action that is being built. <br /><br />"
"android.app.Notification.Action.WearableExtender.getConfirmLabel () "," Get the label to display to confirm that the action should be executed. <br /><br />"
"android.app.Notification.Action.WearableExtender.CharSequence () "," Set a label to display while the wearable is preparing to automatically execute the action. <br /><br />"
"android.app.Notification.Action.WearableExtender.isAvailableOffline () "," Get whether this action is available when the wearable device is not connected to a companion device. <br /><br />"
"android.app.Notification.BigPictureStyle.CharSequence () "," Set the first line of text after the detail section in the big form of the template. <br /><br />"
"android.app.Notification.BigPictureStyle.Bitmap () "," Provide the bitmap to be used as the payload for the BigPicture notification. <br /><br />"
"android.app.Notification.BigTextStyle.CharSequence () "," Set the first line of text after the detail section in the big form of the template. <br /><br />"
"android.app.Notification.Builder.setVibrate (long[] pattern) "," Set the vibration pattern to use. <br /><br />"
"android.app.Notification.Builder.setNumber (int number) "," Set the large number at the right-hand side of the notification. <br /><br />"
"android.app.Notification.Builder.Notification.Style () "," Add a rich notification style to be applied at build time. <br /><br />"
"android.app.Notification.Builder.RemoteViews () "," Supply a custom RemoteViews to use instead of the platform template. <br /><br />"
"android.app.Notification.Builder.color (int argb) "," Sets color. <br /><br />"
"android.app.Notification.Builder.setOnlyAlertOnce (boolean onlyAlertOnce) "," Set this flag if you would only like the sound, vibrate and ticker to be played if the notification is not already showing. <br /><br />"
"android.app.Notification.Builder.setDefaults (int defaults) "," Set which notification properties will be inherited from system defaults. <br /><br />"
"android.app.Notification.Builder.setAutoCancel (boolean autoCancel) "," Make this notification automatically dismissed when the user touches it. <br /><br />"
"android.app.Notification.Builder.setWhen (long when) "," Add a timestamp pertaining to the notification (usually the time the event occurred). <br /><br />"
"android.app.Notification.Builder.setPriority (int pri) "," Set the priority of this notification. <br /><br />"
"android.app.Notification.Builder.setTicker (CharSequence) () "," Obsolete version of setTicker(CharSequence). <br /><br />"
"android.app.Notification.Builder.visibility (int visibility) "," Specify the value of visibility. <br /><br />"
"android.app.Notification.Builder.setProgress (int max, int progress, boolean indeterminate) "," Set the progress this notification represents. <br /><br />"
"android.app.Notification.Builder.setSound (Uri, AudioAttributes) () "," This method was deprecated in API level 21. use setSound(Uri, AudioAttributes) instead. <br /><br />"
"android.app.Notification.Builder.Uri () "," Set the sound to play. <br /><br />"
"android.app.Notification.Builder.String () "," Set a sort key that orders this notification among other notifications from the same package. <br /><br />"
"android.app.Notification.Builder.setLights (int argb, int onMs, int offMs) "," Set the desired color for the indicator LED on the device, as well as the blink duty cycle (specified in milliseconds). <br /><br />"
"android.app.Notification.Builder.CharSequence () "," Set the 'ticker' text which is sent to accessibility services. <br /><br />"
"android.app.Notification.Builder.setGroupSummary (boolean isGroupSummary) "," Set this notification to be the group summary for a group of notifications. <br /><br />"
"android.app.Notification.Builder.setWhen (boolean show) "," Control whether the timestamp set with setWhen is shown in the content view. <br /><br />"
"android.app.Notification.Builder.getExtras () "," Get the current metadata Bundle used by this notification Builder. <br /><br />"
"android.app.Notification.Builder.Notification () "," Supply a replacement Notification whose contents should be shown in insecure contexts (i.e. <br /><br />"
"android.app.Notification.Builder.Notification.Extender () "," Apply an extender to this notification builder. <br /><br />"
"android.app.Notification.Builder.when (boolean b) "," Show the when field as a stopwatch. <br /><br />"
"android.app.Notification.Builder.build () () "," This method was deprecated in API level 16. Use build() instead. <br /><br />"
"android.app.Notification.Builder.LevelListDrawable (int icon, int level) "," A variant of setSmallIcon(int) that takes an additional level parameter for when the icon is a LevelListDrawable. <br /><br />"
"android.app.Notification.Builder.setSmallIcon (int icon) "," Set the small icon resource, which will be used to represent the notification in the status bar. <br /><br />"
"android.app.Notification.Builder.Bundle () "," Set metadata for this notification. <br /><br />"
"android.app.Notification.Builder.audio attributes () "," Set the sound to play, along with specific audio attributes to use during playback. <br /><br />"
"android.app.Notification.Builder.setLocalOnly (boolean localOnly) "," Set whether or not this notification should not bridge to other devices. <br /><br />"
"android.app.Notification.Builder.PendingIntent () "," An intent to launch instead of posting the notification to the status bar. <br /><br />"
"android.app.Notification.Builder.Notification.Action () "," Add an action to this notification. <br /><br />"
"android.app.Notification.Builder.Bitmap () "," Add a large icon to the notification (and the ticker on some devices). <br /><br />"
"android.app.Notification.Builder.setOngoing (boolean ongoing) "," Set whether this is an 'ongoing' notification. <br /><br />"
"android.app.Notification.Extender.Notification.Builder () "," Apply this extender to a notification builder. <br /><br />"
"android.app.Notification.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.app.Notification.Parcel () "," Flatten this notification from a parcel. <br /><br />"
"android.app.Notification.getSortKey () "," Get a sort key that orders this notification among other notifications from the same package. <br /><br />"
"android.app.Notification.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.app.Notification.getGroup () "," Get the key used to group this notification into a cluster or stack with other notifications on devices which support such rendering. <br /><br />"
"android.app.Notification.Notification.Builder () "," This method was deprecated in API level 11. Use Notification.Builder instead. <br /><br />"
"android.app.Notification.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.app.Notification.InboxStyle.CharSequence () "," Set the first line of text after the detail section in the big form of the template. <br /><br />"
"android.app.Notification.MediaStyle.setShowActionsInCompactView (int... actions) "," Request up to 3 actions (by index in the order of addition) to be shown in the compact notification view. <br /><br />"
"android.app.Notification.MediaStyle.MediaSession.Token () "," Attach a MediaSession.Token to this Notification to provide additional playback information and control to the SystemUI. <br /><br />"
"android.app.Notification.Style.build () () "," Calls build() on the Builder this Style is attached to. <br /><br />"
"android.app.Notification.Style.Notification.Builder () "," no description <br /><br />"
"android.app.Notification.WearableExtender.getContentIcon () "," Get an icon that goes with the content of this notification. <br /><br />"
"android.app.Notification.WearableExtender.setContentIconGravity (int contentIconGravity) "," Set the gravity that the content icon should have within the notification display. <br /><br />"
"android.app.Notification.WearableExtender.getStartScrollBottom () "," Get whether the scrolling position for the contents of this notification should start at the bottom of the contents instead of the top when the contents are too long to display within the screen. <br /><br />"
"android.app.Notification.WearableExtender.setContentAction (int actionIndex) "," Set an action from this notification's actions to be clickable with the content of this notification. <br /><br />"
"android.app.Notification.WearableExtender.setHintScreenTimeout (int timeout) "," Set a hint that the screen should remain on for at least this duration when this notification is displayed on the screen. <br /><br />"
"android.app.Notification.WearableExtender.getContentIntentAvailableOffline () "," Get whether the content intent is available when the wearable device is not connected to a companion device. <br /><br />"
"android.app.Notification.WearableExtender.setStartScrollBottom (boolean startScrollBottom) "," Set whether the scrolling position for the contents of this notification should start at the bottom of the contents instead of the top when the contents are too long to display within the screen. <br /><br />"
"android.app.Notification.WearableExtender.setCustomContentHeight (int height) "," Set the custom height in pixels for the display of this notification's content. <br /><br />"
"android.app.Notification.WearableExtender.setHintHideIcon (boolean hintHideIcon) "," Set a hint that this notification's icon should not be displayed. <br /><br />"
"android.app.Notification.WearableExtender.getHintShowBackgroundOnly () "," Get a visual hint that only the background image of this notification should be displayed, and other semantic content should be hidden. <br /><br />"
"android.app.Notification.WearableExtender.setGravity (int gravity) "," Set the gravity that this notification should have within the available viewport space. <br /><br />"
"android.app.Notification.WearableExtender.getCustomContentHeight () "," Get the custom height in pixels for the display of this notification's content. <br /><br />"
"android.app.Notification.WearableExtender.getHintAvoidBackgroundClipping () "," Get a hint that this notification's background should not be clipped if possible, and should instead be resized to fully display on the screen, retaining the aspect ratio of the image. <br /><br />"
"android.app.Notification.WearableExtender.getDisplayIntent () "," Get the intent to launch inside of an activity view when displaying this notification. <br /><br />"
"android.app.Notification.WearableExtender.getHintScreenTimeout () "," Get the duration, in milliseconds, that the screen should remain on for when this notification is displayed. <br /><br />"
"android.app.Notification.WearableExtender.Notification.WearableExtender () "," Get the custom size preset for the display of this notification out of the available presets found in Notification.WearableExtender, e.g. <br /><br />"
"android.app.Notification.WearableExtender.Notification.Builder () "," Apply wearable extensions to a notification that is being built. <br /><br />"
"android.app.Notification.WearableExtender.setContentIntentAvailableOffline (boolean contentIntentAvailableOffline) "," Set whether the content intent is available when the wearable device is not connected to a companion device. <br /><br />"
"android.app.Notification.WearableExtender.Notification.WearableExtender (int sizePreset) "," Set the custom size preset for the display of this notification out of the available presets found in Notification.WearableExtender, e.g. <br /><br />"
"android.app.Notification.WearableExtender.clearPages () "," Clear all additional pages present on this builder. <br /><br />"
"android.app.Notification.WearableExtender.setContentIcon (int icon) "," Set an icon that goes with the content of this notification. <br /><br />"
"android.app.Notification.WearableExtender.getContentAction () "," Get the index of the notification action, if any, that was specified as being clickable with the content of this notification. <br /><br />"
"android.app.Notification.WearableExtender.getPages () "," Get the array of additional pages of content for displaying this notification. <br /><br />"
"android.app.Notification.WearableExtender.setHintShowBackgroundOnly (boolean hintShowBackgroundOnly) "," Set a visual hint that only the background image of this notification should be displayed, and other semantic content should be hidden. <br /><br />"
"android.app.Notification.WearableExtender.Notification () "," Add additional pages of content to display with this notification. <br /><br />"
"android.app.Notification.WearableExtender.setHintAvoidBackgroundClipping (boolean hintAvoidBackgroundClipping) "," Set a hint that this notification's background should not be clipped if possible, and should instead be resized to fully display on the screen, retaining the aspect ratio of the image. <br /><br />"
"android.app.Notification.WearableExtender.getContentIconGravity () "," Get the gravity that the content icon should have within the notification display. <br /><br />"
"android.app.Notification.WearableExtender.getGravity () "," Get the gravity that this notification should have within the available viewport space. <br /><br />"
"android.app.Notification.WearableExtender.getActions () "," Get the wearable actions present on this notification. <br /><br />"
"android.app.Notification.WearableExtender.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.app.Notification.WearableExtender.getHintHideIcon () "," Get a hint that this notification's icon should not be displayed. <br /><br />"
"android.app.Notification.WearableExtender.getBackground () "," Get a background image to be displayed behind the notification content. <br /><br />"
"android.app.Notification.WearableExtender.PendingIntent () "," Set an intent to launch inside of an activity view when displaying this notification. <br /><br />"
"android.app.Notification.WearableExtender.Notification.Action () "," Adds wearable actions to this notification. <br /><br />"
"android.app.Notification.WearableExtender.clearActions () "," Clear all wearable actions present on this builder. <br /><br />"
"android.app.Notification.WearableExtender.Bitmap () "," Set a background image to be displayed behind the notification content. <br /><br />"
"android.app.NotificationManager.Notification () "," Post a notification to be shown in the status bar. <br /><br />"
"android.app.NotificationManager.String () "," Cancel a previously shown notification. <br /><br />"
"android.app.NotificationManager.cancel (int id) "," Cancel a previously shown notification. <br /><br />"
"android.app.NotificationManager.cancelAll () "," Cancel all previously shown notifications. <br /><br />"
"android.app.PendingIntent.String () "," Perform the operation associated with this PendingIntent, allowing the caller to specify information about the Intent to use and be notified when the send has completed. <br /><br />"
"android.app.PendingIntent.getCreatorUid () "," Return the uid of the application that created this PendingIntent, that is the identity under which you will actually be sending the Intent. <br /><br />"
"android.app.PendingIntent.send (int code) "," Perform the operation associated with this PendingIntent. <br /><br />"
"android.app.PendingIntent.getIntentSender () "," Retrieve a IntentSender object that wraps the existing sender of the PendingIntent <br /><br />"
"android.app.PendingIntent.getCreatorPackage () () "," This method was deprecated in API level 17. Renamed to getCreatorPackage(). <br /><br />"
"android.app.PendingIntent.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.app.PendingIntent.getCreatorUserHandle () "," Return the user handle of the application that created this PendingIntent, that is the user under which you will actually be sending the Intent. <br /><br />"
"android.app.PendingIntent.Object () "," Comparison operator on two PendingIntent objects, such that true is returned then they both represent the same operation from the same package. <br /><br />"
"android.app.PendingIntent.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.app.PendingIntent.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.app.PendingIntent.getCreatorPackage () "," Return the package name of the application that created this PendingIntent, that is the identity under which you will actually be sending the Intent. <br /><br />"
"android.app.PendingIntent.getActivity (Context, int, Intent, int) () "," Like getActivity(Context, int, Intent, int), but allows an array of Intents to be supplied. <br /><br />"
"android.app.PendingIntent.Context.startActivity (Intent) () "," Retrieve a PendingIntent that will start a new activity, like calling Context.startActivity(Intent). <br /><br />"
"android.app.PendingIntent.Handler () "," Perform the operation associated with this PendingIntent, allowing the caller to specify information about the Intent to use and be notified when the send has completed. <br /><br />"
"android.app.PendingIntent.Context.startService () () "," Retrieve a PendingIntent that will start a service, like calling Context.startService(). <br /><br />"
"android.app.PendingIntent.send () "," Perform the operation associated with this PendingIntent. <br /><br />"
"android.app.PendingIntent.Context.sendBroadcast () () "," Retrieve a PendingIntent that will perform a broadcast, like calling Context.sendBroadcast(). <br /><br />"
"android.app.PendingIntent.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.app.PendingIntent.cancel () "," Cancel a currently active PendingIntent. <br /><br />"
"android.app.PendingIntent.Intent () "," Perform the operation associated with this PendingIntent, allowing the caller to specify information about the Intent to use. <br /><br />"
"android.app.PendingIntent.OnFinished.Bundle () "," Called when a send operation as completed. <br /><br />"
"android.app.Presentation.Resources () "," Gets the Resources that should be used to inflate the layout of this presentation. <br /><br />"
"android.app.Presentation.show () () "," Inherited from show(). <br /><br />"
"android.app.Presentation.Display () "," Called by the system when the Display to which the presentation is attached has been removed. <br /><br />"
"android.app.ProgressDialog.getSecondaryProgress () "," no description <br /><br />"
"android.app.ProgressDialog.String () "," Change the format of the small text showing current and maximum units of progress. <br /><br />"
"android.app.ProgressDialog.setIndeterminate (boolean indeterminate) "," no description <br /><br />"
"android.app.ProgressDialog.getMax () "," no description <br /><br />"
"android.app.ProgressDialog.getProgress () "," no description <br /><br />"
"android.app.ProgressDialog.CharSequence () "," no description <br /><br />"
"android.app.ProgressDialog.setProgressStyle (int style) "," no description <br /><br />"
"android.app.ProgressDialog.onStart () "," Called when the dialog is starting. <br /><br />"
"android.app.ProgressDialog.setProgress (int value) "," no description <br /><br />"
"android.app.ProgressDialog.Drawable () "," no description <br /><br />"
"android.app.ProgressDialog.DialogInterface.OnCancelListener () "," no description <br /><br />"
"android.app.ProgressDialog.incrementProgressBy (int diff) "," no description <br /><br />"
"android.app.ProgressDialog.NumberFormat () "," Change the format of the small text showing the percentage of progress. <br /><br />"
"android.app.ProgressDialog.isIndeterminate () "," no description <br /><br />"
"android.app.ProgressDialog.setMax (int max) "," no description <br /><br />"
"android.app.ProgressDialog.setSecondaryProgress (int secondaryProgress) "," no description <br /><br />"
"android.app.ProgressDialog.incrementSecondaryProgressBy (int diff) "," no description <br /><br />"
"android.app.RemoteInput.Builder.getExtras () "," Get the metadata Bundle used by this Builder. <br /><br />"
"android.app.RemoteInput.Builder.RemoteInput () "," Combine all of the options that have been set and return a new RemoteInput object. <br /><br />"
"android.app.RemoteInput.Builder.CharSequence[] () "," Specifies choices available to the user to satisfy this input. <br /><br />"
"android.app.RemoteInput.Builder.CharSequence () "," Set a label to be displayed to the user when collecting this input. <br /><br />"
"android.app.RemoteInput.Builder.Bundle () "," Merge additional metadata into this builder. <br /><br />"
"android.app.RemoteInput.Builder.setAllowFreeFormInput (boolean allowFreeFormInput) "," Specifies whether the user can provide arbitrary values. <br /><br />"
"android.app.RemoteInput.getExtras () "," Get additional metadata carried around with this remote input. <br /><br />"
"android.app.RemoteInput.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.app.RemoteInput.getLabel () "," Get the label to display to users when collecting this input. <br /><br />"
"android.app.RemoteInput.getAllowFreeFormInput () "," Get whether or not users can provide an arbitrary value for input. <br /><br />"
"android.app.RemoteInput.Bundle () "," Populate an intent object with the results gathered from remote input. <br /><br />"
"android.app.RemoteInput.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.app.RemoteInput.Intent () "," Get the remote input results bundle from an intent. <br /><br />"
"android.app.RemoteInput.PendingIntent () "," Get the key that the result of this input will be set in from the Bundle returned by getResultsFromIntent(Intent) when the PendingIntent is sent. <br /><br />"
"android.app.RemoteInput.getChoices () "," Get possible input choices. <br /><br />"
"android.app.SearchableInfo.getVoiceLanguageModeId () "," Gets the resource id of the voice search language model string. <br /><br />"
"android.app.SearchableInfo.getInputType () "," Gets the input type as specified in the searchable attributes. <br /><br />"
"android.app.SearchableInfo.getSuggestThreshold () "," Gets the suggestion threshold. <br /><br />"
"android.app.SearchableInfo.getSuggestPackage () "," Gets the name of the package where the suggestion provider lives, or null. <br /><br />"
"android.app.SearchableInfo.getImeOptions () "," Gets the input method options specified in the searchable attributes. <br /><br />"
"android.app.SearchableInfo.getSearchActivity () "," Gets the component name of the searchable activity. <br /><br />"
"android.app.SearchableInfo.queryAfterZeroResults () "," Checks whether this searchable activity should be queried for suggestions if a prefix of the query has returned no results. <br /><br />"
"android.app.SearchableInfo.getSuggestIntentData () "," Gets the optional intent data for use with these suggestions. <br /><br />"
"android.app.SearchableInfo.getSuggestIntentAction () "," Gets the optional intent action for use with these suggestions. <br /><br />"
"android.app.SearchableInfo.autoUrlDetect () "," Checks whether this searchable activity has auto URL detection turned on. <br /><br />"
"android.app.SearchableInfo.getVoiceMaxResults () "," The maximum number of voice recognition results to return. <br /><br />"
"android.app.SearchableInfo.getVoiceLanguageId () "," Gets the resource id of the spoken language to recognize in voice search. <br /><br />"
"android.app.SearchableInfo.getHintId () "," Gets the resource id of the hint text. <br /><br />"
"android.app.SearchableInfo.getSuggestSelection () "," Gets the selection for obtaining search suggestions. <br /><br />"
"android.app.SearchableInfo.shouldRewriteQueryFromData () "," Checks whether the text in the query field should come from the suggestion intent data. <br /><br />"
"android.app.SearchableInfo.getSuggestPath () "," Gets the content provider path for obtaining search suggestions. <br /><br />"
"android.app.SearchableInfo.getVoiceSearchLaunchRecognizer () "," Checks if voice search should start in-app search. <br /><br />"
"android.app.SearchableInfo.getVoicePromptTextId () "," Gets the resource id of the voice prompt text string. <br /><br />"
"android.app.SearchableInfo.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.app.SearchableInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.app.SearchableInfo.getVoiceSearchLaunchWebSearch () "," Checks if voice search should start web search. <br /><br />"
"android.app.SearchableInfo.shouldRewriteQueryFromText () "," Checks whether the text in the query field should come from the suggestion title. <br /><br />"
"android.app.SearchableInfo.getSuggestAuthority () "," Gets the search suggestion content provider authority. <br /><br />"
"android.app.SearchableInfo.shouldIncludeInGlobalSearch () "," Checks whether the searchable should be included in global search. <br /><br />"
"android.app.SearchableInfo.getSettingsDescriptionId () "," Gets the resource id of the description string to use for this source in system search settings, or 0 if none has been specified. <br /><br />"
"android.app.SearchableInfo.getVoiceSearchEnabled () "," Checks if the searchable activity wants the voice search button to be shown. <br /><br />"
"android.app.SearchManager.SearchManager.OnDismissListener () "," Set or clear the callback that will be invoked whenever the search UI is dismissed. <br /><br />"
"android.app.SearchManager.startSearch (String, boolean, ComponentName, Bundle, boolean) () "," Similar to startSearch(String, boolean, ComponentName, Bundle, boolean) but actually fires off the search query after invoking the search dialog. <br /><br />"
"android.app.SearchManager.getGlobalSearchActivity () "," Gets the name of the global search activity. <br /><br />"
"android.app.SearchManager.stopSearch () "," Terminate search UI. <br /><br />"
"android.app.SearchManager.ComponentName () "," Gets information about a searchable activity. <br /><br />"
"android.app.SearchManager.Bundle () "," Launch search UI. <br /><br />"
"android.app.SearchManager.DialogInterface () "," This method was deprecated in API level 4. This method is an obsolete internal implementation detail. Do not use. <br /><br />"
"android.app.SearchManager.SearchManager.OnCancelListener () "," Set or clear the callback that will be invoked whenever the search UI is canceled. <br /><br />"
"android.app.SearchManager.getSearchablesInGlobalSearch () "," Returns a list of the searchable activities that can be included in global search. <br /><br />"
"android.app.SearchManager.OnCancelListener.onCancel () "," This method will be called when the search UI is canceled. <br /><br />"
"android.app.SearchManager.OnDismissListener.onDismiss () "," This method will be called when the search UI is dismissed. <br /><br />"
"android.app.Service.stopSelf () "," Stop the service, if it was previously started. <br /><br />"
"android.app.Service.stopSelfResult (int startId) "," Stop the service if the most recent time it was started was startId. <br /><br />"
"android.app.Service.stopSelfResult (int) (int startId) "," Old version of stopSelfResult(int) that doesn't return a result. <br /><br />"
"android.app.Service.onCreate () "," Called by the system when the service is first created. <br /><br />"
"android.app.Service.startService (Intent) () "," Called by the system every time a client explicitly starts the service by calling startService(Intent), providing the arguments it supplied and a unique integer token representing the start request. <br /><br />"
"android.app.Service.onStartCommand (Intent, int, int) () "," This method was deprecated in API level 5. Implement onStartCommand(Intent, int, int) instead. <br /><br />"
"android.app.Service.stopForeground (boolean removeNotification) "," Remove this service from foreground state, allowing it to be killed if more memory is needed. <br /><br />"
"android.app.Service.onTrimMemory (int level) "," Called when the operating system has determined that it is a good time for a process to trim unneeded memory from its process. <br /><br />"
"android.app.Service.onLowMemory () "," This is called when the overall system is running low on memory, and actively running processes should trim their memory usage. <br /><br />"
"android.app.Service.Notification () "," Make this service run in the foreground, supplying the ongoing notification to be shown to the user while in this state. <br /><br />"
"android.app.Service.onDestroy () "," Called by the system to notify a Service that it is no longer used and is being removed. <br /><br />"
"android.app.Service.getApplication () "," Return the application that owns this service. <br /><br />"
"android.app.Service.Configuration () "," Called by the system when the device configuration changes while your component is running. <br /><br />"
"android.app.Service.onUnbind (Intent) () "," Called when new clients have connected to the service, after it had previously been notified that all had disconnected in its onUnbind(Intent). <br /><br />"
"android.app.Service.Intent () "," Called when all clients have disconnected from a particular interface published by the service. <br /><br />"
"android.app.SharedElementCallback.onMapSharedElements (java.util.List, java.util.Map) () "," Called after onMapSharedElements(java.util.List, java.util.Map) when transferring shared elements in. <br /><br />"
"android.app.SharedElementCallback.onSharedElementEnd (java.util.List, java.util.List, java.util.List) () "," Reconstitutes a snapshot View from a Parcelable returned in onCaptureSharedElementSnapshot(android.view.View, android.graphics.Matrix, android.graphics.RectF) to be used in onSharedElementStart(java.util.List, java.util.List, java.util.List) and onSharedElementEnd(java.util.List, java.util.List, java.util.List). <br /><br />"
"android.app.SharedElementCallback.onCreateSnapshotView (android.content.Context, android.os.Parcelable) () "," Creates a snapshot of a shared element to be used by the remote Activity and reconstituted with onCreateSnapshotView(android.content.Context, android.os.Parcelable). <br /><br />"
"android.app.SharedElementCallback.View () "," Called immediately after the start state is set for the shared element. <br /><br />"
"android.app.TabActivity.String () "," Sets the default tab that is the first tab highlighted. <br /><br />"
"android.app.TabActivity.TabWidget () "," Returns the TabWidget the activity is using to draw the actual tabs. <br /><br />"
"android.app.TabActivity.onContentChanged () "," Updates the screen state (current list and other views) when the content changes. <br /><br />"
"android.app.TabActivity.setDefaultTab (int index) "," Sets the default tab that is the first tab highlighted. <br /><br />"
"android.app.TabActivity.TabHost () "," Returns the TabHost the activity is using to host its tabs. <br /><br />"
"android.app.TaskStackBuilder.Context () "," Return a new TaskStackBuilder for launching a fresh task stack consisting of a series of activities. <br /><br />"
"android.app.TaskStackBuilder.getIntentCount () "," no description <br /><br />"
"android.app.TaskStackBuilder.getIntents () "," Return an array containing the intents added to this builder. <br /><br />"
"android.app.TaskStackBuilder.PendingIntent (int requestCode, int flags) "," Obtain a PendingIntent for launching the task constructed by this builder so far. <br /><br />"
"android.app.TaskStackBuilder.editIntentAt (int index) "," Return the intent at the specified index for modification. <br /><br />"
"android.app.TaskStackBuilder.Bundle () "," Start the task stack constructed by this builder. <br /><br />"
"android.app.TaskStackBuilder.startActivities () "," Start the task stack constructed by this builder. <br /><br />"
"android.app.TaskStackBuilder.PendingIntent () "," Obtain a PendingIntent for launching the task constructed by this builder so far. <br /><br />"
"android.app.TaskStackBuilder.parentActivityName () "," Add the activity parent chain as specified by the parentActivityName attribute of the activity (or activity-alias) element in the application's manifest to the task stack builder. <br /><br />"
"android.app.TaskStackBuilder.Intent () "," Add a new Intent with the resolved chain of parents for the target activity to the task stack. <br /><br />"
"android.app.TimePickerDialog.onSaveInstanceState () "," Saves the state of the dialog into a bundle. <br /><br />"
"android.app.TimePickerDialog.updateTime (int hourOfDay, int minuteOfHour) "," Sets the current time. <br /><br />"
"android.app.TimePickerDialog.TimePicker () "," no description <br /><br />"
"android.app.TimePickerDialog.Bundle () "," Restore the state of the dialog from a previously saved bundle. <br /><br />"
"android.app.TimePickerDialog.DialogInterface () "," This method will be invoked when a button in the dialog is clicked. <br /><br />"
"android.app.TimePickerDialog.OnTimeSetListener.TimePicker () "," no description <br /><br />"
"android.app.UiAutomation.AccessibilityEventFilter.AccessibilityEvent () "," Callback for determining whether an event is accepted or it is filtered out. <br /><br />"
"android.app.UiAutomation.String () "," Executes a shell command. <br /><br />"
"android.app.UiAutomation.clearWindowAnimationFrameStats () "," Clears the window animation rendering statistics. <br /><br />"
"android.app.UiAutomation.InputEvent () "," A method for injecting an arbitrary input event. <br /><br />"
"android.app.UiAutomation.takeScreenshot () "," Takes a screenshot. <br /><br />"
"android.app.UiAutomation.waitForIdle (long idleTimeoutMillis, long globalTimeoutMillis) "," Waits for the accessibility event stream to become idle, which is not to have received an accessibility event within idleTimeoutMillis. <br /><br />"
"android.app.UiAutomation.setRotation (int rotation) "," Sets the device rotation. <br /><br />"
"android.app.UiAutomation.AccessibilityNodeInfo () "," Gets the root AccessibilityNodeInfo in the active window. <br /><br />"
"android.app.UiAutomation.performGlobalAction (int action) "," Performs a global action. <br /><br />"
"android.app.UiAutomation.setRunAsMonkey (boolean enable) "," Sets whether this UiAutomation to run in a 'monkey' mode. <br /><br />"
"android.app.UiAutomation.UiAutomation.AccessibilityEventFilter () "," Executes a command and waits for a specific accessibility event up to a given wait timeout. <br /><br />"
"android.app.UiAutomation.getWindowAnimationFrameStats () "," Gets the window animation frame statistics. <br /><br />"
"android.app.UiAutomation.getWindows () "," Gets the windows on the screen. <br /><br />"
"android.app.UiAutomation.AccessibilityEvent () "," Sets a callback for observing the stream of AccessibilityEvents. <br /><br />"
"android.app.UiAutomation.getWindowContentFrameStats (int windowId) "," Gets the frame statistics for a given window. <br /><br />"
"android.app.UiAutomation.clearWindowContentFrameStats (int windowId) "," Clears the frame statistics for the content of a given window. <br /><br />"
"android.app.UiAutomation.findFocus (int focus) "," Find the view that has the specified focus type. <br /><br />"
"android.app.UiAutomation.AccessibilityServiceInfo () "," Sets the AccessibilityServiceInfo that describes how this UiAutomation will be handled by the platform accessibility layer. <br /><br />"
"android.app.UiAutomation.OnAccessibilityEventListener.AccessibilityEvent () "," Callback for receiving an AccessibilityEvent. <br /><br />"
"android.app.UiModeManager.setNightMode (int mode) "," Sets the night mode. <br /><br />"
"android.app.UiModeManager.disableCarMode (int flags) "," Turn off special mode if currently in car mode. <br /><br />"
"android.app.UiModeManager.enableCarMode (int flags) "," Force device into car mode, like it had been placed in the car dock. <br /><br />"
"android.app.UiModeManager.getNightMode () "," Returns the currently configured night mode. <br /><br />"
"android.app.UiModeManager.getCurrentModeType () "," Return the current running mode type. <br /><br />"
"android.app.usage.ConfigurationStats.ConfigurationStats () "," Get the end of the time range this ConfigurationStats represents, measured in milliseconds since the epoch. <br /><br />"
"android.app.usage.ConfigurationStats.getConfiguration () "," no description <br /><br />"
"android.app.usage.ConfigurationStats.getTotalTimeActive () "," Get the total time this configuration was active, measured in milliseconds. <br /><br />"
"android.app.usage.ConfigurationStats.getActivationCount () "," Get the number of times this configuration was active. <br /><br />"
"android.app.usage.ConfigurationStats.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.app.usage.ConfigurationStats.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.app.usage.ConfigurationStats.getLastTimeActive () "," Get the last time this configuration was active, measured in milliseconds since the epoch. <br /><br />"
"android.app.usage.UsageEvents.Event.CONFIGURATION_CHANGE () "," Returns a Configuration for this event if the event is of type CONFIGURATION_CHANGE, otherwise it returns null. <br /><br />"
"android.app.usage.UsageEvents.Event.getClassName () "," The class name of the source of this event. <br /><br />"
"android.app.usage.UsageEvents.Event.getPackageName () "," The package name of the source of this event. <br /><br />"
"android.app.usage.UsageEvents.Event.getEventType () "," The event type. <br /><br />"
"android.app.usage.UsageEvents.Event.getTimeStamp () "," The time at which this event occurred, measured in milliseconds since the epoch. <br /><br />"
"android.app.usage.UsageEvents.UsageEvents.Event () "," Retrieve the next UsageEvents.Event from the collection and put the resulting data into eventOut. <br /><br />"
"android.app.usage.UsageEvents.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.app.usage.UsageEvents.getNextEvent (android.app.usage.UsageEvents.Event) () "," Returns whether or not there are more events to read using getNextEvent(android.app.usage.UsageEvents.Event). <br /><br />"
"android.app.usage.UsageEvents.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.app.usage.UsageStats.UsageStats () "," Get the end of the time range this UsageStats represents, measured in milliseconds since the epoch. <br /><br />"
"android.app.usage.UsageStats.getPackageName () "," no description <br /><br />"
"android.app.usage.UsageStats.getTotalTimeInForeground () "," Get the total time this package spent in the foreground, measured in milliseconds. <br /><br />"
"android.app.usage.UsageStats.getLastTimeUsed () "," Get the last time this package was used, measured in milliseconds since the epoch. <br /><br />"
"android.app.usage.UsageStats.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.app.usage.UsageStats.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.app.usage.UsageStatsManager.queryConfigurations (int intervalType, long beginTime, long endTime) "," Gets the hardware configurations the device was in for the given time range, aggregated by the specified interval. <br /><br />"
"android.app.usage.UsageStatsManager.queryUsageStats (int intervalType, long beginTime, long endTime) "," Gets application usage stats for the given time range, aggregated by the specified interval. <br /><br />"
"android.app.usage.UsageStatsManager.queryAndAggregateUsageStats (long beginTime, long endTime) "," A convenience method that queries for all stats in the given range (using the best interval for that range), merges the resulting data, and keys it by package name. <br /><br />"
"android.app.usage.UsageStatsManager.queryEvents (long beginTime, long endTime) "," Query for events in the given time range. <br /><br />"
"android.app.WallpaperInfo.String () "," no description <br /><br />"
"android.app.WallpaperInfo.getPackageName () "," Return the .apk package that implements this wallpaper. <br /><br />"
"android.app.WallpaperInfo.PackageManager () "," Load the thumbnail image for this wallpaper. <br /><br />"
"android.app.WallpaperInfo.getServiceInfo () "," Return the raw information about the Service implementing this wallpaper. <br /><br />"
"android.app.WallpaperInfo.getSettingsActivity () "," Return the class name of an activity that provides a settings UI for the wallpaper. <br /><br />"
"android.app.WallpaperInfo.getComponent () "," Return the component of the service that implements this wallpaper. <br /><br />"
"android.app.WallpaperInfo.Parcel () "," Used to package this object into a Parcel. <br /><br />"
"android.app.WallpaperInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.app.WallpaperInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.app.WallpaperInfo.getServiceName () "," Return the class name of the service component that implements this wallpaper. <br /><br />"
"android.app.WallpaperManager.Uri () "," Gets an Intent that will launch an activity that crops the given image and sets the device's wallpaper. <br /><br />"
"android.app.WallpaperManager.setWallpaperOffsetSteps (float xStep, float yStep) "," For applications that use multiple virtual screens showing a wallpaper, specify the step size between virtual screens. <br /><br />"
"android.app.WallpaperManager.setResource (int resid) "," Change the current system wallpaper to the bitmap in the given resource. <br /><br />"
"android.app.WallpaperManager.getDesiredMinimumWidth () "," Returns the desired minimum width for the wallpaper. <br /><br />"
"android.app.WallpaperManager.getDrawable () "," Retrieve the current system wallpaper; if no wallpaper is set, the system built-in static wallpaper is returned. <br /><br />"
"android.app.WallpaperManager.getDrawable () () "," Like getDrawable(), but the returned Drawable has a number of limitations to reduce its overhead as much as possible. <br /><br />"
"android.app.WallpaperManager.setWallpaperOffsets (IBinder, float, float) () "," Clear the offsets previously associated with this window through setWallpaperOffsets(IBinder, float, float). <br /><br />"
"android.app.WallpaperManager.getBuiltInDrawable (int outWidth, int outHeight, boolean scaleToFit, float horizontalAlignment, float verticalAlignment) "," Returns a drawable for the system built-in static wallpaper. <br /><br />"
"android.app.WallpaperManager.IBinder () "," Set the position of the current wallpaper within any larger space, when that wallpaper is visible behind the given window. <br /><br />"
"android.app.WallpaperManager.Context () "," Retrieve a WallpaperManager associated with the given Context. <br /><br />"
"android.app.WallpaperManager.getBuiltInDrawable () "," Returns a drawable for the system built-in static wallpaper . <br /><br />"
"android.app.WallpaperManager.clear () "," Remove any currently set wallpaper, reverting to the system's built-in wallpaper. <br /><br />"
"android.app.WallpaperManager.getDesiredMinimumHeight () "," Returns the desired minimum height for the wallpaper. <br /><br />"
"android.app.WallpaperManager.hasResourceWallpaper (int resid) "," Return whether any users are currently set to use the wallpaper with the given resource ID. <br /><br />"
"android.app.WallpaperManager.suggestDesiredDimensions (int minimumWidth, int minimumHeight) "," For use only by the current home application, to specify the size of wallpaper it would like to use. <br /><br />"
"android.app.WallpaperManager.Bundle () "," Send an arbitrary command to the current active wallpaper. <br /><br />"
"android.app.WallpaperManager.getFastDrawable () () "," Like getFastDrawable(), but if there is no wallpaper set, a null pointer is returned. <br /><br />"
"android.app.WallpaperManager.peekDrawable () "," Retrieve the current system wallpaper; if there is no wallpaper set, a null pointer is returned. <br /><br />"
"android.app.WallpaperManager.getWallpaperInfo () "," If the current wallpaper is a live wallpaper component, return the information about that wallpaper. <br /><br />"
"android.app.WallpaperManager.InputStream () "," Change the current system wallpaper to a specific byte stream. <br /><br />"
"android.app.WallpaperManager.Bitmap () "," Change the current system wallpaper to a bitmap. <br /><br />"
"android.app.WallpaperManager.forgetLoadedWallpaper () "," Remove all internal references to the last loaded wallpaper. <br /><br />"
"android.appwidget.AppWidgetHost.startListening () "," Start receiving onAppWidgetChanged calls for your AppWidgets. <br /><br />"
"android.appwidget.AppWidgetHost.allocateAppWidgetId () "," Get a appWidgetId for a host in the calling process. <br /><br />"
"android.appwidget.AppWidgetHost.deleteAppWidgetId (int appWidgetId) "," Stop listening to changes for this AppWidget. <br /><br />"
"android.appwidget.AppWidgetHost.Bundle () "," Starts an app widget provider configure activity for result on behalf of the caller. <br /><br />"
"android.appwidget.AppWidgetHost.stopListening () "," Stop receiving onAppWidgetChanged calls for your AppWidgets. <br /><br />"
"android.appwidget.AppWidgetHost.deleteHost () "," Remove all records about this host from the AppWidget manager. <br /><br />"
"android.appwidget.AppWidgetHost.deleteAllHosts () "," Remove all records about all hosts for your package. <br /><br />"
"android.appwidget.AppWidgetHost.AppWidgetProviderInfo () "," Create the AppWidgetHostView for the given widget. <br /><br />"
"android.appwidget.AppWidgetHostView.Rect () "," As of ICE_CREAM_SANDWICH we are automatically adding padding to widgets targeting ICE_CREAM_SANDWICH and higher. <br /><br />"
"android.appwidget.AppWidgetHostView.AttributeSet () "," Returns a new set of layout parameters based on the supplied attributes set. <br /><br />"
"android.appwidget.AppWidgetHostView.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.appwidget.AppWidgetHostView.getAppWidgetId () "," no description <br /><br />"
"android.appwidget.AppWidgetHostView.RemoteViews () "," Process a set of RemoteViews coming in as an update from the AppWidget provider. <br /><br />"
"android.appwidget.AppWidgetHostView.getAppWidgetInfo () "," no description <br /><br />"
"android.appwidget.AppWidgetHostView.Bundle () "," Provide guidance about the size of this widget to the AppWidgetManager. <br /><br />"
"android.appwidget.AppWidgetHostView.AppWidgetProviderInfo () "," Set the AppWidget that will be displayed by this view. <br /><br />"
"android.appwidget.AppWidgetManager.notifyAppWidgetViewDataChanged (int[] appWidgetIds, int viewId) "," Notifies the specified collection view in all the specified AppWidget instances to invalidate their data. <br /><br />"
"android.appwidget.AppWidgetManager.Context () "," Get the AppWidgetManager instance to use for the supplied Context object. <br /><br />"
"android.appwidget.AppWidgetManager.RemoteViews () "," Set the RemoteViews to use for the specified appWidgetId. <br /><br />"
"android.appwidget.AppWidgetManager.UserHandle () "," Gets the AppWidget providers for the given user profile. <br /><br />"
"android.appwidget.AppWidgetManager.getAppWidgetOptions (int appWidgetId) "," Get the extras associated with a given widget instance. <br /><br />"
"android.appwidget.AppWidgetManager.ComponentName () "," Get the list of appWidgetIds that have been bound to the given AppWidget provider. <br /><br />"
"android.appwidget.AppWidgetManager.notifyAppWidgetViewDataChanged (int appWidgetId, int viewId) "," Notifies the specified collection view in the specified AppWidget instance to invalidate its data. <br /><br />"
"android.appwidget.AppWidgetManager.Bundle () "," Update the extras for a given widget instance. <br /><br />"
"android.appwidget.AppWidgetManager.getInstalledProviders () "," Return a list of the AppWidget providers that are currently installed. <br /><br />"
"android.appwidget.AppWidgetManager.getAppWidgetInfo (int appWidgetId) "," Get the available info about the AppWidget. <br /><br />"
"android.appwidget.AppWidgetProvider.ACTION_APPWIDGET_ENABLED () "," Called in response to the ACTION_APPWIDGET_ENABLED broadcast when the a AppWidget for this provider is instantiated. Override this method to implement your own AppWidget functionality. <br /><br />"
"android.appwidget.AppWidgetProvider.RemoteViews () "," Called in response to the ACTION_APPWIDGET_UPDATE and ACTION_APPWIDGET_RESTORED broadcasts when this AppWidget provider is being asked to provide RemoteViews for a set of AppWidgets. Override this method to implement your own AppWidget functionality. <br /><br />"
"android.appwidget.AppWidgetProvider.onReceive (Context, Intent) () "," Implements onReceive(Context, Intent) to dispatch calls to the various other methods on AppWidgetProvider. <br /><br />"
"android.appwidget.AppWidgetProvider.ACTION_APPWIDGET_DELETED () "," Called in response to the ACTION_APPWIDGET_DELETED broadcast when one or more AppWidget instances have been deleted. Override this method to implement your own AppWidget functionality. <br /><br />"
"android.appwidget.AppWidgetProvider.ACTION_APPWIDGET_OPTIONS_CHANGED () "," Called in response to the ACTION_APPWIDGET_OPTIONS_CHANGED broadcast when this widget has been layed out at a new size. <br /><br />"
"android.appwidget.AppWidgetProvider.onUpdate (Context, AppWidgetManager, int[]) () "," Called in response to the ACTION_APPWIDGET_RESTORED broadcast when instances of this AppWidget provider have been restored from backup. If your provider maintains any persistent data about its widget instances, override this method to remap the old AppWidgetIds to the new values and update any other app state that may be relevant. This callback will be followed immediately by a call to onUpdate(Context, AppWidgetManager, int[]) so your provider can immediately generate new RemoteViews suitable for its newly-restored set of instances. <br /><br />"
"android.appwidget.AppWidgetProvider.ACTION_APPWIDGET_DISABLED () "," Called in response to the ACTION_APPWIDGET_DISABLED broadcast, which is sent when the last AppWidget instance for this provider is deleted. Override this method to implement your own AppWidget functionality. <br /><br />"
"android.appwidget.AppWidgetProviderInfo.Context () "," Loads a preview of what the AppWidget will look like after it's configured. <br /><br />"
"android.appwidget.AppWidgetProviderInfo.PackageManager () "," Loads the localized label to display to the user in the AppWidget picker. <br /><br />"
"android.appwidget.AppWidgetProviderInfo.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.appwidget.AppWidgetProviderInfo.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.appwidget.AppWidgetProviderInfo.getProfile () "," Gets the user profile in which the provider resides. <br /><br />"
"android.appwidget.AppWidgetProviderInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.appwidget.AppWidgetProviderInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.bluetooth.BluetoothA2dp.BLUETOOTH () "," Get the current connection state of the profile Requires BLUETOOTH permission. <br /><br />"
"android.bluetooth.BluetoothA2dp.BluetoothDevice () "," Check if A2DP profile is streaming music. <br /><br />"
"android.bluetooth.BluetoothA2dp.finalize () "," Invoked when the garbage collector has detected that this instance is no longer reachable. <br /><br />"
"android.bluetooth.BluetoothA2dp.getConnectedDevices () "," Get connected devices for this specific profile. <br /><br />"
"android.bluetooth.BluetoothA2dp.getDevicesMatchingConnectionStates (int[] states) "," Get a list of devices that match any of the given connection states. <br /><br />"
"android.bluetooth.BluetoothAdapter.enable () "," Turn on the local Bluetooth adapter do not use without explicit user action to turn on Bluetooth. <br /><br />"
"android.bluetooth.BluetoothAdapter.BluetoothDevice (byte[] address) "," Get a BluetoothDevice object for the given Bluetooth hardware address. <br /><br />"
"android.bluetooth.BluetoothAdapter.getAddress () "," Returns the hardware address of the local Bluetooth adapter. <br /><br />"
"android.bluetooth.BluetoothAdapter.stopScan (ScanCallback) () "," This method was deprecated in API level 21. Use stopScan(ScanCallback) instead. <br /><br />"
"android.bluetooth.BluetoothAdapter.getName () "," Get the friendly Bluetooth name of the local Bluetooth adapter. <br /><br />"
"android.bluetooth.BluetoothAdapter.isOffloadedFilteringSupported () "," Return true if offloaded filters are supported <br /><br />"
"android.bluetooth.BluetoothAdapter.BluetoothLeScanner () "," Returns a BluetoothLeScanner object for Bluetooth LE scan operations. <br /><br />"
"android.bluetooth.BluetoothAdapter.getScanMode () "," Get the current Bluetooth scan mode of the local Bluetooth adapter. <br /><br />"
"android.bluetooth.BluetoothAdapter.startScan (List, ScanSettings, ScanCallback) () "," This method was deprecated in API level 21. use startScan(List, ScanSettings, ScanCallback) instead. <br /><br />"
"android.bluetooth.BluetoothAdapter.isMultipleAdvertisementSupported () "," Return true if the multi advertisement is supported by the chipset <br /><br />"
"android.bluetooth.BluetoothAdapter.String () "," Set the friendly Bluetooth name of the local Bluetooth adapter. <br /><br />"
"android.bluetooth.BluetoothAdapter.startDiscovery () "," Start the remote device discovery process. <br /><br />"
"android.bluetooth.BluetoothAdapter.getState () "," Get the current state of the local Bluetooth adapter. <br /><br />"
"android.bluetooth.BluetoothAdapter.BluetoothDevice () "," Get a BluetoothDevice object for the given Bluetooth hardware address. <br /><br />"
"android.bluetooth.BluetoothAdapter.getDefaultAdapter () "," Get a handle to the default local Bluetooth adapter. <br /><br />"
"android.bluetooth.BluetoothAdapter.disable () "," Turn off the local Bluetooth adapter do not use without explicit user action to turn off Bluetooth. <br /><br />"
"android.bluetooth.BluetoothAdapter.isDiscovering () "," Return true if the local Bluetooth adapter is currently in the device discovery process. <br /><br />"
"android.bluetooth.BluetoothAdapter.BluetoothLeAdvertiser () "," Returns a BluetoothLeAdvertiser object for Bluetooth LE Advertising operations. <br /><br />"
"android.bluetooth.BluetoothAdapter.cancelDiscovery () "," Cancel the current device discovery process. <br /><br />"
"android.bluetooth.BluetoothAdapter.BluetoothProfile.ServiceListener () "," Get the profile proxy object associated with the profile. <br /><br />"
"android.bluetooth.BluetoothAdapter.isEnabled () "," Return true if Bluetooth is currently enabled and ready for use. <br /><br />"
"android.bluetooth.BluetoothAdapter.BluetoothProfile () "," Close the connection of the profile proxy to the Service. <br /><br />"
"android.bluetooth.BluetoothAdapter.isOffloadedScanBatchingSupported () "," Return true if offloaded scan batching is supported <br /><br />"
"android.bluetooth.BluetoothAdapter.UUID () "," Create a listening, secure RFCOMM Bluetooth socket with Service Record. <br /><br />"
"android.bluetooth.BluetoothAdapter.getProfileConnectionState (int profile) "," Get the current connection state of a profile. <br /><br />"
"android.bluetooth.BluetoothAdapter.LeScanCallback.startLeScan (BluetoothAdapter.LeScanCallback) () "," Callback reporting an LE device found during a device scan initiated by the startLeScan(BluetoothAdapter.LeScanCallback) function. <br /><br />"
"android.bluetooth.BluetoothClass.BluetoothClass (int service) "," Return true if the specified service class is supported by this BluetoothClass. <br /><br />"
"android.bluetooth.BluetoothClass.BluetoothClass () "," Return the major device class component of this BluetoothClass. <br /><br />"
"android.bluetooth.BluetoothClass.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.bluetooth.BluetoothClass.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.bluetooth.BluetoothClass.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.bluetooth.BluetoothClass.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.bluetooth.BluetoothClass.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.bluetooth.BluetoothDevice.getType () "," Get the Bluetooth device type of the remote device. <br /><br />"
"android.bluetooth.BluetoothDevice.PAIRING_VARIANT_PASSKEY_CONFIRMATION (boolean confirm) "," Confirm passkey for PAIRING_VARIANT_PASSKEY_CONFIRMATION pairing. <br /><br />"
"android.bluetooth.BluetoothDevice.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.bluetooth.BluetoothDevice.fetchUuidsWithSdp () "," Perform a service discovery on the remote device to get the UUIDs supported. <br /><br />"
"android.bluetooth.BluetoothDevice.getAddress () "," Returns the hardware address of this BluetoothDevice. <br /><br />"
"android.bluetooth.BluetoothDevice.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.bluetooth.BluetoothDevice.BluetoothGattCallback () "," Connect to GATT Server hosted by this device. <br /><br />"
"android.bluetooth.BluetoothDevice.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.bluetooth.BluetoothDevice.toString () "," Returns a string representation of this BluetoothDevice. <br /><br />"
"android.bluetooth.BluetoothDevice.getName () "," Get the friendly Bluetooth name of the remote device. <br /><br />"
"android.bluetooth.BluetoothDevice.createBond () "," Start the bonding (pairing) process with the remote device. <br /><br />"
"android.bluetooth.BluetoothDevice.getBluetoothClass () "," Get the Bluetooth class of the remote device. <br /><br />"
"android.bluetooth.BluetoothDevice.getBondState () "," Get the bond state of the remote device. <br /><br />"
"android.bluetooth.BluetoothDevice.getUuids () "," Returns the supported features (UUIDs) of the remote device. <br /><br />"
"android.bluetooth.BluetoothDevice.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.bluetooth.BluetoothDevice.BLUETOOTH_ADMIN (byte[] pin) "," Set the pin during pairing when the pairing method is PAIRING_VARIANT_PIN Requires BLUETOOTH_ADMIN. <br /><br />"
"android.bluetooth.BluetoothDevice.BluetoothSocket () "," Create an RFCOMM BluetoothSocket ready to start a secure outgoing connection to this remote device using SDP lookup of uuid. <br /><br />"
"android.bluetooth.BluetoothGatt.discoverServices () "," Discovers services offered by a remote device as well as their characteristics and descriptors. <br /><br />"
"android.bluetooth.BluetoothGatt.BluetoothGattDescriptor () "," Write the value of a given descriptor to the associated remote device. <br /><br />"
"android.bluetooth.BluetoothGatt.BluetoothGattCharacteristic () "," Writes a given characteristic and its values to the associated remote device. <br /><br />"
"android.bluetooth.BluetoothGatt.close () "," Close this Bluetooth GATT client. <br /><br />"
"android.bluetooth.BluetoothGatt.beginReliableWrite () "," Initiates a reliable write transaction for a given remote device. <br /><br />"
"android.bluetooth.BluetoothGatt.GATT (int[] states) "," Not supported - please use getDevicesMatchingConnectionStates(int, int[]) with GATT as first argument <br /><br />"
"android.bluetooth.BluetoothGatt.GATT () "," Not supported - please use getConnectedDevices(int) with GATT as argument <br /><br />"
"android.bluetooth.BluetoothGatt.requestConnectionPriority (int connectionPriority) "," Request a connection parameter update. <br /><br />"
"android.bluetooth.BluetoothGatt.getDevice () "," Return the remote bluetooth device this GATT client targets to <br /><br />"
"android.bluetooth.BluetoothGatt.readRemoteRssi () "," Read the RSSI for a connected remote device. <br /><br />"
"android.bluetooth.BluetoothGatt.abortReliableWrite () "," Cancels a reliable write transaction for a given device. <br /><br />"
"android.bluetooth.BluetoothGatt.connect () "," Connect back to remote device. <br /><br />"
"android.bluetooth.BluetoothGatt.BluetoothGattService () "," Returns a BluetoothGattService, if the requested UUID is supported by the remote device. <br /><br />"
"android.bluetooth.BluetoothGatt.requestMtu (int mtu) "," Request an MTU size used for a given connection. <br /><br />"
"android.bluetooth.BluetoothGatt.executeReliableWrite () "," Executes a reliable write transaction for a given remote device. <br /><br />"
"android.bluetooth.BluetoothGatt.abortReliableWrite () () "," This method was deprecated in API level 19. Use abortReliableWrite() <br /><br />"
"android.bluetooth.BluetoothGatt.getServices () "," Returns a list of GATT services offered by the remote device. <br /><br />"
"android.bluetooth.BluetoothGatt.disconnect () "," Disconnects an established connection, or cancels a connection attempt currently in progress. <br /><br />"
"android.bluetooth.BluetoothGattCallback.BluetoothGattDescriptor () "," Callback indicating the result of a descriptor write operation. <br /><br />"
"android.bluetooth.BluetoothGattCallback.BluetoothGatt () "," Callback invoked when the list of remote services, characteristics and descriptors for the remote device have been updated, ie new services have been discovered. <br /><br />"
"android.bluetooth.BluetoothGattCallback.BluetoothGattCharacteristic () "," Callback indicating the result of a characteristic write operation. <br /><br />"
"android.bluetooth.BluetoothGattCharacteristic.String () "," Set the locally stored value of this characteristic. <br /><br />"
"android.bluetooth.BluetoothGattCharacteristic.setValue (int value, int formatType, int offset) "," Set the locally stored value of this characteristic. <br /><br />"
"android.bluetooth.BluetoothGattCharacteristic.getUuid () "," Returns the UUID of this characteristic <br /><br />"
"android.bluetooth.BluetoothGattCharacteristic.writeCharacteristic (BluetoothGattCharacteristic) (int writeType) "," Set the write type for this characteristic Setting the write type of a characteristic determines how the writeCharacteristic(BluetoothGattCharacteristic) function write this characteristic. <br /><br />"
"android.bluetooth.BluetoothGattCharacteristic.BluetoothGattDescriptor () "," Adds a descriptor to this characteristic. <br /><br />"
"android.bluetooth.BluetoothGattCharacteristic.getFloatValue (int formatType, int offset) "," Return the stored value of this characteristic. <br /><br />"
"android.bluetooth.BluetoothGattCharacteristic.getInstanceId () "," Returns the instance ID for this characteristic. <br /><br />"
"android.bluetooth.BluetoothGattCharacteristic.getProperties () "," Returns the properties of this characteristic. <br /><br />"
"android.bluetooth.BluetoothGattCharacteristic.getDescriptors () "," Returns a list of descriptors for this characteristic. <br /><br />"
"android.bluetooth.BluetoothGattCharacteristic.getService () "," Returns the service this characteristic belongs to. <br /><br />"
"android.bluetooth.BluetoothGattCharacteristic.getIntValue (int formatType, int offset) "," Return the stored value of this characteristic. <br /><br />"
"android.bluetooth.BluetoothGattCharacteristic.getValue () "," Get the stored value for this characteristic. <br /><br />"
"android.bluetooth.BluetoothGattCharacteristic.getPermissions () "," Returns the permissions for this characteristic. <br /><br />"
"android.bluetooth.BluetoothGattCharacteristic.getWriteType () "," Gets the write type for this characteristic. <br /><br />"
"android.bluetooth.BluetoothGattCharacteristic.setValue (byte[] value) "," Updates the locally stored value of this characteristic. <br /><br />"
"android.bluetooth.BluetoothGattCharacteristic.setValue (int mantissa, int exponent, int formatType, int offset) "," Set the locally stored value of this characteristic. <br /><br />"
"android.bluetooth.BluetoothGattCharacteristic.UUID () "," Returns a descriptor with a given UUID out of the list of descriptors for this characteristic. <br /><br />"
"android.bluetooth.BluetoothGattCharacteristic.getStringValue (int offset) "," Return the stored value of this characteristic. <br /><br />"
"android.bluetooth.BluetoothGattDescriptor.getUuid () "," Returns the UUID of this descriptor. <br /><br />"
"android.bluetooth.BluetoothGattDescriptor.getPermissions () "," Returns the permissions for this descriptor. <br /><br />"
"android.bluetooth.BluetoothGattDescriptor.setValue (byte[] value) "," Updates the locally stored value of this descriptor. <br /><br />"
"android.bluetooth.BluetoothGattDescriptor.readDescriptor (BluetoothGattDescriptor) () "," Returns the stored value for this descriptor This function returns the stored value for this descriptor as retrieved by calling readDescriptor(BluetoothGattDescriptor). <br /><br />"
"android.bluetooth.BluetoothGattDescriptor.getCharacteristic () "," Returns the characteristic this descriptor belongs to. <br /><br />"
"android.bluetooth.BluetoothGattServer.clearServices () "," Remove all services from the list of provided services. <br /><br />"
"android.bluetooth.BluetoothGattServer.BluetoothGattService () "," Removes a service from the list of services to be provided. <br /><br />"
"android.bluetooth.BluetoothGattServer.BluetoothGattCharacteristic () "," Send a notification or indication that a local characteristic has been updated. <br /><br />"
"android.bluetooth.BluetoothGattServer.close () "," Close this GATT server instance. <br /><br />"
"android.bluetooth.BluetoothGattServer.BluetoothDevice () "," Send a response to a read or write request to a remote device. <br /><br />"
"android.bluetooth.BluetoothGattServer.getServices () "," Returns a list of GATT services offered by this device. <br /><br />"
"android.bluetooth.BluetoothGattServer.GATT (int[] states) "," Not supported - please use getDevicesMatchingConnectionStates(int, int[]) with GATT as first argument <br /><br />"
"android.bluetooth.BluetoothGattServer.GATT () "," Not supported - please use getConnectedDevices(int) with GATT as argument <br /><br />"
"android.bluetooth.BluetoothGattServerCallback.BluetoothGattDescriptor () "," A remote client has requested to write to a local descriptor. <br /><br />"
"android.bluetooth.BluetoothGattServerCallback.BluetoothGattService () "," Indicates whether a local service has been added successfully. <br /><br />"
"android.bluetooth.BluetoothGattServerCallback.BluetoothDevice () "," Callback invoked when a notification or indication has been sent to a remote device. <br /><br />"
"android.bluetooth.BluetoothGattServerCallback.BluetoothGattCharacteristic () "," A remote client has requested to write to a local characteristic. <br /><br />"
"android.bluetooth.BluetoothGattService.getUuid () "," Returns the UUID of this service <br /><br />"
"android.bluetooth.BluetoothGattService.getIncludedServices () "," Get the list of included GATT services for this service. <br /><br />"
"android.bluetooth.BluetoothGattService.getType () "," Get the type of this service (primary/secondary) <br /><br />"
"android.bluetooth.BluetoothGattService.BluetoothGattService () "," Add an included service to this service. <br /><br />"
"android.bluetooth.BluetoothGattService.getCharacteristics () "," Returns a list of characteristics included in this service. <br /><br />"
"android.bluetooth.BluetoothGattService.BluetoothGattCharacteristic () "," Add a characteristic to this service. <br /><br />"
"android.bluetooth.BluetoothGattService.getInstanceId () "," Returns the instance ID for this service If a remote device offers multiple services with the same UUID (ex. <br /><br />"
"android.bluetooth.BluetoothGattService.UUID () "," Returns a characteristic with a given UUID out of the list of characteristics offered by this service. <br /><br />"
"android.bluetooth.BluetoothHeadset.String () "," Sends a vendor-specific unsolicited result code to the headset. <br /><br />"
"android.bluetooth.BluetoothHeadset.BLUETOOTH () "," Get the current connection state of the profile Requires BLUETOOTH permission. <br /><br />"
"android.bluetooth.BluetoothHeadset.BluetoothDevice () "," Stop Bluetooth Voice Recognition mode, and shut down the Bluetooth audio path. <br /><br />"
"android.bluetooth.BluetoothHeadset.getConnectedDevices () "," Get connected devices for this specific profile. <br /><br />"
"android.bluetooth.BluetoothHeadset.getDevicesMatchingConnectionStates (int[] states) "," Get a list of devices that match any of the given connection states. <br /><br />"
"android.bluetooth.BluetoothHealth.BluetoothHealthCallback () "," Register an application configuration that acts as a Health SINK. <br /><br />"
"android.bluetooth.BluetoothHealth.BLUETOOTH () "," Unregister an application configuration that has been registered using registerSinkAppConfiguration(String, int, BluetoothHealthCallback) Requires BLUETOOTH permission. <br /><br />"
"android.bluetooth.BluetoothHealth.BluetoothHealthAppConfiguration () "," Get the file descriptor of the main channel associated with the remote device and application configuration. <br /><br />"
"android.bluetooth.BluetoothHealth.BluetoothDevice () "," Get the current connection state of the profile. <br /><br />"
"android.bluetooth.BluetoothHealth.SOURCE_ROLE () "," Connect to a health device which has the SOURCE_ROLE. <br /><br />"
"android.bluetooth.BluetoothHealth.getConnectedDevices () "," Get connected devices for the health profile. <br /><br />"
"android.bluetooth.BluetoothHealth.getDevicesMatchingConnectionStates (int[] states) "," Get a list of devices that match any of the given connection states. <br /><br />"
"android.bluetooth.BluetoothHealthAppConfiguration.getName () "," Return the name of the application configuration. <br /><br />"
"android.bluetooth.BluetoothHealthAppConfiguration.getRole () "," Return the role associated with this application configuration. <br /><br />"
"android.bluetooth.BluetoothHealthAppConfiguration.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.bluetooth.BluetoothHealthAppConfiguration.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.bluetooth.BluetoothHealthAppConfiguration.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.bluetooth.BluetoothHealthAppConfiguration.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.bluetooth.BluetoothHealthAppConfiguration.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.bluetooth.BluetoothHealthAppConfiguration.getDataType () "," Return the data type associated with this application configuration. <br /><br />"
"android.bluetooth.BluetoothHealthCallback.BluetoothHealthAppConfiguration () "," Callback to inform change in registration state of the health application. <br /><br />"
"android.bluetooth.BluetoothHealthCallback.ParcelFileDescriptor () "," Callback to inform change in channel state. <br /><br />"
"android.bluetooth.BluetoothManager.getDevicesMatchingConnectionStates (int profile, int[] states) "," Get a list of devices that match any of the given connection states. <br /><br />"
"android.bluetooth.BluetoothManager.BluetoothDevice () "," Get the current connection state of the profile to the remote device. <br /><br />"
"android.bluetooth.BluetoothManager.getConnectedDevices (int profile) "," Get connected devices for the specified profile. <br /><br />"
"android.bluetooth.BluetoothManager.getAdapter () "," Get the default BLUETOOTH Adapter for this device. <br /><br />"
"android.bluetooth.BluetoothManager.BluetoothGattServerCallback () "," Open a GATT Server The callback is used to deliver results to Caller, such as connection status as well as the results of any other GATT server operations. <br /><br />"
"android.bluetooth.BluetoothProfile.BLUETOOTH () "," Get the current connection state of the profile Requires BLUETOOTH permission. <br /><br />"
"android.bluetooth.BluetoothProfile.getConnectedDevices () "," Get connected devices for this specific profile. <br /><br />"
"android.bluetooth.BluetoothProfile.getDevicesMatchingConnectionStates (int[] states) "," Get a list of devices that match any of the given connection states. <br /><br />"
"android.bluetooth.BluetoothProfile.ServiceListener.BluetoothProfile () "," Called to notify the client when the proxy object has been connected to the service. <br /><br />"
"android.bluetooth.BluetoothProfile.ServiceListener.onServiceDisconnected (int profile) "," Called to notify the client that this proxy object has been disconnected from the service. <br /><br />"
"android.bluetooth.BluetoothServerSocket.accept (int timeout) "," Block until a connection is established, with timeout. <br /><br />"
"android.bluetooth.BluetoothServerSocket.close () "," Immediately close this socket, and release all associated resources. <br /><br />"
"android.bluetooth.BluetoothServerSocket.accept () "," Block until a connection is established. <br /><br />"
"android.bluetooth.BluetoothSocket.connect () "," Attempt to connect to a remote device. <br /><br />"
"android.bluetooth.BluetoothSocket.getOutputStream () "," Get the output stream associated with this socket. <br /><br />"
"android.bluetooth.BluetoothSocket.isConnected () "," Get the connection status of this socket, ie, whether there is an active connection with remote device. <br /><br />"
"android.bluetooth.BluetoothSocket.close () "," Closes the object and release any system resources it holds. <br /><br />"
"android.bluetooth.BluetoothSocket.getRemoteDevice () "," Get the remote device this socket is connecting, or connected, to. <br /><br />"
"android.bluetooth.BluetoothSocket.getInputStream () "," Get the input stream associated with this socket. <br /><br />"
"android.bluetooth.le.AdvertiseCallback.startAdvertising (AdvertiseSettings, AdvertiseData, AdvertiseCallback) () "," Callback triggered in response to startAdvertising(AdvertiseSettings, AdvertiseData, AdvertiseCallback) indicating that the advertising has been started successfully. <br /><br />"
"android.bluetooth.le.AdvertiseCallback.onStartFailure (int errorCode) "," Callback when advertising could not be started. <br /><br />"
"android.bluetooth.le.AdvertiseData.Builder.AdvertiseData () "," Build the AdvertiseData. <br /><br />"
"android.bluetooth.le.AdvertiseData.Builder.addManufacturerData (int manufacturerId, byte[] manufacturerSpecificData) "," Add manufacturer specific data. <br /><br />"
"android.bluetooth.le.AdvertiseData.Builder.setIncludeTxPowerLevel (boolean includeTxPowerLevel) "," Whether the transmission power level should be included in the advertise packet. <br /><br />"
"android.bluetooth.le.AdvertiseData.Builder.setIncludeDeviceName (boolean includeDeviceName) "," Set whether the device name should be included in advertise packet. <br /><br />"
"android.bluetooth.le.AdvertiseData.Builder.ParcelUuid () "," Add a service UUID to advertise data. <br /><br />"
"android.bluetooth.le.AdvertiseData.getIncludeTxPowerLevel () "," Whether the transmission power level will be included in the advertisement packet. <br /><br />"
"android.bluetooth.le.AdvertiseData.getManufacturerSpecificData () "," Returns an array of manufacturer Id and the corresponding manufacturer specific data. <br /><br />"
"android.bluetooth.le.AdvertiseData.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.bluetooth.le.AdvertiseData.getIncludeDeviceName () "," Whether the device name will be included in the advertisement packet. <br /><br />"
"android.bluetooth.le.AdvertiseData.getServiceData () "," Returns a map of 16-bit UUID and its corresponding service data. <br /><br />"
"android.bluetooth.le.AdvertiseData.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.bluetooth.le.AdvertiseData.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.bluetooth.le.AdvertiseData.getServiceUuids () "," Returns a list of service UUIDs within the advertisement that are used to identify the Bluetooth GATT services. <br /><br />"
"android.bluetooth.le.AdvertiseSettings.Builder.setTimeout (int timeoutMillis) "," Limit advertising to a given amount of time. <br /><br />"
"android.bluetooth.le.AdvertiseSettings.Builder.setTxPowerLevel (int txPowerLevel) "," Set advertise TX power level to control the transmission power level for the advertising. <br /><br />"
"android.bluetooth.le.AdvertiseSettings.Builder.AdvertiseSettings () "," Build the AdvertiseSettings object. <br /><br />"
"android.bluetooth.le.AdvertiseSettings.Builder.setAdvertiseMode (int advertiseMode) "," Set advertise mode to control the advertising power and latency. <br /><br />"
"android.bluetooth.le.AdvertiseSettings.Builder.setConnectable (boolean connectable) "," Set whether the advertisement type should be connectable or non-connectable. <br /><br />"
"android.bluetooth.le.AdvertiseSettings.isConnectable () "," Returns whether the advertisement will indicate connectable. <br /><br />"
"android.bluetooth.le.AdvertiseSettings.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.bluetooth.le.AdvertiseSettings.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.bluetooth.le.AdvertiseSettings.getTxPowerLevel () "," Returns the TX power level for advertising. <br /><br />"
"android.bluetooth.le.AdvertiseSettings.getTimeout () "," Returns the advertising time limit in milliseconds. <br /><br />"
"android.bluetooth.le.AdvertiseSettings.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.bluetooth.le.AdvertiseSettings.getMode () "," Returns the advertise mode. <br /><br />"
"android.bluetooth.le.BluetoothLeAdvertiser.AdvertiseCallback () "," Stop Bluetooth LE advertising. <br /><br />"
"android.bluetooth.le.BluetoothLeScanner.ScanCallback () "," Stops an ongoing Bluetooth LE scan. <br /><br />"
"android.bluetooth.le.ScanCallback.onScanFailed (int errorCode) "," Callback when scan could not be started. <br /><br />"
"android.bluetooth.le.ScanCallback.ScanResult () "," Callback when a BLE advertisement has been found. <br /><br />"
"android.bluetooth.le.ScanFilter.Builder.String () "," Set filter on device name. <br /><br />"
"android.bluetooth.le.ScanFilter.Builder.ScanFilter () "," Build ScanFilter. <br /><br />"
"android.bluetooth.le.ScanFilter.Builder.setManufacturerData (int manufacturerId, byte[] manufacturerData) "," Set filter on on manufacturerData. <br /><br />"
"android.bluetooth.le.ScanFilter.Builder.setManufacturerData (int manufacturerId, byte[] manufacturerData, byte[] manufacturerDataMask) "," Set filter on partial manufacture data. <br /><br />"
"android.bluetooth.le.ScanFilter.Builder.ParcelUuid () "," Set filter on service uuid. <br /><br />"
"android.bluetooth.le.ScanFilter.getManufacturerId () "," Returns the manufacturer id. <br /><br />"
"android.bluetooth.le.ScanFilter.getServiceUuidMask () "," no description <br /><br />"
"android.bluetooth.le.ScanFilter.getServiceDataMask () "," no description <br /><br />"
"android.bluetooth.le.ScanFilter.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.bluetooth.le.ScanFilter.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.bluetooth.le.ScanFilter.getManufacturerData () "," no description <br /><br />"
"android.bluetooth.le.ScanFilter.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.bluetooth.le.ScanFilter.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.bluetooth.le.ScanFilter.getDeviceName () "," Returns the filter set the device name field of Bluetooth advertisement data. <br /><br />"
"android.bluetooth.le.ScanFilter.getDeviceAddress () "," no description <br /><br />"
"android.bluetooth.le.ScanFilter.getManufacturerDataMask () "," no description <br /><br />"
"android.bluetooth.le.ScanFilter.ScanResult () "," Check if the scan filter matches a scanResult. <br /><br />"
"android.bluetooth.le.ScanFilter.getServiceDataUuid () "," no description <br /><br />"
"android.bluetooth.le.ScanFilter.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.bluetooth.le.ScanFilter.getServiceData () "," no description <br /><br />"
"android.bluetooth.le.ScanFilter.getServiceUuid () "," Returns the filter set on the service uuid. <br /><br />"
"android.bluetooth.le.ScanRecord.getManufacturerSpecificData () "," Returns a sparse array of manufacturer identifier and its corresponding manufacturer specific data. <br /><br />"
"android.bluetooth.le.ScanRecord.getManufacturerSpecificData (int manufacturerId) "," Returns the manufacturer specific data associated with the manufacturer id. <br /><br />"
"android.bluetooth.le.ScanRecord.getBytes () "," Returns raw bytes of scan record. <br /><br />"
"android.bluetooth.le.ScanRecord.getServiceData () "," Returns a map of service UUID and its corresponding service data. <br /><br />"
"android.bluetooth.le.ScanRecord.getAdvertiseFlags () "," Returns the advertising flags indicating the discoverable mode and capability of the device. <br /><br />"
"android.bluetooth.le.ScanRecord.ParcelUuid () "," Returns the service data byte array associated with the serviceUuid. <br /><br />"
"android.bluetooth.le.ScanRecord.getTxPowerLevel () "," Returns the transmission power level of the packet in dBm. <br /><br />"
"android.bluetooth.le.ScanRecord.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.bluetooth.le.ScanRecord.getServiceUuids () "," Returns a list of service UUIDs within the advertisement that are used to identify the bluetooth GATT services. <br /><br />"
"android.bluetooth.le.ScanRecord.getDeviceName () "," Returns the local name of the BLE device. <br /><br />"
"android.bluetooth.le.ScanResult.getRssi () "," Returns the received signal strength in dBm. <br /><br />"
"android.bluetooth.le.ScanResult.getDevice () "," Returns the remote bluetooth device identified by the bluetooth device address. <br /><br />"
"android.bluetooth.le.ScanResult.getScanRecord () "," Returns the scan record, which is a combination of advertisement and scan response. <br /><br />"
"android.bluetooth.le.ScanResult.getTimestampNanos () "," Returns timestamp since boot when the scan record was observed. <br /><br />"
"android.bluetooth.le.ScanResult.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.bluetooth.le.ScanResult.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.bluetooth.le.ScanResult.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.bluetooth.le.ScanResult.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.bluetooth.le.ScanResult.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.bluetooth.le.ScanSettings.Builder.setReportDelay (long reportDelayMillis) "," Set report delay timestamp for Bluetooth LE scan. <br /><br />"
"android.bluetooth.le.ScanSettings.Builder.ScanSettings () "," Build ScanSettings. <br /><br />"
"android.bluetooth.le.ScanSettings.Builder.setScanMode (int scanMode) "," Set scan mode for Bluetooth LE scan. <br /><br />"
"android.bluetooth.le.ScanSettings.getScanMode () "," no description <br /><br />"
"android.bluetooth.le.ScanSettings.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.bluetooth.le.ScanSettings.getReportDelayMillis () "," Returns report delay timestamp based on the device clock. <br /><br />"
"android.bluetooth.le.ScanSettings.getCallbackType () "," no description <br /><br />"
"android.bluetooth.le.ScanSettings.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.bluetooth.le.ScanSettings.getScanResultType () "," no description <br /><br />"
"android.content.AbstractThreadedSyncAdapter.Thread () "," Indicates that a sync operation has been canceled. <br /><br />"
"android.content.AbstractThreadedSyncAdapter.getSyncAdapterBinder () "," no description <br /><br />"
"android.content.AbstractThreadedSyncAdapter.SyncResult () "," Perform a sync for this account. <br /><br />"
"android.content.AbstractThreadedSyncAdapter.onSyncCanceled () "," Indicates that a sync operation has been canceled. <br /><br />"
"android.content.AbstractThreadedSyncAdapter.getContext () "," no description <br /><br />"
"android.content.AsyncQueryHandler.String () "," This method begins an asynchronous query. <br /><br />"
"android.content.AsyncQueryHandler.Message () "," Subclasses must implement this to receive messages. <br /><br />"
"android.content.AsyncQueryHandler.String[] () "," This method begins an asynchronous update. <br /><br />"
"android.content.AsyncQueryHandler.ContentValues () "," This method begins an asynchronous insert. <br /><br />"
"android.content.AsyncQueryHandler.cancelOperation (int token) "," Attempts to cancel operation that has not already started. <br /><br />"
"android.content.AsyncQueryHandler.WorkerHandler.Message () "," Subclasses must implement this to receive messages. <br /><br />"
"android.content.AsyncTaskLoader&lt;D&gt;.loadInBackground () () "," Returns true if the current invocation of loadInBackground() is being canceled. <br /><br />"
"android.content.AsyncTaskLoader&lt;D&gt;.setUpdateThrottle (long delayMS) "," Set amount to throttle updates by. <br /><br />"
"android.content.AsyncTaskLoader&lt;D&gt;.onCanceled (D data) "," Called if the task was canceled before it was completed. <br /><br />"
"android.content.AsyncTaskLoader&lt;D&gt;.cancelLoadInBackground () "," Called on the main thread to abort a load in progress. <br /><br />"
"android.content.AsyncTaskLoader&lt;D&gt;.String[] () "," Print the Loader's state into the given stream. <br /><br />"
"android.content.AsyncTaskLoader&lt;D&gt;.loadInBackground () "," Called on a worker thread to perform the actual load and to return the result of the load operation. <br /><br />"
"android.content.BroadcastReceiver.Context.registerReceiver () (boolean debug) "," Control inclusion of debugging help for mismatched calls to Context.registerReceiver(). <br /><br />"
"android.content.BroadcastReceiver.clearAbortBroadcast () "," Clears the flag indicating that this receiver should abort the current broadcast. <br /><br />"
"android.content.BroadcastReceiver.isInitialStickyBroadcast () "," Returns true if the receiver is currently processing the initial value of a sticky broadcast -- that is, the value that was last broadcast and is currently held in the sticky cache, so this is not directly the result of a broadcast right now. <br /><br />"
"android.content.BroadcastReceiver.Context.sendOrderedBroadcast () "," Change the current result extras of this broadcast; only works with broadcasts sent through Context.sendOrderedBroadcast. <br /><br />"
"android.content.BroadcastReceiver.Context.sendOrderedBroadcast (int code) "," Change the current result code of this broadcast; only works with broadcasts sent through Context.sendOrderedBroadcast. <br /><br />"
"android.content.BroadcastReceiver.getAbortBroadcast () "," Returns the flag indicating whether or not this receiver should abort the current broadcast. <br /><br />"
"android.content.BroadcastReceiver.setDebugUnregister (boolean) () "," Return the last value given to setDebugUnregister(boolean). <br /><br />"
"android.content.BroadcastReceiver.setOrderedHint (boolean isOrdered) "," For internal use, sets the hint about whether this BroadcastReceiver is running in ordered mode. <br /><br />"
"android.content.BroadcastReceiver.onReceive (Context, Intent) () "," This can be called by an application in onReceive(Context, Intent) to allow it to keep the broadcast active after returning from that function. <br /><br />"
"android.content.BroadcastReceiver.getResultCode () "," Retrieve the current result code, as set by the previous receiver. <br /><br />"
"android.content.BroadcastReceiver.getResultExtras (boolean makeMap) "," Retrieve the current result extra data, as set by the previous receiver. <br /><br />"
"android.content.BroadcastReceiver.getResultData () "," Retrieve the current result data, as set by the previous receiver. <br /><br />"
"android.content.BroadcastReceiver.isOrderedBroadcast () "," Returns true if the receiver is currently processing an ordered broadcast. <br /><br />"
"android.content.BroadcastReceiver.Intent () "," Provide a binder to an already-running service. <br /><br />"
"android.content.BroadcastReceiver.PendingResult.BroadcastReceiver.setResultCode (int) (int code) "," Version of BroadcastReceiver.setResultCode(int) for asynchronous broadcast handling. <br /><br />"
"android.content.BroadcastReceiver.PendingResult.finish () "," Finish the broadcast. <br /><br />"
"android.content.BroadcastReceiver.PendingResult.BroadcastReceiver.getAbortBroadcast () () "," Version of BroadcastReceiver.getAbortBroadcast() for asynchronous broadcast handling. <br /><br />"
"android.content.BroadcastReceiver.PendingResult.BroadcastReceiver.getResultExtras (boolean) (boolean makeMap) "," Version of BroadcastReceiver.getResultExtras(boolean) for asynchronous broadcast handling. <br /><br />"
"android.content.BroadcastReceiver.PendingResult.BroadcastReceiver.abortBroadcast () () "," Version of BroadcastReceiver.abortBroadcast() for asynchronous broadcast handling. <br /><br />"
"android.content.BroadcastReceiver.PendingResult.BroadcastReceiver.getResultCode () () "," Version of BroadcastReceiver.getResultCode() for asynchronous broadcast handling. <br /><br />"
"android.content.BroadcastReceiver.PendingResult.BroadcastReceiver.setResult (int, String, Bundle) () "," Version of BroadcastReceiver.setResult(int, String, Bundle) for asynchronous broadcast handling. <br /><br />"
"android.content.BroadcastReceiver.PendingResult.BroadcastReceiver.getResultData () () "," Version of BroadcastReceiver.getResultData() for asynchronous broadcast handling. <br /><br />"
"android.content.BroadcastReceiver.PendingResult.BroadcastReceiver.clearAbortBroadcast () () "," Version of BroadcastReceiver.clearAbortBroadcast() for asynchronous broadcast handling. <br /><br />"
"android.content.BroadcastReceiver.PendingResult.BroadcastReceiver.setResultData (String) () "," Version of BroadcastReceiver.setResultData(String) for asynchronous broadcast handling. <br /><br />"
"android.content.BroadcastReceiver.PendingResult.BroadcastReceiver.setResultExtras (Bundle) () "," Version of BroadcastReceiver.setResultExtras(Bundle) for asynchronous broadcast handling. <br /><br />"
"android.content.ClipboardManager.OnPrimaryClipChangedListener.ClipboardManager () "," Callback that is invoked by ClipboardManager when the primary clip changes. <br /><br />"
"android.content.ClipData.Uri () "," Create a new ClipData holding a URI. <br /><br />"
"android.content.ClipData.ClipDescription () "," Return the ClipDescription associated with this data, describing what it contains. <br /><br />"
"android.content.ClipData.MIMETYPE_TEXT_URILIST () "," Create a new ClipData holding an URI with MIME type MIMETYPE_TEXT_URILIST. <br /><br />"
"android.content.ClipData.ClipData.Item () "," Add a new Item to the overall ClipData container. <br /><br />"
"android.content.ClipData.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.ClipData.MIMETYPE_TEXT_PLAIN () "," Create a new ClipData holding data of the type MIMETYPE_TEXT_PLAIN. <br /><br />"
"android.content.ClipData.getItemAt (int index) "," Return a single item inside of the clip data. <br /><br />"
"android.content.ClipData.MIMETYPE_TEXT_HTML () "," Create a new ClipData holding data of the type MIMETYPE_TEXT_HTML. <br /><br />"
"android.content.ClipData.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.ClipData.getItemCount () "," Return the number of items in the clip data. <br /><br />"
"android.content.ClipData.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.ClipData.MIMETYPE_TEXT_INTENT () "," Create a new ClipData holding an Intent with MIME type MIMETYPE_TEXT_INTENT. <br /><br />"
"android.content.ClipData.Item.Context () "," Turn this item into text, regardless of the type of data it actually contains. <br /><br />"
"android.content.ClipData.Item.getIntent () "," Retrieve the raw Intent contained in this Item. <br /><br />"
"android.content.ClipData.Item.coerceToHtmlText (Context) () "," Like coerceToHtmlText(Context), but any text that would be returned as HTML formatting will be returned as text with style spans. <br /><br />"
"android.content.ClipData.Item.getHtmlText () "," Retrieve the raw HTML text contained in this Item. <br /><br />"
"android.content.ClipData.Item.getText () "," Retrieve the raw text contained in this Item. <br /><br />"
"android.content.ClipData.Item.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.ClipData.Item.getUri () "," Retrieve the raw URI contained in this Item. <br /><br />"
"android.content.ClipDescription.getMimeTypeCount () "," Return the number of MIME types the clip is available in. <br /><br />"
"android.content.ClipDescription.String () "," Check whether the clip description contains the given MIME type. <br /><br />"
"android.content.ClipDescription.getMimeType (int index) "," Return one of the possible clip MIME types. <br /><br />"
"android.content.ClipDescription.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.ClipDescription.getLabel () "," Return the label for this clip. <br /><br />"
"android.content.ClipDescription.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.ClipDescription.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.ComponentCallbacks.Configuration () "," Called by the system when the device configuration changes while your component is running. <br /><br />"
"android.content.ComponentCallbacks.onLowMemory () "," This is called when the overall system is running low on memory, and actively running processes should trim their memory usage. <br /><br />"
"android.content.ComponentCallbacks2.onTrimMemory (int level) "," Called when the operating system has determined that it is a good time for a process to trim unneeded memory from its process. <br /><br />"
"android.content.ComponentName.getClassName () "," Return the class name of this component. <br /><br />"
"android.content.ComponentName.getPackageName () "," Return the package name of this component. <br /><br />"
"android.content.ComponentName.flattenToString () "," Return a String that unambiguously describes both the package and class names contained in the ComponentName. <br /><br />"
"android.content.ComponentName.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.content.ComponentName.getShortClassName () "," Return the class name, either fully qualified or in a shortened form (with a leading '.') if it is a suffix of the package. <br /><br />"
"android.content.ComponentName.ComponentName () "," no description <br /><br />"
"android.content.ComponentName.Parcel () "," Write a ComponentName to a Parcel, handling null pointers. <br /><br />"
"android.content.ComponentName.writeToParcel (ComponentName, Parcel) () "," Read a ComponentName from a Parcel that was previously written with writeToParcel(ComponentName, Parcel), returning either a null or new object as appropriate. <br /><br />"
"android.content.ComponentName.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.content.ComponentName.toShortString () "," Return string representation of this class without the class's name as a prefix. <br /><br />"
"android.content.ComponentName.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.content.ComponentName.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.ComponentName.flattenToString () () "," Recover a ComponentName from a String that was previously created with flattenToString(). <br /><br />"
"android.content.ComponentName.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.ContentProvider.ProviderInfo () "," After being instantiated, this is called to tell the content provider about itself. <br /><br />"
"android.content.ContentProvider.Uri () "," Implement this to handle requests for the MIME type of the data at the given URI. <br /><br />"
"android.content.ContentProvider.String () "," Implement this to handle query requests from clients. <br /><br />"
"android.content.ContentProvider.getWritePermission () "," Return the name of the permission required for read/write access to this content provider. <br /><br />"
"android.content.ContentProvider.getReadPermission () "," Return the name of the permission required for read-only access to this content provider. <br /><br />"
"android.content.ContentProvider.onCreate () "," Implement this to initialize your content provider on startup. <br /><br />"
"android.content.ContentProvider.CancellationSignal () "," Implement this to handle query requests from clients with support for cancellation. <br /><br />"
"android.content.ContentProvider.shutdown () "," Implement this to shut down the ContentProvider instance. <br /><br />"
"android.content.ContentProvider.getPathPermissions () "," Return the path-based permissions required for read and/or write access to this content provider. <br /><br />"
"android.content.ContentProvider.openTypedAssetFile (Uri, String, Bundle) () "," A helper function for implementing openTypedAssetFile(Uri, String, Bundle), for creating a data pipe and background thread allowing you to stream generated data back to the client. <br /><br />"
"android.content.ContentProvider.onTrimMemory (int level) "," Called when the operating system has determined that it is a good time for a process to trim unneeded memory from its process. <br /><br />"
"android.content.ContentProvider.openFile (Uri, String) () "," This is like openFile(Uri, String), but can be implemented by providers that need to be able to return sub-sections of files, often assets inside of their .apk. <br /><br />"
"android.content.ContentProvider.ContentValues () "," Implement this to handle requests to insert a new row. <br /><br />"
"android.content.ContentProvider.getCallingPackage () "," Return the package name of the caller that initiated the request being processed on the current thread. <br /><br />"
"android.content.ContentProvider.onLowMemory () "," This is called when the overall system is running low on memory, and actively running processes should trim their memory usage. This method is always called on the application main thread, and must not perform lengthy operations. <br /><br />"
"android.content.ContentProvider.apply (ContentProvider, ContentProviderResult[], int) () "," Override this to handle requests to perform a batch of operations, or the default implementation will iterate over the operations and call apply(ContentProvider, ContentProviderResult[], int) on each of them. <br /><br />"
"android.content.ContentProvider.Configuration () "," Called by the system when the device configuration changes while your component is running. This method is always called on the application main thread, and must not perform lengthy operations. <br /><br />"
"android.content.ContentProvider.canonicalize (Uri) () "," Remove canonicalization from canonical URIs previously returned by canonicalize(Uri). <br /><br />"
"android.content.ContentProvider.String[] () "," Implement this to handle requests to update one or more rows. <br /><br />"
"android.content.ContentProvider.Bundle () "," Called by a client to open a read-only stream containing data of a particular MIME type. <br /><br />"
"android.content.ContentProvider.insert (Uri, ContentValues) () "," Override this to handle requests to insert a set of new rows, or the default implementation will iterate over the values and call insert(Uri, ContentValues) on each of them. <br /><br />"
"android.content.ContentProvider.getContext () "," Retrieves the Context this provider is running in. <br /><br />"
"android.content.ContentProvider.PipeDataWriter&lt;T&gt;.Bundle () "," Called from a background thread to stream data out to a pipe. <br /><br />"
"android.content.ContentProviderClient.call (String, String, Bundle) () "," See call(String, String, Bundle) <br /><br />"
"android.content.ContentProviderClient.ContentProvider.getStreamTypes () "," See ContentProvider.getStreamTypes <br /><br />"
"android.content.ContentProviderClient.ContentProvider.bulkInsert () "," See ContentProvider.bulkInsert <br /><br />"
"android.content.ContentProviderClient.ContentProvider.getType () "," See ContentProvider.getType <br /><br />"
"android.content.ContentProviderClient.uncanonicalize (Uri) () "," See uncanonicalize(Uri) <br /><br />"
"android.content.ContentProviderClient.ContentProvider.openFile () "," See ContentProvider.openFile. <br /><br />"
"android.content.ContentProviderClient.ContentProvider.query () "," See ContentProvider.query <br /><br />"
"android.content.ContentProviderClient.ContentProvider.insert () "," See ContentProvider.insert <br /><br />"
"android.content.ContentProviderClient.ContentProvider.applyBatch () "," See ContentProvider.applyBatch <br /><br />"
"android.content.ContentProviderClient.ContentProvider.update () "," See ContentProvider.update <br /><br />"
"android.content.ContentProviderClient.ContentProvider () "," Get a reference to the ContentProvider that is associated with this client. <br /><br />"
"android.content.ContentProviderClient.canonicalize (Uri) () "," See canonicalize(Uri) <br /><br />"
"android.content.ContentProviderClient.ContentProvider.delete () "," See ContentProvider.delete <br /><br />"
"android.content.ContentProviderClient.ContentProviderClient () "," Call this to indicate to the system that the associated ContentProvider is no longer needed by this ContentProviderClient. <br /><br />"
"android.content.ContentProviderClient.ContentProvider.openTypedAssetFile () "," See ContentProvider.openTypedAssetFile <br /><br />"
"android.content.ContentProviderClient.ContentProvider.openAssetFile () "," See ContentProvider.openAssetFile. <br /><br />"
"android.content.ContentProviderOperation.Builder.String () "," Add a ContentValues back reference. <br /><br />"
"android.content.ContentProviderOperation.Builder.withSelectionBackReference (int selectionArgIndex, int previousResult) "," Add a back references as a selection arg. <br /><br />"
"android.content.ContentProviderOperation.Builder.String[] () "," The selection and arguments to use. <br /><br />"
"android.content.ContentProviderOperation.Builder.OperationApplicationException (int count) "," If set then if the number of rows affected by this operation do not match this count OperationApplicationException will be throw. <br /><br />"
"android.content.ContentProviderOperation.Builder.Object () "," A value to insert or update. <br /><br />"
"android.content.ContentProviderOperation.Builder.ContentProviderOperation.Builder () "," Create a ContentProviderOperation from this ContentProviderOperation.Builder. <br /><br />"
"android.content.ContentProviderOperation.Builder.ContentValues () "," The ContentValues to use. <br /><br />"
"android.content.ContentProviderOperation.Builder.withYieldAllowed (boolean yieldAllowed) "," no description <br /><br />"
"android.content.ContentProviderOperation.withSelection (String, String[]) () "," The Selection Arguments back references are represented as a Map of Integer-&gt;Integer where the key is an index into the selection argument array (see withSelection(String, String[])) and the value is the index of the previous result that should be used for that selection argument array slot. <br /><br />"
"android.content.ContentProviderOperation.isReadOperation () "," no description <br /><br />"
"android.content.ContentProviderOperation.withValues (ContentValues) () "," Create a ContentProviderOperation.Builder suitable for building a ContentProviderOperation to assert a set of values as provided through withValues(ContentValues). <br /><br />"
"android.content.ContentProviderOperation.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.ContentProviderOperation.ContentProviderOperation () "," Create a ContentProviderOperation.Builder suitable for building an update ContentProviderOperation. <br /><br />"
"android.content.ContentProviderOperation.isYieldAllowed () "," no description <br /><br />"
"android.content.ContentProviderOperation.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.ContentProviderOperation.ContentProviderResult[] () "," The ContentValues back references are represented as a ContentValues object where the key refers to a column and the value is an index of the back reference whose valued should be associated with the column. <br /><br />"
"android.content.ContentProviderOperation.isWriteOperation () "," no description <br /><br />"
"android.content.ContentProviderOperation.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.ContentProviderOperation.getUri () "," no description <br /><br />"
"android.content.ContentProviderResult.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.ContentProviderResult.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.ContentProviderResult.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.ContentQueryMap.String () "," Access the ContentValues for the row specified by rowName <br /><br />"
"android.content.ContentQueryMap.requery () "," Requeries the cursor and reads the contents into the cache <br /><br />"
"android.content.ContentQueryMap.getRows () "," no description <br /><br />"
"android.content.ContentQueryMap.close () "," no description <br /><br />"
"android.content.ContentQueryMap.setKeepUpdated (boolean keepUpdated) "," Change whether or not the ContentQueryMap will register with the cursor's ContentProvider for change notifications. <br /><br />"
"android.content.ContentResolver.getOutgoingPersistedUriPermissions () "," Return list of all persisted URI permission grants that are hosted by the calling app. <br /><br />"
"android.content.ContentResolver.SyncStatusObserver () "," Request notifications when the different aspects of the SyncManager change. <br /><br />"
"android.content.ContentResolver.openTypedAssetFileDescriptor (Uri, String, Bundle) () "," Query for the possible MIME types for the representations the given content URL can be returned when opened as as stream with openTypedAssetFileDescriptor(Uri, String, Bundle). <br /><br />"
"android.content.ContentResolver.ContentValues () "," Inserts a row into a table at the given URL. <br /><br />"
"android.content.ContentResolver.acquireContentProviderClient (String) () "," Like acquireContentProviderClient(String), but for use when you do not trust the stability of the target content provider. <br /><br />"
"android.content.ContentResolver.getCurrentSyncs () () "," This method was deprecated in API level 11. Since multiple concurrent syncs are now supported you should use getCurrentSyncs() to get the accurate list of current syncs. This method returns the first item from the list of current syncs or null if there are none. <br /><br />"
"android.content.ContentResolver.setMasterSyncAutomatically (boolean sync) "," Sets the master auto-sync setting that applies to all the providers and accounts. <br /><br />"
"android.content.ContentResolver.Cursor () "," Query the given URI, returning a Cursor over the result set with optional support for cancellation. <br /><br />"
"android.content.ContentResolver.getSyncAdapterTypes () "," Get information about the SyncAdapters that are known to the system. <br /><br />"
"android.content.ContentResolver.ContentProviderOperation () "," Applies each of the ContentProviderOperation objects and returns an array of their results. <br /><br />"
"android.content.ContentResolver.ContentProvider () "," Returns a ContentProviderClient that is associated with the ContentProvider with the authority of name, starting the provider if necessary. <br /><br />"
"android.content.ContentResolver.canonicalize (Uri) () "," Given a canonical Uri previously generated by canonicalize(Uri), convert it to its local non-canonical form. <br /><br />"
"android.content.ContentResolver.requestSync (android.accounts.Account, String, android.os.Bundle) () "," This method was deprecated in API level 5. instead use requestSync(android.accounts.Account, String, android.os.Bundle) <br /><br />"
"android.content.ContentResolver.String[] () "," Update row(s) in a content URI. <br /><br />"
"android.content.ContentResolver.ContentValues[] () "," Inserts multiple rows into a table at the given URL. <br /><br />"
"android.content.ContentResolver.Uri () "," Take a persistable URI permission grant that has been offered. <br /><br />"
"android.content.ContentResolver.acquireContentProviderClient (Uri) () "," Like acquireContentProviderClient(Uri), but for use when you do not trust the stability of the target content provider. <br /><br />"
"android.content.ContentResolver.getCurrentSyncs () "," Returns a list with information about all the active syncs. <br /><br />"
"android.content.ContentResolver.String () "," Set whether or not the provider is synced when it receives a network tickle. <br /><br />"
"android.content.ContentResolver.READ_SYNC_SETTINGS () "," Check if the provider should be synced when a network tickle is received This method requires the caller to hold the permission READ_SYNC_SETTINGS. <br /><br />"
"android.content.ContentResolver.CancellationSignal () "," Open a raw file descriptor to access (potentially type transformed) data from a 'content:' URI. <br /><br />"
"android.content.ContentResolver.Object () "," Remove a previously registered status change listener. <br /><br />"
"android.content.ContentResolver.ContentObserver () "," Unregisters a change observer. <br /><br />"
"android.content.ContentResolver.cancelSync (android.accounts.Account, String) () "," This method was deprecated in API level 5. instead use cancelSync(android.accounts.Account, String) <br /><br />"
"android.content.ContentResolver.getPersistedUriPermissions () "," Return list of all URI permission grants that have been persisted by the calling app. <br /><br />"
"android.content.ContentResolver.SyncRequest () "," Register a sync with the SyncManager. <br /><br />"
"android.content.ContentResolver.getMasterSyncAutomatically () "," Gets the master auto-sync setting that applies to all the providers and accounts. <br /><br />"
"android.content.ContentResolver.openOutputStream (uri, 'w') () "," Synonym for openOutputStream(uri, 'w'). <br /><br />"
"android.content.ContentResolver.Bundle () "," Check that only values of the following types are in the Bundle:  Integer Long Boolean Float Double String Account null <br /><br />"
"android.content.ContentUris.Uri () "," Appends the given ID to the end of the path. <br /><br />"
"android.content.ContentUris.Uri.Builder () "," Appends the given ID to the end of the path. <br /><br />"
"android.content.ContentValues.String () "," Remove a single value. <br /><br />"
"android.content.ContentValues.Float () "," Adds a value to the set. <br /><br />"
"android.content.ContentValues.valueSet () "," Returns a set of all of the keys and values <br /><br />"
"android.content.ContentValues.Byte () "," Adds a value to the set. <br /><br />"
"android.content.ContentValues.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.ContentValues.size () "," Returns the number of values. <br /><br />"
"android.content.ContentValues.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.content.ContentValues.Boolean () "," Adds a value to the set. <br /><br />"
"android.content.ContentValues.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.ContentValues.ContentValues () "," Adds all values from the passed in ContentValues. <br /><br />"
"android.content.ContentValues.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.ContentValues.Integer () "," Adds a value to the set. <br /><br />"
"android.content.ContentValues.Short () "," Adds a value to the set. <br /><br />"
"android.content.ContentValues.clear () "," Removes all values. <br /><br />"
"android.content.ContentValues.keySet () "," Returns a set of all of the keys <br /><br />"
"android.content.ContentValues.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.content.ContentValues.Long () "," Adds a value to the set. <br /><br />"
"android.content.ContentValues.Double () "," Adds a value to the set. <br /><br />"
"android.content.Context.getPackageManager () "," Return PackageManager instance to find global package information. <br /><br />"
"android.content.Context.AttributeSet () "," Retrieve styled attribute information in this Context's theme. <br /><br />"
"android.content.Context.getResources () "," Return a Resources instance for your application's package. <br /><br />"
"android.content.Context.UserHandle () "," This method was deprecated in API level 21. Sticky broadcasts should not be used. They provide no security (anyone can access them), no protection (anyone can modify them), and many other problems. The recommended pattern is to use a non-sticky broadcast to report that something has changed, with another mechanism for apps to retrieve the current value whenever desired. <br /><br />"
"android.content.Context.ComponentCallbacks () "," Add a new ComponentCallbacks to the base application of the Context, which will be called at the same times as the ComponentCallbacks methods of activities and other components are called. <br /><br />"
"android.content.Context.getFilesDir () () "," Returns the absolute path to the directory on the filesystem similar to getFilesDir(). <br /><br />"
"android.content.Context.startActivities (Intent[], Bundle) () "," Same as startActivities(Intent[], Bundle) with no options specified. <br /><br />"
"android.content.Context.setTheme (int resid) "," Set the base theme for this context. <br /><br />"
"android.content.Context.IntentFilter () "," Register a BroadcastReceiver to be run in the main activity thread. <br /><br />"
"android.content.Context.WallpaperManager.peek () () "," This method was deprecated in API level 5. Use WallpaperManager.peek() instead. <br /><br />"
"android.content.Context.format (String, Object...) () "," Return a localized formatted string from the application's package's default string table, substituting the format arguments as defined in Formatter and format(String, Object...). <br /><br />"
"android.content.Context.Display () "," Return a new Context object for the current Context but whose resources are adjusted to match the metrics of the given Display. <br /><br />"
"android.content.Context.openFileOutput (String, int) () "," Returns the absolute path to the directory on the filesystem where files created with openFileOutput(String, int) are stored. <br /><br />"
"android.content.Context.sendBroadcast (Intent) () "," Version of sendBroadcast(Intent) that allows you to receive data back from the broadcast. <br /><br />"
"android.content.Context.SecurityException () "," If a particular process and user ID has not been granted permission to access a specific URI, throw SecurityException. <br /><br />"
"android.content.Context.isRestricted () "," Indicates whether this Context is restricted. <br /><br />"
"android.content.Context.obtainStyledAttributes (int resid, int[] attrs) "," Retrieve styled attribute information in this Context's theme. <br /><br />"
"android.content.Context.getDrawable (int id) "," Return a drawable object associated with a particular resource ID and styled for the current theme. <br /><br />"
"android.content.Context.openOrCreateDatabase (String, int, SQLiteDatabase.CursorFactory) () "," Returns the absolute path on the filesystem where a database created with openOrCreateDatabase(String, int, SQLiteDatabase.CursorFactory) is stored. <br /><br />"
"android.content.Context.BroadcastReceiver () "," Unregister a previously registered BroadcastReceiver. <br /><br />"
"android.content.Context.getExternalCacheDirs () "," Returns absolute paths to application-specific directories on all external storage devices where the application can place cache files it owns. <br /><br />"
"android.content.Context.getText (int resId) "," Return a localized, styled CharSequence from the application's package's default string table. <br /><br />"
"android.content.Context.getExternalMediaDirs () "," Returns absolute paths to application-specific directories on all external storage devices where the application can place media files. <br /><br />"
"android.content.Context.Handler () "," Register to receive intent broadcasts, to run in the context of scheduler. <br /><br />"
"android.content.Context.getPackageCodePath () "," Return the full path to this context's primary Android package. <br /><br />"
"android.content.Context.SET_WALLPAPER () "," This method was deprecated in API level 5. Use WallpaperManager.set() instead.  This method requires the caller to hold the permission SET_WALLPAPER. <br /><br />"
"android.content.Context.sendOrderedBroadcast (Intent, String, BroadcastReceiver, Handler, int, String, Bundle) () "," Version of sendOrderedBroadcast(Intent, String, BroadcastReceiver, Handler, int, String, Bundle) that allows you to specify the user the broadcast will be sent to. <br /><br />"
"android.content.Context.getApplicationContext () "," Return the context of the single, global Application object of the current process. <br /><br />"
"android.content.Context.getMainLooper () "," Return the Looper for the main thread of the current process. <br /><br />"
"android.content.Context.startActivity (Intent, Bundle) () "," Like startActivity(Intent, Bundle), but taking a IntentSender to start. <br /><br />"
"android.content.Context.getPackageResourcePath () "," Return the full path to this context's primary Android package. <br /><br />"
"android.content.Context.getPackageName () "," Return the name of this application's package. <br /><br />"
"android.content.Context.registerComponentCallbacks (ComponentCallbacks) () "," Remove a ComponentCallbacks object that was previously registered with registerComponentCallbacks(ComponentCallbacks). <br /><br />"
"android.content.Context.getContentResolver () "," Return a ContentResolver instance for your application's package. <br /><br />"
"android.content.Context.ServiceConnection () "," Disconnect from an application service. <br /><br />"
"android.content.Context.startIntentSender (IntentSender, Intent, int, int, int, Bundle) () "," Same as startIntentSender(IntentSender, Intent, int, int, int, Bundle) with no options specified. <br /><br />"
"android.content.Context.WallpaperManager.get () () "," This method was deprecated in API level 5. Use WallpaperManager.get() instead. <br /><br />"
"android.content.Context.getApplicationInfo () "," Return the full application info for this context's package. <br /><br />"
"android.content.Context.getAssets () "," Return an AssetManager instance for your application's package. <br /><br />"
"android.content.Context.grantUriPermission (String, Uri, int) () "," Remove all permissions to access a particular content provider Uri that were previously added with grantUriPermission(String, Uri, int). <br /><br />"
"android.content.Context.obtainStyledAttributes (int[] attrs) "," Retrieve styled attribute information in this Context's theme. <br /><br />"
"android.content.Context.SQLiteDatabase.CursorFactory () "," Open a new private SQLiteDatabase associated with this Context's application package. <br /><br />"
"android.content.Context.getCodeCacheDir () "," Returns the absolute path to the application specific cache directory on the filesystem designed for storing cached code. <br /><br />"
"android.content.Context.getClassLoader () "," Return a class loader you can use to retrieve classes in this package. <br /><br />"
"android.content.Context.getString (int resId) "," Return a localized string from the application's package's default string table. <br /><br />"
"android.content.Context.Instrumentation () "," Start executing an Instrumentation class. <br /><br />"
"android.content.Context.Configuration () "," Return a new Context object for the current Context but whose resources are adjusted to match the given Configuration. <br /><br />"
"android.content.Context.databaseList () "," Returns an array of strings naming the private databases associated with this Context's application package. <br /><br />"
"android.content.Context.Uri () "," Grant permission to access a specific Uri to another package, regardless of whether that package has general permission to access the Uri's content provider. <br /><br />"
"android.content.Context.String () "," Broadcast the given intent to all interested BroadcastReceivers, delivering them one at a time to allow more preferred receivers to consume the broadcast before it is delivered to less preferred receivers. <br /><br />"
"android.content.Context.WallpaperManager.getDesiredMinimumHeight () () "," This method was deprecated in API level 5. Use WallpaperManager.getDesiredMinimumHeight() instead. <br /><br />"
"android.content.Context.getObbDir () "," Return the primary external storage directory where this application's OBB files (if there are any) can be found. <br /><br />"
"android.content.Context.WallpaperManager.getDesiredMinimumWidth () () "," This method was deprecated in API level 5. Use WallpaperManager.getDesiredMinimumWidth() instead. <br /><br />"
"android.content.Context.getCacheDir () "," Returns the absolute path to the application specific cache directory on the filesystem. <br /><br />"
"android.content.Context.sendBroadcast (Intent, String) () "," Version of sendBroadcast(Intent, String) that allows you to specify the user the broadcast will be sent to. <br /><br />"
"android.content.Context.DatabaseErrorHandler () "," Open a new private SQLiteDatabase associated with this Context's application package. <br /><br />"
"android.content.Context.Environment.getExternalStorageDirectory () () "," Returns the absolute path to the directory on the primary external filesystem (that is somewhere on Environment.getExternalStorageDirectory()) where the application can place persistent files it owns. <br /><br />"
"android.content.Context.getTheme () "," Return the Theme object associated with this Context. <br /><br />"
"android.content.Context.getObbDirs () "," Returns absolute paths to application-specific directories on all external storage devices where the application's OBB files (if there are any) can be found. <br /><br />"
"android.content.Context.Bundle () "," Launch a new activity. <br /><br />"
"android.content.Context.fileList () "," Returns an array of strings naming the private files associated with this Context's application package. <br /><br />"
"android.content.Context.Intent () "," Request that a given application service be stopped. <br /><br />"
"android.content.ContextWrapper.getPackageManager () "," Return PackageManager instance to find global package information. <br /><br />"
"android.content.ContextWrapper.getResources () "," Return a Resources instance for your application's package. <br /><br />"
"android.content.ContextWrapper.UserHandle () "," This method is deprecated. Sticky broadcasts should not be used. They provide no security (anyone can access them), no protection (anyone can modify them), and many other problems. The recommended pattern is to use a non-sticky broadcast to report that something has changed, with another mechanism for apps to retrieve the current value whenever desired. <br /><br />"
"android.content.ContextWrapper.getFilesDir () () "," Returns the absolute path to the directory on the filesystem similar to getFilesDir(). <br /><br />"
"android.content.ContextWrapper.startActivities (Intent[], Bundle) () "," Same as startActivities(Intent[], Bundle) with no options specified. <br /><br />"
"android.content.ContextWrapper.setTheme (int resid) "," Set the base theme for this context. <br /><br />"
"android.content.ContextWrapper.IntentFilter () "," Register a BroadcastReceiver to be run in the main activity thread. <br /><br />"
"android.content.ContextWrapper.WallpaperManager.peek () () "," This method is deprecated. Use WallpaperManager.peek() instead. <br /><br />"
"android.content.ContextWrapper.Display () "," Return a new Context object for the current Context but whose resources are adjusted to match the metrics of the given Display. <br /><br />"
"android.content.ContextWrapper.openFileOutput (String, int) () "," Returns the absolute path to the directory on the filesystem where files created with openFileOutput(String, int) are stored. <br /><br />"
"android.content.ContextWrapper.sendBroadcast (Intent) () "," Version of sendBroadcast(Intent) that allows you to receive data back from the broadcast. <br /><br />"
"android.content.ContextWrapper.SecurityException () "," If a particular process and user ID has not been granted permission to access a specific URI, throw SecurityException. <br /><br />"
"android.content.ContextWrapper.isRestricted () "," Indicates whether this Context is restricted. <br /><br />"
"android.content.ContextWrapper.openOrCreateDatabase (String, int, SQLiteDatabase.CursorFactory) () "," Returns the absolute path on the filesystem where a database created with openOrCreateDatabase(String, int, SQLiteDatabase.CursorFactory) is stored. <br /><br />"
"android.content.ContextWrapper.BroadcastReceiver () "," Unregister a previously registered BroadcastReceiver. <br /><br />"
"android.content.ContextWrapper.getExternalCacheDirs () "," Returns absolute paths to application-specific directories on all external storage devices where the application can place cache files it owns. <br /><br />"
"android.content.ContextWrapper.getExternalMediaDirs () "," Returns absolute paths to application-specific directories on all external storage devices where the application can place media files. <br /><br />"
"android.content.ContextWrapper.Handler () "," Register to receive intent broadcasts, to run in the context of scheduler. <br /><br />"
"android.content.ContextWrapper.getPackageCodePath () "," Return the full path to this context's primary Android package. <br /><br />"
"android.content.ContextWrapper.SET_WALLPAPER () "," This method is deprecated. Use WallpaperManager.set() instead.  This method requires the caller to hold the permission SET_WALLPAPER. <br /><br />"
"android.content.ContextWrapper.sendOrderedBroadcast (Intent, String, BroadcastReceiver, Handler, int, String, Bundle) () "," Version of sendOrderedBroadcast(Intent, String, BroadcastReceiver, Handler, int, String, Bundle) that allows you to specify the user the broadcast will be sent to. <br /><br />"
"android.content.ContextWrapper.getApplicationContext () "," Return the context of the single, global Application object of the current process. <br /><br />"
"android.content.ContextWrapper.getMainLooper () "," Return the Looper for the main thread of the current process. <br /><br />"
"android.content.ContextWrapper.startActivity (Intent, Bundle) () "," Like startActivity(Intent, Bundle), but taking a IntentSender to start. <br /><br />"
"android.content.ContextWrapper.getPackageResourcePath () "," Return the full path to this context's primary Android package. <br /><br />"
"android.content.ContextWrapper.getPackageName () "," Return the name of this application's package. <br /><br />"
"android.content.ContextWrapper.getContentResolver () "," Return a ContentResolver instance for your application's package. <br /><br />"
"android.content.ContextWrapper.ServiceConnection () "," Disconnect from an application service. <br /><br />"
"android.content.ContextWrapper.startIntentSender (IntentSender, Intent, int, int, int, Bundle) () "," Same as startIntentSender(IntentSender, Intent, int, int, int, Bundle) with no options specified. <br /><br />"
"android.content.ContextWrapper.WallpaperManager.get () () "," This method is deprecated. Use WallpaperManager.get() instead. <br /><br />"
"android.content.ContextWrapper.getApplicationInfo () "," Return the full application info for this context's package. <br /><br />"
"android.content.ContextWrapper.getAssets () "," Return an AssetManager instance for your application's package. <br /><br />"
"android.content.ContextWrapper.grantUriPermission (String, Uri, int) () "," Remove all permissions to access a particular content provider Uri that were previously added with grantUriPermission(String, Uri, int). <br /><br />"
"android.content.ContextWrapper.SQLiteDatabase.CursorFactory () "," Open a new private SQLiteDatabase associated with this Context's application package. <br /><br />"
"android.content.ContextWrapper.getCodeCacheDir () "," Returns the absolute path to the application specific cache directory on the filesystem designed for storing cached code. <br /><br />"
"android.content.ContextWrapper.getClassLoader () "," Return a class loader you can use to retrieve classes in this package. <br /><br />"
"android.content.ContextWrapper.Instrumentation () "," Start executing an Instrumentation class. <br /><br />"
"android.content.ContextWrapper.Configuration () "," Return a new Context object for the current Context but whose resources are adjusted to match the given Configuration. <br /><br />"
"android.content.ContextWrapper.databaseList () "," Returns an array of strings naming the private databases associated with this Context's application package. <br /><br />"
"android.content.ContextWrapper.Uri () "," Grant permission to access a specific Uri to another package, regardless of whether that package has general permission to access the Uri's content provider. <br /><br />"
"android.content.ContextWrapper.String () "," Broadcast the given intent to all interested BroadcastReceivers, delivering them one at a time to allow more preferred receivers to consume the broadcast before it is delivered to less preferred receivers. <br /><br />"
"android.content.ContextWrapper.WallpaperManager.getDesiredMinimumHeight () () "," This method is deprecated. Use WallpaperManager.getDesiredMinimumHeight() instead. <br /><br />"
"android.content.ContextWrapper.getObbDir () "," Return the primary external storage directory where this application's OBB files (if there are any) can be found. <br /><br />"
"android.content.ContextWrapper.WallpaperManager.getDesiredMinimumWidth () () "," This method is deprecated. Use WallpaperManager.getDesiredMinimumWidth() instead. <br /><br />"
"android.content.ContextWrapper.getCacheDir () "," Returns the absolute path to the application specific cache directory on the filesystem. <br /><br />"
"android.content.ContextWrapper.DatabaseErrorHandler () "," Open a new private SQLiteDatabase associated with this Context's application package. <br /><br />"
"android.content.ContextWrapper.sendBroadcast (Intent, String) () "," Version of sendBroadcast(Intent, String) that allows you to specify the user the broadcast will be sent to. <br /><br />"
"android.content.ContextWrapper.Environment.getExternalStorageDirectory () () "," Returns the absolute path to the directory on the primary external filesystem (that is somewhere on Environment.getExternalStorageDirectory()) where the application can place persistent files it owns. <br /><br />"
"android.content.ContextWrapper.getBaseContext () "," no description <br /><br />"
"android.content.ContextWrapper.getTheme () "," Return the Theme object associated with this Context. <br /><br />"
"android.content.ContextWrapper.getObbDirs () "," Returns absolute paths to application-specific directories on all external storage devices where the application's OBB files (if there are any) can be found. <br /><br />"
"android.content.ContextWrapper.Bundle () "," Launch a new activity. <br /><br />"
"android.content.ContextWrapper.fileList () "," Returns an array of strings naming the private files associated with this Context's application package. <br /><br />"
"android.content.ContextWrapper.Intent () "," Request that a given application service be stopped. <br /><br />"
"android.content.CursorLoader.Uri () "," no description <br /><br />"
"android.content.CursorLoader.String () "," no description <br /><br />"
"android.content.CursorLoader.Cursor () "," Called if the task was canceled before it was completed. <br /><br />"
"android.content.CursorLoader.getSelectionArgs () "," no description <br /><br />"
"android.content.CursorLoader.getSelection () "," no description <br /><br />"
"android.content.CursorLoader.cancelLoadInBackground () "," Called on the main thread to abort a load in progress. <br /><br />"
"android.content.CursorLoader.String[] () "," no description <br /><br />"
"android.content.CursorLoader.loadInBackground () "," Called on a worker thread to perform the actual load and to return the result of the load operation. <br /><br />"
"android.content.CursorLoader.getProjection () "," no description <br /><br />"
"android.content.CursorLoader.getUri () "," no description <br /><br />"
"android.content.CursorLoader.getSortOrder () "," no description <br /><br />"
"android.content.DialogInterface.dismiss () "," no description <br /><br />"
"android.content.DialogInterface.cancel () "," no description <br /><br />"
"android.content.DialogInterface.OnCancelListener.DialogInterface () "," This method will be invoked when the dialog is canceled. <br /><br />"
"android.content.DialogInterface.OnClickListener.DialogInterface () "," This method will be invoked when a button in the dialog is clicked. <br /><br />"
"android.content.DialogInterface.OnDismissListener.DialogInterface () "," This method will be invoked when the dialog is dismissed. <br /><br />"
"android.content.DialogInterface.OnKeyListener.KeyEvent () "," Called when a key is dispatched to a dialog. <br /><br />"
"android.content.DialogInterface.OnMultiChoiceClickListener.DialogInterface () "," This method will be invoked when an item in the dialog is clicked. <br /><br />"
"android.content.DialogInterface.OnShowListener.DialogInterface () "," This method will be invoked when the dialog is shown. <br /><br />"
"android.content.Entity.getEntityValues () "," no description <br /><br />"
"android.content.Entity.ContentValues () "," no description <br /><br />"
"android.content.Entity.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.Entity.getSubValues () "," no description <br /><br />"
"android.content.EntityIterator.close () "," Indicates that this iterator is no longer needed and that any associated resources may be released (such as a SQLite cursor). <br /><br />"
"android.content.EntityIterator.reset () "," Reset the iterator back to the beginning. <br /><br />"
"android.content.Intent.FilterComparison.getIntent () "," Return the Intent that this FilterComparison represents. <br /><br />"
"android.content.Intent.FilterComparison.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.content.Intent.FilterComparison.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.content.Intent.AttributeSet () "," Parses the 'intent' element (and its children) from XML and instantiates an Intent object. <br /><br />"
"android.content.Intent.hasFileDescriptors () "," Returns true if the Intent's extras contain a parcelled file descriptor. <br /><br />"
"android.content.Intent.getType () "," Retrieve any explicit MIME type included in the intent. <br /><br />"
"android.content.Intent.getComponent () "," Retrieve the concrete component associated with the intent. <br /><br />"
"android.content.Intent.ComponentName () "," (Usually optional) Explicitly set the component to handle the intent. <br /><br />"
"android.content.Intent.ActivityInfo () "," Resolve the Intent into an ActivityInfo describing the activity that should execute the intent. <br /><br />"
"android.content.Intent.getScheme () "," Return the scheme portion of the intent's data. <br /><br />"
"android.content.Intent.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.Intent.ACTION_CHOOSER () "," Convenience function for creating a ACTION_CHOOSER Intent. <br /><br />"
"android.content.Intent.getPackage () "," Retrieve the application package name this Intent is limited to. <br /><br />"
"android.content.Intent.Rect () "," Set the bounds of the sender of this intent, in screen coordinates. <br /><br />"
"android.content.Intent.ClipData () "," Set a ClipData associated with this Intent. <br /><br />"
"android.content.Intent.CharSequence[] () "," Add extended data to the intent. <br /><br />"
"android.content.Intent.setFlags (int flags) "," Set special flags controlling how this intent is handled. <br /><br />"
"android.content.Intent.Parcelable () "," Add extended data to the intent. <br /><br />"
"android.content.Intent.String[] () "," Add extended data to the intent. <br /><br />"
"android.content.Intent.ClassLoader () "," Sets the ClassLoader that will be used when unmarshalling any Parcelable values from the extras of this Intent. <br /><br />"
"android.content.Intent.Uri () "," Normalize and set the data this intent is operating on. <br /><br />"
"android.content.Intent.String () "," Normalize and set an explicit MIME data type. <br /><br />"
"android.content.Intent.PackageManager () "," Return the Activity component that should be used to handle this intent. <br /><br />"
"android.content.Intent.getCategories () "," Return the set of all categories in the intent. <br /><br />"
"android.content.Intent.cloneFilter () "," Make a clone of only the parts of the Intent that are relevant for filter matching: the action, data, type, component, and categories. <br /><br />"
"android.content.Intent.Parcelable[] () "," Add extended data to the intent. <br /><br />"
"android.content.Intent.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.Intent.Serializable () "," Add extended data to the intent. <br /><br />"
"android.content.Intent.getFlags () "," Retrieve any special flags associated with this intent. <br /><br />"
"android.content.Intent.parseUri (String, int) () "," This method was deprecated in API level 4. Use parseUri(String, int) instead. <br /><br />"
"android.content.Intent.CharSequence () "," Add extended data to the intent. <br /><br />"
"android.content.Intent.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.Intent.toUri (int) () "," This method was deprecated in API level 4. Use toUri(int) instead. <br /><br />"
"android.content.Intent.setComponent (ComponentName) () "," Convenience for calling setComponent(ComponentName) with an explicit application package name and class name. <br /><br />"
"android.content.Intent.filterHashCode () "," Generate hash code that matches semantics of filterEquals(). <br /><br />"
"android.content.Intent.getSourceBounds () "," Get the bounds of the sender of this intent, in screen coordinates. <br /><br />"
"android.content.Intent.Class () "," Convenience for calling setComponent(ComponentName) with the name returned by a Class object. <br /><br />"
"android.content.Intent.getData () () "," The same as getData(), but returns the URI as an encoded String. <br /><br />"
"android.content.Intent.Integer () "," Add extended data to the intent. <br /><br />"
"android.content.Intent.getExtras () "," Retrieves a map of extended data from the intent. <br /><br />"
"android.content.Intent.Context () "," Return the MIME data type of this intent. <br /><br />"
"android.content.Intent.ContentResolver () "," Return the MIME data type of this intent, only if it will be needed for intent resolution. <br /><br />"
"android.content.Intent.toUri (int flags) "," Convert this Intent into a String holding a URI representation of it. <br /><br />"
"android.content.Intent.addFlags (int flags) "," Add additional flags to the intent (or with existing flags value). <br /><br />"
"android.content.Intent.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.content.Intent.getData () "," Retrieve data this intent is operating on. <br /><br />"
"android.content.Intent.getSelector () "," Return the specific selector associated with this Intent. <br /><br />"
"android.content.Intent.Bundle () "," Completely replace the extras in the Intent with the given Bundle of extras. <br /><br />"
"android.content.Intent.ACTION_VIEW () "," Retrieve the general action to be performed, such as ACTION_VIEW. <br /><br />"
"android.content.Intent.Intent () "," Set a selector for this Intent. <br /><br />"
"android.content.Intent.ShortcutIconResource.Context () "," Creates a new ShortcutIconResource for the specified context and resource identifier. <br /><br />"
"android.content.Intent.ShortcutIconResource.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.Intent.ShortcutIconResource.describeContents () "," No special parcel contents. <br /><br />"
"android.content.Intent.ShortcutIconResource.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.IntentFilter.AuthorityEntry.Uri () "," Determine whether this AuthorityEntry matches the given data Uri. <br /><br />"
"android.content.IntentFilter.AuthorityEntry.getHost () "," no description <br /><br />"
"android.content.IntentFilter.AuthorityEntry.getPort () "," no description <br /><br />"
"android.content.IntentFilter.actionsIterator () "," Return an iterator over the filter's actions. <br /><br />"
"android.content.IntentFilter.getDataPath (int index) "," Return a data path in the filter. <br /><br />"
"android.content.IntentFilter.getPriority () "," Return the priority of this filter. <br /><br />"
"android.content.IntentFilter.getAction (int index) "," Return an action in the filter. <br /><br />"
"android.content.IntentFilter.countDataAuthorities () "," Return the number of data authorities in the filter. <br /><br />"
"android.content.IntentFilter.schemeSpecificPartsIterator () "," Return an iterator over the filter's data scheme specific parts. <br /><br />"
"android.content.IntentFilter.getDataSchemeSpecificPart (int index) "," Return a data scheme specific part in the filter. <br /><br />"
"android.content.IntentFilter.categoriesIterator () "," Return an iterator over the filter's categories. <br /><br />"
"android.content.IntentFilter.Uri () "," Match this intent filter against the given Intent data. <br /><br />"
"android.content.IntentFilter.String () "," Match this filter against an Intent's categories. <br /><br />"
"android.content.IntentFilter.getDataType (int index) "," Return a data type in the filter. <br /><br />"
"android.content.IntentFilter.setPriority (int priority) "," Modify priority of this filter. <br /><br />"
"android.content.IntentFilter.countActions () "," Return the number of actions in the filter. <br /><br />"
"android.content.IntentFilter.pathsIterator () "," Return an iterator over the filter's data paths. <br /><br />"
"android.content.IntentFilter.schemesIterator () "," Return an iterator over the filter's data schemes. <br /><br />"
"android.content.IntentFilter.getCategory (int index) "," Return a category in the filter. <br /><br />"
"android.content.IntentFilter.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.IntentFilter.authoritiesIterator () "," Return an iterator over the filter's data authorities. <br /><br />"
"android.content.IntentFilter.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.IntentFilter.typesIterator () "," Return an iterator over the filter's data types. <br /><br />"
"android.content.IntentFilter.countDataPaths () "," Return the number of data paths in the filter. <br /><br />"
"android.content.IntentFilter.countDataSchemes () "," Return the number of data schemes in the filter. <br /><br />"
"android.content.IntentFilter.countDataTypes () "," Return the number of data types in the filter. <br /><br />"
"android.content.IntentFilter.getDataAuthority (int index) "," Return a data authority in the filter. <br /><br />"
"android.content.IntentFilter.getDataScheme (int index) "," Return a data scheme in the filter. <br /><br />"
"android.content.IntentFilter.XmlSerializer () "," Write the contents of the IntentFilter as an XML stream. <br /><br />"
"android.content.IntentFilter.countCategories () "," Return the number of categories in the filter. <br /><br />"
"android.content.IntentFilter.XmlPullParser () "," no description <br /><br />"
"android.content.IntentFilter.countDataSchemeSpecificParts () "," Return the number of data scheme specific parts in the filter. <br /><br />"
"android.content.IntentSender.String () "," Perform the operation associated with this IntentSender, allowing the caller to specify information about the Intent to use and be notified when the send has completed. <br /><br />"
"android.content.IntentSender.Handler () "," Perform the operation associated with this IntentSender, allowing the caller to specify information about the Intent to use and be notified when the send has completed. <br /><br />"
"android.content.IntentSender.getCreatorUid () "," Return the uid of the application that created this PendingIntent, that is the identity under which you will actually be sending the Intent. <br /><br />"
"android.content.IntentSender.getCreatorPackage () () "," This method was deprecated in API level 17. Renamed to getCreatorPackage(). <br /><br />"
"android.content.IntentSender.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.IntentSender.getCreatorUserHandle () "," Return the user handle of the application that created this PendingIntent, that is the user under which you will actually be sending the Intent. <br /><br />"
"android.content.IntentSender.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.content.IntentSender.Object () "," Comparison operator on two IntentSender objects, such that true is returned then they both represent the same operation from the same package. <br /><br />"
"android.content.IntentSender.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.IntentSender.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.IntentSender.getCreatorPackage () "," Return the package name of the application that created this IntentSender, that is the identity under which you will actually be sending the Intent. <br /><br />"
"android.content.IntentSender.OnFinished.Bundle () "," Called when a send operation as completed. <br /><br />"
"android.content.Loader.ForceLoadContentObserver.deliverSelfNotifications () "," Returns true if this observer is interested receiving self-change notifications. <br /><br />"
"android.content.Loader.ForceLoadContentObserver.onChange (boolean selfChange) "," This method is called when a content change occurs. <br /><br />"
"android.content.Loader&lt;D&gt;.isStarted () "," Return whether this load has been started. <br /><br />"
"android.content.Loader&lt;D&gt;.cancelLoad () "," Attempt to cancel the current load task. <br /><br />"
"android.content.Loader&lt;D&gt;.OnLoadCompleteListener () "," Remove a listener that was previously added with registerListener(int, Loader.OnLoadCompleteListener  ) . <br /><br />"
"android.content.Loader&lt;D&gt;.LoaderManager () "," This function will normally be called for you automatically by LoaderManager when the associated fragment/activity is being stopped. <br /><br />"
"android.content.Loader&lt;D&gt;.deliverResult (D data) "," Sends the result of the load to the registered listener. <br /><br />"
"android.content.Loader&lt;D&gt;.isAbandoned () "," Return whether this loader has been abandoned. <br /><br />"
"android.content.Loader&lt;D&gt;.isReset () "," Return whether this load has been reset. <br /><br />"
"android.content.Loader&lt;D&gt;.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.Loader&lt;D&gt;.OnLoadCanceledListener () "," Unregisters a listener that was previously added with registerOnLoadCanceledListener(Loader.OnLoadCanceledListener  ) . <br /><br />"
"android.content.Loader&lt;D&gt;.takeContentChanged () () "," Report that you have abandoned the processing of a content change that was returned by takeContentChanged() and would like to rollback to the state where there is again a pending content change. <br /><br />"
"android.content.Loader&lt;D&gt;.dataToString (D data) "," For debugging, converts an instance of the Loader's data class to a string that can be printed. <br /><br />"
"android.content.Loader&lt;D&gt;.takeContentChanged () "," Take the current flag indicating whether the loader's content had changed while it was stopped. <br /><br />"
"android.content.Loader&lt;D&gt;.getId () "," no description <br /><br />"
"android.content.Loader&lt;D&gt;.Loader.ForceLoadContentObserver () "," Called when Loader.ForceLoadContentObserver detects a change. <br /><br />"
"android.content.Loader&lt;D&gt;.forceLoad () "," Force an asynchronous load. <br /><br />"
"android.content.Loader&lt;D&gt;.String[] () "," Print the Loader's state into the given stream. <br /><br />"
"android.content.Loader&lt;D&gt;.Loader.OnLoadCanceledListener () "," Informs the registered Loader.OnLoadCanceledListener that the load has been canceled. <br /><br />"
"android.content.Loader&lt;D&gt;.getContext () "," no description <br /><br />"
"android.content.Loader.OnLoadCanceledListener&lt;D&gt;.Loader () "," Called on the thread that created the Loader when the load is canceled. <br /><br />"
"android.content.Loader.OnLoadCompleteListener&lt;D&gt;.Loader () "," Called on the thread that created the Loader when the load is complete. <br /><br />"
"android.content.MutableContextWrapper.Context () "," Change the base context for this ContextWrapper. <br /><br />"
"android.content.OperationApplicationException.getNumSuccessfulYieldPoints () "," no description <br /><br />"
"android.content.PeriodicSync.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.PeriodicSync.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.content.PeriodicSync.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.PeriodicSync.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.pm.ActivityInfo.String () "," no description <br /><br />"
"android.content.pm.ActivityInfo.getThemeResource () "," Return the theme resource identifier to use for this activity. <br /><br />"
"android.content.pm.ActivityInfo.Parcel () "," no description <br /><br />"
"android.content.pm.ActivityInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.pm.ActivityInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.pm.ApplicationInfo.DisplayNameComparator.ApplicationInfo () "," no description <br /><br />"
"android.content.pm.ApplicationInfo.String () "," no description <br /><br />"
"android.content.pm.ApplicationInfo.PackageManager () "," Retrieve the textual description of the application. <br /><br />"
"android.content.pm.ApplicationInfo.Parcel () "," no description <br /><br />"
"android.content.pm.ApplicationInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.pm.ApplicationInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.pm.ComponentInfo.getIconResource () "," Return the icon resource identifier to use for this component. <br /><br />"
"android.content.pm.ComponentInfo.PackageManager () "," Retrieve the current textual label associated with this item. <br /><br />"
"android.content.pm.ComponentInfo.isEnabled () "," Return whether this component and its enclosing application are enabled. <br /><br />"
"android.content.pm.ComponentInfo.getLogoResource () "," Return the logo resource identifier to use for this component. <br /><br />"
"android.content.pm.ComponentInfo.Parcel () "," no description <br /><br />"
"android.content.pm.ComponentInfo.getBannerResource () "," Return the banner resource identifier to use for this component. <br /><br />"
"android.content.pm.ConfigurationInfo.getGlEsVersion () "," This method extracts the major and minor version of reqGLEsVersion attribute and returns it as a string. <br /><br />"
"android.content.pm.ConfigurationInfo.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.pm.ConfigurationInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.pm.ConfigurationInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.pm.FeatureGroupInfo.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.pm.FeatureGroupInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.pm.FeatureInfo.getGlEsVersion () "," This method extracts the major and minor version of reqGLEsVersion attribute and returns it as a string. <br /><br />"
"android.content.pm.FeatureInfo.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.pm.FeatureInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.pm.FeatureInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.pm.InstrumentationInfo.Parcel () "," no description <br /><br />"
"android.content.pm.InstrumentationInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.pm.InstrumentationInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.pm.LabeledIntent.getIconResource () "," Return any resource identifier that has been given for the label icon. <br /><br />"
"android.content.pm.LabeledIntent.PackageManager () "," Retrieve the label associated with this object. <br /><br />"
"android.content.pm.LabeledIntent.getLabelResource () "," Return any resource identifier that has been given for the label text. <br /><br />"
"android.content.pm.LabeledIntent.getSourcePackage () "," Return the name of the package holding label and icon resources. <br /><br />"
"android.content.pm.LabeledIntent.getNonLocalizedLabel () "," Return any concrete text that has been given for the label text. <br /><br />"
"android.content.pm.LabeledIntent.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.pm.LauncherActivityInfo.getName () "," Returns the name for the acitivty from android:name in the manifest. <br /><br />"
"android.content.pm.LauncherActivityInfo.getIcon (int density) "," Returns the icon for this activity, without any badging for the profile. <br /><br />"
"android.content.pm.LauncherActivityInfo.getComponentName () "," Returns the component name of this activity. <br /><br />"
"android.content.pm.LauncherActivityInfo.getBadgedIcon (int density) "," Returns the activity icon with badging appropriate for the profile. <br /><br />"
"android.content.pm.LauncherActivityInfo.getUser () "," Returns the user handle of the user profile that this activity belongs to. <br /><br />"
"android.content.pm.LauncherActivityInfo.getLabel () "," Retrieves the label for the activity. <br /><br />"
"android.content.pm.LauncherActivityInfo.getFirstInstallTime () "," Returns the time at which the package was first installed. <br /><br />"
"android.content.pm.LauncherActivityInfo.getApplicationInfo () "," Returns the application info for the appliction this activity belongs to. <br /><br />"
"android.content.pm.LauncherApps.Callback.UserHandle () "," Indicates that one or more packages have become unavailable. <br /><br />"
"android.content.pm.PackageInfo.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.pm.PackageInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.pm.PackageInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.pm.PackageInstaller.Handler () "," Register to watch for session lifecycle events. <br /><br />"
"android.content.pm.PackageInstaller.PackageInstaller.SessionParams () "," Create a new session using the given parameters, returning a unique ID that represents the session. <br /><br />"
"android.content.pm.PackageInstaller.openSession (int sessionId) "," Open an existing session to actively perform work. <br /><br />"
"android.content.pm.PackageInstaller.getMySessions () "," Return list of all known install sessions owned by the calling app. <br /><br />"
"android.content.pm.PackageInstaller.CharSequence () "," Update the label representing the app being installed in a specific session. <br /><br />"
"android.content.pm.PackageInstaller.getAllSessions () "," Return list of all known install sessions, regardless of the installer. <br /><br />"
"android.content.pm.PackageInstaller.getSessionInfo (int sessionId) "," Return details for a specific session. <br /><br />"
"android.content.pm.PackageInstaller.IntentSender () "," Uninstall the given package, removing it completely from the device. <br /><br />"
"android.content.pm.PackageInstaller.PackageInstaller.SessionCallback () "," Unregister a previously registered callback. <br /><br />"
"android.content.pm.PackageInstaller.Bitmap () "," Update the icon representing the app being installed in a specific session. <br /><br />"
"android.content.pm.PackageInstaller.abandonSession (int sessionId) "," Completely abandon the given session, destroying all staged data and rendering it invalid. <br /><br />"
"android.content.pm.PackageInstaller.Session.String () "," Open a stream to write an APK file into the session. <br /><br />"
"android.content.pm.PackageInstaller.Session.getNames () "," Return all APK names contained in this session. <br /><br />"
"android.content.pm.PackageInstaller.Session.setStagingProgress (float progress) "," Set current progress of staging this session. <br /><br />"
"android.content.pm.PackageInstaller.Session.OutputStream () "," Ensure that any outstanding data for given stream has been committed to disk. <br /><br />"
"android.content.pm.PackageInstaller.Session.abandon () "," Completely abandon this session, destroying all staged data and rendering it invalid. <br /><br />"
"android.content.pm.PackageInstaller.Session.close () "," Release this session object. <br /><br />"
"android.content.pm.PackageInstaller.Session.IntentSender () "," Attempt to commit everything staged in this session. <br /><br />"
"android.content.pm.PackageInstaller.SessionCallback.onCreated (int sessionId) "," New session has been created. <br /><br />"
"android.content.pm.PackageInstaller.SessionCallback.onBadgingChanged (int sessionId) "," Badging details for an existing session has changed. <br /><br />"
"android.content.pm.PackageInstaller.SessionCallback.onProgressChanged (int sessionId, float progress) "," Progress for given session has been updated. <br /><br />"
"android.content.pm.PackageInstaller.SessionCallback.onFinished (int sessionId, boolean success) "," Session has completely finished, either with success or failure. <br /><br />"
"android.content.pm.PackageInstaller.SessionCallback.onActiveChanged (int sessionId, boolean active) "," Active state for session has been changed. <br /><br />"
"android.content.pm.PackageInstaller.SessionInfo.getSessionId () "," Return the ID for this session. <br /><br />"
"android.content.pm.PackageInstaller.SessionInfo.getAppLabel () "," Return a label representing the app being installed. <br /><br />"
"android.content.pm.PackageInstaller.SessionInfo.getInstallerPackageName () "," Return the package name of the app that owns this session. <br /><br />"
"android.content.pm.PackageInstaller.SessionInfo.getAppPackageName () "," Return the package name this session is working with. <br /><br />"
"android.content.pm.PackageInstaller.SessionInfo.isActive () "," Return if this session is currently active. <br /><br />"
"android.content.pm.PackageInstaller.SessionInfo.getProgress () "," Return current overall progress of this session, between 0 and 1. <br /><br />"
"android.content.pm.PackageInstaller.SessionInfo.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.pm.PackageInstaller.SessionInfo.createDetailsIntent () "," Return an Intent that can be started to view details about this install session. <br /><br />"
"android.content.pm.PackageInstaller.SessionInfo.getAppIcon () "," Return an icon representing the app being installed. <br /><br />"
"android.content.pm.PackageInstaller.SessionInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.pm.PackageInstaller.SessionParams.Uri () "," Optionally set the URI that referred you to install this package. <br /><br />"
"android.content.pm.PackageInstaller.SessionParams.String () "," Optionally set the package name of the app being installed. <br /><br />"
"android.content.pm.PackageInstaller.SessionParams.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.pm.PackageInstaller.SessionParams.setSize (long sizeBytes) "," Optionally indicate the total size (in bytes) of all APKs that will be delivered in this session. <br /><br />"
"android.content.pm.PackageInstaller.SessionParams.installLocation (int installLocation) "," Provide value of installLocation, which may be used to determine where the app will be staged. <br /><br />"
"android.content.pm.PackageInstaller.SessionParams.CharSequence () "," Optionally set a label representing the app being installed. <br /><br />"
"android.content.pm.PackageInstaller.SessionParams.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.pm.PackageInstaller.SessionParams.Bitmap () "," Optionally set an icon representing the app being installed. <br /><br />"
"android.content.pm.PackageItemInfo.DisplayNameComparator.PackageItemInfo () "," no description <br /><br />"
"android.content.pm.PackageItemInfo.String () "," Load an XML resource attached to the meta-data of this item. <br /><br />"
"android.content.pm.PackageItemInfo.PackageManager () "," Retrieve the current graphical icon associated with this item without the addition of a work badge if applicable. <br /><br />"
"android.content.pm.PackageItemInfo.Parcel () "," no description <br /><br />"
"android.content.pm.PackageManager.PermissionInfo () "," Add a new dynamic permission to the system. <br /><br />"
"android.content.pm.PackageManager.UserHandle () "," If the target user is a managed profile of the calling user or the caller is itself a managed profile, then this returns a copy of the label with badging for accessibility services like talkback. <br /><br />"
"android.content.pm.PackageManager.Context.startActivity () () "," This method was deprecated in API level 8. This is a protected API that should not have been available to third party applications. It is the platform's responsibility for assigning preferred activities and this cannot be directly modified. Add a new preferred activity mapping to the system. This will be used to automatically select the given activity component when Context.startActivity() finds multiple matching activities and also matches the given filter. <br /><br />"
"android.content.pm.PackageManager.getDefaultActivityIcon () "," Return the generic icon for an activity that is used when no specific icon is defined. <br /><br />"
"android.content.pm.PackageManager.ComponentName () "," Set the enabled setting for a package component (activity, receiver, service, provider). <br /><br />"
"android.content.pm.PackageManager.getAllPermissionGroups (int flags) "," Retrieve all of the known permission groups in the system. <br /><br />"
"android.content.pm.PackageManager.Rect () "," If the target user is a managed profile of the calling user or the caller is itself a managed profile, then this returns a badged copy of the given drawable allowing the user to distinguish it from the original drawable. <br /><br />"
"android.content.pm.PackageManager.getSystemAvailableFeatures () "," Get a list of features that are available on the system. <br /><br />"
"android.content.pm.PackageManager.ApplicationInfo () "," Retrieve an XML file from a package. <br /><br />"
"android.content.pm.PackageManager.getNameForUid (int uid) "," Retrieve the official name associated with a user id. <br /><br />"
"android.content.pm.PackageManager.getSystemAvailableFeatures () () "," Check whether the given feature name is one of the available features as returned by getSystemAvailableFeatures(). <br /><br />"
"android.content.pm.PackageManager.package verification broadcast (int id, int verificationCodeAtTimeout, long millisecondsToDelay) "," Allows a package listening to the package verification broadcast to extend the default timeout for a response and declare what action to perform after the timeout occurs. <br /><br />"
"android.content.pm.PackageManager.String[] () "," Return a List of all installed packages that are currently holding any of the given permissions. <br /><br />"
"android.content.pm.PackageManager.getPackagesForUid (int uid) "," Retrieve the names of all packages that are associated with a particular user id. <br /><br />"
"android.content.pm.PackageManager.package verification broadcast (int id, int verificationCode) "," Allows a package listening to the package verification broadcast to respond to the package manager. <br /><br />"
"android.content.pm.PackageManager.getPackageInstaller () "," Return interface that offers the ability to install, upgrade, and remove applications on the device. <br /><br />"
"android.content.pm.PackageManager.String () "," Change the installer associated with a given package. <br /><br />"
"android.content.pm.PackageManager.checkSignatures (String, String) (int uid1, int uid2) "," Like checkSignatures(String, String), but takes UIDs of the two packages to be checked. <br /><br />"
"android.content.pm.PackageManager.getInstalledApplications (int flags) "," Return a List of all application packages that are installed on the device. <br /><br />"
"android.content.pm.PackageManager.addPreferredActivity (IntentFilter, int, ComponentName[], ComponentName) () "," Retrieve all preferred activities, previously added with addPreferredActivity(IntentFilter, int, ComponentName[], ComponentName), that are currently registered with the system. <br /><br />"
"android.content.pm.PackageManager.getPreferredPackages (int flags) "," Retrieve the list of all currently configured preferred packages. <br /><br />"
"android.content.pm.PackageManager.getSystemSharedLibraryNames () "," Get a list of shared libraries that are available on the system. <br /><br />"
"android.content.pm.PackageManager.addPermission (PermissionInfo) () "," Removes a permission that was previously added with addPermission(PermissionInfo). <br /><br />"
"android.content.pm.PackageManager.getInstalledPackages (int flags) "," Return a List of all packages that are installed on the device. <br /><br />"
"android.content.pm.PackageManager.isSafeMode () "," Return whether the device has been booted into safe mode. <br /><br />"
"android.content.pm.PackageManager.Intent () "," Determine the best service to handle for a given Intent. <br /><br />"
"android.content.pm.PackageStats.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.pm.PackageStats.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.pm.PackageStats.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.pm.PathPermission.getWritePermission () "," no description <br /><br />"
"android.content.pm.PathPermission.getReadPermission () "," no description <br /><br />"
"android.content.pm.PathPermission.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.pm.PermissionGroupInfo.PackageManager () "," Retrieve the textual description of this permission. <br /><br />"
"android.content.pm.PermissionGroupInfo.Parcel () "," no description <br /><br />"
"android.content.pm.PermissionGroupInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.pm.PermissionGroupInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.pm.PermissionInfo.PackageManager () "," Retrieve the textual description of this permission. <br /><br />"
"android.content.pm.PermissionInfo.Parcel () "," no description <br /><br />"
"android.content.pm.PermissionInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.pm.PermissionInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.pm.ProviderInfo.String () "," no description <br /><br />"
"android.content.pm.ProviderInfo.Parcel () "," no description <br /><br />"
"android.content.pm.ProviderInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.pm.ProviderInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.pm.ResolveInfo.DisplayNameComparator.ResolveInfo () "," no description <br /><br />"
"android.content.pm.ResolveInfo.String () "," no description <br /><br />"
"android.content.pm.ResolveInfo.getIconResource () "," Return the icon resource identifier to use for this match. <br /><br />"
"android.content.pm.ResolveInfo.PackageManager () "," Retrieve the current textual label associated with this resolution. <br /><br />"
"android.content.pm.ResolveInfo.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.pm.ResolveInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.pm.ResolveInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.pm.ServiceInfo.String () "," no description <br /><br />"
"android.content.pm.ServiceInfo.Parcel () "," no description <br /><br />"
"android.content.pm.ServiceInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.pm.ServiceInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.pm.Signature.toChars () () "," Return the result of toChars() as a String. <br /><br />"
"android.content.pm.Signature.toByteArray () "," no description <br /><br />"
"android.content.pm.Signature.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.pm.Signature.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.content.pm.Signature.toChars (char[] existingArray, int[] outLen) "," Encode the Signature as ASCII text in to an existing array. <br /><br />"
"android.content.pm.Signature.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.content.pm.Signature.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.pm.Signature.toChars () "," Encode the Signature as ASCII text. <br /><br />"
"android.content.res.AssetFileDescriptor.AutoCloseInputStream.read (byte[] buffer) "," Equivalent to read(buffer, 0, buffer.length). <br /><br />"
"android.content.res.AssetFileDescriptor.AutoCloseInputStream.read () "," Reads a single byte from this stream and returns it as an integer in the range from 0 to 255. <br /><br />"
"android.content.res.AssetFileDescriptor.AutoCloseInputStream.available () "," Returns an estimated number of bytes that can be read or skipped without blocking for more input. <br /><br />"
"android.content.res.AssetFileDescriptor.AutoCloseInputStream.mark (int readlimit) "," Sets a mark position in this InputStream. <br /><br />"
"android.content.res.AssetFileDescriptor.AutoCloseInputStream.skip (long count) "," Skips at most byteCount bytes in this stream. <br /><br />"
"android.content.res.AssetFileDescriptor.AutoCloseInputStream.reset () "," Resets this stream to the last marked location. <br /><br />"
"android.content.res.AssetFileDescriptor.AutoCloseInputStream.markSupported () "," Indicates whether this stream supports the mark() and reset() methods. <br /><br />"
"android.content.res.AssetFileDescriptor.AutoCloseInputStream.read (byte[] buffer, int offset, int count) "," Reads up to byteCount bytes from this stream and stores them in the byte array buffer starting at byteOffset. <br /><br />"
"android.content.res.AssetFileDescriptor.AutoCloseOutputStream.write (byte[] buffer) "," Equivalent to write(buffer, 0, buffer.length). <br /><br />"
"android.content.res.AssetFileDescriptor.AutoCloseOutputStream.write (int oneByte) "," Writes a single byte to this stream. <br /><br />"
"android.content.res.AssetFileDescriptor.AutoCloseOutputStream.write (byte[] buffer, int offset, int count) "," Writes count bytes from the byte array buffer starting at position offset to this stream. <br /><br />"
"android.content.res.AssetFileDescriptor.getExtras () "," Returns any additional details that can be used to interpret the underlying file descriptor. <br /><br />"
"android.content.res.AssetFileDescriptor.createOutputStream () "," Create and return a new auto-close output stream for this asset. <br /><br />"
"android.content.res.AssetFileDescriptor.getStartOffset () "," Returns the byte offset where this asset entry's data starts. <br /><br />"
"android.content.res.AssetFileDescriptor.close () "," Convenience for calling getParcelFileDescriptor().close(). <br /><br />"
"android.content.res.AssetFileDescriptor.getDeclaredLength () "," Return the actual number of bytes that were declared when the AssetFileDescriptor was constructed. <br /><br />"
"android.content.res.AssetFileDescriptor.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.res.AssetFileDescriptor.getLength () "," Returns the total number of bytes of this asset entry's data. <br /><br />"
"android.content.res.AssetFileDescriptor.createInputStream () "," Create and return a new auto-close input stream for this asset. <br /><br />"
"android.content.res.AssetFileDescriptor.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.res.AssetFileDescriptor.getParcelFileDescriptor () "," The AssetFileDescriptor contains its own ParcelFileDescriptor, which in addition to the normal FileDescriptor object also allows you to close the descriptor when you are done with it. <br /><br />"
"android.content.res.AssetFileDescriptor.getFileDescriptor () "," Returns the FileDescriptor that can be used to read the data in the file. <br /><br />"
"android.content.res.AssetFileDescriptor.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.res.AssetManager.AssetInputStream.read (byte[] b, int off, int len) "," Reads up to byteCount bytes from this stream and stores them in the byte array buffer starting at byteOffset. <br /><br />"
"android.content.res.AssetManager.AssetInputStream.skip (long n) "," Skips at most byteCount bytes in this stream. <br /><br />"
"android.content.res.AssetManager.AssetInputStream.close () "," Closes this stream. <br /><br />"
"android.content.res.AssetManager.AssetInputStream.read () "," Reads a single byte from this stream and returns it as an integer in the range from 0 to 255. <br /><br />"
"android.content.res.AssetManager.AssetInputStream.available () "," Returns an estimated number of bytes that can be read or skipped without blocking for more input. <br /><br />"
"android.content.res.AssetManager.AssetInputStream.mark (int readlimit) "," Sets a mark position in this InputStream. <br /><br />"
"android.content.res.AssetManager.AssetInputStream.reset () "," Resets this stream to the last marked location. <br /><br />"
"android.content.res.AssetManager.AssetInputStream.read (byte[] b) "," Equivalent to read(buffer, 0, buffer.length). <br /><br />"
"android.content.res.AssetManager.AssetInputStream.markSupported () "," Indicates whether this stream supports the mark() and reset() methods. <br /><br />"
"android.content.res.AssetManager.getLocales () "," Get the locales that this asset manager contains data for. <br /><br />"
"android.content.res.AssetManager.String () "," Retrieve a parser for a compiled XML file. <br /><br />"
"android.content.res.AssetManager.close () "," Close this asset manager. <br /><br />"
"android.content.res.ColorStateList.Resources () "," Create a ColorStateList from an XML document, given a set of Resources. <br /><br />"
"android.content.res.ColorStateList.valueOf (int color) "," Creates or retrieves a ColorStateList that always returns a single color. <br /><br />"
"android.content.res.ColorStateList.ColorStateList () "," Return the default color in this ColorStateList. <br /><br />"
"android.content.res.ColorStateList.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.res.ColorStateList.isStateful () "," Indicates whether this color state list contains more than one state spec and will change color based on state. <br /><br />"
"android.content.res.ColorStateList.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.res.ColorStateList.getColorForState (int[], int) () "," Indicates whether this color state list is opaque, which means that every color returned from getColorForState(int[], int) has an alpha value of 255. <br /><br />"
"android.content.res.ColorStateList.withAlpha (int alpha) "," Creates a new ColorStateList that has the same states and colors as this one but where each color has the specified alpha value (0-255). <br /><br />"
"android.content.res.ColorStateList.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.res.ColorStateList.View (int[] stateSet, int defaultColor) "," Return the color associated with the given set of View states. <br /><br />"
"android.content.res.Configuration.getLayoutDirection () "," Return the layout direction. <br /><br />"
"android.content.res.Configuration.updateFrom (Configuration) (int configChanges, int interestingChanges) "," Determine if a new resource needs to be loaded from the bit set of configuration changes returned by updateFrom(Configuration). <br /><br />"
"android.content.res.Configuration.screenLayout (int size) "," Check if the Configuration's current screenLayout is at least the given size. <br /><br />"
"android.content.res.Configuration.setToDefaults () "," Set this object to the system defaults. <br /><br />"
"android.content.res.Configuration.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.res.Configuration.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.content.res.Configuration.Configuration () "," Copy the fields from delta into this Configuration object, keeping track of which ones have changed. <br /><br />"
"android.content.res.Configuration.Locale () "," Set the locale. <br /><br />"
"android.content.res.Configuration.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.content.res.Configuration.describeContents () "," Parcelable methods <br /><br />"
"android.content.res.Configuration.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.res.ObbInfo.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.res.ObbInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.res.ObbInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.res.ObbScanner.String () "," Scan a file for OBB information. <br /><br />"
"android.content.res.Resources.AttributeSet () "," Retrieve a set of basic attribute values from an AttributeSet, not performing styling of them using a theme and/or style resources. <br /><br />"
"android.content.res.Resources.getDimensionPixelSize (int id) "," Retrieve a dimensional for a particular resource ID for use as a size in raw pixels. <br /><br />"
"android.content.res.Resources.getResourceEntryName (int resid) "," Return the entry name for a given resource identifier. <br /><br />"
"android.content.res.Resources.getQuantityText (int id, int quantity) "," Returns the character sequence necessary for grammatically correct pluralization of the given resource ID for the given quantity. <br /><br />"
"android.content.res.Resources.getStringArray (int id) "," Return the string array associated with a particular resource ID. <br /><br />"
"android.content.res.Resources.getLayout (int id) "," Return an XmlResourceParser through which you can read a view layout description for the given resource ID. <br /><br />"
"android.content.res.Resources.getIntArray (int id) "," Return the int array associated with a particular resource ID. <br /><br />"
"android.content.res.Resources.Object... () "," Formats the string necessary for grammatically correct pluralization of the given resource ID for the given quantity, using the given arguments. <br /><br />"
"android.content.res.Resources.getAssets () "," Retrieve underlying AssetManager storage for these resources. <br /><br />"
"android.content.res.Resources.getTextArray (int id) "," Return the styled text array associated with a particular resource ID. <br /><br />"
"android.content.res.Resources.&lt;extra&gt; () "," Parse a series of &lt;extra&gt; tags from an XML file. <br /><br />"
"android.content.res.Resources.getString (int id) "," Return the string value associated with a particular resource ID. It will be stripped of any styled text information. <br /><br />"
"android.content.res.Resources.getMovie (int id) "," Return a movie object associated with the particular resource ID. <br /><br />"
"android.content.res.Resources.TypedValue () "," Open a data stream for reading a raw resource. <br /><br />"
"android.content.res.Resources.openRawResource (int id) "," Open a data stream for reading a raw resource. <br /><br />"
"android.content.res.Resources.getResourceTypeName (int resid) "," Return the type name for a given resource identifier. <br /><br />"
"android.content.res.Resources.getConfiguration () "," Return the current configuration that is in effect for this resource object. <br /><br />"
"android.content.res.Resources.openRawResourceFd (int id) "," Open a file descriptor for reading a raw resource. <br /><br />"
"android.content.res.Resources.getAnimation (int id) "," Return an XmlResourceParser through which you can read an animation description for the given resource ID. <br /><br />"
"android.content.res.Resources.format (String, Object...) () "," Return the string value associated with a particular resource ID, substituting the format arguments as defined in Formatter and format(String, Object...). It will be stripped of any styled text information. <br /><br />"
"android.content.res.Resources.getFraction (int id, int base, int pbase) "," Retrieve a fractional unit for a particular resource ID. <br /><br />"
"android.content.res.Resources.obtainTypedArray (int id) "," Return an array of heterogeneous values. <br /><br />"
"android.content.res.Resources.getDrawableForDensity (int, int, Theme) (int id, int density) "," This method is deprecated. Use getDrawableForDensity(int, int, Theme) instead. <br /><br />"
"android.content.res.Resources.String () "," Return a resource identifier for the given resource name. <br /><br />"
"android.content.res.Resources.getDrawable (int, Theme) (int id) "," This method is deprecated. Use getDrawable(int, Theme) instead. <br /><br />"
"android.content.res.Resources.finishPreloading () "," Called by zygote when it is done preloading resources, to change back to normal Resources operation. <br /><br />"
"android.content.res.Resources.CharSequence () "," Return the string value associated with a particular resource ID. <br /><br />"
"android.content.res.Resources.getColor (int id) "," Return a color integer associated with a particular resource ID. <br /><br />"
"android.content.res.Resources.getSystem () "," Return a global shared Resources object that provides access to only system resources (no application resources), and is not configured for the current screen (can not use dimension units, does not change based on orientation, etc). <br /><br />"
"android.content.res.Resources.getResourcePackageName (int resid) "," Return the package name for a given resource identifier. <br /><br />"
"android.content.res.Resources.newTheme () "," Generate a new Theme object for this set of Resources. <br /><br />"
"android.content.res.Resources.getXml (int id) "," Return an XmlResourceParser through which you can read a generic XML resource for the given resource ID. <br /><br />"
"android.content.res.Resources.getText (int id) "," Return the string value associated with a particular resource ID. The returned object will be a String if this is a plain string; it will be some other type of CharSequence if it is styled. <br /><br />"
"android.content.res.Resources.flushLayoutCache () "," Call this to remove all cached loaded layout resources from the Resources object. <br /><br />"
"android.content.res.Resources.getInteger (int id) "," Return an integer associated with a particular resource ID. <br /><br />"
"android.content.res.Resources.getColorStateList (int id) "," Return a color state list associated with a particular resource ID. <br /><br />"
"android.content.res.Resources.getResourceName (int resid) "," Return the full name for a given resource identifier. <br /><br />"
"android.content.res.Resources.getDimensionPixelOffset (int id) "," Retrieve a dimensional for a particular resource ID for use as an offset in raw pixels. <br /><br />"
"android.content.res.Resources.getDimension (int id) "," Retrieve a dimensional for a particular resource ID. <br /><br />"
"android.content.res.Resources.Bundle () "," Parse a name/value pair out of an XML tag holding that data. <br /><br />"
"android.content.res.Resources.Resources.Theme () "," Return a drawable object associated with a particular resource ID for the given screen density in DPI and styled for the specified theme. <br /><br />"
"android.content.res.Resources.DisplayMetrics () "," Store the newly updated configuration. <br /><br />"
"android.content.res.Resources.getQuantityString (int id, int quantity) "," Returns the string necessary for grammatically correct pluralization of the given resource ID for the given quantity. <br /><br />"
"android.content.res.Resources.getDisplayMetrics () "," Return the current display metrics that are in effect for this resource object. <br /><br />"
"android.content.res.Resources.getBoolean (int id) "," Return a boolean associated with a particular resource ID. <br /><br />"
"android.content.res.Resources.Theme.AttributeSet () "," Return a TypedArray holding the attribute values in set that are listed in attrs. <br /><br />"
"android.content.res.Resources.Theme.obtainStyledAttributes (int[] attrs) "," Return a TypedArray holding the values defined by Theme which are listed in attrs. <br /><br />"
"android.content.res.Resources.Theme.String () "," Print contents of this theme out to the log. <br /><br />"
"android.content.res.Resources.Theme.getResources () "," Returns the resources to which this theme belongs. <br /><br />"
"android.content.res.Resources.Theme.TypedValue () "," Retrieve the value of an attribute in the Theme. <br /><br />"
"android.content.res.Resources.Theme.obtainStyledAttributes (int resid, int[] attrs) "," Return a TypedArray holding the values defined by the style resource resid which are listed in attrs. <br /><br />"
"android.content.res.Resources.Theme.getDrawable (int id) "," Return a drawable object associated with a particular resource ID and styled for the Theme. <br /><br />"
"android.content.res.Resources.Theme.Resources.Theme () "," Set this theme to hold the same contents as the theme other. <br /><br />"
"android.content.res.Resources.Theme.applyStyle (int resId, boolean force) "," Place new attribute values into the theme. <br /><br />"
"android.content.res.TypedArray.length () "," Return the number of values in this array. <br /><br />"
"android.content.res.TypedArray.getNonResourceString (int index) "," Retrieve the string value for the attribute at index, but only if that string comes from an immediate value in an XML file. <br /><br />"
"android.content.res.TypedArray.getResources () "," Return the Resources object this array was loaded from. <br /><br />"
"android.content.res.TypedArray.getDimensionPixelOffset (int index, int defValue) "," Retrieve a dimensional unit attribute at index for use as an offset in raw pixels. <br /><br />"
"android.content.res.TypedArray.ViewGroup () "," Special version of getDimensionPixelSize(int, int) for retrieving ViewGroup's layout_width and layout_height attributes. <br /><br />"
"android.content.res.TypedArray.getResourceId (int index, int defValue) "," Retrieve the resource identifier for the attribute at index. <br /><br />"
"android.content.res.TypedArray.peekValue (int index) "," Retrieve the raw TypedValue for the attribute at index and return a temporary object holding its data. <br /><br />"
"android.content.res.TypedArray.getFloat (int index, float defValue) "," Retrieve the float value for the attribute at index. <br /><br />"
"android.content.res.TypedArray.getBoolean (int index, boolean defValue) "," Retrieve the boolean value for the attribute at index. <br /><br />"
"android.content.res.TypedArray.getInt (int index, int defValue) "," Retrieve the integer value for the attribute at index. <br /><br />"
"android.content.res.TypedArray.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.res.TypedArray.hasValue (int index) "," Determines whether there is an attribute at index. <br /><br />"
"android.content.res.TypedArray.getDrawable (int index) "," Retrieve the Drawable for the attribute at index. <br /><br />"
"android.content.res.TypedArray.getType (int index) "," Returns the type of attribute at the specified index. <br /><br />"
"android.content.res.TypedArray.getIndex (int at) "," Return an index in the array that has data. <br /><br />"
"android.content.res.TypedArray.TypedValue () "," Retrieve the raw TypedValue for the attribute at index. <br /><br />"
"android.content.res.TypedArray.getIndexCount () "," Return the number of indices in the array that actually have data. <br /><br />"
"android.content.res.TypedArray.getDimension (int index, float defValue) "," Retrieve a dimensional unit attribute at index. <br /><br />"
"android.content.res.TypedArray.getColor (int index, int defValue) "," Retrieve the color value for the attribute at index. <br /><br />"
"android.content.res.TypedArray.getText (int index) "," Retrieve the styled string value for the attribute at index. <br /><br />"
"android.content.res.TypedArray.ViewGroup (int index, int defValue) "," Special version of getDimensionPixelSize(int, int) for retrieving ViewGroup's layout_width and layout_height attributes. <br /><br />"
"android.content.res.TypedArray.getChangingConfigurations () "," Return a mask of the configuration parameters for which the values in this typed array may change. <br /><br />"
"android.content.res.TypedArray.getString (int index) "," Retrieve the string value for the attribute at index. <br /><br />"
"android.content.res.TypedArray.getDimensionPixelSize (int index, int defValue) "," Retrieve a dimensional unit attribute at index for use as a size in raw pixels. <br /><br />"
"android.content.res.TypedArray.getTextArray (int index) "," Retrieve the CharSequence[] for the attribute at index. <br /><br />"
"android.content.res.TypedArray.getColorStateList (int index) "," Retrieve the ColorStateList for the attribute at index. <br /><br />"
"android.content.res.TypedArray.recycle () "," Recycle the TypedArray, to be re-used by a later caller. <br /><br />"
"android.content.res.TypedArray.getInteger (int index, int defValue) "," Retrieve the integer value for the attribute at index. <br /><br />"
"android.content.res.TypedArray.hasValueOrEmpty (int index) "," Determines whether there is an attribute at index, returning true if the attribute was explicitly set to @empty and false only if the attribute was undefined. <br /><br />"
"android.content.res.TypedArray.getPositionDescription () "," Returns a message about the parser state suitable for printing error messages. <br /><br />"
"android.content.res.TypedArray.getFraction (int index, int base, int pbase, float defValue) "," Retrieve a fractional unit attribute at index. <br /><br />"
"android.content.res.XmlResourceParser.close () "," Close this interface to the resource. <br /><br />"
"android.content.RestrictionEntry.String () "," Sets the user-visible title for the entry. <br /><br />"
"android.content.RestrictionEntry.TYPE_INTEGER () "," Returns the value of the entry as an integer when the type is TYPE_INTEGER. <br /><br />"
"android.content.RestrictionEntry.getType () "," Returns the type for this restriction. <br /><br />"
"android.content.RestrictionEntry.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.RestrictionEntry.getSelectedString () "," Returns the currently selected string value. <br /><br />"
"android.content.RestrictionEntry.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.content.RestrictionEntry.getChoiceValues () "," Returns the list of possible string values set earlier. <br /><br />"
"android.content.RestrictionEntry.getKey () "," This is the unique key for the restriction entry. <br /><br />"
"android.content.RestrictionEntry.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.RestrictionEntry.setChoiceValues (String[]) () "," Sets a list of string values that can be selected by the user, similar to setChoiceValues(String[]). <br /><br />"
"android.content.RestrictionEntry.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.RestrictionEntry.getDescription () "," Returns the provided user-visible description of the entry, if any. <br /><br />"
"android.content.RestrictionEntry.Context () "," Sets a list of strings that will be presented as choices to the user. <br /><br />"
"android.content.RestrictionEntry.TYPE_MULTI_SELECT () "," Sets the current list of selected values for an entry of type TYPE_MULTI_SELECT. <br /><br />"
"android.content.RestrictionEntry.TYPE_BOOLEAN (boolean state) "," Sets the current selected state for an entry of type TYPE_BOOLEAN. <br /><br />"
"android.content.RestrictionEntry.TYPE_BOOLEAN () "," Returns the current selected state for an entry of type TYPE_BOOLEAN. <br /><br />"
"android.content.RestrictionEntry.setType (int type) "," Sets the type for this restriction. <br /><br />"
"android.content.RestrictionEntry.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.content.RestrictionEntry.getChoiceEntries () "," Returns the list of strings, set earlier, that will be presented as choices to the user. <br /><br />"
"android.content.RestrictionEntry.String[] () "," Sets a list of string values that can be selected by the user. <br /><br />"
"android.content.RestrictionEntry.getTitle () "," Returns the user-visible title for the entry, if any. <br /><br />"
"android.content.RestrictionEntry.TYPE_INTEGER (int value) "," Sets the integer value of the entry when the type is TYPE_INTEGER. <br /><br />"
"android.content.RestrictionEntry.getAllSelectedStrings () "," Returns the list of currently selected values. <br /><br />"
"android.content.RestrictionsManager.String () "," Parse and return the list of restrictions defined in the manifest for the specified package, if any. <br /><br />"
"android.content.RestrictionsManager.createLocalApprovalIntent () "," no description <br /><br />"
"android.content.RestrictionsManager.getApplicationRestrictions () "," Returns any available set of application-specific restrictions applicable to this application. <br /><br />"
"android.content.RestrictionsManager.hasRestrictionsProvider () "," Called by an application to check if there is an active Restrictions Provider. <br /><br />"
"android.content.RestrictionsManager.PersistableBundle () "," Called by an application to request permission for an operation. <br /><br />"
"android.content.SearchRecentSuggestionsProvider.Uri () "," This method is provided for use by the ContentResolver. <br /><br />"
"android.content.SearchRecentSuggestionsProvider.String () "," This method is provided for use by the ContentResolver. <br /><br />"
"android.content.SearchRecentSuggestionsProvider.onCreate () "," This method is provided for use by the ContentResolver. <br /><br />"
"android.content.SearchRecentSuggestionsProvider.String[] () "," This method is provided for use by the ContentResolver. <br /><br />"
"android.content.SearchRecentSuggestionsProvider.ContentValues () "," This method is provided for use by the ContentResolver. <br /><br />"
"android.content.ServiceConnection.IBinder () "," Called when a connection to the Service has been established, with the IBinder of the communication channel to the Service. <br /><br />"
"android.content.ServiceConnection.ComponentName () "," Called when a connection to the Service has been lost. <br /><br />"
"android.content.SharedPreferences.Editor.clear () "," Mark in the editor to remove all values from the preferences. <br /><br />"
"android.content.SharedPreferences.Editor.apply () () "," Set a set of String values in the preferences editor, to be written back once commit() or apply() is called. <br /><br />"
"android.content.SharedPreferences.Editor.SharedPreferences () "," Commit your preferences changes back from this Editor to the SharedPreferences object it is editing. <br /><br />"
"android.content.SharedPreferences.Editor.commit () () "," Mark in the editor that a preference value should be removed, which will be done in the actual preferences once commit() is called. <br /><br />"
"android.content.SharedPreferences.OnSharedPreferenceChangeListener.String () "," Called when a shared preference is changed, added, or removed. <br /><br />"
"android.content.SyncAdapterType.String () "," no description <br /><br />"
"android.content.SyncAdapterType.supportsUploading () "," no description <br /><br />"
"android.content.SyncAdapterType.getSettingsActivity () "," no description <br /><br />"
"android.content.SyncAdapterType.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.SyncAdapterType.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.content.SyncAdapterType.isUserVisible () "," no description <br /><br />"
"android.content.SyncAdapterType.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.content.SyncAdapterType.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.SyncAdapterType.setIsSyncable (android.accounts.Account, String, int) () "," If true then the SyncManager will never issue an initialization sync to the SyncAdapter and will instead automatically call setIsSyncable(android.accounts.Account, String, int) with a value of 1 for each account and provider that this sync adapter supports. <br /><br />"
"android.content.SyncAdapterType.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.SyncAdapterType.allowParallelSyncs () "," no description <br /><br />"
"android.content.SyncContext.getSyncContextBinder () "," no description <br /><br />"
"android.content.SyncContext.SyncResult () "," no description <br /><br />"
"android.content.SyncRequest.Builder.String () "," Specify an authority and account for this transfer. <br /><br />"
"android.content.SyncRequest.Builder.SYNC_EXTRAS_MANUAL (boolean isManual) "," Convenience function for setting SYNC_EXTRAS_MANUAL. <br /><br />"
"android.content.SyncRequest.Builder.SYNC_EXTRAS_DO_NOT_RETRY (boolean noRetry) "," Convenience function for setting SYNC_EXTRAS_DO_NOT_RETRY. <br /><br />"
"android.content.SyncRequest.Builder.SYNC_EXTRAS_IGNORE_SETTINGS (boolean ignoreSettings) "," Convenience function for setting SYNC_EXTRAS_IGNORE_SETTINGS. <br /><br />"
"android.content.SyncRequest.Builder.setExpedited (boolean expedited) "," An expedited sync runs immediately and can preempt other non-expedited running syncs. <br /><br />"
"android.content.SyncRequest.Builder.setIgnoreSettings (boolean) (boolean disallow) "," Will throw an IllegalArgumentException if called and setIgnoreSettings(boolean) has already been called. <br /><br />"
"android.content.SyncRequest.Builder.syncOnce () "," Request that a sync occur immediately. <br /><br />"
"android.content.SyncRequest.Builder.SYNC_EXTRAS_IGNORE_BACKOFF (boolean ignoreBackoff) "," Convenience function for setting SYNC_EXTRAS_IGNORE_BACKOFF. <br /><br />"
"android.content.SyncRequest.Builder.syncPeriodic (long pollFrequency, long beforeSeconds) "," Build a periodic sync. <br /><br />"
"android.content.SyncRequest.Builder.Bundle () "," Developer-provided extras handed back when sync actually occurs. <br /><br />"
"android.content.SyncRequest.Builder.build () "," Performs validation over the request and throws the runtime exception IllegalArgumentException if this validation fails. <br /><br />"
"android.content.SyncRequest.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.SyncRequest.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.SyncResult.hasHardError () "," Convenience method for determining if the SyncResult indicates that a hard error occurred. <br /><br />"
"android.content.SyncResult.clear () "," Clears the SyncResult to a clean state. <br /><br />"
"android.content.SyncResult.madeSomeProgress () "," Convenience method for determining if the Sync should be rescheduled after failing for some reason. <br /><br />"
"android.content.SyncResult.hasError () "," A convenience method for determining of the SyncResult indicates that an error occurred. <br /><br />"
"android.content.SyncResult.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.SyncResult.hasSoftError () "," Convenience method for determining if the SyncResult indicates that a soft error occurred. <br /><br />"
"android.content.SyncResult.toDebugString () "," Generates a debugging string indicating the status. <br /><br />"
"android.content.SyncResult.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.SyncResult.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.SyncStats.clear () "," Reset all the counters to 0. <br /><br />"
"android.content.SyncStats.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.SyncStats.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.SyncStats.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.SyncStatusObserver.onStatusChanged (int which) "," no description <br /><br />"
"android.content.UriMatcher.Uri () "," Try to match against the path in a url. <br /><br />"
"android.content.UriMatcher.String () "," Add a URI to match, and the code to return when this URI is matched. <br /><br />"
"android.content.UriPermission.getPersistedTime () "," Return the time when this permission was first persisted, in milliseconds since January 1, 1970 00:00:00.0 UTC. <br /><br />"
"android.content.UriPermission.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.content.UriPermission.isWritePermission () "," Returns if this permission offers write access. <br /><br />"
"android.content.UriPermission.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.content.UriPermission.isReadPermission () "," Returns if this permission offers read access. <br /><br />"
"android.content.UriPermission.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.content.UriPermission.getUri () "," Return the Uri this permission pertains to. <br /><br />"
"android.database.AbstractCursor.getColumnName (int columnIndex) "," Returns the column name at the given zero-based column index. <br /><br />"
"android.database.AbstractCursor.getFloat (int column) "," Returns the value of the requested column as a float. <br /><br />"
"android.database.AbstractCursor.requery () "," Performs the query that created the cursor again, refreshing its contents. <br /><br />"
"android.database.AbstractCursor.close () "," Closes the Cursor, releasing all of its resources and making it completely invalid. <br /><br />"
"android.database.AbstractCursor.getCount () "," Returns the numbers of rows in the cursor. <br /><br />"
"android.database.AbstractCursor.getShort (int column) "," Returns the value of the requested column as a short. <br /><br />"
"android.database.AbstractCursor.isFirst () "," Returns whether the cursor is pointing to the first row. <br /><br />"
"android.database.AbstractCursor.close () () "," Register an observer that is called when changes happen to the contents of the this cursors data set, for example, when the data set is changed via requery(), deactivate(), or close(). <br /><br />"
"android.database.AbstractCursor.CursorWindow () "," If the cursor is backed by a CursorWindow, returns a pre-filled window with the contents of the cursor, otherwise null. <br /><br />"
"android.database.AbstractCursor.isBeforeFirst () "," Returns whether the cursor is pointing to the position before the first row. <br /><br />"
"android.database.AbstractCursor.requery () () "," Deactivates the Cursor, making all calls on it fail until requery() is called. <br /><br />"
"android.database.AbstractCursor.CharArrayBuffer () "," Retrieves the requested column text and stores it in the buffer provided. <br /><br />"
"android.database.AbstractCursor.getInt (int column) "," Returns the value of the requested column as an int. <br /><br />"
"android.database.AbstractCursor.moveToPosition (int position) "," Move the cursor to an absolute position. <br /><br />"
"android.database.AbstractCursor.getWantsAllOnMoveCalls () "," onMove() will only be called across processes if this method returns true. <br /><br />"
"android.database.AbstractCursor.isClosed () "," return true if the cursor is closed <br /><br />"
"android.database.AbstractCursor.getLong (int column) "," Returns the value of the requested column as a long. <br /><br />"
"android.database.AbstractCursor.getPosition () "," Returns the current position of the cursor in the row set. <br /><br />"
"android.database.AbstractCursor.moveToNext () "," Move the cursor to the next row. <br /><br />"
"android.database.AbstractCursor.Uri () "," Specifies a content URI to watch for changes. <br /><br />"
"android.database.AbstractCursor.moveToLast () "," Move the cursor to the last row. <br /><br />"
"android.database.AbstractCursor.getColumnNames () "," Returns a string array holding the names of all of the columns in the result set in the order in which they were listed in the result. <br /><br />"
"android.database.AbstractCursor.onMove (int oldPosition, int newPosition) "," This function is called every time the cursor is successfully scrolled to a new position, giving the subclass a chance to update any state it may have. <br /><br />"
"android.database.AbstractCursor.String () "," Returns the zero-based index for the given column name, or -1 if the column doesn't exist. <br /><br />"
"android.database.AbstractCursor.getType (int column) "," Returns data type of the given column's value. <br /><br />"
"android.database.AbstractCursor.isLast () "," Returns whether the cursor is pointing to the last row. <br /><br />"
"android.database.AbstractCursor.getBlob (int column) "," Returns the value of the requested column as a byte array. <br /><br />"
"android.database.AbstractCursor.setNotificationUri (ContentResolver, Uri) () "," Return the URI at which notifications of changes in this Cursor's data will be delivered, as previously set by setNotificationUri(ContentResolver, Uri). <br /><br />"
"android.database.AbstractCursor.moveToFirst () "," Move the cursor to the first row. <br /><br />"
"android.database.AbstractCursor.moveToPrevious () "," Move the cursor to the previous row. <br /><br />"
"android.database.AbstractCursor.registerContentObserver (ContentObserver) () "," Unregister an observer that has previously been registered with this cursor via registerContentObserver(ContentObserver). <br /><br />"
"android.database.AbstractCursor.getString (int column) "," Returns the value of the requested column as a String. <br /><br />"
"android.database.AbstractCursor.ContentObserver () "," Register an observer that is called when changes happen to the content backing this cursor. <br /><br />"
"android.database.AbstractCursor.getExtras () "," Returns a bundle of extra values. <br /><br />"
"android.database.AbstractCursor.move (int offset) "," Move the cursor by a relative amount, forward or backward, from the current position. <br /><br />"
"android.database.AbstractCursor.getColumnCount () "," Return total number of columns <br /><br />"
"android.database.AbstractCursor.isNull (int column) "," Returns true if the value in the indicated column is null. <br /><br />"
"android.database.AbstractCursor.Bundle () "," This is an out-of-band way for the the user of a cursor to communicate with the cursor. <br /><br />"
"android.database.AbstractCursor.isAfterLast () "," Returns whether the cursor is pointing to the position after the last row. <br /><br />"
"android.database.AbstractCursor.getDouble (int column) "," Returns the value of the requested column as a double. <br /><br />"
"android.database.AbstractCursor.IllegalArgumentException () "," Returns the zero-based index for the given column name, or throws IllegalArgumentException if the column doesn't exist. <br /><br />"
"android.database.AbstractCursor.SelfContentObserver.deliverSelfNotifications () "," Returns true if this observer is interested receiving self-change notifications. <br /><br />"
"android.database.AbstractCursor.SelfContentObserver.onChange (boolean selfChange) "," This method is called when a content change occurs. <br /><br />"
"android.database.AbstractWindowedCursor.CursorWindow () "," Sets a new cursor window for the cursor to use. <br /><br />"
"android.database.AbstractWindowedCursor.getInt (int columnIndex) "," Returns the value of the requested column as an int. <br /><br />"
"android.database.AbstractWindowedCursor.getDouble (int columnIndex) "," Returns the value of the requested column as a double. <br /><br />"
"android.database.AbstractWindowedCursor.CharArrayBuffer () "," Retrieves the requested column text and stores it in the buffer provided. <br /><br />"
"android.database.AbstractWindowedCursor.getType (int) (int columnIndex) "," This method was deprecated in API level 11. Use getType(int) <br /><br />"
"android.database.AbstractWindowedCursor.getLong (int columnIndex) "," Returns the value of the requested column as a long. <br /><br />"
"android.database.AbstractWindowedCursor.getFloat (int columnIndex) "," Returns the value of the requested column as a float. <br /><br />"
"android.database.AbstractWindowedCursor.getType (int columnIndex) "," Returns data type of the given column's value. <br /><br />"
"android.database.AbstractWindowedCursor.getString (int columnIndex) "," Returns the value of the requested column as a String. <br /><br />"
"android.database.AbstractWindowedCursor.getShort (int columnIndex) "," Returns the value of the requested column as a short. <br /><br />"
"android.database.AbstractWindowedCursor.hasWindow () "," Returns true if the cursor has an associated cursor window. <br /><br />"
"android.database.AbstractWindowedCursor.getBlob (int columnIndex) "," Returns the value of the requested column as a byte array. <br /><br />"
"android.database.AbstractWindowedCursor.isNull (int columnIndex) "," Returns true if the value in the indicated column is null. <br /><br />"
"android.database.ContentObservable.dispatchChange (boolean, Uri) (boolean selfChange) "," This method was deprecated in API level 16. Use dispatchChange(boolean, Uri) instead. <br /><br />"
"android.database.ContentObservable.dispatchChange (boolean, Uri) () "," Invokes dispatchChange(boolean, Uri) on each observer. <br /><br />"
"android.database.ContentObservable.ContentObserver () "," Adds an observer to the list. <br /><br />"
"android.database.ContentObservable.dispatchChange (boolean) (boolean selfChange) "," This method was deprecated in API level 16. Use dispatchChange(boolean) instead. <br /><br />"
"android.database.ContentObserver.Uri () "," This method is called when a content change occurs. <br /><br />"
"android.database.ContentObserver.dispatchChange (boolean, Uri) (boolean selfChange) "," This method was deprecated in API level 16. Use dispatchChange(boolean, Uri) instead. <br /><br />"
"android.database.ContentObserver.deliverSelfNotifications () "," Returns true if this observer is interested receiving self-change notifications. <br /><br />"
"android.database.ContentObserver.onChange (boolean selfChange) "," This method is called when a content change occurs. <br /><br />"
"android.database.CrossProcessCursor.CursorWindow () "," Copies cursor data into the window. <br /><br />"
"android.database.CrossProcessCursor.onMove (int oldPosition, int newPosition) "," This function is called every time the cursor is successfully scrolled to a new position, giving the subclass a chance to update any state it may have. <br /><br />"
"android.database.CrossProcessCursor.getWindow () "," Returns a pre-filled window that contains the data within this cursor. <br /><br />"
"android.database.CrossProcessCursorWrapper.CursorWindow () "," Copies cursor data into the window. <br /><br />"
"android.database.CrossProcessCursorWrapper.onMove (int oldPosition, int newPosition) "," This function is called every time the cursor is successfully scrolled to a new position, giving the subclass a chance to update any state it may have. <br /><br />"
"android.database.CrossProcessCursorWrapper.getWindow () "," Returns a pre-filled window that contains the data within this cursor. <br /><br />"
"android.database.Cursor.getDouble (int columnIndex) "," Returns the value of the requested column as a double. <br /><br />"
"android.database.Cursor.getColumnName (int columnIndex) "," Returns the column name at the given zero-based column index. <br /><br />"
"android.database.Cursor.getInt (int columnIndex) "," Returns the value of the requested column as an int. <br /><br />"
"android.database.Cursor.requery () "," This method was deprecated in API level 11. Don't use this. Just request a new cursor, so you can do this asynchronously and update your list view once the new cursor comes back. <br /><br />"
"android.database.Cursor.close () "," Closes the Cursor, releasing all of its resources and making it completely invalid. <br /><br />"
"android.database.Cursor.getCount () "," Returns the numbers of rows in the cursor. <br /><br />"
"android.database.Cursor.isFirst () "," Returns whether the cursor is pointing to the first row. <br /><br />"
"android.database.Cursor.isNull (int columnIndex) "," Returns true if the value in the indicated column is null. <br /><br />"
"android.database.Cursor.close () () "," Register an observer that is called when changes happen to the contents of the this cursors data set, for example, when the data set is changed via requery(), deactivate(), or close(). <br /><br />"
"android.database.Cursor.isBeforeFirst () "," Returns whether the cursor is pointing to the position before the first row. <br /><br />"
"android.database.Cursor.requery () () "," This method was deprecated in API level 16. Since requery() is deprecated, so too is this. <br /><br />"
"android.database.Cursor.CharArrayBuffer () "," Retrieves the requested column text and stores it in the buffer provided. <br /><br />"
"android.database.Cursor.moveToPosition (int position) "," Move the cursor to an absolute position. <br /><br />"
"android.database.Cursor.getWantsAllOnMoveCalls () "," onMove() will only be called across processes if this method returns true. <br /><br />"
"android.database.Cursor.isClosed () "," return true if the cursor is closed <br /><br />"
"android.database.Cursor.getPosition () "," Returns the current position of the cursor in the row set. <br /><br />"
"android.database.Cursor.getShort (int columnIndex) "," Returns the value of the requested column as a short. <br /><br />"
"android.database.Cursor.moveToNext () "," Move the cursor to the next row. <br /><br />"
"android.database.Cursor.Uri () "," Register to watch a content URI for changes. <br /><br />"
"android.database.Cursor.moveToLast () "," Move the cursor to the last row. <br /><br />"
"android.database.Cursor.getColumnNames () "," Returns a string array holding the names of all of the columns in the result set in the order in which they were listed in the result. <br /><br />"
"android.database.Cursor.String () "," Returns the zero-based index for the given column name, or -1 if the column doesn't exist. <br /><br />"
"android.database.Cursor.isLast () "," Returns whether the cursor is pointing to the last row. <br /><br />"
"android.database.Cursor.setNotificationUri (ContentResolver, Uri) () "," Return the URI at which notifications of changes in this Cursor's data will be delivered, as previously set by setNotificationUri(ContentResolver, Uri). <br /><br />"
"android.database.Cursor.moveToFirst () "," Move the cursor to the first row. <br /><br />"
"android.database.Cursor.moveToPrevious () "," Move the cursor to the previous row. <br /><br />"
"android.database.Cursor.registerContentObserver (ContentObserver) () "," Unregister an observer that has previously been registered with this cursor via registerContentObserver(ContentObserver). <br /><br />"
"android.database.Cursor.getLong (int columnIndex) "," Returns the value of the requested column as a long. <br /><br />"
"android.database.Cursor.getType (int columnIndex) "," Returns data type of the given column's value. <br /><br />"
"android.database.Cursor.ContentObserver () "," Register an observer that is called when changes happen to the content backing this cursor. <br /><br />"
"android.database.Cursor.getBlob (int columnIndex) "," Returns the value of the requested column as a byte array. <br /><br />"
"android.database.Cursor.getExtras () "," Returns a bundle of extra values. <br /><br />"
"android.database.Cursor.move (int offset) "," Move the cursor by a relative amount, forward or backward, from the current position. <br /><br />"
"android.database.Cursor.getColumnCount () "," Return total number of columns <br /><br />"
"android.database.Cursor.getFloat (int columnIndex) "," Returns the value of the requested column as a float. <br /><br />"
"android.database.Cursor.Bundle () "," This is an out-of-band way for the the user of a cursor to communicate with the cursor. <br /><br />"
"android.database.Cursor.getString (int columnIndex) "," Returns the value of the requested column as a String. <br /><br />"
"android.database.Cursor.isAfterLast () "," Returns whether the cursor is pointing to the position after the last row. <br /><br />"
"android.database.Cursor.IllegalArgumentException () "," Returns the zero-based index for the given column name, or throws IllegalArgumentException if the column doesn't exist. <br /><br />"
"android.database.CursorJoiner.remove () "," Removes the last object returned by next from the collection. <br /><br />"
"android.database.CursorJoiner.Iterator () "," Returns an Iterator for the elements in this object. <br /><br />"
"android.database.CursorJoiner.hasNext () "," Returns whether or not there are more rows to compare using next(). <br /><br />"
"android.database.CursorJoiner.next () "," Returns the comparison result of the next row from each cursor. <br /><br />"
"android.database.CursorWindow.getInt (int row, int column) "," Gets the value of the field at the specified row and column index as an int. <br /><br />"
"android.database.CursorWindow.String () "," Copies a string into the field at the specified row and column index. <br /><br />"
"android.database.CursorWindow.getShort (int row, int column) "," Gets the value of the field at the specified row and column index as a short. <br /><br />"
"android.database.CursorWindow.putBlob (byte[] value, int row, int column) "," Copies a byte array into the field at the specified row and column index. <br /><br />"
"android.database.CursorWindow.allocRow () "," Allocates a new row at the end of this cursor window. <br /><br />"
"android.database.CursorWindow.putLong (long value, int row, int column) "," Puts a long integer into the field at the specified row and column index. <br /><br />"
"android.database.CursorWindow.freeLastRow () "," Frees the last row in this cursor window. <br /><br />"
"android.database.CursorWindow.setStartPosition (int pos) "," Sets the start position of this cursor window. <br /><br />"
"android.database.CursorWindow.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.database.CursorWindow.setNumColumns (int columnNum) "," Sets the number of columns in this window. <br /><br />"
"android.database.CursorWindow.getStartPosition () "," Gets the start position of this cursor window. <br /><br />"
"android.database.CursorWindow.getLong (int row, int column) "," Gets the value of the field at the specified row and column index as a long. <br /><br />"
"android.database.CursorWindow.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.database.CursorWindow.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.database.CursorWindow.getType (int row, int column) "," Returns the type of the field at the specified row and column index. <br /><br />"
"android.database.CursorWindow.clear () "," Clears out the existing contents of the window, making it safe to reuse for new data. <br /><br />"
"android.database.CursorWindow.CharArrayBuffer () "," Copies the text of the field at the specified row and column index into a CharArrayBuffer. <br /><br />"
"android.database.CursorWindow.getNumRows () "," Gets the number of rows in this window. <br /><br />"
"android.database.CursorWindow.putDouble (double value, int row, int column) "," Puts a double-precision floating point value into the field at the specified row and column index. <br /><br />"
"android.database.CursorWindow.getString (int row, int column) "," Gets the value of the field at the specified row and column index as a string. <br /><br />"
"android.database.CursorWindow.getBlob (int row, int column) "," Gets the value of the field at the specified row and column index as a byte array. <br /><br />"
"android.database.CursorWindow.putNull (int row, int column) "," Puts a null value into the field at the specified row and column index. <br /><br />"
"android.database.CursorWindow.getDouble (int row, int column) "," Gets the value of the field at the specified row and column index as a double. <br /><br />"
"android.database.CursorWindow.getFloat (int row, int column) "," Gets the value of the field at the specified row and column index as a float. <br /><br />"
"android.database.CursorWindow.getType (int, int) (int row, int column) "," This method was deprecated in API level 11. Use getType(int, int) instead. <br /><br />"
"android.database.CursorWrapper.getDouble (int columnIndex) "," Returns the value of the requested column as a double. <br /><br />"
"android.database.CursorWrapper.getColumnName (int columnIndex) "," Returns the column name at the given zero-based column index. <br /><br />"
"android.database.CursorWrapper.getInt (int columnIndex) "," Returns the value of the requested column as an int. <br /><br />"
"android.database.CursorWrapper.requery () "," Performs the query that created the cursor again, refreshing its contents. <br /><br />"
"android.database.CursorWrapper.close () "," Closes the Cursor, releasing all of its resources and making it completely invalid. <br /><br />"
"android.database.CursorWrapper.getCount () "," Returns the numbers of rows in the cursor. <br /><br />"
"android.database.CursorWrapper.isFirst () "," Returns whether the cursor is pointing to the first row. <br /><br />"
"android.database.CursorWrapper.isNull (int columnIndex) "," Returns true if the value in the indicated column is null. <br /><br />"
"android.database.CursorWrapper.close () () "," Register an observer that is called when changes happen to the contents of the this cursors data set, for example, when the data set is changed via requery(), deactivate(), or close(). <br /><br />"
"android.database.CursorWrapper.isBeforeFirst () "," Returns whether the cursor is pointing to the position before the first row. <br /><br />"
"android.database.CursorWrapper.requery () () "," Deactivates the Cursor, making all calls on it fail until requery() is called. <br /><br />"
"android.database.CursorWrapper.CharArrayBuffer () "," Retrieves the requested column text and stores it in the buffer provided. <br /><br />"
"android.database.CursorWrapper.moveToPosition (int position) "," Move the cursor to an absolute position. <br /><br />"
"android.database.CursorWrapper.getWantsAllOnMoveCalls () "," onMove() will only be called across processes if this method returns true. <br /><br />"
"android.database.CursorWrapper.isClosed () "," return true if the cursor is closed <br /><br />"
"android.database.CursorWrapper.getPosition () "," Returns the current position of the cursor in the row set. <br /><br />"
"android.database.CursorWrapper.getShort (int columnIndex) "," Returns the value of the requested column as a short. <br /><br />"
"android.database.CursorWrapper.moveToNext () "," Move the cursor to the next row. <br /><br />"
"android.database.CursorWrapper.Uri () "," Register to watch a content URI for changes. <br /><br />"
"android.database.CursorWrapper.moveToLast () "," Move the cursor to the last row. <br /><br />"
"android.database.CursorWrapper.getColumnNames () "," Returns a string array holding the names of all of the columns in the result set in the order in which they were listed in the result. <br /><br />"
"android.database.CursorWrapper.String () "," Returns the zero-based index for the given column name, or -1 if the column doesn't exist. <br /><br />"
"android.database.CursorWrapper.isLast () "," Returns whether the cursor is pointing to the last row. <br /><br />"
"android.database.CursorWrapper.setNotificationUri (ContentResolver, Uri) () "," Return the URI at which notifications of changes in this Cursor's data will be delivered, as previously set by setNotificationUri(ContentResolver, Uri). <br /><br />"
"android.database.CursorWrapper.moveToFirst () "," Move the cursor to the first row. <br /><br />"
"android.database.CursorWrapper.moveToPrevious () "," Move the cursor to the previous row. <br /><br />"
"android.database.CursorWrapper.getWrappedCursor () "," Gets the underlying cursor that is wrapped by this instance. <br /><br />"
"android.database.CursorWrapper.registerContentObserver (ContentObserver) () "," Unregister an observer that has previously been registered with this cursor via registerContentObserver(ContentObserver). <br /><br />"
"android.database.CursorWrapper.getLong (int columnIndex) "," Returns the value of the requested column as a long. <br /><br />"
"android.database.CursorWrapper.getType (int columnIndex) "," Returns data type of the given column's value. <br /><br />"
"android.database.CursorWrapper.ContentObserver () "," Register an observer that is called when changes happen to the content backing this cursor. <br /><br />"
"android.database.CursorWrapper.getBlob (int columnIndex) "," Returns the value of the requested column as a byte array. <br /><br />"
"android.database.CursorWrapper.getExtras () "," Returns a bundle of extra values. <br /><br />"
"android.database.CursorWrapper.move (int offset) "," Move the cursor by a relative amount, forward or backward, from the current position. <br /><br />"
"android.database.CursorWrapper.getColumnCount () "," Return total number of columns <br /><br />"
"android.database.CursorWrapper.getFloat (int columnIndex) "," Returns the value of the requested column as a float. <br /><br />"
"android.database.CursorWrapper.Bundle () "," This is an out-of-band way for the the user of a cursor to communicate with the cursor. <br /><br />"
"android.database.CursorWrapper.getString (int columnIndex) "," Returns the value of the requested column as a String. <br /><br />"
"android.database.CursorWrapper.isAfterLast () "," Returns whether the cursor is pointing to the position after the last row. <br /><br />"
"android.database.CursorWrapper.IllegalArgumentException () "," Returns the zero-based index for the given column name, or throws IllegalArgumentException if the column doesn't exist. <br /><br />"
"android.database.DatabaseErrorHandler.SQLiteDatabase () "," defines the method to be invoked when database corruption is detected. <br /><br />"
"android.database.DatabaseUtils.PrintStream () "," Prints the contents of a Cursor to a PrintSteam. <br /><br />"
"android.database.DatabaseUtils.String () "," SQL-escape a string. <br /><br />"
"android.database.DatabaseUtils.Cursor () "," Prints the contents of a Cursor to a String. <br /><br />"
"android.database.DatabaseUtils.Parcel () "," no description <br /><br />"
"android.database.DatabaseUtils.Exception () "," Special function for writing an exception result at the header of a parcel, to be used when returning an exception from a transaction. <br /><br />"
"android.database.DatabaseUtils.String[] () "," Utility method to run the pre-compiled query and return the value in the first column of the first row. <br /><br />"
"android.database.DatabaseUtils.StringBuilder () "," Prints the contents of a Cursor to a StringBuilder. <br /><br />"
"android.database.DatabaseUtils.Object () "," Binds the given Object to the given SQLiteProgram using the proper typing. <br /><br />"
"android.database.DatabaseUtils.DatabaseUtils.InsertHelper () "," Reads a String out of a field in a Cursor and writes it to an InsertHelper. <br /><br />"
"android.database.DatabaseUtils.ContentValues () "," Reads a String out of a field in a Cursor and writes it to a Map. <br /><br />"
"android.database.DatabaseUtils.InsertHelper.String () "," Returns the index of the specified column. <br /><br />"
"android.database.DatabaseUtils.InsertHelper.close () "," Close this object and release any resources associated with it. <br /><br />"
"android.database.DatabaseUtils.InsertHelper.prepareForReplace () "," Prepare the InsertHelper for a replace. <br /><br />"
"android.database.DatabaseUtils.InsertHelper.bind (int index, boolean value) "," Bind the value to an index. <br /><br />"
"android.database.DatabaseUtils.InsertHelper.bind (int index, float value) "," Bind the value to an index. <br /><br />"
"android.database.DatabaseUtils.InsertHelper.execute () "," Execute the previously prepared insert or replace using the bound values since the last call to prepareForInsert or prepareForReplace. <br /><br />"
"android.database.DatabaseUtils.InsertHelper.bind (int index, double value) "," Bind the value to an index. <br /><br />"
"android.database.DatabaseUtils.InsertHelper.ContentValues () "," Performs an insert, adding a new row with the given values. <br /><br />"
"android.database.DatabaseUtils.InsertHelper.bindNull (int index) "," Bind null to an index. <br /><br />"
"android.database.DatabaseUtils.InsertHelper.bind (int index, long value) "," Bind the value to an index. <br /><br />"
"android.database.DatabaseUtils.InsertHelper.prepareForInsert () "," Prepare the InsertHelper for an insert. <br /><br />"
"android.database.DatabaseUtils.InsertHelper.bind (int index, int value) "," Bind the value to an index. <br /><br />"
"android.database.DatabaseUtils.InsertHelper.bind (int index, byte[] value) "," Bind the value to an index. <br /><br />"
"android.database.DataSetObservable.onInvalidated () () "," Invokes onInvalidated() on each observer. <br /><br />"
"android.database.DataSetObservable.onChanged () () "," Invokes onChanged() on each observer. <br /><br />"
"android.database.DataSetObserver.Cursor () "," This method is called when the entire data becomes invalid, most likely through a call to deactivate() or close() on a Cursor. <br /><br />"
"android.database.DefaultDatabaseErrorHandler.SQLiteDatabase () "," defines the default method to be invoked when database corruption is detected. <br /><br />"
"android.database.MatrixCursor.getColumnNames () "," Returns a string array holding the names of all of the columns in the result set in the order in which they were listed in the result. <br /><br />"
"android.database.MatrixCursor.getType (int column) "," Returns data type of the given column's value. <br /><br />"
"android.database.MatrixCursor.getFloat (int column) "," Returns the value of the requested column as a float. <br /><br />"
"android.database.MatrixCursor.getBlob (int column) "," Returns the value of the requested column as a byte array. <br /><br />"
"android.database.MatrixCursor.Object[] () "," Adds a new row to the end with the given column values. <br /><br />"
"android.database.MatrixCursor.getCount () "," Returns the numbers of rows in the cursor. <br /><br />"
"android.database.MatrixCursor.getString (int column) "," Returns the value of the requested column as a String. <br /><br />"
"android.database.MatrixCursor.newRow () "," Adds a new row to the end and returns a builder for that row. <br /><br />"
"android.database.MatrixCursor.getShort (int column) "," Returns the value of the requested column as a short. <br /><br />"
"android.database.MatrixCursor.isNull (int column) "," Returns true if the value in the indicated column is null. <br /><br />"
"android.database.MatrixCursor.getInt (int column) "," Returns the value of the requested column as an int. <br /><br />"
"android.database.MatrixCursor.getLong (int column) "," Returns the value of the requested column as a long. <br /><br />"
"android.database.MatrixCursor.Iterable () "," Adds a new row to the end with the given column values. <br /><br />"
"android.database.MatrixCursor.getDouble (int column) "," Returns the value of the requested column as a double. <br /><br />"
"android.database.MatrixCursor.RowBuilder.Object () "," Sets the next column value in this row. <br /><br />"
"android.database.MergeCursor.getColumnNames () "," Returns a string array holding the names of all of the columns in the result set in the order in which they were listed in the result. <br /><br />"
"android.database.MergeCursor.onMove (int oldPosition, int newPosition) "," This function is called every time the cursor is successfully scrolled to a new position, giving the subclass a chance to update any state it may have. <br /><br />"
"android.database.MergeCursor.getType (int column) "," Returns data type of the given column's value. <br /><br />"
"android.database.MergeCursor.getFloat (int column) "," Returns the value of the requested column as a float. <br /><br />"
"android.database.MergeCursor.requery () "," Performs the query that created the cursor again, refreshing its contents. <br /><br />"
"android.database.MergeCursor.getBlob (int column) "," Returns the value of the requested column as a byte array. <br /><br />"
"android.database.MergeCursor.close () "," Closes the Cursor, releasing all of its resources and making it completely invalid. <br /><br />"
"android.database.MergeCursor.registerContentObserver (ContentObserver) () "," Unregister an observer that has previously been registered with this cursor via registerContentObserver(ContentObserver). <br /><br />"
"android.database.MergeCursor.getCount () "," Returns the numbers of rows in the cursor. <br /><br />"
"android.database.MergeCursor.getString (int column) "," Returns the value of the requested column as a String. <br /><br />"
"android.database.MergeCursor.ContentObserver () "," Register an observer that is called when changes happen to the content backing this cursor. <br /><br />"
"android.database.MergeCursor.getShort (int column) "," Returns the value of the requested column as a short. <br /><br />"
"android.database.MergeCursor.close () () "," Register an observer that is called when changes happen to the contents of the this cursors data set, for example, when the data set is changed via requery(), deactivate(), or close(). <br /><br />"
"android.database.MergeCursor.requery () () "," Deactivates the Cursor, making all calls on it fail until requery() is called. <br /><br />"
"android.database.MergeCursor.isNull (int column) "," Returns true if the value in the indicated column is null. <br /><br />"
"android.database.MergeCursor.getInt (int column) "," Returns the value of the requested column as an int. <br /><br />"
"android.database.MergeCursor.getLong (int column) "," Returns the value of the requested column as a long. <br /><br />"
"android.database.MergeCursor.getDouble (int column) "," Returns the value of the requested column as a double. <br /><br />"
"android.database.Observable&lt;T&gt;.unregisterAll () "," Remove all registered observers. <br /><br />"
"android.database.Observable&lt;T&gt;.unregisterObserver (T observer) "," Removes a previously registered observer. <br /><br />"
"android.database.Observable&lt;T&gt;.registerObserver (T observer) "," Adds an observer to the list. <br /><br />"
"android.database.sqlite.SQLiteClosable.close () "," Releases a reference to the object, closing the object if the last reference was released. <br /><br />"
"android.database.sqlite.SQLiteClosable.acquireReference () "," Acquires a reference to the object. <br /><br />"
"android.database.sqlite.SQLiteClosable.releaseReferenceFromContainer () "," This method was deprecated in API level 16. Do not use. <br /><br />"
"android.database.sqlite.SQLiteClosable.releaseReference () "," Releases a reference to the object, closing the object if the last reference was released. <br /><br />"
"android.database.sqlite.SQLiteCursor.CursorWindow () "," Sets a new cursor window for the cursor to use. <br /><br />"
"android.database.sqlite.SQLiteCursor.getColumnNames () "," Returns a string array holding the names of all of the columns in the result set in the order in which they were listed in the result. <br /><br />"
"android.database.sqlite.SQLiteCursor.onMove (int oldPosition, int newPosition) "," This function is called every time the cursor is successfully scrolled to a new position, giving the subclass a chance to update any state it may have. <br /><br />"
"android.database.sqlite.SQLiteCursor.String () "," Returns the zero-based index for the given column name, or -1 if the column doesn't exist. <br /><br />"
"android.database.sqlite.SQLiteCursor.requery () () "," Deactivates the Cursor, making all calls on it fail until requery() is called. <br /><br />"
"android.database.sqlite.SQLiteCursor.requery () "," Performs the query that created the cursor again, refreshing its contents. <br /><br />"
"android.database.sqlite.SQLiteCursor.close () "," Closes the Cursor, releasing all of its resources and making it completely invalid. <br /><br />"
"android.database.sqlite.SQLiteCursor.getCount () "," Returns the numbers of rows in the cursor. <br /><br />"
"android.database.sqlite.SQLiteCursor.String[] () "," Changes the selection arguments. <br /><br />"
"android.database.sqlite.SQLiteCursor.getDatabase () "," Get the database that this cursor is associated with. <br /><br />"
"android.database.sqlite.SQLiteCursorDriver.cursorDeactivated () "," Called by a SQLiteCursor when it is released. <br /><br />"
"android.database.sqlite.SQLiteCursorDriver.Cursor () "," Called by a SQLiteCursor when it is requeried. <br /><br />"
"android.database.sqlite.SQLiteCursorDriver.String[] () "," Set new bind arguments. <br /><br />"
"android.database.sqlite.SQLiteCursorDriver.cursorClosed () "," Called by a SQLiteCursor when it it closed to destroy this object as well. <br /><br />"
"android.database.sqlite.SQLiteDatabase.CursorFactory.SQLiteCursor (SQLiteCursorDriver, String, SQLiteQuery) () "," See SQLiteCursor(SQLiteCursorDriver, String, SQLiteQuery). <br /><br />"
"android.database.sqlite.SQLiteDatabase.isWriteAheadLoggingEnabled () "," Returns true if write-ahead logging has been enabled for this database. <br /><br />"
"android.database.sqlite.SQLiteDatabase.inTransaction () "," Returns true if the current thread has a transaction pending. <br /><br />"
"android.database.sqlite.SQLiteDatabase.isDbLockedByOtherThreads () "," This method was deprecated in API level 16. Always returns false. Do not use this method. <br /><br />"
"android.database.sqlite.SQLiteDatabase.beginTransaction () "," Begins a transaction in EXCLUSIVE mode. <br /><br />"
"android.database.sqlite.SQLiteDatabase.setForeignKeyConstraintsEnabled (boolean enable) "," Sets whether foreign key constraints are enabled for the database. <br /><br />"
"android.database.sqlite.SQLiteDatabase.getAttachedDbs () "," Returns list of full pathnames of all attached databases including the main database by executing 'pragma database_list' on the database. <br /><br />"
"android.database.sqlite.SQLiteDatabase.endTransaction () "," End a transaction. <br /><br />"
"android.database.sqlite.SQLiteDatabase.setPageSize (long numBytes) "," Sets the database page size. <br /><br />"
"android.database.sqlite.SQLiteDatabase.SQLiteTransactionListener () "," Begins a transaction in IMMEDIATE mode. <br /><br />"
"android.database.sqlite.SQLiteDatabase.ContentValues () "," Convenience method for replacing a row in the database. <br /><br />"
"android.database.sqlite.SQLiteDatabase.yieldIfContendedSafely () "," Temporarily end the transaction to let other threads run. <br /><br />"
"android.database.sqlite.SQLiteDatabase.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.database.sqlite.SQLiteDatabase.enableWriteAheadLogging () () "," This method disables the features enabled by enableWriteAheadLogging(). <br /><br />"
"android.database.sqlite.SQLiteDatabase.SQLiteDatabase.CursorFactory () "," Equivalent to openDatabase(file.getPath(), factory, CREATE_IF_NECESSARY). <br /><br />"
"android.database.sqlite.SQLiteDatabase.Cursor () "," Runs the provided SQL and returns a Cursor over the result set. <br /><br />"
"android.database.sqlite.SQLiteDatabase.enableWriteAheadLogging () "," This method enables parallel execution of queries from multiple threads on the same database. <br /><br />"
"android.database.sqlite.SQLiteDatabase.isOpen () "," Returns true if the database is currently open. <br /><br />"
"android.database.sqlite.SQLiteDatabase.getVersion () "," Gets the database version. <br /><br />"
"android.database.sqlite.SQLiteDatabase.yieldIfContended () "," This method was deprecated in API level 3. if the db is locked more than once (becuase of nested transactions) then the lock will not be yielded. Use yieldIfContendedSafely instead. <br /><br />"
"android.database.sqlite.SQLiteDatabase.NO_LOCALIZED_COLLATORS () "," Open the database according to the flags OPEN_READWRITE OPEN_READONLY CREATE_IF_NECESSARY and/or NO_LOCALIZED_COLLATORS. <br /><br />"
"android.database.sqlite.SQLiteDatabase.String[] () "," Convenience method for updating rows in the database. <br /><br />"
"android.database.sqlite.SQLiteDatabase.getPageSize () "," Returns the current database page size, in bytes. <br /><br />"
"android.database.sqlite.SQLiteDatabase.yieldIfContendedSafely (long sleepAfterYieldDelay) "," Temporarily end the transaction to let other threads run. <br /><br />"
"android.database.sqlite.SQLiteDatabase.String () "," Runs the provided SQL and returns a cursor over the result set. <br /><br />"
"android.database.sqlite.SQLiteDatabase.needUpgrade (int newVersion) "," Returns true if the new version code is greater than the current database version. <br /><br />"
"android.database.sqlite.SQLiteDatabase.setVersion (int version) "," Sets the database version. <br /><br />"
"android.database.sqlite.SQLiteDatabase.getMaximumSize () "," Returns the maximum size the database may grow to. <br /><br />"
"android.database.sqlite.SQLiteDatabase.getPath () "," Gets the path to the database file. <br /><br />"
"android.database.sqlite.SQLiteDatabase.isDbLockedByCurrentThread () "," Returns true if the current thread is holding an active connection to the database. <br /><br />"
"android.database.sqlite.SQLiteDatabase.setLockingEnabled (boolean lockingEnabled) "," This method was deprecated in API level 16. This method now does nothing. Do not use. <br /><br />"
"android.database.sqlite.SQLiteDatabase.CancellationSignal () "," Runs the provided SQL and returns a cursor over the result set. <br /><br />"
"android.database.sqlite.SQLiteDatabase.Object[] () "," Execute a single SQL statement that is NOT a SELECT/INSERT/UPDATE/DELETE. <br /><br />"
"android.database.sqlite.SQLiteDatabase.Locale () "," Sets the locale for this database. <br /><br />"
"android.database.sqlite.SQLiteDatabase.beginTransactionNonExclusive () "," Begins a transaction in IMMEDIATE mode. <br /><br />"
"android.database.sqlite.SQLiteDatabase.getSyncedTables () "," This method was deprecated in API level 11. This method no longer serves any useful purpose and has been deprecated. <br /><br />"
"android.database.sqlite.SQLiteDatabase.DatabaseErrorHandler () "," Equivalent to openDatabase(path, factory, CREATE_IF_NECESSARY, errorHandler). <br /><br />"
"android.database.sqlite.SQLiteDatabase.setTransactionSuccessful () "," Marks the current transaction as successful. <br /><br />"
"android.database.sqlite.SQLiteDatabase.setMaximumSize (long numBytes) "," Sets the maximum size the database will grow to. <br /><br />"
"android.database.sqlite.SQLiteDatabase.File () "," Deletes a database including its journal file and other auxiliary files that may have been created by the database engine. <br /><br />"
"android.database.sqlite.SQLiteDatabase.isDatabaseIntegrityOk () "," Runs 'pragma integrity_check' on the given database (and all the attached databases) and returns true if the given database (and all its attached databases) pass integrity_check, false otherwise. <br /><br />"
"android.database.sqlite.SQLiteDatabase.setMaxSqlCacheSize (int cacheSize) "," Sets the maximum size of the prepared-statement cache for this database. <br /><br />"
"android.database.sqlite.SQLiteDatabase.isReadOnly () "," Returns true if the database is opened as read only. <br /><br />"
"android.database.sqlite.SQLiteDatabase.releaseMemory () "," Attempts to release memory that SQLite holds but does not require to operate properly. <br /><br />"
"android.database.sqlite.SQLiteOpenHelper.setWriteAheadLoggingEnabled (boolean enabled) "," Enables or disables the use of write-ahead logging for the database. <br /><br />"
"android.database.sqlite.SQLiteOpenHelper.getReadableDatabase () "," Create and/or open a database. <br /><br />"
"android.database.sqlite.SQLiteOpenHelper.close () "," Close any open database object. <br /><br />"
"android.database.sqlite.SQLiteOpenHelper.SQLiteDatabase () "," Called when the database needs to be upgraded. <br /><br />"
"android.database.sqlite.SQLiteOpenHelper.getWritableDatabase () "," Create and/or open a database that will be used for reading and writing. <br /><br />"
"android.database.sqlite.SQLiteOpenHelper.getDatabaseName () "," Return the name of the SQLite database being opened, as given to the constructor. <br /><br />"
"android.database.sqlite.SQLiteProgram.clearBindings () "," Clears all existing bindings. <br /><br />"
"android.database.sqlite.SQLiteProgram.String () "," Bind a String value to this statement. <br /><br />"
"android.database.sqlite.SQLiteProgram.bindDouble (int index, double value) "," Bind a double value to this statement. <br /><br />"
"android.database.sqlite.SQLiteProgram.getUniqueId () "," This method was deprecated in API level 11. This method is deprecated and must not be used. <br /><br />"
"android.database.sqlite.SQLiteProgram.bindNull (int index) "," Bind a NULL value to this statement. <br /><br />"
"android.database.sqlite.SQLiteProgram.String[] () "," Given an array of String bindArgs, this method binds all of them in one single call. <br /><br />"
"android.database.sqlite.SQLiteProgram.bindLong (int index, long value) "," Bind a long value to this statement. <br /><br />"
"android.database.sqlite.SQLiteProgram.bindBlob (int index, byte[] value) "," Bind a byte array value to this statement. <br /><br />"
"android.database.sqlite.SQLiteQuery.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.database.sqlite.SQLiteQueryBuilder.SQLiteDatabase.CursorFactory () "," Sets the cursor factory to be used for the query. <br /><br />"
"android.database.sqlite.SQLiteQueryBuilder.String () "," Sets the list of tables to query. <br /><br />"
"android.database.sqlite.SQLiteQueryBuilder.CancellationSignal () "," Perform a query by combining all current settings and the information passed into this method. <br /><br />"
"android.database.sqlite.SQLiteQueryBuilder.getTables () "," Returns the list of tables being queried <br /><br />"
"android.database.sqlite.SQLiteQueryBuilder.setStrict (boolean flag) "," When set, the selection is verified against malicious arguments. <br /><br />"
"android.database.sqlite.SQLiteQueryBuilder.CharSequence () "," Append a chunk to the WHERE clause of the query. <br /><br />"
"android.database.sqlite.SQLiteQueryBuilder.String[] () "," Add the names that are non-null in columns to s, separating them with commas. <br /><br />"
"android.database.sqlite.SQLiteQueryBuilder.buildQuery (String[], String, String, String, String, String) () "," This method was deprecated in API level 11. This method's signature is misleading since no SQL parameter substitution is carried out. The selection arguments parameter does not get used at all. To avoid confusion, call buildQuery(String[], String, String, String, String, String) instead. <br /><br />"
"android.database.sqlite.SQLiteQueryBuilder.setDistinct (boolean distinct) "," Mark the query as DISTINCT. <br /><br />"
"android.database.sqlite.SQLiteStatement.simpleQueryForBlobFileDescriptor () "," Executes a statement that returns a 1 by 1 table with a blob value. <br /><br />"
"android.database.sqlite.SQLiteStatement.executeInsert () "," Execute this SQL statement and return the ID of the row inserted due to this call. <br /><br />"
"android.database.sqlite.SQLiteStatement.simpleQueryForString () "," Execute a statement that returns a 1 by 1 table with a text value. <br /><br />"
"android.database.sqlite.SQLiteStatement.executeUpdateDelete () "," Execute this SQL statement, if the the number of rows affected by execution of this SQL statement is of any importance to the caller - for example, UPDATE / DELETE SQL statements. <br /><br />"
"android.database.sqlite.SQLiteStatement.execute () "," Execute this SQL statement, if it is not a SELECT / INSERT / DELETE / UPDATE, for example CREATE / DROP table, view, trigger, index etc. <br /><br />"
"android.database.sqlite.SQLiteStatement.simpleQueryForLong () "," Execute a statement that returns a 1 by 1 table with a numeric value. <br /><br />"
"android.database.sqlite.SQLiteStatement.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.database.sqlite.SQLiteTransactionListener.onCommit () "," Called immediately before commiting the transaction. <br /><br />"
"android.database.sqlite.SQLiteTransactionListener.onBegin () "," Called immediately after the transaction begins. <br /><br />"
"android.database.sqlite.SQLiteTransactionListener.onRollback () "," Called if the transaction is about to be rolled back. <br /><br />"
"android.drm.DrmEvent.String () "," Retrieves the attribute associated with the specified key. <br /><br />"
"android.drm.DrmEvent.getUniqueId () "," Retrieves the unique session identifier associated with this object. <br /><br />"
"android.drm.DrmEvent.getType () "," Retrieves the type of information that is associated with this object. <br /><br />"
"android.drm.DrmEvent.getMessage () "," Retrieves the message description associated with this object. <br /><br />"
"android.drm.DrmInfo.String () "," Retrieves the value of a given key. <br /><br />"
"android.drm.DrmInfo.keyIterator () "," Retrieves an iterator object that you can use to iterate over the keys associated with this DrmInfo object. <br /><br />"
"android.drm.DrmInfo.getData () "," Retrieves the trigger data associated with this object. <br /><br />"
"android.drm.DrmInfo.getMimeType () "," Retrieves the MIME type associated with this object. <br /><br />"
"android.drm.DrmInfo.Object () "," Adds optional information as key-value pairs to this object. <br /><br />"
"android.drm.DrmInfo.iterator () "," Retrieves an iterator object that you can use to iterate over the values associated with this DrmInfo object. <br /><br />"
"android.drm.DrmInfo.getInfoType () "," Retrieves the information type associated with this object. <br /><br />"
"android.drm.DrmInfoRequest.String () "," Retrieves the value of a given key. <br /><br />"
"android.drm.DrmInfoRequest.keyIterator () "," Retrieves an iterator object that you can use to iterate over the keys associated with this DrmInfoRequest object. <br /><br />"
"android.drm.DrmInfoRequest.getMimeType () "," Retrieves the MIME type associated with this object. <br /><br />"
"android.drm.DrmInfoRequest.Object () "," Adds optional information as key-value pairs to this object. <br /><br />"
"android.drm.DrmInfoRequest.iterator () "," Retrieves an iterator object that you can use to iterate over the values associated with this DrmInfoRequest object. <br /><br />"
"android.drm.DrmInfoRequest.getInfoType () "," Retrieves the information type associated with this object. <br /><br />"
"android.drm.DrmManagerClient.Uri () "," Removes the rights associated with the given rights-protected content. <br /><br />"
"android.drm.DrmManagerClient.String () "," Saves rights to a specified path and associates that path with the content path. <br /><br />"
"android.drm.DrmManagerClient.closeConvertSession (int convertId) "," Informs the DRM plug-in (agent) that there is no more data to convert or that an error has occurred. <br /><br />"
"android.drm.DrmManagerClient.removeAllRights () "," Removes all the rights information of every DRM plug-in (agent) associated with the DRM framework. <br /><br />"
"android.drm.DrmManagerClient.DrmStore.Action () "," Checks whether the given rights-protected content has valid rights for the specified DrmStore.Action. <br /><br />"
"android.drm.DrmManagerClient.convertData (int convertId, byte[] inputData) "," Converts the input data (content) that is part of a rights-protected file. <br /><br />"
"android.drm.DrmManagerClient.DrmInfo () "," Processes the given DRM information based on the information type. <br /><br />"
"android.drm.DrmManagerClient.DrmManagerClient.OnErrorListener () "," Registers an DrmManagerClient.OnErrorListener callback, which is invoked when the DRM framework sends error information. <br /><br />"
"android.drm.DrmManagerClient.release () "," Releases resources associated with the current session of DrmManagerClient. <br /><br />"
"android.drm.DrmManagerClient.DrmManagerClient.OnEventListener () "," Registers an DrmManagerClient.OnEventListener callback, which is invoked when the DRM framework sends information about DRM processing. <br /><br />"
"android.drm.DrmManagerClient.DrmInfoRequest () "," Processes a given DrmInfoRequest and returns the rights information asynchronously. <br /><br />"
"android.drm.DrmManagerClient.getAvailableDrmEngines () "," Retrieves information about all the DRM plug-ins (agents) that are registered with the DRM framework. <br /><br />"
"android.drm.DrmManagerClient.DrmManagerClient.OnInfoListener () "," Registers an DrmManagerClient.OnInfoListener callback, which is invoked when the DRM framework sends status or warning information during registration or rights acquisition. <br /><br />"
"android.drm.DrmManagerClient.OnErrorListener.DrmErrorEvent () "," Called when the DRM framework sends error information. <br /><br />"
"android.drm.DrmManagerClient.OnEventListener.DrmEvent () "," Called when the DRM framework sends information about a DRM processing request. <br /><br />"
"android.drm.DrmManagerClient.OnInfoListener.DrmInfoEvent () "," Called when the DRM framework sends status or warning information during registration and rights acquisition. <br /><br />"
"android.drm.DrmRights.getData () "," Retrieves the rights data associated with this DrmRights object. <br /><br />"
"android.drm.DrmRights.getMimeType () "," Retrieves the MIME type associated with this DrmRights object. <br /><br />"
"android.drm.DrmRights.getAccountId () "," Retrieves the account ID associated with this DrmRights object. <br /><br />"
"android.drm.DrmRights.getSubscriptionId () "," Retrieves the subscription ID associated with this DrmRights object. <br /><br />"
"android.drm.DrmSupportInfo.getDescription () "," Retrieves the DRM plug-in (agent) description. <br /><br />"
"android.drm.DrmSupportInfo.String () "," Sets a description for the DRM plug-in (agent). <br /><br />"
"android.drm.DrmSupportInfo.getMimeTypeIterator () "," Retrieves an iterator object that you can use to iterate over the MIME types that this DRM plug-in supports. <br /><br />"
"android.drm.DrmSupportInfo.getDescription () () "," This method was deprecated in API level 16. The method name is mis-spelled, and it is replaced by getDescription(). <br /><br />"
"android.drm.DrmSupportInfo.hashCode () "," Overridden hash code implementation. <br /><br />"
"android.drm.DrmSupportInfo.Object () "," Overridden equals implementation. <br /><br />"
"android.drm.DrmSupportInfo.getFileSuffixIterator () "," Retrieves an iterator object that you can use to iterate over the file suffixes that this DRM plug-in supports. <br /><br />"
"android.drm.DrmUtils.ExtendedMetadataParser.String () "," This method retrieves the metadata value associated with a given key. <br /><br />"
"android.drm.DrmUtils.ExtendedMetadataParser.keyIterator () "," This method returns an iterator object that can be used to iterate over all keys of the metadata. <br /><br />"
"android.drm.DrmUtils.ExtendedMetadataParser.iterator () "," This method returns an iterator object that can be used to iterate over all values of the metadata. <br /><br />"
"android.drm.DrmUtils.DrmUtils.ExtendedMetadataParser (byte[] extendedMetadata) "," Gets an instance of DrmUtils.ExtendedMetadataParser, which can be used to parse extended metadata embedded in DRM constraint information. <br /><br />"
"android.drm.ProcessedData.getData () "," Retrieves the processed data. <br /><br />"
"android.drm.ProcessedData.getAccountId () "," Retrieves the account ID associated with this object. <br /><br />"
"android.drm.ProcessedData.getSubscriptionId () "," Returns the subscription ID associated with this object. <br /><br />"
"android.gesture.Gesture.getStrokesCount () "," no description <br /><br />"
"android.gesture.Gesture.getBoundingBox () "," no description <br /><br />"
"android.gesture.Gesture.Path () "," no description <br /><br />"
"android.gesture.Gesture.getStrokes () "," no description <br /><br />"
"android.gesture.Gesture.GestureStroke () "," Adds a stroke to the gesture. <br /><br />"
"android.gesture.Gesture.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.gesture.Gesture.getID () "," no description <br /><br />"
"android.gesture.Gesture.getLength () "," Calculates the total length of the gesture. <br /><br />"
"android.gesture.Gesture.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.gesture.Gesture.toPath () "," no description <br /><br />"
"android.gesture.Gesture.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.gesture.Gesture.toBitmap (int width, int height, int edge, int numSample, int color) "," Creates a bitmap of the gesture with a transparent background. <br /><br />"
"android.gesture.Gesture.toPath (int width, int height, int edge, int numSample) "," no description <br /><br />"
"android.gesture.Gesture.toBitmap (int width, int height, int inset, int color) "," Creates a bitmap of the gesture with a transparent background. <br /><br />"
"android.gesture.GestureLibraries.Context () "," no description <br /><br />"
"android.gesture.GestureLibraries.String () "," no description <br /><br />"
"android.gesture.GestureLibraries.File () "," no description <br /><br />"
"android.gesture.GestureLibrary.save () "," no description <br /><br />"
"android.gesture.GestureLibrary.getGestureEntries () "," no description <br /><br />"
"android.gesture.GestureLibrary.getSequenceType () "," no description <br /><br />"
"android.gesture.GestureLibrary.String () "," no description <br /><br />"
"android.gesture.GestureLibrary.setOrientationStyle (int style) "," no description <br /><br />"
"android.gesture.GestureLibrary.getOrientationStyle () "," no description <br /><br />"
"android.gesture.GestureLibrary.load () "," no description <br /><br />"
"android.gesture.GestureLibrary.Gesture () "," no description <br /><br />"
"android.gesture.GestureLibrary.setSequenceType (int type) "," no description <br /><br />"
"android.gesture.GestureLibrary.isReadOnly () "," no description <br /><br />"
"android.gesture.GestureOverlayView.cancelClearAnimation () "," no description <br /><br />"
"android.gesture.GestureOverlayView.getGesture () "," no description <br /><br />"
"android.gesture.GestureOverlayView.setGestureVisible (boolean visible) "," no description <br /><br />"
"android.gesture.GestureOverlayView.MotionEvent () "," Pass the touch screen motion event down to the target view, or this view if it is the target. <br /><br />"
"android.gesture.GestureOverlayView.getOrientation () "," no description <br /><br />"
"android.gesture.GestureOverlayView.removeAllOnGesturingListeners () "," no description <br /><br />"
"android.gesture.GestureOverlayView.getUncertainGestureColor () "," no description <br /><br />"
"android.gesture.GestureOverlayView.Gesture () "," no description <br /><br />"
"android.gesture.GestureOverlayView.setGestureStrokeWidth (float gestureStrokeWidth) "," no description <br /><br />"
"android.gesture.GestureOverlayView.setGestureStrokeLengthThreshold (float gestureStrokeLengthThreshold) "," no description <br /><br />"
"android.gesture.GestureOverlayView.removeAllOnGestureListeners () "," no description <br /><br />"
"android.gesture.GestureOverlayView.getGestureStrokeType () "," no description <br /><br />"
"android.gesture.GestureOverlayView.isFadeEnabled () "," no description <br /><br />"
"android.gesture.GestureOverlayView.getFadeOffset () "," no description <br /><br />"
"android.gesture.GestureOverlayView.setOrientation (int orientation) "," no description <br /><br />"
"android.gesture.GestureOverlayView.setFadeOffset (long fadeOffset) "," no description <br /><br />"
"android.gesture.GestureOverlayView.isEventsInterceptionEnabled () "," no description <br /><br />"
"android.gesture.GestureOverlayView.GestureOverlayView.OnGestureListener () "," no description <br /><br />"
"android.gesture.GestureOverlayView.removeAllOnGesturePerformedListeners () "," no description <br /><br />"
"android.gesture.GestureOverlayView.getGestureColor () "," no description <br /><br />"
"android.gesture.GestureOverlayView.setGestureStrokeSquarenessTreshold (float gestureStrokeSquarenessTreshold) "," no description <br /><br />"
"android.gesture.GestureOverlayView.isGesturing () "," no description <br /><br />"
"android.gesture.GestureOverlayView.setGestureStrokeType (int gestureStrokeType) "," no description <br /><br />"
"android.gesture.GestureOverlayView.getGestureStrokeLengthThreshold () "," no description <br /><br />"
"android.gesture.GestureOverlayView.getCurrentStroke () "," no description <br /><br />"
"android.gesture.GestureOverlayView.Path () "," no description <br /><br />"
"android.gesture.GestureOverlayView.setGestureColor (int color) "," no description <br /><br />"
"android.gesture.GestureOverlayView.Canvas () "," Manually render this view (and all of its children) to the given Canvas. <br /><br />"
"android.gesture.GestureOverlayView.isGestureVisible () "," no description <br /><br />"
"android.gesture.GestureOverlayView.GestureOverlayView.OnGesturePerformedListener () "," no description <br /><br />"
"android.gesture.GestureOverlayView.cancelGesture () "," no description <br /><br />"
"android.gesture.GestureOverlayView.GestureOverlayView.OnGesturingListener () "," no description <br /><br />"
"android.gesture.GestureOverlayView.setFadeEnabled (boolean fadeEnabled) "," no description <br /><br />"
"android.gesture.GestureOverlayView.getGestureStrokeWidth () "," no description <br /><br />"
"android.gesture.GestureOverlayView.setGestureStrokeAngleThreshold (float gestureStrokeAngleThreshold) "," no description <br /><br />"
"android.gesture.GestureOverlayView.clear (boolean animated) "," no description <br /><br />"
"android.gesture.GestureOverlayView.getGestureStrokeAngleThreshold () "," no description <br /><br />"
"android.gesture.GestureOverlayView.getGesturePath () "," no description <br /><br />"
"android.gesture.GestureOverlayView.getGestureStrokeSquarenessTreshold () "," no description <br /><br />"
"android.gesture.GestureOverlayView.setEventsInterceptionEnabled (boolean enabled) "," no description <br /><br />"
"android.gesture.GestureOverlayView.setUncertainGestureColor (int color) "," no description <br /><br />"
"android.gesture.GestureOverlayView.OnGestureListener.MotionEvent () "," no description <br /><br />"
"android.gesture.GestureOverlayView.OnGesturePerformedListener.Gesture () "," no description <br /><br />"
"android.gesture.GestureOverlayView.OnGesturingListener.GestureOverlayView () "," no description <br /><br />"
"android.gesture.GesturePoint.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.gesture.GestureStore.hasChanged () "," no description <br /><br />"
"android.gesture.GestureStore.getGestureEntries () "," Get all the gesture entry names in the library <br /><br />"
"android.gesture.GestureStore.getSequenceType () "," no description <br /><br />"
"android.gesture.GestureStore.String () "," Remove a entry of gestures <br /><br />"
"android.gesture.GestureStore.setOrientationStyle (int style) "," Specify how the gesture library will handle orientation. <br /><br />"
"android.gesture.GestureStore.getOrientationStyle () "," no description <br /><br />"
"android.gesture.GestureStore.OutputStream () "," no description <br /><br />"
"android.gesture.GestureStore.Gesture () "," Remove a gesture from the library. <br /><br />"
"android.gesture.GestureStore.setSequenceType (int type) "," no description <br /><br />"
"android.gesture.GestureStore.InputStream () "," no description <br /><br />"
"android.gesture.GestureStroke.toPath (float width, float height, int numSample) "," Converts the stroke to a Path of a given number of points. <br /><br />"
"android.gesture.GestureStroke.getPath () "," no description <br /><br />"
"android.gesture.GestureStroke.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.gesture.GestureStroke.clearPath () "," Invalidates the cached path that is used to render the stroke. <br /><br />"
"android.gesture.GestureStroke.computeOrientedBoundingBox () "," Computes an oriented bounding box of the stroke. <br /><br />"
"android.gesture.GestureUtils.computeOrientedBoundingBox (float[] originalPoints) "," Computes an oriented, minimum bounding box of a set of points. <br /><br />"
"android.gesture.GestureUtils.GestureStroke () "," Samples a stroke temporally into a given number of evenly-distributed points. <br /><br />"
"android.gesture.GestureUtils.Gesture () "," Samples the gesture spatially by rendering the gesture into a 2D grayscale bitmap. <br /><br />"
"android.gesture.GestureUtils.GesturePoint () "," Computes an oriented, minimum bounding box of a set of points. <br /><br />"
"android.gesture.Prediction.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.graphics.Bitmap.getPixels (int[] pixels, int offset, int stride, int x, int y, int width, int height) "," Returns in pixels[] a copy of the data in the bitmap. <br /><br />"
"android.graphics.Bitmap.setDensity (int density) "," Specifies the density for this bitmap. <br /><br />"
"android.graphics.Bitmap.Bitmap.Config () "," Modifies the bitmap to have a specified width, height, and Bitmap.Config, without affecting the underlying allocation backing the bitmap. <br /><br />"
"android.graphics.Bitmap.getGenerationId () "," Returns the generation ID of this bitmap. <br /><br />"
"android.graphics.Bitmap.Color (int x, int y, int color) "," Write the specified Color into the bitmap (assuming it is mutable) at the x,y coordinate. <br /><br />"
"android.graphics.Bitmap.hasMipMap () "," Indicates whether the renderer responsible for drawing this bitmap should attempt to use mipmaps when this bitmap is drawn scaled down. <br /><br />"
"android.graphics.Bitmap.hasAlpha () "," Returns true if the bitmap's config supports per-pixel alpha, and if the pixels may contain non-opaque alpha values. <br /><br />"
"android.graphics.Bitmap.getAllocationByteCount () "," Returns the size of the allocated memory used to store this bitmap's pixels. <br /><br />"
"android.graphics.Bitmap.setPixels (int[] pixels, int offset, int stride, int x, int y, int width, int height) "," Replace pixels in the bitmap with the colors in the array. <br /><br />"
"android.graphics.Bitmap.Matrix () "," Returns an immutable bitmap from subset of the source bitmap, transformed by the optional matrix. <br /><br />"
"android.graphics.Bitmap.getByteCount () "," Returns the minimum number of bytes that can be used to store this bitmap's pixels. <br /><br />"
"android.graphics.Bitmap.getHeight () "," Returns the bitmap's height <br /><br />"
"android.graphics.Bitmap.getScaledWidth (int targetDensity) "," Convenience method that returns the width of this bitmap divided by the density scale factor. <br /><br />"
"android.graphics.Bitmap.isMutable () "," Returns true if the bitmap is marked as mutable (i.e.&nbsp;can be drawn into) <br /><br />"
"android.graphics.Bitmap.getNinePatchChunk () "," Returns an optional array of private data, used by the UI system for some bitmaps. <br /><br />"
"android.graphics.Bitmap.Buffer () "," Copy the bitmap's pixels into the specified buffer (allocated by the caller). <br /><br />"
"android.graphics.Bitmap.reconfigure (int, int, Config) (int width) "," Convenience method for calling reconfigure(int, int, Config) with the current height and config. <br /><br />"
"android.graphics.Bitmap.getScaledHeight (int targetDensity) "," Convenience method that returns the height of this bitmap divided by the density scale factor. <br /><br />"
"android.graphics.Bitmap.getRowBytes () "," Return the number of bytes between rows in the bitmap's pixels. <br /><br />"
"android.graphics.Bitmap.isPremultiplied () "," Indicates whether pixels stored in this bitmaps are stored pre-multiplied. <br /><br />"
"android.graphics.Bitmap.reconfigure (int, int, Config) (int height) "," Convenience method for calling reconfigure(int, int, Config) with the current width and config. <br /><br />"
"android.graphics.Bitmap.getDensity () "," Returns the density for this bitmap. <br /><br />"
"android.graphics.Bitmap.getWidth () "," Returns the bitmap's width <br /><br />"
"android.graphics.Bitmap.setPremultiplied (boolean premultiplied) "," Sets whether the bitmap should treat its data as pre-multiplied. <br /><br />"
"android.graphics.Bitmap.setHasAlpha (boolean hasAlpha) "," Tell the bitmap if all of the pixels are known to be opaque (false) or if some of the pixels may contain non-opaque alpha values (true). <br /><br />"
"android.graphics.Bitmap.getConfig () "," If the bitmap's internal config is in one of the public formats, return that config, otherwise return null. <br /><br />"
"android.graphics.Bitmap.extractAlpha () "," Returns a new bitmap that captures the alpha values of the original. <br /><br />"
"android.graphics.Bitmap.Canvas () "," Convenience for calling getScaledWidth(int) with the target density of the given Canvas. <br /><br />"
"android.graphics.Bitmap.Parcel () "," Write the bitmap and its pixels to the parcel. <br /><br />"
"android.graphics.Bitmap.isRecycled () "," Returns true if this bitmap has been recycled. <br /><br />"
"android.graphics.Bitmap.describeContents () "," No special parcel contents. <br /><br />"
"android.graphics.Bitmap.reconfigure (int, int, Config) () "," Convenience method for calling reconfigure(int, int, Config) with the current height and width. <br /><br />"
"android.graphics.Bitmap.Paint () "," Returns a new bitmap that captures the alpha values of the original. <br /><br />"
"android.graphics.Bitmap.OutputStream () "," Write a compressed version of the bitmap to the specified outputstream. <br /><br />"
"android.graphics.Bitmap.setHasMipMap (boolean hasMipMap) "," Set a hint for the renderer responsible for drawing this bitmap indicating that it should attempt to use mipmaps when this bitmap is drawn scaled down. <br /><br />"
"android.graphics.Bitmap.recycle () "," Free the native object associated with this bitmap, and clear the reference to the pixel data. <br /><br />"
"android.graphics.Bitmap.prepareToDraw () "," Rebuilds any caches associated with the bitmap that are used for drawing it. <br /><br />"
"android.graphics.Bitmap.Color (int c) "," Fills the bitmap's pixels with the specified Color. <br /><br />"
"android.graphics.Bitmap.DisplayMetrics () "," Convenience for calling getScaledWidth(int) with the target density of the given DisplayMetrics. <br /><br />"
"android.graphics.Bitmap.Bitmap () "," Given another bitmap, return true if it has the same dimensions, config, and pixel data as this bitmap. <br /><br />"
"android.graphics.Bitmap.Color (int x, int y) "," Returns the Color at the specified location. <br /><br />"
"android.graphics.BitmapFactory.decodeResource (Resources, int, android.graphics.BitmapFactory.Options) () "," Synonym for decodeResource(Resources, int, android.graphics.BitmapFactory.Options) with null Options. <br /><br />"
"android.graphics.BitmapFactory.String () "," Decode a file path into a bitmap. <br /><br />"
"android.graphics.BitmapFactory.decodeByteArray (byte[] data, int offset, int length) "," Decode an immutable bitmap from the specified byte array. <br /><br />"
"android.graphics.BitmapFactory.BitmapFactory.Options () "," Decode an input stream into a bitmap. <br /><br />"
"android.graphics.BitmapFactory.FileDescriptor () "," Decode a bitmap from the file descriptor. <br /><br />"
"android.graphics.BitmapFactory.InputStream () "," Decode an input stream into a bitmap. <br /><br />"
"android.graphics.BitmapFactory.decodeResourceStream (Resources, TypedValue, InputStream, Rect, BitmapFactory.Options) () "," Synonym for opening the given resource and calling decodeResourceStream(Resources, TypedValue, InputStream, Rect, BitmapFactory.Options). <br /><br />"
"android.graphics.BitmapFactory.Options.requestCancelDecode () "," This can be called from another thread while this options object is inside a decode... <br /><br />"
"android.graphics.BitmapRegionDecoder.String () "," Create a BitmapRegionDecoder from a file path. <br /><br />"
"android.graphics.BitmapRegionDecoder.BitmapFactory.Options () "," Decodes a rectangle region in the image specified by rect. <br /><br />"
"android.graphics.BitmapRegionDecoder.getHeight () "," Returns the original image's height <br /><br />"
"android.graphics.BitmapRegionDecoder.recycle () "," Frees up the memory associated with this region decoder, and mark the region decoder as 'dead', meaning it will throw an exception if decodeRegion(), getWidth() or getHeight() is called. <br /><br />"
"android.graphics.BitmapRegionDecoder.FileDescriptor () "," Create a BitmapRegionDecoder from the file descriptor. <br /><br />"
"android.graphics.BitmapRegionDecoder.isRecycled () "," Returns true if this region decoder has been recycled. <br /><br />"
"android.graphics.BitmapRegionDecoder.newInstance (byte[] data, int offset, int length, boolean isShareable) "," Create a BitmapRegionDecoder from the specified byte array. <br /><br />"
"android.graphics.BitmapRegionDecoder.InputStream () "," Create a BitmapRegionDecoder from an input stream. <br /><br />"
"android.graphics.BitmapRegionDecoder.getWidth () "," Returns the original image's width <br /><br />"
"android.graphics.Camera.save () "," Saves the camera state. <br /><br />"
"android.graphics.Camera.rotate (float x, float y, float z) "," Applies a rotation transform around all three axis. <br /><br />"
"android.graphics.Camera.rotateX (float deg) "," Applies a rotation transform around the X axis. <br /><br />"
"android.graphics.Camera.restore () "," Restores the saved state, if any. <br /><br />"
"android.graphics.Camera.translate (float x, float y, float z) "," Applies a translation transform on all three axis. <br /><br />"
"android.graphics.Camera.setLocation (float x, float y, float z) "," Sets the location of the camera. <br /><br />"
"android.graphics.Camera.getLocationY () "," Gets the y location of the camera. <br /><br />"
"android.graphics.Camera.Canvas () "," Computes the matrix corresponding to the current transformation and applies it to the specified Canvas. <br /><br />"
"android.graphics.Camera.getLocationZ () "," Gets the z location of the camera. <br /><br />"
"android.graphics.Camera.rotateZ (float deg) "," Applies a rotation transform around the Z axis. <br /><br />"
"android.graphics.Camera.rotateY (float deg) "," Applies a rotation transform around the Y axis. <br /><br />"
"android.graphics.Camera.getLocationX () "," Gets the x location of the camera. <br /><br />"
"android.graphics.Camera.dotWithNormal (float dx, float dy, float dz) "," no description <br /><br />"
"android.graphics.Camera.Matrix () "," Computes the matrix corresponding to the current transformation and copies it to the supplied matrix object. <br /><br />"
"android.graphics.Canvas.isHardwareAccelerated () "," Indicates whether this Canvas uses hardware acceleration. <br /><br />"
"android.graphics.Canvas.setDensity (int density) "," Specifies the density for this Canvas' backing bitmap. <br /><br />"
"android.graphics.Canvas.clipRect (Rect) () "," This method was deprecated in API level 21. Unlike all other clip calls this API does not respect the current matrix. Use clipRect(Rect) as an alternative. <br /><br />"
"android.graphics.Canvas.drawRGB (int r, int g, int b) "," Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. <br /><br />"
"android.graphics.Canvas.save (int saveFlags) "," Based on saveFlags, can save the current matrix and clip onto a private stack. <br /><br />"
"android.graphics.Canvas.clipRect (float left, float top, float right, float bottom) "," Intersect the current clip with the specified rectangle, which is expressed in local coordinates. <br /><br />"
"android.graphics.Canvas.Matrix () "," Completely replace the current matrix with the specified matrix. <br /><br />"
"android.graphics.Canvas.RectF () "," This behaves the same as save(), but in addition it allocates and redirects drawing to an offscreen bitmap. <br /><br />"
"android.graphics.Canvas.Rect () "," Return the bounds of the current clip (in local coordinates) in the bounds parameter, and return true if it is non-empty. <br /><br />"
"android.graphics.Canvas.getMaximumBitmapHeight () "," Returns the maximum allowed height for bitmaps drawn with this canvas. <br /><br />"
"android.graphics.Canvas.Region.Op () "," Modify the current clip with the specified rectangle, which is expressed in local coordinates. <br /><br />"
"android.graphics.Canvas.PorterDuff.Mode () "," Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. <br /><br />"
"android.graphics.Canvas.getHeight () "," Returns the height of the current drawing layer <br /><br />"
"android.graphics.Canvas.translate (float dx, float dy) "," Preconcat the current matrix with the specified translation <br /><br />"
"android.graphics.Canvas.skew (float sx, float sy) "," Preconcat the current matrix with the specified skew. <br /><br />"
"android.graphics.Canvas.Canvas.EdgeType () "," Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. <br /><br />"
"android.graphics.Canvas.isOpaque () "," Return true if the device that the current layer draws into is opaque (i.e. <br /><br />"
"android.graphics.Canvas.saveLayerAlpha (float left, float top, float right, float bottom, int alpha, int saveFlags) "," Helper for saveLayerAlpha() that takes 4 values instead of a RectF. <br /><br />"
"android.graphics.Canvas.restoreToCount (int saveCount) "," Efficient way to pop any calls to save() that happened after the save count reached saveCount. <br /><br />"
"android.graphics.Canvas.getClipBounds () "," Retrieve the bounds of the current clip (in local coordinates). <br /><br />"
"android.graphics.Canvas.ALL_SAVE_FLAG (float left, float top, float right, float bottom, int alpha) "," Helper for saveLayerAlpha(left, top, right, bottom, alpha, ALL_SAVE_FLAG) <br /><br />"
"android.graphics.Canvas.getSaveCount () "," Returns the number of matrix/clip states on the Canvas' private stack. <br /><br />"
"android.graphics.Canvas.getDensity () "," Returns the target density of the canvas. <br /><br />"
"android.graphics.Canvas.getWidth () "," Returns the width of the current drawing layer <br /><br />"
"android.graphics.Canvas.getMaximumBitmapWidth () "," Returns the maximum allowed width for bitmaps drawn with this canvas. <br /><br />"
"android.graphics.Canvas.Path () "," Intersect the current clip with the specified path. <br /><br />"
"android.graphics.Canvas.getMatrix () "," Return a new matrix with a copy of the canvas' current transformation matrix. <br /><br />"
"android.graphics.Canvas.ALL_SAVE_FLAG () "," Convenience for saveLayerAlpha(bounds, alpha, ALL_SAVE_FLAG) <br /><br />"
"android.graphics.Canvas.rotate (float degrees, float px, float py) "," Preconcat the current matrix with the specified rotation. <br /><br />"
"android.graphics.Canvas.hardware accelerated () "," This method was deprecated in API level 21. Usage with a hardware accelerated canvas requires an internal copy of color buffer contents every time this method is called. Using a Bitmap avoids this copy, and allows the application to more explicitly control the lifetime and copies of pixel data. <br /><br />"
"android.graphics.Canvas.drawARGB (int a, int r, int g, int b) "," Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. <br /><br />"
"android.graphics.Canvas.rotate (float degrees) "," Preconcat the current matrix with the specified rotation. <br /><br />"
"android.graphics.Canvas.clipRect (int left, int top, int right, int bottom) "," Intersect the current clip with the specified rectangle, which is expressed in local coordinates. <br /><br />"
"android.graphics.Canvas.DrawFilter () "," no description <br /><br />"
"android.graphics.Canvas.Paint () "," Helper version of saveLayer() that takes 4 values rather than a RectF. <br /><br />"
"android.graphics.Canvas.save () "," Saves the current matrix and clip onto a private stack. <br /><br />"
"android.graphics.Canvas.restore () "," This call balances a previous call to save(), and is used to remove all modifications to the matrix/clip state since the last save call. <br /><br />"
"android.graphics.Canvas.scale (float sx, float sy, float px, float py) "," Preconcat the current matrix with the specified scale. <br /><br />"
"android.graphics.Canvas.scale (float sx, float sy) "," Preconcat the current matrix with the specified scale. <br /><br />"
"android.graphics.Canvas.Picture () "," Save the canvas state, draw the picture, and restore the canvas state. <br /><br />"
"android.graphics.Canvas.getDrawFilter () "," no description <br /><br />"
"android.graphics.Canvas.drawColor (int color) "," Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. <br /><br />"
"android.graphics.Canvas.Bitmap () "," Specify a bitmap for the canvas to draw into. <br /><br />"
"android.graphics.Color.String () "," Parse the color string, and return the corresponding color-int. <br /><br />"
"android.graphics.Color.green (int color) "," Return the green component of a color int. <br /><br />"
"android.graphics.Color.RGBToHSV (int red, int green, int blue, float[] hsv) "," Convert RGB components to HSV. <br /><br />"
"android.graphics.Color.rgb (int red, int green, int blue) "," Return a color-int from red, green, blue components. <br /><br />"
"android.graphics.Color.alpha (int color) "," Return the alpha component of a color int. <br /><br />"
"android.graphics.Color.red (int color) "," Return the red component of a color int. <br /><br />"
"android.graphics.Color.HSVToColor (int alpha, float[] hsv) "," Convert HSV components to an ARGB color. <br /><br />"
"android.graphics.Color.blue (int color) "," Return the blue component of a color int. <br /><br />"
"android.graphics.Color.HSVToColor (float[] hsv) "," Convert HSV components to an ARGB color. <br /><br />"
"android.graphics.Color.colorToHSV (int color, float[] hsv) "," Convert the argb color to its HSV components. <br /><br />"
"android.graphics.Color.argb (int alpha, int red, int green, int blue) "," Return a color-int from alpha, red, green, blue components. <br /><br />"
"android.graphics.ColorMatrix.setYUV2RGB () "," Set the matrix to convert from YUV to RGB <br /><br />"
"android.graphics.ColorMatrix.ColorMatrix () "," Set this colormatrix to the concatenation of the two specified colormatrices, such that the resulting colormatrix has the same effect as applying matB and then applying matA. <br /><br />"
"android.graphics.ColorMatrix.setSaturation (float sat) "," Set the matrix to affect the saturation of colors. <br /><br />"
"android.graphics.ColorMatrix.getArray () "," Return the array of floats representing this colormatrix. <br /><br />"
"android.graphics.ColorMatrix.setRGB2YUV () "," Set the matrix to convert RGB to YUV <br /><br />"
"android.graphics.ColorMatrix.set (float[] src) "," Assign the array of floats into this matrix, copying all of its values. <br /><br />"
"android.graphics.ColorMatrix.reset () "," Set this colormatrix to identity:  [ 1 0 0 0 0 - red vector 0 1 0 0 0 - green vector 0 0 1 0 0 - blue vector 0 0 0 1 0 ] - alpha vector <br /><br />"
"android.graphics.ColorMatrix.setScale (float rScale, float gScale, float bScale, float aScale) "," Set this colormatrix to scale by the specified values. <br /><br />"
"android.graphics.ColorMatrix.setRotate (int axis, float degrees) "," Set the rotation on a color axis by the specified values. <br /><br />"
"android.graphics.drawable.Animatable.stop () "," Stops the drawable's animation. <br /><br />"
"android.graphics.drawable.Animatable.isRunning () "," Indicates whether the animation is running. <br /><br />"
"android.graphics.drawable.Animatable.start () "," Starts the drawable's animation. <br /><br />"
"android.graphics.drawable.AnimatedStateListDrawable.Drawable () "," Add a new drawable to the set of keyframes. <br /><br />"
"android.graphics.drawable.AnimatedStateListDrawable.isStateful () "," Indicates whether this drawable will change its appearance based on state. <br /><br />"
"android.graphics.drawable.AnimatedStateListDrawable.setVisible (boolean visible, boolean restart) "," Set whether this Drawable is visible. <br /><br />"
"android.graphics.drawable.AnimatedStateListDrawable.jumpToCurrentState () "," If this Drawable does transition animations between states, ask that it immediately jump to the current state and skip any active animations. <br /><br />"
"android.graphics.drawable.AnimatedStateListDrawable.Resources.Theme () "," Inflate this Drawable from an XML resource optionally styled by a theme. <br /><br />"
"android.graphics.drawable.AnimatedStateListDrawable.mutate () "," Make this drawable mutable. <br /><br />"
"android.graphics.drawable.AnimatedStateListDrawable.addTransition (int fromId, int toId, T transition, boolean reversible) "," Adds a new transition between keyframes. <br /><br />"
"android.graphics.drawable.AnimatedVectorDrawable.getChangingConfigurations () "," Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created. <br /><br />"
"android.graphics.drawable.AnimatedVectorDrawable.getOpacity () "," Return the opacity/transparency of this Drawable. <br /><br />"
"android.graphics.drawable.AnimatedVectorDrawable.getIntrinsicWidth () "," Return the intrinsic width of the underlying drawable object. <br /><br />"
"android.graphics.drawable.AnimatedVectorDrawable.setAlpha (int alpha) "," Specify an alpha value for the drawable. <br /><br />"
"android.graphics.drawable.AnimatedVectorDrawable.Canvas () "," Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter). <br /><br />"
"android.graphics.drawable.AnimatedVectorDrawable.Drawable.ConstantState () "," Return a Drawable.ConstantState instance that holds the shared state of this Drawable. <br /><br />"
"android.graphics.drawable.AnimatedVectorDrawable.start () "," Starts the drawable's animation. <br /><br />"
"android.graphics.drawable.AnimatedVectorDrawable.isStateful () "," Indicates whether this drawable will change its appearance based on state. <br /><br />"
"android.graphics.drawable.AnimatedVectorDrawable.setVisible (boolean visible, boolean restart) "," Set whether this Drawable is visible. <br /><br />"
"android.graphics.drawable.AnimatedVectorDrawable.getIntrinsicHeight () "," Return the intrinsic height of the underlying drawable object. <br /><br />"
"android.graphics.drawable.AnimatedVectorDrawable.canApplyTheme () "," no description <br /><br />"
"android.graphics.drawable.AnimatedVectorDrawable.ColorStateList () "," Specifies a tint for this drawable as a color state list. <br /><br />"
"android.graphics.drawable.AnimatedVectorDrawable.setHotspot (float x, float y) "," Specifies the hotspot's location within the drawable. <br /><br />"
"android.graphics.drawable.AnimatedVectorDrawable.Outline () "," Called to get the drawable to populate the Outline that defines its drawing area. <br /><br />"
"android.graphics.drawable.AnimatedVectorDrawable.stop () "," Stops the drawable's animation. <br /><br />"
"android.graphics.drawable.AnimatedVectorDrawable.PorterDuff.Mode () "," Specifies a tint blending mode for this drawable. <br /><br />"
"android.graphics.drawable.AnimatedVectorDrawable.isRunning () "," Indicates whether the animation is running. <br /><br />"
"android.graphics.drawable.AnimatedVectorDrawable.ColorFilter () "," Specify an optional color filter for the drawable. <br /><br />"
"android.graphics.drawable.AnimatedVectorDrawable.Resources.Theme () "," Inflate this Drawable from an XML resource optionally styled by a theme. <br /><br />"
"android.graphics.drawable.AnimatedVectorDrawable.setHotspotBounds (int left, int top, int right, int bottom) "," Sets the bounds to which the hotspot is constrained, if they should be different from the drawable bounds. <br /><br />"
"android.graphics.drawable.AnimatedVectorDrawable.getAlpha () "," Gets the current alpha value for the drawable. <br /><br />"
"android.graphics.drawable.AnimatedVectorDrawable.mutate () "," Make this drawable mutable. <br /><br />"
"android.graphics.drawable.AnimationDrawable.setOneShot (boolean oneShot) "," Sets whether the animation should play once or repeat. <br /><br />"
"android.graphics.drawable.AnimationDrawable.start () "," Starts the animation, looping if necessary. <br /><br />"
"android.graphics.drawable.AnimationDrawable.setVisible (boolean visible, boolean restart) "," Sets whether this AnimationDrawable is visible. <br /><br />"
"android.graphics.drawable.AnimationDrawable.getDuration (int i) "," no description <br /><br />"
"android.graphics.drawable.AnimationDrawable.getFrame (int index) "," no description <br /><br />"
"android.graphics.drawable.AnimationDrawable.isOneShot () "," no description <br /><br />"
"android.graphics.drawable.AnimationDrawable.stop () "," Stops the animation. <br /><br />"
"android.graphics.drawable.AnimationDrawable.Drawable () "," Add a frame to the animation <br /><br />"
"android.graphics.drawable.AnimationDrawable.isRunning () "," Indicates whether the animation is currently running or not. <br /><br />"
"android.graphics.drawable.AnimationDrawable.run () "," This method exists for implementation purpose only and should not be called directly. <br /><br />"
"android.graphics.drawable.AnimationDrawable.Drawable.Callback () "," Use the current Drawable.Callback implementation to have this Drawable unscheduled. <br /><br />"
"android.graphics.drawable.AnimationDrawable.Resources.Theme () "," Inflate this Drawable from an XML resource optionally styled by a theme. <br /><br />"
"android.graphics.drawable.AnimationDrawable.getNumberOfFrames () "," no description <br /><br />"
"android.graphics.drawable.AnimationDrawable.mutate () "," Make this drawable mutable. <br /><br />"
"android.graphics.drawable.BitmapDrawable.getIntrinsicWidth () "," Return the intrinsic width of the underlying drawable object. <br /><br />"
"android.graphics.drawable.BitmapDrawable.setAlpha (int alpha) "," Specify an alpha value for the drawable. <br /><br />"
"android.graphics.drawable.BitmapDrawable.setTargetDensity (int density) "," Set the density at which this drawable will be rendered. <br /><br />"
"android.graphics.drawable.BitmapDrawable.isStateful () "," Indicates whether this drawable will change its appearance based on state. <br /><br />"
"android.graphics.drawable.BitmapDrawable.hasMipMap () "," Indicates whether the mipmap hint is enabled on this drawable's bitmap. <br /><br />"
"android.graphics.drawable.BitmapDrawable.canApplyTheme () "," no description <br /><br />"
"android.graphics.drawable.BitmapDrawable.hasAntiAlias () "," Indicates whether anti-aliasing is enabled for this drawable. <br /><br />"
"android.graphics.drawable.BitmapDrawable.setGravity (int gravity) "," Set the gravity used to position/stretch the bitmap within its bounds. <br /><br />"
"android.graphics.drawable.BitmapDrawable.ColorStateList () "," Specifies a tint for this drawable as a color state list. <br /><br />"
"android.graphics.drawable.BitmapDrawable.Outline () "," Called to get the drawable to populate the Outline that defines its drawing area. <br /><br />"
"android.graphics.drawable.BitmapDrawable.PorterDuff.Mode () "," Specifies a tint blending mode for this drawable. <br /><br />"
"android.graphics.drawable.BitmapDrawable.isAutoMirrored () "," Tells if this Drawable will be automatically mirrored when its layout direction is RTL right-to-left. <br /><br />"
"android.graphics.drawable.BitmapDrawable.setAutoMirrored (boolean mirrored) "," Set whether this Drawable is automatically mirrored when its layout direction is RTL (right-to left). <br /><br />"
"android.graphics.drawable.BitmapDrawable.getAlpha () "," Gets the current alpha value for the drawable. <br /><br />"
"android.graphics.drawable.BitmapDrawable.Shader.TileMode () "," Sets the repeat behavior of this drawable on the Y axis. <br /><br />"
"android.graphics.drawable.BitmapDrawable.getOpacity () "," Return the opacity/transparency of this Drawable. <br /><br />"
"android.graphics.drawable.BitmapDrawable.getChangingConfigurations () "," Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created. <br /><br />"
"android.graphics.drawable.BitmapDrawable.setAntiAlias (boolean aa) "," Enables or disables anti-aliasing for this drawable. <br /><br />"
"android.graphics.drawable.BitmapDrawable.Drawable.ConstantState () "," Return a Drawable.ConstantState instance that holds the shared state of this Drawable. <br /><br />"
"android.graphics.drawable.BitmapDrawable.Canvas () "," Set the density scale at which this drawable will be rendered. <br /><br />"
"android.graphics.drawable.BitmapDrawable.getTileModeX () "," Indicates the repeat behavior of this drawable on the X axis. <br /><br />"
"android.graphics.drawable.BitmapDrawable.getIntrinsicHeight () "," Return the intrinsic height of the underlying drawable object. <br /><br />"
"android.graphics.drawable.BitmapDrawable.getBitmap () "," Returns the bitmap used by this drawable to render. <br /><br />"
"android.graphics.drawable.BitmapDrawable.getPaint () "," Returns the paint used to render this drawable. <br /><br />"
"android.graphics.drawable.BitmapDrawable.setDither (boolean dither) "," Set to true to have the drawable dither its colors when drawn to a device with fewer than 8-bits per color component. <br /><br />"
"android.graphics.drawable.BitmapDrawable.getTileModeY () "," Indicates the repeat behavior of this drawable on the Y axis. <br /><br />"
"android.graphics.drawable.BitmapDrawable.setFilterBitmap (boolean filter) "," Set to true to have the drawable filter its bitmap when scaled or rotated (for drawables that use bitmaps). <br /><br />"
"android.graphics.drawable.BitmapDrawable.setMipMap (boolean mipMap) "," Enables or disables the mipmap hint for this drawable's bitmap. <br /><br />"
"android.graphics.drawable.BitmapDrawable.getGravity () "," Get the gravity used to position/stretch the bitmap within its bounds. <br /><br />"
"android.graphics.drawable.BitmapDrawable.ColorFilter () "," Specify an optional color filter for the drawable. <br /><br />"
"android.graphics.drawable.BitmapDrawable.getColorFilter () "," Returns the current color filter, or null if none set. <br /><br />"
"android.graphics.drawable.BitmapDrawable.Resources.Theme () "," Inflate this Drawable from an XML resource optionally styled by a theme. <br /><br />"
"android.graphics.drawable.BitmapDrawable.DisplayMetrics () "," Set the density scale at which this drawable will be rendered. <br /><br />"
"android.graphics.drawable.BitmapDrawable.mutate () "," A mutable BitmapDrawable still shares its Bitmap with any other Drawable that comes from the same resource. <br /><br />"
"android.graphics.drawable.ClipDrawable.getChangingConfigurations () "," Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created. <br /><br />"
"android.graphics.drawable.ClipDrawable.getOpacity () "," Return the opacity/transparency of this Drawable. <br /><br />"
"android.graphics.drawable.ClipDrawable.getIntrinsicWidth () "," Return the intrinsic width of the underlying drawable object. <br /><br />"
"android.graphics.drawable.ClipDrawable.setAlpha (int alpha) "," Specify an alpha value for the drawable. <br /><br />"
"android.graphics.drawable.ClipDrawable.scheduleDrawable (Drawable, Runnable, long) () "," A Drawable can call this to unschedule an action previously scheduled with scheduleDrawable(Drawable, Runnable, long). <br /><br />"
"android.graphics.drawable.ClipDrawable.Canvas () "," Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter). <br /><br />"
"android.graphics.drawable.ClipDrawable.Drawable.ConstantState () "," Return a Drawable.ConstantState instance that holds the shared state of this Drawable. <br /><br />"
"android.graphics.drawable.ClipDrawable.isStateful () "," Indicates whether this drawable will change its appearance based on state. <br /><br />"
"android.graphics.drawable.ClipDrawable.setVisible (boolean visible, boolean restart) "," Set whether this Drawable is visible. <br /><br />"
"android.graphics.drawable.ClipDrawable.getIntrinsicHeight () "," Return the intrinsic height of the underlying drawable object. <br /><br />"
"android.graphics.drawable.ClipDrawable.canApplyTheme () "," no description <br /><br />"
"android.graphics.drawable.ClipDrawable.Rect () "," Return in padding the insets suggested by this Drawable for placing content inside the drawable's bounds. <br /><br />"
"android.graphics.drawable.ClipDrawable.ColorStateList () "," Specifies a tint for this drawable as a color state list. <br /><br />"
"android.graphics.drawable.ClipDrawable.PorterDuff.Mode () "," Specifies a tint blending mode for this drawable. <br /><br />"
"android.graphics.drawable.ClipDrawable.Drawable () "," Called when the drawable needs to be redrawn. <br /><br />"
"android.graphics.drawable.ClipDrawable.ColorFilter () "," Specify an optional color filter for the drawable. <br /><br />"
"android.graphics.drawable.ClipDrawable.Resources.Theme () "," Inflate this Drawable from an XML resource optionally styled by a theme. <br /><br />"
"android.graphics.drawable.ClipDrawable.getAlpha () "," Gets the current alpha value for the drawable. <br /><br />"
"android.graphics.drawable.ClipDrawable.mutate () "," Make this drawable mutable. <br /><br />"
"android.graphics.drawable.ClipDrawable.Runnable () "," A Drawable can call this to schedule the next frame of its animation. <br /><br />"
"android.graphics.drawable.ColorDrawable.getChangingConfigurations () "," Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created. <br /><br />"
"android.graphics.drawable.ColorDrawable.getOpacity () "," Return the opacity/transparency of this Drawable. <br /><br />"
"android.graphics.drawable.ColorDrawable.setAlpha (int alpha) "," Sets the color's alpha value. <br /><br />"
"android.graphics.drawable.ColorDrawable.Canvas () "," Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter). <br /><br />"
"android.graphics.drawable.ColorDrawable.Drawable.ConstantState () "," Return a Drawable.ConstantState instance that holds the shared state of this Drawable. <br /><br />"
"android.graphics.drawable.ColorDrawable.getColor () "," Gets the drawable's color value. <br /><br />"
"android.graphics.drawable.ColorDrawable.isStateful () "," Indicates whether this drawable will change its appearance based on state. <br /><br />"
"android.graphics.drawable.ColorDrawable.setColor (int color) "," Sets the drawable's color value. <br /><br />"
"android.graphics.drawable.ColorDrawable.canApplyTheme () "," no description <br /><br />"
"android.graphics.drawable.ColorDrawable.ColorStateList () "," Specifies a tint for this drawable as a color state list. <br /><br />"
"android.graphics.drawable.ColorDrawable.Outline () "," Called to get the drawable to populate the Outline that defines its drawing area. <br /><br />"
"android.graphics.drawable.ColorDrawable.PorterDuff.Mode () "," Specifies a tint blending mode for this drawable. <br /><br />"
"android.graphics.drawable.ColorDrawable.ColorFilter () "," Sets the color filter applied to this color. <br /><br />"
"android.graphics.drawable.ColorDrawable.Resources.Theme () "," Inflate this Drawable from an XML resource optionally styled by a theme. <br /><br />"
"android.graphics.drawable.ColorDrawable.getAlpha () "," Returns the alpha value of this drawable's color. <br /><br />"
"android.graphics.drawable.ColorDrawable.mutate () "," A mutable BitmapDrawable still shares its Bitmap with any other Drawable that comes from the same resource. <br /><br />"
"android.graphics.drawable.Drawable.Callback.Drawable () "," Called when the drawable needs to be redrawn. <br /><br />"
"android.graphics.drawable.Drawable.Callback.scheduleDrawable (Drawable, Runnable, long) () "," A Drawable can call this to unschedule an action previously scheduled with scheduleDrawable(Drawable, Runnable, long). <br /><br />"
"android.graphics.drawable.Drawable.Callback.Runnable () "," A Drawable can call this to schedule the next frame of its animation. <br /><br />"
"android.graphics.drawable.Drawable.ConstantState.Resources () "," Create a new Drawable instance from its constant state. <br /><br />"
"android.graphics.drawable.Drawable.ConstantState.newDrawable () "," Create a new drawable without supplying resources the caller is running in. <br /><br />"
"android.graphics.drawable.Drawable.ConstantState.getChangingConfigurations () "," Return a bit mask of configuration changes that will impact this drawable (and thus require completely reloading it). <br /><br />"
"android.graphics.drawable.Drawable.ConstantState.Resources.Theme () "," Create a new Drawable instance from its constant state. <br /><br />"
"android.graphics.drawable.Drawable.ConstantState.canApplyTheme () "," Return whether this constant state can have a theme applied. <br /><br />"
"android.graphics.drawable.Drawable.AttributeSet () "," Inflate this Drawable from an XML resource. <br /><br />"
"android.graphics.drawable.Drawable.getIntrinsicWidth () "," Return the intrinsic width of the underlying drawable object. <br /><br />"
"android.graphics.drawable.Drawable.setAlpha (int alpha) "," Specify an alpha value for the drawable. <br /><br />"
"android.graphics.drawable.Drawable.isVisible () "," no description <br /><br />"
"android.graphics.drawable.Drawable.isStateful () "," Indicates whether this drawable will change its appearance based on state. <br /><br />"
"android.graphics.drawable.Drawable.jumpToCurrentState () "," If this Drawable does transition animations between states, ask that it immediately jump to the current state and skip any active animations. <br /><br />"
"android.graphics.drawable.Drawable.copyBounds () "," Return a copy of the drawable's bounds in a new Rect. <br /><br />"
"android.graphics.drawable.Drawable.setLevel (int level) "," Specify the level for the drawable. <br /><br />"
"android.graphics.drawable.Drawable.canApplyTheme () "," no description <br /><br />"
"android.graphics.drawable.Drawable.setBounds (int left, int top, int right, int bottom) "," Specify a bounding rectangle for the Drawable. <br /><br />"
"android.graphics.drawable.Drawable.Rect () "," Specify a bounding rectangle for the Drawable. <br /><br />"
"android.graphics.drawable.Drawable.ColorStateList () "," Specifies a tint for this drawable as a color state list. <br /><br />"
"android.graphics.drawable.Drawable.setHotspot (float x, float y) "," Specifies the hotspot's location within the drawable. <br /><br />"
"android.graphics.drawable.Drawable.Outline () "," Called to get the drawable to populate the Outline that defines its drawing area. <br /><br />"
"android.graphics.drawable.Drawable.BitmapFactory.Options () "," Create a drawable from an inputstream, using the given resources and value to determine density information. <br /><br />"
"android.graphics.drawable.Drawable.setState (int[] stateSet) "," Specify a set of states for the drawable. <br /><br />"
"android.graphics.drawable.Drawable.PorterDuff.Mode () "," Specifies a tint blending mode for this drawable. <br /><br />"
"android.graphics.drawable.Drawable.getCurrent () "," no description <br /><br />"
"android.graphics.drawable.Drawable.getLevel () "," Retrieve the current level. <br /><br />"
"android.graphics.drawable.Drawable.setChangingConfigurations (int configs) "," Set a mask of the configuration parameters for which this drawable may change, requiring that it be re-created. <br /><br />"
"android.graphics.drawable.Drawable.isAutoMirrored () "," Tells if this Drawable will be automatically mirrored when its layout direction is RTL right-to-left. <br /><br />"
"android.graphics.drawable.Drawable.setAutoMirrored (boolean mirrored) "," Set whether this Drawable is automatically mirrored when its layout direction is RTL (right-to left). <br /><br />"
"android.graphics.drawable.Drawable.getDirtyBounds () "," Return the drawable's dirty bounds Rect. <br /><br />"
"android.graphics.drawable.Drawable.getAlpha () "," Gets the current alpha value for the drawable. <br /><br />"
"android.graphics.drawable.Drawable.String () "," Create a drawable from an inputstream <br /><br />"
"android.graphics.drawable.Drawable.getChangingConfigurations () "," Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created. <br /><br />"
"android.graphics.drawable.Drawable.getOpacity () "," Return the opacity/transparency of this Drawable. <br /><br />"
"android.graphics.drawable.Drawable.getMinimumWidth () "," Returns the minimum width suggested by this Drawable. <br /><br />"
"android.graphics.drawable.Drawable.Canvas () "," Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter). <br /><br />"
"android.graphics.drawable.Drawable.Drawable.ConstantState () "," Return a Drawable.ConstantState instance that holds the shared state of this Drawable. <br /><br />"
"android.graphics.drawable.Drawable.setTint (int tint) "," Specifies a tint for this drawable. <br /><br />"
"android.graphics.drawable.Drawable.setVisible (boolean visible, boolean restart) "," Set whether this Drawable is visible. <br /><br />"
"android.graphics.drawable.Drawable.getIntrinsicHeight () "," Return the intrinsic height of the underlying drawable object. <br /><br />"
"android.graphics.drawable.Drawable.setDither (boolean dither) "," Set to true to have the drawable dither its colors when drawn to a device with fewer than 8-bits per color component. <br /><br />"
"android.graphics.drawable.Drawable.clearColorFilter () "," Removes the color filter for this drawable. <br /><br />"
"android.graphics.drawable.Drawable.setFilterBitmap (boolean filter) "," Set to true to have the drawable filter its bitmap when scaled or rotated (for drawables that use bitmaps). <br /><br />"
"android.graphics.drawable.Drawable.ColorFilter () "," Specify an optional color filter for the drawable. <br /><br />"
"android.graphics.drawable.Drawable.XmlPullParser () "," Create a drawable from an XML document. <br /><br />"
"android.graphics.drawable.Drawable.Drawable.Callback () "," Use the current Drawable.Callback implementation to have this Drawable unscheduled. <br /><br />"
"android.graphics.drawable.Drawable.getTransparentRegion () "," Returns a Region representing the part of the Drawable that is completely transparent. <br /><br />"
"android.graphics.drawable.Drawable.getBounds () "," Return the drawable's bounds Rect. <br /><br />"
"android.graphics.drawable.Drawable.Resources.Theme () "," Inflate this Drawable from an XML resource optionally styled by a theme. <br /><br />"
"android.graphics.drawable.Drawable.getColorFilter () "," Returns the current color filter, or null if none set. <br /><br />"
"android.graphics.drawable.Drawable.setHotspotBounds (int left, int top, int right, int bottom) "," Sets the bounds to which the hotspot is constrained, if they should be different from the drawable bounds. <br /><br />"
"android.graphics.drawable.Drawable.mutate () "," Make this drawable mutable. <br /><br />"
"android.graphics.drawable.Drawable.state_selected () "," Describes the current state, as a union of primitve states, such as state_focused, state_selected, etc. <br /><br />"
"android.graphics.drawable.Drawable.getMinimumHeight () "," Returns the minimum height suggested by this Drawable. <br /><br />"
"android.graphics.drawable.Drawable.resolveOpacity (int op1, int op2) "," Return the appropriate opacity value for two source opacities. <br /><br />"
"android.graphics.drawable.DrawableContainer.DrawableContainerState.getOpacity () "," no description <br /><br />"
"android.graphics.drawable.DrawableContainer.DrawableContainerState.getChangingConfigurations () "," Return a bit mask of configuration changes that will impact this drawable (and thus require completely reloading it). <br /><br />"
"android.graphics.drawable.DrawableContainer.DrawableContainerState.getExitFadeDuration () "," no description <br /><br />"
"android.graphics.drawable.DrawableContainer.DrawableContainerState.isConstantSize () "," no description <br /><br />"
"android.graphics.drawable.DrawableContainer.DrawableContainerState.isStateful () "," no description <br /><br />"
"android.graphics.drawable.DrawableContainer.DrawableContainerState.getChild (int index) "," no description <br /><br />"
"android.graphics.drawable.DrawableContainer.DrawableContainerState.canConstantState () "," no description <br /><br />"
"android.graphics.drawable.DrawableContainer.DrawableContainerState.setConstantSize (boolean constant) "," no description <br /><br />"
"android.graphics.drawable.DrawableContainer.DrawableContainerState.growArray (int oldSize, int newSize) "," no description <br /><br />"
"android.graphics.drawable.DrawableContainer.DrawableContainerState.canApplyTheme () "," Return whether this constant state can have a theme applied. <br /><br />"
"android.graphics.drawable.DrawableContainer.DrawableContainerState.getConstantHeight () "," no description <br /><br />"
"android.graphics.drawable.DrawableContainer.DrawableContainerState.getConstantMinimumHeight () "," no description <br /><br />"
"android.graphics.drawable.DrawableContainer.DrawableContainerState.getChildren () "," no description <br /><br />"
"android.graphics.drawable.DrawableContainer.DrawableContainerState.getConstantPadding () "," no description <br /><br />"
"android.graphics.drawable.DrawableContainer.DrawableContainerState.getConstantMinimumWidth () "," no description <br /><br />"
"android.graphics.drawable.DrawableContainer.DrawableContainerState.Drawable () "," no description <br /><br />"
"android.graphics.drawable.DrawableContainer.DrawableContainerState.setExitFadeDuration (int duration) "," no description <br /><br />"
"android.graphics.drawable.DrawableContainer.DrawableContainerState.getChildCount () "," no description <br /><br />"
"android.graphics.drawable.DrawableContainer.DrawableContainerState.getEnterFadeDuration () "," no description <br /><br />"
"android.graphics.drawable.DrawableContainer.DrawableContainerState.setEnterFadeDuration (int duration) "," no description <br /><br />"
"android.graphics.drawable.DrawableContainer.DrawableContainerState.setVariablePadding (boolean variable) "," A boolean value indicating whether to use the maximum padding value of all frames in the set (false), or to use the padding value of the frame being shown (true). <br /><br />"
"android.graphics.drawable.DrawableContainer.DrawableContainerState.getConstantWidth () "," no description <br /><br />"
"android.graphics.drawable.DrawableContainer.getIntrinsicWidth () "," Return the intrinsic width of the underlying drawable object. <br /><br />"
"android.graphics.drawable.DrawableContainer.setAlpha (int alpha) "," Specify an alpha value for the drawable. <br /><br />"
"android.graphics.drawable.DrawableContainer.scheduleDrawable (Drawable, Runnable, long) () "," A Drawable can call this to unschedule an action previously scheduled with scheduleDrawable(Drawable, Runnable, long). <br /><br />"
"android.graphics.drawable.DrawableContainer.isStateful () "," Indicates whether this drawable will change its appearance based on state. <br /><br />"
"android.graphics.drawable.DrawableContainer.jumpToCurrentState () "," If this Drawable does transition animations between states, ask that it immediately jump to the current state and skip any active animations. <br /><br />"
"android.graphics.drawable.DrawableContainer.canApplyTheme () "," no description <br /><br />"
"android.graphics.drawable.DrawableContainer.Rect () "," Return in padding the insets suggested by this Drawable for placing content inside the drawable's bounds. <br /><br />"
"android.graphics.drawable.DrawableContainer.ColorStateList () "," Specifies a tint for this drawable as a color state list. <br /><br />"
"android.graphics.drawable.DrawableContainer.setHotspot (float x, float y) "," Specifies the hotspot's location within the drawable. <br /><br />"
"android.graphics.drawable.DrawableContainer.Outline () "," Called to get the drawable to populate the Outline that defines its drawing area. <br /><br />"
"android.graphics.drawable.DrawableContainer.PorterDuff.Mode () "," Specifies a tint blending mode for this drawable. <br /><br />"
"android.graphics.drawable.DrawableContainer.getCurrent () "," no description <br /><br />"
"android.graphics.drawable.DrawableContainer.Drawable () "," Called when the drawable needs to be redrawn. <br /><br />"
"android.graphics.drawable.DrawableContainer.isAutoMirrored () "," Tells if this Drawable will be automatically mirrored when its layout direction is RTL right-to-left. <br /><br />"
"android.graphics.drawable.DrawableContainer.selectDrawable (int idx) "," no description <br /><br />"
"android.graphics.drawable.DrawableContainer.setExitFadeDuration (int ms) "," Change the global fade duration when a new drawable is leaving the scene. <br /><br />"
"android.graphics.drawable.DrawableContainer.setAutoMirrored (boolean mirrored) "," Set whether this Drawable is automatically mirrored when its layout direction is RTL (right-to left). <br /><br />"
"android.graphics.drawable.DrawableContainer.getAlpha () "," Gets the current alpha value for the drawable. <br /><br />"
"android.graphics.drawable.DrawableContainer.getOpacity () "," Return the opacity/transparency of this Drawable. <br /><br />"
"android.graphics.drawable.DrawableContainer.getChangingConfigurations () "," Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created. <br /><br />"
"android.graphics.drawable.DrawableContainer.getMinimumWidth () "," Returns the minimum width suggested by this Drawable. <br /><br />"
"android.graphics.drawable.DrawableContainer.Drawable.ConstantState () "," Return a Drawable.ConstantState instance that holds the shared state of this Drawable. <br /><br />"
"android.graphics.drawable.DrawableContainer.Canvas () "," Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter). <br /><br />"
"android.graphics.drawable.DrawableContainer.setVisible (boolean visible, boolean restart) "," Set whether this Drawable is visible. <br /><br />"
"android.graphics.drawable.DrawableContainer.getIntrinsicHeight () "," Return the intrinsic height of the underlying drawable object. <br /><br />"
"android.graphics.drawable.DrawableContainer.setDither (boolean dither) "," Set to true to have the drawable dither its colors when drawn to a device with fewer than 8-bits per color component. <br /><br />"
"android.graphics.drawable.DrawableContainer.setEnterFadeDuration (int ms) "," Change the global fade duration when a new drawable is entering the scene. <br /><br />"
"android.graphics.drawable.DrawableContainer.ColorFilter () "," Specify an optional color filter for the drawable. <br /><br />"
"android.graphics.drawable.DrawableContainer.Resources.Theme () "," Applies the specified theme to this Drawable and its children. <br /><br />"
"android.graphics.drawable.DrawableContainer.setHotspotBounds (int left, int top, int right, int bottom) "," Sets the bounds to which the hotspot is constrained, if they should be different from the drawable bounds. <br /><br />"
"android.graphics.drawable.DrawableContainer.getMinimumHeight () "," Returns the minimum height suggested by this Drawable. <br /><br />"
"android.graphics.drawable.DrawableContainer.mutate () "," Make this drawable mutable. <br /><br />"
"android.graphics.drawable.DrawableContainer.Runnable () "," A Drawable can call this to schedule the next frame of its animation. <br /><br />"
"android.graphics.drawable.GradientDrawable.setStroke (int width, int color) "," Set the stroke width and color for the drawable. <br /><br />"
"android.graphics.drawable.GradientDrawable.getIntrinsicWidth () "," Return the intrinsic width of the underlying drawable object. <br /><br />"
"android.graphics.drawable.GradientDrawable.setAlpha (int alpha) "," Specify an alpha value for the drawable. <br /><br />"
"android.graphics.drawable.GradientDrawable.getOrientation () "," Returns the orientation of the gradient defined in this drawable. <br /><br />"
"android.graphics.drawable.GradientDrawable.isStateful () "," Indicates whether this drawable will change its appearance based on state. <br /><br />"
"android.graphics.drawable.GradientDrawable.setColors (int[] colors) "," Sets the colors used to draw the gradient. <br /><br />"
"android.graphics.drawable.GradientDrawable.canApplyTheme () "," no description <br /><br />"
"android.graphics.drawable.GradientDrawable.Rect () "," Return in padding the insets suggested by this Drawable for placing content inside the drawable's bounds. <br /><br />"
"android.graphics.drawable.GradientDrawable.setStroke (int width, int color, float dashWidth, float dashGap) "," Set the stroke width and color for the drawable. <br /><br />"
"android.graphics.drawable.GradientDrawable.Outline () "," Called to get the drawable to populate the Outline that defines its drawing area. <br /><br />"
"android.graphics.drawable.GradientDrawable.ColorStateList () "," Specifies a tint for this drawable as a color state list. <br /><br />"
"android.graphics.drawable.GradientDrawable.PorterDuff.Mode () "," Specifies a tint blending mode for this drawable. <br /><br />"
"android.graphics.drawable.GradientDrawable.setCornerRadius (float radius) "," Specify radius for the corners of the gradient. <br /><br />"
"android.graphics.drawable.GradientDrawable.setShape (int shape) "," Sets the type of shape used to draw the gradient. <br /><br />"
"android.graphics.drawable.GradientDrawable.setCornerRadii (float[] radii) "," Specify radii for each of the 4 corners. <br /><br />"
"android.graphics.drawable.GradientDrawable.getAlpha () "," Gets the current alpha value for the drawable. <br /><br />"
"android.graphics.drawable.GradientDrawable.setGradientCenter (float x, float y) "," Sets the center location of the gradient. <br /><br />"
"android.graphics.drawable.GradientDrawable.getOpacity () "," Return the opacity/transparency of this Drawable. <br /><br />"
"android.graphics.drawable.GradientDrawable.getChangingConfigurations () "," Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created. <br /><br />"
"android.graphics.drawable.GradientDrawable.setUseLevel (boolean useLevel) "," Sets whether or not this drawable will honor its level property. <br /><br />"
"android.graphics.drawable.GradientDrawable.setGradientRadius (float gradientRadius) "," Sets the radius of the gradient. <br /><br />"
"android.graphics.drawable.GradientDrawable.Drawable.ConstantState () "," Return a Drawable.ConstantState instance that holds the shared state of this Drawable. <br /><br />"
"android.graphics.drawable.GradientDrawable.Canvas () "," Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter). <br /><br />"
"android.graphics.drawable.GradientDrawable.getIntrinsicHeight () "," Return the intrinsic height of the underlying drawable object. <br /><br />"
"android.graphics.drawable.GradientDrawable.GradientDrawable.Orientation () "," Changes the orientation of the gradient defined in this drawable. <br /><br />"
"android.graphics.drawable.GradientDrawable.getGradientRadius () "," Returns the radius of the gradient in pixels. <br /><br />"
"android.graphics.drawable.GradientDrawable.setDither (boolean dither) "," Set to true to have the drawable dither its colors when drawn to a device with fewer than 8-bits per color component. <br /><br />"
"android.graphics.drawable.GradientDrawable.setSize (int width, int height) "," Sets the size of the shape drawn by this drawable. <br /><br />"
"android.graphics.drawable.GradientDrawable.setColor (int argb) "," Changes this drawable to use a single color instead of a gradient. <br /><br />"
"android.graphics.drawable.GradientDrawable.ColorFilter () "," Specify an optional color filter for the drawable. <br /><br />"
"android.graphics.drawable.GradientDrawable.setGradientType (int gradient) "," Sets the type of gradient used by this drawable.. <br /><br />"
"android.graphics.drawable.GradientDrawable.getColorFilter () "," Returns the current color filter, or null if none set. <br /><br />"
"android.graphics.drawable.GradientDrawable.Resources.Theme () "," Inflate this Drawable from an XML resource optionally styled by a theme. <br /><br />"
"android.graphics.drawable.GradientDrawable.mutate () "," Make this drawable mutable. <br /><br />"
"android.graphics.drawable.InsetDrawable.getChangingConfigurations () "," Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created. <br /><br />"
"android.graphics.drawable.InsetDrawable.getOpacity () "," Return the opacity/transparency of this Drawable. <br /><br />"
"android.graphics.drawable.InsetDrawable.getIntrinsicWidth () "," Return the intrinsic width of the underlying drawable object. <br /><br />"
"android.graphics.drawable.InsetDrawable.setAlpha (int alpha) "," Specify an alpha value for the drawable. <br /><br />"
"android.graphics.drawable.InsetDrawable.scheduleDrawable (Drawable, Runnable, long) () "," A Drawable can call this to unschedule an action previously scheduled with scheduleDrawable(Drawable, Runnable, long). <br /><br />"
"android.graphics.drawable.InsetDrawable.Canvas () "," Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter). <br /><br />"
"android.graphics.drawable.InsetDrawable.Drawable.ConstantState () "," Return a Drawable.ConstantState instance that holds the shared state of this Drawable. <br /><br />"
"android.graphics.drawable.InsetDrawable.isStateful () "," Indicates whether this drawable will change its appearance based on state. <br /><br />"
"android.graphics.drawable.InsetDrawable.getDrawable () "," Returns the drawable wrapped by this InsetDrawable. <br /><br />"
"android.graphics.drawable.InsetDrawable.setVisible (boolean visible, boolean restart) "," Set whether this Drawable is visible. <br /><br />"
"android.graphics.drawable.InsetDrawable.getIntrinsicHeight () "," Return the intrinsic height of the underlying drawable object. <br /><br />"
"android.graphics.drawable.InsetDrawable.canApplyTheme () "," no description <br /><br />"
"android.graphics.drawable.InsetDrawable.Rect () "," Return in padding the insets suggested by this Drawable for placing content inside the drawable's bounds. <br /><br />"
"android.graphics.drawable.InsetDrawable.ColorStateList () "," Specifies a tint for this drawable as a color state list. <br /><br />"
"android.graphics.drawable.InsetDrawable.setHotspot (float x, float y) "," Specifies the hotspot's location within the drawable. <br /><br />"
"android.graphics.drawable.InsetDrawable.Outline () "," Called to get the drawable to populate the Outline that defines its drawing area. <br /><br />"
"android.graphics.drawable.InsetDrawable.PorterDuff.Mode () "," Specifies a tint blending mode for this drawable. <br /><br />"
"android.graphics.drawable.InsetDrawable.Drawable () "," Called when the drawable needs to be redrawn. <br /><br />"
"android.graphics.drawable.InsetDrawable.ColorFilter () "," Specify an optional color filter for the drawable. <br /><br />"
"android.graphics.drawable.InsetDrawable.Resources.Theme () "," Inflate this Drawable from an XML resource optionally styled by a theme. <br /><br />"
"android.graphics.drawable.InsetDrawable.setHotspotBounds (int left, int top, int right, int bottom) "," Sets the bounds to which the hotspot is constrained, if they should be different from the drawable bounds. <br /><br />"
"android.graphics.drawable.InsetDrawable.getAlpha () "," Gets the current alpha value for the drawable. <br /><br />"
"android.graphics.drawable.InsetDrawable.mutate () "," Make this drawable mutable. <br /><br />"
"android.graphics.drawable.InsetDrawable.Runnable () "," A Drawable can call this to schedule the next frame of its animation. <br /><br />"
"android.graphics.drawable.LayerDrawable.getIntrinsicWidth () "," Return the intrinsic width of the underlying drawable object. <br /><br />"
"android.graphics.drawable.LayerDrawable.setAlpha (int alpha) "," Specify an alpha value for the drawable. <br /><br />"
"android.graphics.drawable.LayerDrawable.scheduleDrawable (Drawable, Runnable, long) () "," A Drawable can call this to unschedule an action previously scheduled with scheduleDrawable(Drawable, Runnable, long). <br /><br />"
"android.graphics.drawable.LayerDrawable.isStateful () "," Indicates whether this drawable will change its appearance based on state. <br /><br />"
"android.graphics.drawable.LayerDrawable.setLayerInset (int index, int l, int t, int r, int b) "," Specifies the insets in pixels for the drawable at the specified index. <br /><br />"
"android.graphics.drawable.LayerDrawable.canApplyTheme () "," no description <br /><br />"
"android.graphics.drawable.LayerDrawable.getDrawable (int index) "," Returns the drawable at the specified layer index. <br /><br />"
"android.graphics.drawable.LayerDrawable.Rect () "," Return in padding the insets suggested by this Drawable for placing content inside the drawable's bounds. <br /><br />"
"android.graphics.drawable.LayerDrawable.ColorStateList () "," Specifies a tint for this drawable as a color state list. <br /><br />"
"android.graphics.drawable.LayerDrawable.setHotspot (float x, float y) "," Specifies the hotspot's location within the drawable. <br /><br />"
"android.graphics.drawable.LayerDrawable.Outline () "," Populates outline with the first available (non-empty) layer outline. <br /><br />"
"android.graphics.drawable.LayerDrawable.PorterDuff.Mode () "," Specifies a tint blending mode for this drawable. <br /><br />"
"android.graphics.drawable.LayerDrawable.getPaddingMode () "," no description <br /><br />"
"android.graphics.drawable.LayerDrawable.Drawable () "," Sets (or replaces) the Drawable for the layer with the given id. <br /><br />"
"android.graphics.drawable.LayerDrawable.isAutoMirrored () "," Tells if this Drawable will be automatically mirrored when its layout direction is RTL right-to-left. <br /><br />"
"android.graphics.drawable.LayerDrawable.setOpacity (int opacity) "," Sets the opacity of this drawable directly, instead of collecting the states from the layers <br /><br />"
"android.graphics.drawable.LayerDrawable.setAutoMirrored (boolean mirrored) "," Set whether this Drawable is automatically mirrored when its layout direction is RTL (right-to left). <br /><br />"
"android.graphics.drawable.LayerDrawable.getAlpha () "," Gets the current alpha value for the drawable. <br /><br />"
"android.graphics.drawable.LayerDrawable.Drawable (int id) "," Looks for a layer with the given ID and returns its Drawable. <br /><br />"
"android.graphics.drawable.LayerDrawable.getChangingConfigurations () "," Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created. <br /><br />"
"android.graphics.drawable.LayerDrawable.getOpacity () "," Return the opacity/transparency of this Drawable. <br /><br />"
"android.graphics.drawable.LayerDrawable.Drawable.ConstantState () "," Return a Drawable.ConstantState instance that holds the shared state of this Drawable. <br /><br />"
"android.graphics.drawable.LayerDrawable.Canvas () "," Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter). <br /><br />"
"android.graphics.drawable.LayerDrawable.setVisible (boolean visible, boolean restart) "," Set whether this Drawable is visible. <br /><br />"
"android.graphics.drawable.LayerDrawable.getIntrinsicHeight () "," Return the intrinsic height of the underlying drawable object. <br /><br />"
"android.graphics.drawable.LayerDrawable.setPaddingMode (int mode) "," Specifies how layer padding should affect the bounds of subsequent layers. <br /><br />"
"android.graphics.drawable.LayerDrawable.setDither (boolean dither) "," Set to true to have the drawable dither its colors when drawn to a device with fewer than 8-bits per color component. <br /><br />"
"android.graphics.drawable.LayerDrawable.getId (int index) "," Returns the id of the specified layer. <br /><br />"
"android.graphics.drawable.LayerDrawable.getNumberOfLayers () "," Returns the number of layers contained within this. <br /><br />"
"android.graphics.drawable.LayerDrawable.ColorFilter () "," Specify an optional color filter for the drawable. <br /><br />"
"android.graphics.drawable.LayerDrawable.Resources.Theme () "," Inflate this Drawable from an XML resource optionally styled by a theme. <br /><br />"
"android.graphics.drawable.LayerDrawable.setId (int index, int id) "," Sets the ID of a layer. <br /><br />"
"android.graphics.drawable.LayerDrawable.setHotspotBounds (int left, int top, int right, int bottom) "," Sets the bounds to which the hotspot is constrained, if they should be different from the drawable bounds. <br /><br />"
"android.graphics.drawable.LayerDrawable.mutate () "," Make this drawable mutable. <br /><br />"
"android.graphics.drawable.LayerDrawable.Runnable () "," A Drawable can call this to schedule the next frame of its animation. <br /><br />"
"android.graphics.drawable.LevelListDrawable.Drawable () "," no description <br /><br />"
"android.graphics.drawable.LevelListDrawable.Resources.Theme () "," Inflate this Drawable from an XML resource optionally styled by a theme. <br /><br />"
"android.graphics.drawable.LevelListDrawable.mutate () "," Make this drawable mutable. <br /><br />"
"android.graphics.drawable.NinePatchDrawable.getIntrinsicWidth () "," Retrieves the width of the source .png file (before resizing). <br /><br />"
"android.graphics.drawable.NinePatchDrawable.setAlpha (int alpha) "," Specify an alpha value for the drawable. <br /><br />"
"android.graphics.drawable.NinePatchDrawable.setTargetDensity (int density) "," Set the density at which this drawable will be rendered. <br /><br />"
"android.graphics.drawable.NinePatchDrawable.isStateful () "," Indicates whether this drawable will change its appearance based on state. <br /><br />"
"android.graphics.drawable.NinePatchDrawable.canApplyTheme () "," no description <br /><br />"
"android.graphics.drawable.NinePatchDrawable.Rect () "," Return in padding the insets suggested by this Drawable for placing content inside the drawable's bounds. <br /><br />"
"android.graphics.drawable.NinePatchDrawable.ColorStateList () "," Specifies a tint for this drawable as a color state list. <br /><br />"
"android.graphics.drawable.NinePatchDrawable.Outline () "," Called to get the drawable to populate the Outline that defines its drawing area. <br /><br />"
"android.graphics.drawable.NinePatchDrawable.PorterDuff.Mode () "," Specifies a tint blending mode for this drawable. <br /><br />"
"android.graphics.drawable.NinePatchDrawable.isAutoMirrored () "," Tells if this Drawable will be automatically mirrored when its layout direction is RTL right-to-left. <br /><br />"
"android.graphics.drawable.NinePatchDrawable.setAutoMirrored (boolean mirrored) "," Set whether this Drawable is automatically mirrored when its layout direction is RTL (right-to left). <br /><br />"
"android.graphics.drawable.NinePatchDrawable.getAlpha () "," Gets the current alpha value for the drawable. <br /><br />"
"android.graphics.drawable.NinePatchDrawable.getChangingConfigurations () "," Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created. <br /><br />"
"android.graphics.drawable.NinePatchDrawable.getMinimumWidth () "," Returns the minimum width suggested by this Drawable. <br /><br />"
"android.graphics.drawable.NinePatchDrawable.Drawable.ConstantState () "," Return a Drawable.ConstantState instance that holds the shared state of this Drawable. <br /><br />"
"android.graphics.drawable.NinePatchDrawable.Canvas () "," Set the density scale at which this drawable will be rendered. <br /><br />"
"android.graphics.drawable.NinePatchDrawable.getIntrinsicHeight () "," Retrieves the height of the source .png file (before resizing). <br /><br />"
"android.graphics.drawable.NinePatchDrawable.graphics.PixelFormat () "," Returns a graphics.PixelFormat value of OPAQUE or TRANSLUCENT. <br /><br />"
"android.graphics.drawable.NinePatchDrawable.getPaint () "," no description <br /><br />"
"android.graphics.drawable.NinePatchDrawable.setDither (boolean dither) "," Set to true to have the drawable dither its colors when drawn to a device with fewer than 8-bits per color component. <br /><br />"
"android.graphics.drawable.NinePatchDrawable.setFilterBitmap (boolean filter) "," Set to true to have the drawable filter its bitmap when scaled or rotated (for drawables that use bitmaps). <br /><br />"
"android.graphics.drawable.NinePatchDrawable.ColorFilter () "," Specify an optional color filter for the drawable. <br /><br />"
"android.graphics.drawable.NinePatchDrawable.getTransparentRegion () "," Returns a Region representing the part of the Drawable that is completely transparent. <br /><br />"
"android.graphics.drawable.NinePatchDrawable.Resources.Theme () "," Inflate this Drawable from an XML resource optionally styled by a theme. <br /><br />"
"android.graphics.drawable.NinePatchDrawable.DisplayMetrics () "," Set the density scale at which this drawable will be rendered. <br /><br />"
"android.graphics.drawable.NinePatchDrawable.getMinimumHeight () "," Returns the minimum height suggested by this Drawable. <br /><br />"
"android.graphics.drawable.NinePatchDrawable.mutate () "," Make this drawable mutable. <br /><br />"
"android.graphics.drawable.PaintDrawable.setCornerRadius (float radius) "," Specify radius for the corners of the rectangle. <br /><br />"
"android.graphics.drawable.PaintDrawable.setCornerRadii (float[] radii) "," Specify radii for each of the 4 corners. <br /><br />"
"android.graphics.drawable.PictureDrawable.setDither (boolean dither) "," Set to true to have the drawable dither its colors when drawn to a device with fewer than 8-bits per color component. <br /><br />"
"android.graphics.drawable.PictureDrawable.getOpacity () "," Return the opacity/transparency of this Drawable. <br /><br />"
"android.graphics.drawable.PictureDrawable.setFilterBitmap (boolean filter) "," Set to true to have the drawable filter its bitmap when scaled or rotated (for drawables that use bitmaps). <br /><br />"
"android.graphics.drawable.PictureDrawable.getIntrinsicWidth () "," Return the intrinsic width of the underlying drawable object. <br /><br />"
"android.graphics.drawable.PictureDrawable.getPicture () "," Return the picture associated with the drawable. <br /><br />"
"android.graphics.drawable.PictureDrawable.setAlpha (int alpha) "," Specify an alpha value for the drawable. <br /><br />"
"android.graphics.drawable.PictureDrawable.ColorFilter () "," Specify an optional color filter for the drawable. <br /><br />"
"android.graphics.drawable.PictureDrawable.Canvas () "," Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter). <br /><br />"
"android.graphics.drawable.PictureDrawable.Picture () "," Associate a picture with this drawable. <br /><br />"
"android.graphics.drawable.PictureDrawable.getIntrinsicHeight () "," Return the intrinsic height of the underlying drawable object. <br /><br />"
"android.graphics.drawable.RippleDrawable.getOpacity () "," Return the opacity/transparency of this Drawable. <br /><br />"
"android.graphics.drawable.RippleDrawable.setAlpha (int alpha) "," Specify an alpha value for the drawable. <br /><br />"
"android.graphics.drawable.RippleDrawable.Canvas () "," Optimized for drawing ripples with a mask layer and optional content. <br /><br />"
"android.graphics.drawable.RippleDrawable.Drawable.ConstantState () "," Return a Drawable.ConstantState instance that holds the shared state of this Drawable. <br /><br />"
"android.graphics.drawable.RippleDrawable.isStateful () "," Indicates whether this drawable will change its appearance based on state. <br /><br />"
"android.graphics.drawable.RippleDrawable.setVisible (boolean visible, boolean restart) "," Set whether this Drawable is visible. <br /><br />"
"android.graphics.drawable.RippleDrawable.jumpToCurrentState () "," If this Drawable does transition animations between states, ask that it immediately jump to the current state and skip any active animations. <br /><br />"
"android.graphics.drawable.RippleDrawable.canApplyTheme () "," no description <br /><br />"
"android.graphics.drawable.RippleDrawable.setPaddingMode (int mode) "," Specifies how layer padding should affect the bounds of subsequent layers. <br /><br />"
"android.graphics.drawable.RippleDrawable.setHotspot (float x, float y) "," Specifies the hotspot's location within the drawable. <br /><br />"
"android.graphics.drawable.RippleDrawable.ColorStateList () "," no description <br /><br />"
"android.graphics.drawable.RippleDrawable.Outline () "," Populates outline with the first available layer outline, excluding the mask layer. <br /><br />"
"android.graphics.drawable.RippleDrawable.Drawable () "," Sets (or replaces) the Drawable for the layer with the given id. <br /><br />"
"android.graphics.drawable.RippleDrawable.ColorFilter () "," Specify an optional color filter for the drawable. <br /><br />"
"android.graphics.drawable.RippleDrawable.Drawable.Callback () "," Use the current Drawable.Callback implementation to have this Drawable redrawn. <br /><br />"
"android.graphics.drawable.RippleDrawable.getDirtyBounds () "," Return the drawable's dirty bounds Rect. <br /><br />"
"android.graphics.drawable.RippleDrawable.Resources.Theme () "," Inflate this Drawable from an XML resource optionally styled by a theme. <br /><br />"
"android.graphics.drawable.RippleDrawable.setHotspotBounds (int left, int top, int right, int bottom) "," Sets the bounds to which the hotspot is constrained, if they should be different from the drawable bounds. <br /><br />"
"android.graphics.drawable.RippleDrawable.mutate () "," Make this drawable mutable. <br /><br />"
"android.graphics.drawable.RotateDrawable.getIntrinsicWidth () "," Return the intrinsic width of the underlying drawable object. <br /><br />"
"android.graphics.drawable.RotateDrawable.setAlpha (int alpha) "," Specify an alpha value for the drawable. <br /><br />"
"android.graphics.drawable.RotateDrawable.scheduleDrawable (Drawable, Runnable, long) () "," A Drawable can call this to unschedule an action previously scheduled with scheduleDrawable(Drawable, Runnable, long). <br /><br />"
"android.graphics.drawable.RotateDrawable.setToDegrees (float toDegrees) "," Sets the end angle for rotation. <br /><br />"
"android.graphics.drawable.RotateDrawable.isStateful () "," Indicates whether this drawable will change its appearance based on state. <br /><br />"
"android.graphics.drawable.RotateDrawable.setPivotY (float pivotY) "," Sets the Y position around which the drawable is rotated. <br /><br />"
"android.graphics.drawable.RotateDrawable.canApplyTheme () "," no description <br /><br />"
"android.graphics.drawable.RotateDrawable.isPivotYRelative () "," no description <br /><br />"
"android.graphics.drawable.RotateDrawable.Rect () "," Return in padding the insets suggested by this Drawable for placing content inside the drawable's bounds. <br /><br />"
"android.graphics.drawable.RotateDrawable.ColorStateList () "," Specifies a tint for this drawable as a color state list. <br /><br />"
"android.graphics.drawable.RotateDrawable.isPivotXRelative () "," no description <br /><br />"
"android.graphics.drawable.RotateDrawable.PorterDuff.Mode () "," Specifies a tint blending mode for this drawable. <br /><br />"
"android.graphics.drawable.RotateDrawable.Drawable () "," Sets the drawable rotated by this RotateDrawable. <br /><br />"
"android.graphics.drawable.RotateDrawable.setPivotX (float pivotX) "," Sets the X position around which the drawable is rotated. <br /><br />"
"android.graphics.drawable.RotateDrawable.getToDegrees () "," no description <br /><br />"
"android.graphics.drawable.RotateDrawable.getAlpha () "," Gets the current alpha value for the drawable. <br /><br />"
"android.graphics.drawable.RotateDrawable.getOpacity () "," Return the opacity/transparency of this Drawable. <br /><br />"
"android.graphics.drawable.RotateDrawable.getChangingConfigurations () "," Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created. <br /><br />"
"android.graphics.drawable.RotateDrawable.Drawable.ConstantState () "," Return a Drawable.ConstantState instance that holds the shared state of this Drawable. <br /><br />"
"android.graphics.drawable.RotateDrawable.Canvas () "," Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter). <br /><br />"
"android.graphics.drawable.RotateDrawable.getDrawable () "," no description <br /><br />"
"android.graphics.drawable.RotateDrawable.setVisible (boolean visible, boolean restart) "," Set whether this Drawable is visible. <br /><br />"
"android.graphics.drawable.RotateDrawable.getIntrinsicHeight () "," Return the intrinsic height of the underlying drawable object. <br /><br />"
"android.graphics.drawable.RotateDrawable.setPivotYRelative (boolean relative) "," Sets whether the Y pivot value represents a fraction of the drawable height or an absolute value in pixels. <br /><br />"
"android.graphics.drawable.RotateDrawable.getPivotX () "," no description <br /><br />"
"android.graphics.drawable.RotateDrawable.setFromDegrees (float fromDegrees) "," Sets the start angle for rotation. <br /><br />"
"android.graphics.drawable.RotateDrawable.ColorFilter () "," Specify an optional color filter for the drawable. <br /><br />"
"android.graphics.drawable.RotateDrawable.getFromDegrees () "," no description <br /><br />"
"android.graphics.drawable.RotateDrawable.setPivotXRelative (boolean relative) "," Sets whether the X pivot value represents a fraction of the drawable width or an absolute value in pixels. <br /><br />"
"android.graphics.drawable.RotateDrawable.Resources.Theme () "," Inflate this Drawable from an XML resource optionally styled by a theme. <br /><br />"
"android.graphics.drawable.RotateDrawable.getPivotY () "," no description <br /><br />"
"android.graphics.drawable.RotateDrawable.mutate () "," Make this drawable mutable. <br /><br />"
"android.graphics.drawable.RotateDrawable.Runnable () "," A Drawable can call this to schedule the next frame of its animation. <br /><br />"
"android.graphics.drawable.ScaleDrawable.getChangingConfigurations () "," Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created. <br /><br />"
"android.graphics.drawable.ScaleDrawable.getOpacity () "," Return the opacity/transparency of this Drawable. <br /><br />"
"android.graphics.drawable.ScaleDrawable.getIntrinsicWidth () "," Return the intrinsic width of the underlying drawable object. <br /><br />"
"android.graphics.drawable.ScaleDrawable.setAlpha (int alpha) "," Specify an alpha value for the drawable. <br /><br />"
"android.graphics.drawable.ScaleDrawable.scheduleDrawable (Drawable, Runnable, long) () "," A Drawable can call this to unschedule an action previously scheduled with scheduleDrawable(Drawable, Runnable, long). <br /><br />"
"android.graphics.drawable.ScaleDrawable.Canvas () "," Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter). <br /><br />"
"android.graphics.drawable.ScaleDrawable.Drawable.ConstantState () "," Return a Drawable.ConstantState instance that holds the shared state of this Drawable. <br /><br />"
"android.graphics.drawable.ScaleDrawable.isStateful () "," Indicates whether this drawable will change its appearance based on state. <br /><br />"
"android.graphics.drawable.ScaleDrawable.getDrawable () "," Returns the drawable scaled by this ScaleDrawable. <br /><br />"
"android.graphics.drawable.ScaleDrawable.setVisible (boolean visible, boolean restart) "," Set whether this Drawable is visible. <br /><br />"
"android.graphics.drawable.ScaleDrawable.getIntrinsicHeight () "," Return the intrinsic height of the underlying drawable object. <br /><br />"
"android.graphics.drawable.ScaleDrawable.canApplyTheme () "," no description <br /><br />"
"android.graphics.drawable.ScaleDrawable.Rect () "," Return in padding the insets suggested by this Drawable for placing content inside the drawable's bounds. <br /><br />"
"android.graphics.drawable.ScaleDrawable.ColorStateList () "," Specifies a tint for this drawable as a color state list. <br /><br />"
"android.graphics.drawable.ScaleDrawable.PorterDuff.Mode () "," Specifies a tint blending mode for this drawable. <br /><br />"
"android.graphics.drawable.ScaleDrawable.Drawable () "," Called when the drawable needs to be redrawn. <br /><br />"
"android.graphics.drawable.ScaleDrawable.ColorFilter () "," Specify an optional color filter for the drawable. <br /><br />"
"android.graphics.drawable.ScaleDrawable.Resources.Theme () "," Inflate this Drawable from an XML resource optionally styled by a theme. <br /><br />"
"android.graphics.drawable.ScaleDrawable.getAlpha () "," Gets the current alpha value for the drawable. <br /><br />"
"android.graphics.drawable.ScaleDrawable.mutate () "," Make this drawable mutable. <br /><br />"
"android.graphics.drawable.ScaleDrawable.Runnable () "," A Drawable can call this to schedule the next frame of its animation. <br /><br />"
"android.graphics.drawable.ShapeDrawable.getChangingConfigurations () "," Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created. <br /><br />"
"android.graphics.drawable.ShapeDrawable.getOpacity () "," Return the opacity/transparency of this Drawable. <br /><br />"
"android.graphics.drawable.ShapeDrawable.setPadding (int left, int top, int right, int bottom) "," Sets padding for the shape. <br /><br />"
"android.graphics.drawable.ShapeDrawable.getIntrinsicWidth () "," Return the intrinsic width of the underlying drawable object. <br /><br />"
"android.graphics.drawable.ShapeDrawable.setIntrinsicHeight (int height) "," Sets the intrinsic (default) height for this shape. <br /><br />"
"android.graphics.drawable.ShapeDrawable.setAlpha (int alpha) "," Set the alpha level for this drawable [0..255]. <br /><br />"
"android.graphics.drawable.ShapeDrawable.Canvas () "," Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter). <br /><br />"
"android.graphics.drawable.ShapeDrawable.Drawable.ConstantState () "," Return a Drawable.ConstantState instance that holds the shared state of this Drawable. <br /><br />"
"android.graphics.drawable.ShapeDrawable.isStateful () "," Indicates whether this drawable will change its appearance based on state. <br /><br />"
"android.graphics.drawable.ShapeDrawable.setIntrinsicWidth (int width) "," Sets the intrinsic (default) width for this shape. <br /><br />"
"android.graphics.drawable.ShapeDrawable.getIntrinsicHeight () "," Return the intrinsic height of the underlying drawable object. <br /><br />"
"android.graphics.drawable.ShapeDrawable.getPaint () "," Returns the Paint used to draw the shape. <br /><br />"
"android.graphics.drawable.ShapeDrawable.setDither (boolean dither) "," Set to true to have the drawable dither its colors when drawn to a device with fewer than 8-bits per color component. <br /><br />"
"android.graphics.drawable.ShapeDrawable.Rect () "," Sets padding for this shape, defined by a Rect object. <br /><br />"
"android.graphics.drawable.ShapeDrawable.ColorStateList () "," Specifies a tint for this drawable as a color state list. <br /><br />"
"android.graphics.drawable.ShapeDrawable.getShape () "," Returns the Shape of this ShapeDrawable. <br /><br />"
"android.graphics.drawable.ShapeDrawable.Outline () "," Called to get the drawable to populate the Outline that defines its drawing area. <br /><br />"
"android.graphics.drawable.ShapeDrawable.Shader () "," Sets a ShaderFactory to which requests for a Shader object will be made. <br /><br />"
"android.graphics.drawable.ShapeDrawable.PorterDuff.Mode () "," Specifies a tint blending mode for this drawable. <br /><br />"
"android.graphics.drawable.ShapeDrawable.ColorFilter () "," Specify an optional color filter for the drawable. <br /><br />"
"android.graphics.drawable.ShapeDrawable.Resources.Theme () "," Inflate this Drawable from an XML resource optionally styled by a theme. <br /><br />"
"android.graphics.drawable.ShapeDrawable.getAlpha () "," Gets the current alpha value for the drawable. <br /><br />"
"android.graphics.drawable.ShapeDrawable.mutate () "," Make this drawable mutable. <br /><br />"
"android.graphics.drawable.ShapeDrawable.Shape () "," Sets the Shape of this ShapeDrawable. <br /><br />"
"android.graphics.drawable.ShapeDrawable.ShaderFactory.resize (int width, int height) "," Returns the Shader to be drawn when a Drawable is drawn. <br /><br />"
"android.graphics.drawable.shapes.ArcShape.Paint () "," Draw this shape into the provided Canvas, with the provided Paint. <br /><br />"
"android.graphics.drawable.shapes.OvalShape.Outline () "," Compute the Outline of the shape and return it in the supplied Outline parameter. <br /><br />"
"android.graphics.drawable.shapes.OvalShape.Paint () "," Draw this shape into the provided Canvas, with the provided Paint. <br /><br />"
"android.graphics.drawable.shapes.PathShape.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.graphics.drawable.shapes.PathShape.Paint () "," Draw this shape into the provided Canvas, with the provided Paint. <br /><br />"
"android.graphics.drawable.shapes.RectShape.Outline () "," Compute the Outline of the shape and return it in the supplied Outline parameter. <br /><br />"
"android.graphics.drawable.shapes.RectShape.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.graphics.drawable.shapes.RectShape.Paint () "," Draw this shape into the provided Canvas, with the provided Paint. <br /><br />"
"android.graphics.drawable.shapes.RoundRectShape.Outline () "," Compute the Outline of the shape and return it in the supplied Outline parameter. <br /><br />"
"android.graphics.drawable.shapes.RoundRectShape.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.graphics.drawable.shapes.RoundRectShape.Paint () "," Draw this shape into the provided Canvas, with the provided Paint. <br /><br />"
"android.graphics.drawable.shapes.Shape.Outline () "," Compute the Outline of the shape and return it in the supplied Outline parameter. <br /><br />"
"android.graphics.drawable.shapes.Shape.getHeight () "," Returns the height of the Shape. <br /><br />"
"android.graphics.drawable.shapes.Shape.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.graphics.drawable.shapes.Shape.resize (float width, float height) "," Resizes the dimensions of this shape. <br /><br />"
"android.graphics.drawable.shapes.Shape.hasAlpha () "," Checks whether the Shape is opaque. <br /><br />"
"android.graphics.drawable.shapes.Shape.getWidth () "," Returns the width of the Shape. <br /><br />"
"android.graphics.drawable.shapes.Shape.Paint () "," Draw this shape into the provided Canvas, with the provided Paint. <br /><br />"
"android.graphics.drawable.StateListDrawable.Drawable () "," Add a new image/string ID to the set of images. <br /><br />"
"android.graphics.drawable.StateListDrawable.isStateful () "," Indicates whether this drawable will change its appearance based on state. <br /><br />"
"android.graphics.drawable.StateListDrawable.Resources.Theme () "," Inflate this Drawable from an XML resource optionally styled by a theme. <br /><br />"
"android.graphics.drawable.StateListDrawable.mutate () "," Make this drawable mutable. <br /><br />"
"android.graphics.drawable.TransitionDrawable.reverseTransition (int duration) "," Reverses the transition, picking up where the transition currently is. <br /><br />"
"android.graphics.drawable.TransitionDrawable.startTransition (int durationMillis) "," Begin the second layer on top of the first layer. <br /><br />"
"android.graphics.drawable.TransitionDrawable.Canvas () "," Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter). <br /><br />"
"android.graphics.drawable.TransitionDrawable.isCrossFadeEnabled () "," Indicates whether the cross fade is enabled for this transition. <br /><br />"
"android.graphics.drawable.TransitionDrawable.setCrossFadeEnabled (boolean enabled) "," Enables or disables the cross fade of the drawables. <br /><br />"
"android.graphics.drawable.TransitionDrawable.resetTransition () "," Show only the first layer. <br /><br />"
"android.graphics.drawable.VectorDrawable.getChangingConfigurations () "," Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created. <br /><br />"
"android.graphics.drawable.VectorDrawable.getOpacity () "," Return the opacity/transparency of this Drawable. <br /><br />"
"android.graphics.drawable.VectorDrawable.getIntrinsicWidth () "," Return the intrinsic width of the underlying drawable object. <br /><br />"
"android.graphics.drawable.VectorDrawable.setAlpha (int alpha) "," Specify an alpha value for the drawable. <br /><br />"
"android.graphics.drawable.VectorDrawable.Canvas () "," Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter). <br /><br />"
"android.graphics.drawable.VectorDrawable.Drawable.ConstantState () "," Return a Drawable.ConstantState instance that holds the shared state of this Drawable. <br /><br />"
"android.graphics.drawable.VectorDrawable.isStateful () "," Indicates whether this drawable will change its appearance based on state. <br /><br />"
"android.graphics.drawable.VectorDrawable.getIntrinsicHeight () "," Return the intrinsic height of the underlying drawable object. <br /><br />"
"android.graphics.drawable.VectorDrawable.canApplyTheme () "," no description <br /><br />"
"android.graphics.drawable.VectorDrawable.ColorStateList () "," Specifies a tint for this drawable as a color state list. <br /><br />"
"android.graphics.drawable.VectorDrawable.PorterDuff.Mode () "," Specifies a tint blending mode for this drawable. <br /><br />"
"android.graphics.drawable.VectorDrawable.isAutoMirrored () "," Tells if this Drawable will be automatically mirrored when its layout direction is RTL right-to-left. <br /><br />"
"android.graphics.drawable.VectorDrawable.ColorFilter () "," Specify an optional color filter for the drawable. <br /><br />"
"android.graphics.drawable.VectorDrawable.setAutoMirrored (boolean mirrored) "," Set whether this Drawable is automatically mirrored when its layout direction is RTL (right-to left). <br /><br />"
"android.graphics.drawable.VectorDrawable.Resources.Theme () "," Inflate this Drawable from an XML resource optionally styled by a theme. <br /><br />"
"android.graphics.drawable.VectorDrawable.getAlpha () "," Gets the current alpha value for the drawable. <br /><br />"
"android.graphics.drawable.VectorDrawable.mutate () "," Make this drawable mutable. <br /><br />"
"android.graphics.ImageFormat.getBitsPerPixel (int format) "," Use this function to retrieve the number of bits per pixel of an ImageFormat. <br /><br />"
"android.graphics.Interpolator.reset (int valueCount, int frameCount) "," Reset the Interpolator to have the specified number of values and keyFrames. <br /><br />"
"android.graphics.Interpolator.getKeyFrameCount () "," no description <br /><br />"
"android.graphics.Interpolator.timeToValues (int msec, float[] values) "," Given a millisecond time value (msec), return the interpolated values and return whether the specified time was within the range of key times (NORMAL), was before the first key time (FREEZE_START) or after the last key time (FREEZE_END). <br /><br />"
"android.graphics.Interpolator.timeToValues (float[] values) "," Calls timeToValues(msec, values) with the msec set to now (by calling (int)SystemClock.uptimeMillis().) <br /><br />"
"android.graphics.Interpolator.setRepeatMirror (float repeatCount, boolean mirror) "," Set a repeat count (which may be fractional) for the interpolator, and whether the interpolator should mirror its repeats. <br /><br />"
"android.graphics.Interpolator.setKeyFrame (int index, int msec, float[] values) "," Assign the keyFrame (specified by index) a time value and an array of key values (with an implicity blend array of [0, 0, 1, 1] giving linear transition to the next set of key values). <br /><br />"
"android.graphics.Interpolator.reset (int valueCount) "," Reset the Interpolator to have the specified number of values and an implicit keyFrame count of 2 (just a start and end). <br /><br />"
"android.graphics.Interpolator.setKeyFrame (int index, int msec, float[] values, float[] blend) "," Assign the keyFrame (specified by index) a time value and an array of key values and blend array. <br /><br />"
"android.graphics.Interpolator.getValueCount () "," no description <br /><br />"
"android.graphics.LayerRasterizer.Paint () "," Add a new layer (above any previous layers) to the rasterizer. <br /><br />"
"android.graphics.Matrix.postSkew (float kx, float ky) "," Postconcats the matrix with the specified skew. <br /><br />"
"android.graphics.Matrix.mapPoints (float[] pts) "," Apply this matrix to the array of 2D points, and write the transformed points back into the array <br /><br />"
"android.graphics.Matrix.preScale (float sx, float sy) "," Preconcats the matrix with the specified scale. <br /><br />"
"android.graphics.Matrix.setSkew (float kx, float ky) "," Set the matrix to skew by sx and sy. <br /><br />"
"android.graphics.Matrix.postScale (float sx, float sy) "," Postconcats the matrix with the specified scale. <br /><br />"
"android.graphics.Matrix.setTranslate (float dx, float dy) "," Set the matrix to translate by (dx, dy). <br /><br />"
"android.graphics.Matrix.setPolyToPoly (float[] src, int srcIndex, float[] dst, int dstIndex, int pointCount) "," Set the matrix such that the specified src points would map to the specified dst points. <br /><br />"
"android.graphics.Matrix.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.graphics.Matrix.RectF () "," Apply this matrix to the rectangle, and write the transformed rectangle back into it. <br /><br />"
"android.graphics.Matrix.Matrix () "," Set the matrix to the concatenation of the two specified matrices and return true. <br /><br />"
"android.graphics.Matrix.preSkew (float kx, float ky) "," Preconcats the matrix with the specified skew. <br /><br />"
"android.graphics.Matrix.setSkew (float kx, float ky, float px, float py) "," Set the matrix to skew by sx and sy, with a pivot point at (px, py). <br /><br />"
"android.graphics.Matrix.preRotate (float degrees, float px, float py) "," Preconcats the matrix with the specified rotation. <br /><br />"
"android.graphics.Matrix.mapRadius (float radius) "," Return the mean radius of a circle after it has been mapped by this matrix. <br /><br />"
"android.graphics.Matrix.getValues (float[] values) "," Copy 9 values from the matrix into the array. <br /><br />"
"android.graphics.Matrix.toShortString () "," no description <br /><br />"
"android.graphics.Matrix.preScale (float sx, float sy, float px, float py) "," Preconcats the matrix with the specified scale. <br /><br />"
"android.graphics.Matrix.rectStaysRect () "," Returns true if will map a rectangle to another rectangle. <br /><br />"
"android.graphics.Matrix.setSinCos (float sinValue, float cosValue) "," Set the matrix to rotate by the specified sine and cosine values. <br /><br />"
"android.graphics.Matrix.setScale (float sx, float sy, float px, float py) "," Set the matrix to scale by sx and sy, with a pivot point at (px, py). <br /><br />"
"android.graphics.Matrix.preSkew (float kx, float ky, float px, float py) "," Preconcats the matrix with the specified skew. <br /><br />"
"android.graphics.Matrix.isAffine () "," Gets whether this matrix is affine. <br /><br />"
"android.graphics.Matrix.isIdentity () "," Returns true if the matrix is identity. <br /><br />"
"android.graphics.Matrix.postSkew (float kx, float ky, float px, float py) "," Postconcats the matrix with the specified skew. <br /><br />"
"android.graphics.Matrix.setRotate (float degrees) "," Set the matrix to rotate about (0,0) by the specified number of degrees. <br /><br />"
"android.graphics.Matrix.Object () "," Returns true iff obj is a Matrix and its values equal our values. <br /><br />"
"android.graphics.Matrix.postRotate (float degrees) "," Postconcats the matrix with the specified rotation. <br /><br />"
"android.graphics.Matrix.postScale (float sx, float sy, float px, float py) "," Postconcats the matrix with the specified scale. <br /><br />"
"android.graphics.Matrix.mapVectors (float[] dst, float[] src) "," Apply this matrix to the array of 2D vectors specified by src, and write the transformed vectors into the array of vectors specified by dst. <br /><br />"
"android.graphics.Matrix.setSinCos (float sinValue, float cosValue, float px, float py) "," Set the matrix to rotate by the specified sine and cosine values, with a pivot point at (px, py). <br /><br />"
"android.graphics.Matrix.postRotate (float degrees, float px, float py) "," Postconcats the matrix with the specified rotation. <br /><br />"
"android.graphics.Matrix.postTranslate (float dx, float dy) "," Postconcats the matrix with the specified translation. <br /><br />"
"android.graphics.Matrix.Matrix.ScaleToFit () "," Set the matrix to the scale and translate values that map the source rectangle to the destination rectangle, returning true if the the result can be represented. <br /><br />"
"android.graphics.Matrix.mapVectors (float[] dst, int dstIndex, float[] src, int srcIndex, int vectorCount) "," Apply this matrix to the array of 2D vectors specified by src, and write the transformed vectors into the array of vectors specified by dst. <br /><br />"
"android.graphics.Matrix.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.graphics.Matrix.reset () "," Set the matrix to identity <br /><br />"
"android.graphics.Matrix.mapPoints (float[] dst, float[] src) "," Apply this matrix to the array of 2D points specified by src, and write the transformed points into the array of points specified by dst. <br /><br />"
"android.graphics.Matrix.mapPoints (float[] dst, int dstIndex, float[] src, int srcIndex, int pointCount) "," Apply this matrix to the array of 2D points specified by src, and write the transformed points into the array of points specified by dst. <br /><br />"
"android.graphics.Matrix.preRotate (float degrees) "," Preconcats the matrix with the specified rotation. <br /><br />"
"android.graphics.Matrix.setRotate (float degrees, float px, float py) "," Set the matrix to rotate by the specified number of degrees, with a pivot point at (px, py). <br /><br />"
"android.graphics.Matrix.setScale (float sx, float sy) "," Set the matrix to scale by sx and sy. <br /><br />"
"android.graphics.Matrix.preTranslate (float dx, float dy) "," Preconcats the matrix with the specified translation. <br /><br />"
"android.graphics.Matrix.setValues (float[] values) "," Copy 9 values from the array into the matrix. <br /><br />"
"android.graphics.Matrix.mapVectors (float[] vecs) "," Apply this matrix to the array of 2D vectors, and write the transformed vectors back into the array. <br /><br />"
"android.graphics.Movie.width () "," no description <br /><br />"
"android.graphics.Movie.String () "," no description <br /><br />"
"android.graphics.Movie.decodeByteArray (byte[] data, int offset, int length) "," no description <br /><br />"
"android.graphics.Movie.height () "," no description <br /><br />"
"android.graphics.Movie.isOpaque () "," no description <br /><br />"
"android.graphics.Movie.Canvas () "," no description <br /><br />"
"android.graphics.Movie.duration () "," no description <br /><br />"
"android.graphics.Movie.setTime (int relativeMilliseconds) "," no description <br /><br />"
"android.graphics.Movie.InputStream () "," no description <br /><br />"
"android.graphics.Movie.Paint () "," no description <br /><br />"
"android.graphics.NinePatch.Region () "," Returns a Region representing the parts of the NinePatch that are completely transparent. <br /><br />"
"android.graphics.NinePatch.getName () "," Returns the name of this NinePatch object if one was specified when calling the constructor. <br /><br />"
"android.graphics.NinePatch.Rect () "," Draws the NinePatch. <br /><br />"
"android.graphics.NinePatch.Bitmap.getDensity () () "," Return the underlying bitmap's density, as per Bitmap.getDensity(). <br /><br />"
"android.graphics.NinePatch.isNinePatchChunk (byte[] chunk) "," Verifies that the specified byte array is a valid 9-patch data chunk. <br /><br />"
"android.graphics.NinePatch.getHeight () "," Returns the intrinsic height, in pixels, of this NinePatch. <br /><br />"
"android.graphics.NinePatch.hasAlpha () "," Indicates whether this NinePatch contains transparent or translucent pixels. <br /><br />"
"android.graphics.NinePatch.getWidth () "," Returns the intrinsic width, in pixels, of this NinePatch. <br /><br />"
"android.graphics.NinePatch.getBitmap () "," Returns the bitmap used to draw this NinePatch. <br /><br />"
"android.graphics.NinePatch.getPaint () "," Returns the paint used to draw this NinePatch. <br /><br />"
"android.graphics.NinePatch.Paint () "," Sets the paint to use when drawing the NinePatch. <br /><br />"
"android.graphics.NinePatch.RectF () "," Draws the NinePatch. <br /><br />"
"android.graphics.Outline.setRect (int, int, int, int) () "," Convenience for setRect(int, int, int, int) <br /><br />"
"android.graphics.Outline.convex path () "," Sets the Constructs an Outline from a convex path. <br /><br />"
"android.graphics.Outline.setRoundRect (int left, int top, int right, int bottom, float radius) "," Sets the Outline to the rounded rect defined by the input rect, and corner radius. <br /><br />"
"android.graphics.Outline.setAlpha (float alpha) "," Sets the alpha represented by the Outline - the degree to which the producer is guaranteed to be opaque over the Outline's shape. <br /><br />"
"android.graphics.Outline.offset (int dx, int dy) "," Offsets the Outline by (dx,dy) <br /><br />"
"android.graphics.Outline.setEmpty () "," Sets the outline to be empty. <br /><br />"
"android.graphics.Outline.Outline () "," Replace the contents of this Outline with the contents of src. <br /><br />"
"android.graphics.Outline.setOval (int left, int top, int right, int bottom) "," Sets the outline to the oval defined by input rect. <br /><br />"
"android.graphics.Outline.canClip () "," Returns whether the outline can be used to clip a View. <br /><br />"
"android.graphics.Outline.isEmpty () "," Returns whether the Outline is empty. <br /><br />"
"android.graphics.Outline.setOval (int, int, int, int) () "," Convenience for setOval(int, int, int, int) <br /><br />"
"android.graphics.Outline.getAlpha () "," Returns the alpha represented by the Outline. <br /><br />"
"android.graphics.Outline.setRoundRect (int, int, int, int, float) () "," Convenience for setRoundRect(int, int, int, int, float) <br /><br />"
"android.graphics.Outline.setRect (int left, int top, int right, int bottom) "," Sets the Outline to the rounded rect defined by the input rect, and corner radius. <br /><br />"
"android.graphics.Paint.FontMetricsInt.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.graphics.Paint.getTypeface () "," Get the paint's typeface object. <br /><br />"
"android.graphics.Paint.Paint.Style () "," Set the paint's style, used for controlling how primitives' geometries are interpreted (except for drawBitmap, which always assumes Fill). <br /><br />"
"android.graphics.Paint.getFontMetricsInt () "," no description <br /><br />"
"android.graphics.Paint.isFilterBitmap () "," Whether or not the bitmap filter is activated. <br /><br />"
"android.graphics.Paint.getRasterizer () "," This method was deprecated in API level 21. Rasterizer is not supported by either the HW or PDF backends. <br /><br />"
"android.graphics.Paint.descent () "," Return the distance below (positive) the baseline (descent) based on the current typeface and text size. <br /><br />"
"android.graphics.Paint.getTextLocale () "," Get the text Locale. <br /><br />"
"android.graphics.Paint.Paint.FontMetricsInt () "," Return the font's interline spacing, given the Paint's settings for typeface, textSize, etc. <br /><br />"
"android.graphics.Paint.setFakeBoldText (boolean fakeBoldText) "," Helper for setFlags(), setting or clearing the FAKE_BOLD_TEXT_FLAG bit <br /><br />"
"android.graphics.Paint.measureText (char[] text, int index, int count) "," Return the width of the text. <br /><br />"
"android.graphics.Paint.getTextWidths (char[] text, int index, int count, float[] widths) "," Return the advance widths for the characters in the string. <br /><br />"
"android.graphics.Paint.getHinting () "," Return the paint's hinting mode. <br /><br />"
"android.graphics.Paint.getAlpha () "," Helper to getColor() that just returns the color's alpha value. <br /><br />"
"android.graphics.Paint.getXfermode () "," Get the paint's xfermode object. <br /><br />"
"android.graphics.Paint.MaskFilter () "," Set or clear the maskfilter object. <br /><br />"
"android.graphics.Paint.setAntiAlias (boolean aa) "," Helper for setFlags(), setting or clearing the ANTI_ALIAS_FLAG bit AntiAliasing smooths out the edges of what is being drawn, but is has no impact on the interior of the shape. <br /><br />"
"android.graphics.Paint.getFontFeatureSettings () "," Get font feature settings. <br /><br />"
"android.graphics.Paint.setTextScaleX (float scaleX) "," Set the paint's horizontal scale factor for text. <br /><br />"
"android.graphics.Paint.isStrikeThruText () "," Helper for getFlags(), returning true if STRIKE_THRU_TEXT_FLAG bit is set <br /><br />"
"android.graphics.Paint.getFlags () "," Return the paint's flags. <br /><br />"
"android.graphics.Paint.Locale () "," Set the text locale. <br /><br />"
"android.graphics.Paint.setShadowLayer (float radius, float dx, float dy, int shadowColor) "," This draws a shadow layer below the main layer, with the specified offset and color, and blur radius. <br /><br />"
"android.graphics.Paint.PathEffect () "," Set or clear the patheffect object. <br /><br />"
"android.graphics.Paint.isSubpixelText () "," Helper for getFlags(), returning true if SUBPIXEL_TEXT_FLAG bit is set <br /><br />"
"android.graphics.Paint.Paint () "," Copy the fields from src into this paint. <br /><br />"
"android.graphics.Paint.Paint.Cap () "," Set the paint's Cap. <br /><br />"
"android.graphics.Paint.setARGB (int a, int r, int g, int b) "," Helper to setColor(), that takes a,r,g,b and constructs the color int <br /><br />"
"android.graphics.Paint.isUnderlineText () "," Helper for getFlags(), returning true if UNDERLINE_TEXT_FLAG bit is set <br /><br />"
"android.graphics.Paint.ascent () "," Return the distance above (negative) the baseline (ascent) based on the current typeface and text size. <br /><br />"
"android.graphics.Paint.Shader () "," Set or clear the shader object. <br /><br />"
"android.graphics.Paint.setFilterBitmap (boolean filter) "," Helper for setFlags(), setting or clearing the FILTER_BITMAP_FLAG bit. <br /><br />"
"android.graphics.Paint.getStrokeWidth () "," Return the width for stroking. <br /><br />"
"android.graphics.Paint.setElegantTextHeight (boolean elegant) "," Set the paint's elegant height metrics flag. <br /><br />"
"android.graphics.Paint.getStyle () "," Return the paint's style, used for controlling how primitives' geometries are interpreted (except for drawBitmap, which always assumes FILL_STYLE). <br /><br />"
"android.graphics.Paint.Paint.Align () "," Set the paint's text alignment. <br /><br />"
"android.graphics.Paint.breakText (char[] text, int index, int count, float maxWidth, float[] measuredWidth) "," Measure the text, stopping early if the measured width exceeds maxWidth. <br /><br />"
"android.graphics.Paint.Rasterizer () "," This method was deprecated in API level 21. Rasterizer is not supported by either the HW or PDF backends. <br /><br />"
"android.graphics.Paint.isLinearText () "," Helper for getFlags(), returning true if LINEAR_TEXT_FLAG bit is set <br /><br />"
"android.graphics.Paint.setLetterSpacing (float letterSpacing) "," Set the paint's letter-spacing for text. <br /><br />"
"android.graphics.Paint.getTextSize () "," Return the paint's text size. <br /><br />"
"android.graphics.Paint.setLinearText (boolean linearText) "," Helper for setFlags(), setting or clearing the LINEAR_TEXT_FLAG bit <br /><br />"
"android.graphics.Paint.getColor () "," Return the paint's color. <br /><br />"
"android.graphics.Paint.getTextScaleX () "," Return the paint's horizontal scale factor for text. <br /><br />"
"android.graphics.Paint.getStrokeCap () "," Return the paint's Cap, controlling how the start and end of stroked lines and paths are treated. <br /><br />"
"android.graphics.Paint.getPathEffect () "," Get the paint's patheffect object. <br /><br />"
"android.graphics.Paint.getStrokeJoin () "," Return the paint's stroke join type. <br /><br />"
"android.graphics.Paint.isAntiAlias () "," Helper for getFlags(), returning true if ANTI_ALIAS_FLAG bit is set AntiAliasing smooths out the edges of what is being drawn, but is has no impact on the interior of the shape. <br /><br />"
"android.graphics.Paint.Rect () "," Return in bounds (allocated by the caller) the smallest rectangle that encloses all of the characters, with an implied origin at (0,0). <br /><br />"
"android.graphics.Paint.Paint.Join () "," Set the paint's Join. <br /><br />"
"android.graphics.Paint.getShader () "," Get the paint's shader object. <br /><br />"
"android.graphics.Paint.isFakeBoldText () "," Helper for getFlags(), returning true if FAKE_BOLD_TEXT_FLAG bit is set <br /><br />"
"android.graphics.Paint.getFontSpacing () "," Return the recommend line spacing based on the current typeface and text size. <br /><br />"
"android.graphics.Paint.getTextAlign () "," Return the paint's Align value for drawing text. <br /><br />"
"android.graphics.Paint.Typeface () "," Set or clear the typeface object. <br /><br />"
"android.graphics.Paint.setFlags (int flags) "," Set the paint's flags. <br /><br />"
"android.graphics.Paint.isElegantTextHeight () "," Get the elegant metrics flag. <br /><br />"
"android.graphics.Paint.setTextSize (float textSize) "," Set the paint's text size. <br /><br />"
"android.graphics.Paint.getStrokeMiter () "," Return the paint's stroke miter value. <br /><br />"
"android.graphics.Paint.setHinting (int mode) "," Set the paint's hinting mode. <br /><br />"
"android.graphics.Paint.setSubpixelText (boolean subpixelText) "," Helper for setFlags(), setting or clearing the SUBPIXEL_TEXT_FLAG bit <br /><br />"
"android.graphics.Paint.setStrikeThruText (boolean strikeThruText) "," Helper for setFlags(), setting or clearing the STRIKE_THRU_TEXT_FLAG bit <br /><br />"
"android.graphics.Paint.getMaskFilter () "," Get the paint's maskfilter object. <br /><br />"
"android.graphics.Paint.setAlpha (int a) "," Helper to setColor(), that only assigns the color's alpha value, leaving its r,g,b values unchanged. <br /><br />"
"android.graphics.Paint.isDither () "," Helper for getFlags(), returning true if DITHER_FLAG bit is set Dithering affects how colors that are higher precision than the device are down-sampled. <br /><br />"
"android.graphics.Paint.String () "," Set font feature settings. <br /><br />"
"android.graphics.Paint.getLetterSpacing () "," Return the paint's letter-spacing for text. <br /><br />"
"android.graphics.Paint.Path () "," Return the path (outline) for the specified text. <br /><br />"
"android.graphics.Paint.setColor (int color) "," Set the paint's color. <br /><br />"
"android.graphics.Paint.CharSequence () "," Return the width of the text. <br /><br />"
"android.graphics.Paint.getFontMetrics () "," Allocates a new FontMetrics object, and then calls getFontMetrics(fm) with it, returning the object. <br /><br />"
"android.graphics.Paint.Paint.FontMetrics () "," Return the font's recommended interline spacing, given the Paint's settings for typeface, textSize, etc. <br /><br />"
"android.graphics.Paint.setDither (boolean dither) "," Helper for setFlags(), setting or clearing the DITHER_FLAG bit Dithering affects how colors that are higher precision than the device are down-sampled. <br /><br />"
"android.graphics.Paint.Xfermode () "," Set or clear the xfermode object. <br /><br />"
"android.graphics.Paint.setStrokeMiter (float miter) "," Set the paint's stroke miter value. <br /><br />"
"android.graphics.Paint.clearShadowLayer () "," Clear the shadow layer. <br /><br />"
"android.graphics.Paint.ColorFilter () "," Set or clear the paint's colorfilter, returning the parameter. <br /><br />"
"android.graphics.Paint.setStrokeWidth (float width) "," Set the width for stroking. <br /><br />"
"android.graphics.Paint.setTextSkewX (float skewX) "," Set the paint's horizontal skew factor for text. <br /><br />"
"android.graphics.Paint.getTextSkewX () "," Return the paint's horizontal skew factor for text. <br /><br />"
"android.graphics.Paint.getColorFilter () "," Get the paint's colorfilter (maybe be null). <br /><br />"
"android.graphics.Paint.reset () "," Restores the paint to its default settings. <br /><br />"
"android.graphics.Paint.setUnderlineText (boolean underlineText) "," Helper for setFlags(), setting or clearing the UNDERLINE_TEXT_FLAG bit <br /><br />"
"android.graphics.Path.cubicTo (float x1, float y1, float x2, float y2, float x3, float y3) "," Add a cubic bezier from the last point, approaching control points (x1,y1) and (x2,y2), and ending at (x3,y3). <br /><br />"
"android.graphics.Path.Path.Op () "," Set this path to the result of applying the Op to this path and the specified path. <br /><br />"
"android.graphics.Path.close () "," Close the current contour. <br /><br />"
"android.graphics.Path.lineTo (float x, float y) "," Add a line from the last point to the specified point (x,y). <br /><br />"
"android.graphics.Path.Matrix () "," Transform the points in this path by matrix. <br /><br />"
"android.graphics.Path.RectF () "," Returns true if the path specifies a rectangle. <br /><br />"
"android.graphics.Path.rCubicTo (float x1, float y1, float x2, float y2, float x3, float y3) "," Same as cubicTo, but the coordinates are considered relative to the current point on this contour. <br /><br />"
"android.graphics.Path.Path.Direction () "," Add a closed round-rectangle contour to the path <br /><br />"
"android.graphics.Path.rewind () "," Rewinds the path: clears any lines and curves from the path but keeps the internal data structure for faster reuse. <br /><br />"
"android.graphics.Path.incReserve (int extraPtCount) "," Hint to the path to prepare for adding more points. <br /><br />"
"android.graphics.Path.rMoveTo (float dx, float dy) "," Set the beginning of the next contour relative to the last point on the previous contour. <br /><br />"
"android.graphics.Path.setLastPoint (float dx, float dy) "," Sets the last point of the path. <br /><br />"
"android.graphics.Path.isConvex () "," Returns the path's convexity, as defined by the content of the path. <br /><br />"
"android.graphics.Path.Path () "," Transform the points in this path by matrix, and write the answer into dst. <br /><br />"
"android.graphics.Path.rQuadTo (float dx1, float dy1, float dx2, float dy2) "," Same as quadTo, but the coordinates are considered relative to the last point on this contour. <br /><br />"
"android.graphics.Path.moveTo (float x, float y) "," Set the beginning of the next contour to the point (x,y). <br /><br />"
"android.graphics.Path.offset (float dx, float dy) "," Offset the path by (dx,dy) <br /><br />"
"android.graphics.Path.addArc (float left, float top, float right, float bottom, float startAngle, float sweepAngle) "," Add the specified arc to the path as a new contour. <br /><br />"
"android.graphics.Path.quadTo (float x1, float y1, float x2, float y2) "," Add a quadratic bezier from the last point, approaching control point (x1,y1), and ending at (x2,y2). <br /><br />"
"android.graphics.Path.getFillType () "," Return the path's fill type. <br /><br />"
"android.graphics.Path.toggleInverseFillType () "," Toggles the INVERSE state of the filltype <br /><br />"
"android.graphics.Path.isEmpty () "," Returns true if the path is empty (contains no lines or curves) <br /><br />"
"android.graphics.Path.arcTo (float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean forceMoveTo) "," Append the specified arc to the path as a new contour. <br /><br />"
"android.graphics.Path.isInverseFillType () "," Returns true if the filltype is one of the INVERSE variants <br /><br />"
"android.graphics.Path.reset () "," Clear any lines and curves from the path, making it empty. <br /><br />"
"android.graphics.Path.rLineTo (float dx, float dy) "," Same as lineTo, but the coordinates are considered relative to the last point on this contour. <br /><br />"
"android.graphics.Path.Path.FillType () "," Set the path's fill type. <br /><br />"
"android.graphics.PathMeasure.nextContour () "," Move to the next contour in the path. <br /><br />"
"android.graphics.PathMeasure.Path () "," Assign a new path, or null to have none. <br /><br />"
"android.graphics.PathMeasure.getPosTan (float distance, float[] pos, float[] tan) "," Pins distance to 0 &lt;= distance &lt;= getLength(), and then computes the corresponding position and tangent. <br /><br />"
"android.graphics.PathMeasure.isClosed () "," Return true if the current contour is closed() <br /><br />"
"android.graphics.PathMeasure.getLength () "," Return the total length of the current contour, or 0 if no path is associated with this measure object. <br /><br />"
"android.graphics.PathMeasure.Matrix () "," Pins distance to 0 &lt;= distance &lt;= getLength(), and then computes the corresponding matrix. <br /><br />"
"android.graphics.pdf.PdfDocument.OutputStream () "," Writes the document to an output stream. <br /><br />"
"android.graphics.pdf.PdfDocument.PdfDocument.Page () "," Finishes a started page. <br /><br />"
"android.graphics.pdf.PdfDocument.close () "," Closes this document. <br /><br />"
"android.graphics.pdf.PdfDocument.PdfDocument.PageInfo () "," Starts a page using the provided PdfDocument.PageInfo. <br /><br />"
"android.graphics.pdf.PdfDocument.getPages () "," Gets the pages of the document. <br /><br />"
"android.graphics.pdf.PdfDocument.Page.Canvas () "," Gets the Canvas of the page. <br /><br />"
"android.graphics.pdf.PdfDocument.Page.PdfDocument.PageInfo () "," Gets the PdfDocument.PageInfo with meta-data for the page. <br /><br />"
"android.graphics.pdf.PdfDocument.PageInfo.Builder.Rect () "," Sets the content rectangle in PostScript point (1/72th of an inch). <br /><br />"
"android.graphics.pdf.PdfDocument.PageInfo.Builder.PdfDocument.PageInfo () "," Creates a new PdfDocument.PageInfo. <br /><br />"
"android.graphics.pdf.PdfRenderer.openPage (int index) "," Opens a page for rendering. <br /><br />"
"android.graphics.pdf.PdfRenderer.shouldScaleForPrinting () "," Gets whether the document prefers to be scaled for printing. <br /><br />"
"android.graphics.pdf.PdfRenderer.getPageCount () "," Gets the number of pages in the document. <br /><br />"
"android.graphics.pdf.PdfRenderer.close () "," Closes this renderer. <br /><br />"
"android.graphics.pdf.PdfRenderer.Page.getHeight () "," Gets the page height in points (1/72'). <br /><br />"
"android.graphics.pdf.PdfRenderer.Page.close () "," Closes this page. <br /><br />"
"android.graphics.pdf.PdfRenderer.Page.getIndex () "," Gets the page index. <br /><br />"
"android.graphics.pdf.PdfRenderer.Page.getWidth () "," Gets the page width in points (1/72'). <br /><br />"
"android.graphics.pdf.PdfRenderer.Page.Matrix () "," Renders a page to a bitmap. <br /><br />"
"android.graphics.Picture.OutputStream () "," This method was deprecated in API level 18. The recommended alternative is to draw the picture into a Bitmap from which you can persist it as raw or compressed pixels. <br /><br />"
"android.graphics.Picture.getHeight () "," Get the height of the picture as passed to beginRecording. <br /><br />"
"android.graphics.Picture.beginRecording (int width, int height) "," To record a picture, call beginRecording() and then draw into the Canvas that is returned. <br /><br />"
"android.graphics.Picture.Canvas () "," Draw this picture on the canvas. <br /><br />"
"android.graphics.Picture.InputStream () "," This method was deprecated in API level 18. The recommended alternative is to not use writeToStream and instead draw the picture into a Bitmap from which you can persist it as raw or compressed pixels. <br /><br />"
"android.graphics.Picture.getWidth () "," Get the width of the picture as passed to beginRecording. <br /><br />"
"android.graphics.Picture.endRecording () "," Call endRecording when the picture is built. <br /><br />"
"android.graphics.PixelFormat.formatHasAlpha (int format) "," no description <br /><br />"
"android.graphics.PixelFormat.PixelFormat () "," no description <br /><br />"
"android.graphics.Point.set (int x, int y) "," Set the point's x and y coordinates <br /><br />"
"android.graphics.Point.equals (int x, int y) "," Returns true if the point's coordinates equal (x,y) <br /><br />"
"android.graphics.Point.negate () "," Negate the point's coordinates <br /><br />"
"android.graphics.Point.Parcel () "," Write this point to the specified parcel. <br /><br />"
"android.graphics.Point.offset (int dx, int dy) "," Offset the point's coordinates by dx, dy <br /><br />"
"android.graphics.Point.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.graphics.Point.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.graphics.Point.describeContents () "," Parcelable interface methods <br /><br />"
"android.graphics.Point.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.graphics.PointF.set (float x, float y) "," Set the point's x and y coordinates <br /><br />"
"android.graphics.PointF.length () "," Return the euclidian distance from (0,0) to the point <br /><br />"
"android.graphics.PointF.PointF () "," Set the point's x and y coordinates to the coordinates of p <br /><br />"
"android.graphics.PointF.equals (float x, float y) "," Returns true if the point's coordinates equal (x,y) <br /><br />"
"android.graphics.PointF.negate () "," no description <br /><br />"
"android.graphics.PointF.Parcel () "," Write this point to the specified parcel. <br /><br />"
"android.graphics.PointF.offset (float dx, float dy) "," no description <br /><br />"
"android.graphics.PointF.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.graphics.PointF.length (float x, float y) "," Returns the euclidian distance from (0,0) to (x,y) <br /><br />"
"android.graphics.PointF.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.graphics.PointF.describeContents () "," Parcelable interface methods <br /><br />"
"android.graphics.PointF.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.graphics.PorterDuffColorFilter.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.graphics.PorterDuffColorFilter.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.graphics.Rect.flattenToString () "," Return a string representation of the rectangle in a well-defined format. <br /><br />"
"android.graphics.Rect.setEmpty () "," Set the rectangle to (0,0,0,0) <br /><br />"
"android.graphics.Rect.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.graphics.Rect.width () "," no description <br /><br />"
"android.graphics.Rect.Rect () "," Update this Rect to enclose itself and the specified rectangle. <br /><br />"
"android.graphics.Rect.set (int left, int top, int right, int bottom) "," Set the rectangle's coordinates to the specified values. <br /><br />"
"android.graphics.Rect.union (int x, int y) "," Update this Rect to enclose itself and the [x,y] coordinate. <br /><br />"
"android.graphics.Rect.intersects (int left, int top, int right, int bottom) "," Returns true if this rectangle intersects the specified rectangle. <br /><br />"
"android.graphics.Rect.contains (int x, int y) "," Returns true if (x,y) is inside the rectangle. <br /><br />"
"android.graphics.Rect.contains (int left, int top, int right, int bottom) "," Returns true iff the 4 specified sides of a rectangle are inside or equal to this rectangle. <br /><br />"
"android.graphics.Rect.toShortString () "," Return a string representation of the rectangle in a compact form. <br /><br />"
"android.graphics.Rect.flattenToString () () "," Returns a Rect from a string of the form returned by flattenToString(), or null if the string is not of that form. <br /><br />"
"android.graphics.Rect.inset (int dx, int dy) "," Inset the rectangle by (dx,dy). <br /><br />"
"android.graphics.Rect.centerY () "," no description <br /><br />"
"android.graphics.Rect.height () "," no description <br /><br />"
"android.graphics.Rect.intersect (int left, int top, int right, int bottom) "," If the rectangle specified by left,top,right,bottom intersects this rectangle, return true and set this rectangle to that intersection, otherwise return false and do not change this rectangle. <br /><br />"
"android.graphics.Rect.offset (int dx, int dy) "," Offset the rectangle by adding dx to its left and right coordinates, and adding dy to its top and bottom coordinates. <br /><br />"
"android.graphics.Rect.offsetTo (int newLeft, int newTop) "," Offset the rectangle to a specific (left, top) position, keeping its width and height the same. <br /><br />"
"android.graphics.Rect.Parcel () "," Write this rectangle to the specified parcel. <br /><br />"
"android.graphics.Rect.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.graphics.Rect.describeContents () "," Parcelable interface methods <br /><br />"
"android.graphics.Rect.sort () "," Swap top/bottom or left/right if there are flipped (i.e. <br /><br />"
"android.graphics.Rect.exactCenterX () "," no description <br /><br />"
"android.graphics.Rect.exactCenterY () "," no description <br /><br />"
"android.graphics.Rect.isEmpty () "," Returns true if the rectangle is empty (left &gt;= right or top &gt;= bottom) <br /><br />"
"android.graphics.Rect.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.graphics.Rect.union (int left, int top, int right, int bottom) "," Update this Rect to enclose itself and the specified rectangle. <br /><br />"
"android.graphics.Rect.centerX () "," no description <br /><br />"
"android.graphics.RectF.setEmpty () "," Set the rectangle to (0,0,0,0) <br /><br />"
"android.graphics.RectF.RectF () "," Update this Rect to enclose itself and the specified rectangle. <br /><br />"
"android.graphics.RectF.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.graphics.RectF.width () "," no description <br /><br />"
"android.graphics.RectF.Rect () "," Copy the coordinates from src into this rectangle. <br /><br />"
"android.graphics.RectF.toShortString () "," Return a string representation of the rectangle in a compact form. <br /><br />"
"android.graphics.RectF.centerY () "," no description <br /><br />"
"android.graphics.RectF.height () "," no description <br /><br />"
"android.graphics.RectF.contains (float left, float top, float right, float bottom) "," Returns true iff the 4 specified sides of a rectangle are inside or equal to this rectangle. <br /><br />"
"android.graphics.RectF.offsetTo (float newLeft, float newTop) "," Offset the rectangle to a specific (left, top) position, keeping its width and height the same. <br /><br />"
"android.graphics.RectF.intersect (float left, float top, float right, float bottom) "," If the rectangle specified by left,top,right,bottom intersects this rectangle, return true and set this rectangle to that intersection, otherwise return false and do not change this rectangle. <br /><br />"
"android.graphics.RectF.offset (float dx, float dy) "," Offset the rectangle by adding dx to its left and right coordinates, and adding dy to its top and bottom coordinates. <br /><br />"
"android.graphics.RectF.Parcel () "," Write this rectangle to the specified parcel. <br /><br />"
"android.graphics.RectF.intersects (float left, float top, float right, float bottom) "," Returns true if this rectangle intersects the specified rectangle. <br /><br />"
"android.graphics.RectF.inset (float dx, float dy) "," Inset the rectangle by (dx,dy). <br /><br />"
"android.graphics.RectF.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.graphics.RectF.describeContents () "," Parcelable interface methods <br /><br />"
"android.graphics.RectF.sort () "," Swap top/bottom or left/right if there are flipped (i.e. <br /><br />"
"android.graphics.RectF.union (float left, float top, float right, float bottom) "," Update this Rect to enclose itself and the specified rectangle. <br /><br />"
"android.graphics.RectF.contains (float x, float y) "," Returns true if (x,y) is inside the rectangle. <br /><br />"
"android.graphics.RectF.isEmpty () "," Returns true if the rectangle is empty (left &gt;= right or top &gt;= bottom) <br /><br />"
"android.graphics.RectF.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.graphics.RectF.set (float left, float top, float right, float bottom) "," Set the rectangle's coordinates to the specified values. <br /><br />"
"android.graphics.RectF.union (float x, float y) "," Update this Rect to enclose itself and the [x,y] coordinate. <br /><br />"
"android.graphics.RectF.centerX () "," no description <br /><br />"
"android.graphics.Region.Region () "," Set the dst region to the result of translating this region by [dx, dy]. <br /><br />"
"android.graphics.Region.Path () "," Set the path to the boundary of the region. <br /><br />"
"android.graphics.Region.Parcel () "," Write the region and its pixels to the parcel. <br /><br />"
"android.graphics.Region.setEmpty () "," Set the region to the empty region <br /><br />"
"android.graphics.Region.isComplex () "," Return true if the region contains more than one rectangle <br /><br />"
"android.graphics.Region.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.graphics.Region.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.graphics.Region.getBoundaryPath () "," Return the boundary of the region as a new Path. <br /><br />"
"android.graphics.Region.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.graphics.Region.Rect () "," no description <br /><br />"
"android.graphics.Region.set (int left, int top, int right, int bottom) "," Set the region to the specified rectangle <br /><br />"
"android.graphics.Region.translate (int dx, int dy) "," Translate the region by [dx, dy]. <br /><br />"
"android.graphics.Region.Region.Op () "," Set this region to the result of performing the Op on the specified regions. <br /><br />"
"android.graphics.Region.quickReject (int left, int top, int right, int bottom) "," Return true if the region is empty, or if the specified rectangle does not intersect the region. <br /><br />"
"android.graphics.Region.contains (int x, int y) "," Return true if the region contains the specified point <br /><br />"
"android.graphics.Region.quickContains (int left, int top, int right, int bottom) "," Return true if the region is a single rectangle (not complex) and it contains the specified rectangle. <br /><br />"
"android.graphics.Region.isEmpty () "," Return true if this region is empty <br /><br />"
"android.graphics.Region.isRect () "," Return true if the region contains a single rectangle <br /><br />"
"android.graphics.Region.getBounds () "," Return a new Rect set to the bounds of the region. <br /><br />"
"android.graphics.RegionIterator.Rect () "," Return the next rectangle in the region. <br /><br />"
"android.graphics.Shader.Matrix () "," Set the shader's local matrix. <br /><br />"
"android.graphics.SurfaceTexture.attachToGLContext (int texName) "," Attach the SurfaceTexture to the OpenGL ES context that is current on the calling thread. <br /><br />"
"android.graphics.SurfaceTexture.Handler () "," Register a callback to be invoked when a new image frame becomes available to the SurfaceTexture. <br /><br />"
"android.graphics.SurfaceTexture.setDefaultBufferSize (int width, int height) "," Set the default size of the image buffers. <br /><br />"
"android.graphics.SurfaceTexture.getTransformMatrix (float[] mtx) "," Retrieve the 4x4 texture coordinate transform matrix associated with the texture image set by the most recent call to updateTexImage. <br /><br />"
"android.graphics.SurfaceTexture.getTimestamp () "," Retrieve the timestamp associated with the texture image set by the most recent call to updateTexImage. <br /><br />"
"android.graphics.SurfaceTexture.release () "," release() frees all the buffers and puts the SurfaceTexture into the 'abandoned' state. <br /><br />"
"android.graphics.SurfaceTexture.updateTexImage () "," Update the texture image to the most recent frame from the image stream. <br /><br />"
"android.graphics.SurfaceTexture.SurfaceTexture.OnFrameAvailableListener () "," Register a callback to be invoked when a new image frame becomes available to the SurfaceTexture. <br /><br />"
"android.graphics.SurfaceTexture.releaseTexImage () "," Releases the the texture content. <br /><br />"
"android.graphics.SurfaceTexture.detachFromGLContext () "," Detach the SurfaceTexture from the OpenGL ES context that owns the OpenGL ES texture object. <br /><br />"
"android.graphics.SurfaceTexture.OnFrameAvailableListener.SurfaceTexture () "," no description <br /><br />"
"android.graphics.Typeface.String () "," Create a new typeface from the specified font file. <br /><br />"
"android.graphics.Typeface.isItalic () "," Returns true if getStyle() has the ITALIC bit set. <br /><br />"
"android.graphics.Typeface.Typeface () "," Create a typeface object that best matches the specified existing typeface and the specified Style. <br /><br />"
"android.graphics.Typeface.isBold () "," Returns true if getStyle() has the BOLD bit set. <br /><br />"
"android.graphics.Typeface.getStyle () "," Returns the typeface's intrinsic style attributes <br /><br />"
"android.graphics.Typeface.File () "," Create a new typeface from the specified font file. <br /><br />"
"android.graphics.Typeface.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.graphics.Typeface.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.graphics.Typeface.defaultFromStyle (int style) "," Returns one of the default typeface objects, based on the specified style <br /><br />"
"android.graphics.YuvImage.getYuvFormat () "," no description <br /><br />"
"android.graphics.YuvImage.getHeight () "," no description <br /><br />"
"android.graphics.YuvImage.OutputStream () "," Compress a rectangle region in the YuvImage to a jpeg. <br /><br />"
"android.graphics.YuvImage.getWidth () "," no description <br /><br />"
"android.graphics.YuvImage.getYuvData () "," no description <br /><br />"
"android.graphics.YuvImage.getStrides () "," no description <br /><br />"
"android.hardware.Camera.Area.Object () "," Compares obj to this area. <br /><br />"
"android.hardware.Camera.AutoFocusCallback.Camera () "," Called when the camera auto focus completes. <br /><br />"
"android.hardware.Camera.AutoFocusMoveCallback.Camera () "," Called when the camera auto focus starts or stops. <br /><br />"
"android.hardware.Camera.ErrorCallback.Camera () "," Callback for camera errors. <br /><br />"
"android.hardware.Camera.FaceDetectionListener.Camera () "," Notify the listener of the detected faces in the preview frame. <br /><br />"
"android.hardware.Camera.Camera.FaceDetectionListener () "," Registers a listener to be notified about the faces detected in the preview frame. <br /><br />"
"android.hardware.Camera.getParameters () "," Returns the current settings for this Camera service. <br /><br />"
"android.hardware.Camera.getNumberOfCameras () "," Returns the number of physical cameras available on this device. <br /><br />"
"android.hardware.Camera.stopFaceDetection () "," Stops the face detection. <br /><br />"
"android.hardware.Camera.addCallbackBuffer (byte[] callbackBuffer) "," Adds a pre-allocated buffer to the preview callback buffer queue. <br /><br />"
"android.hardware.Camera.Camera.ErrorCallback () "," Registers a callback to be invoked when an error occurs. <br /><br />"
"android.hardware.Camera.startSmoothZoom (int value) "," Zooms to the requested value smoothly. <br /><br />"
"android.hardware.Camera.open (int cameraId) "," Creates a new Camera object to access a particular hardware camera. <br /><br />"
"android.hardware.Camera.addCallbackBuffer (byte[]) () "," Installs a callback to be invoked for every preview frame, using buffers supplied with addCallbackBuffer(byte[]), in addition to displaying them on the screen. <br /><br />"
"android.hardware.Camera.reconnect () "," Reconnects to the camera service after another process used it. <br /><br />"
"android.hardware.Camera.startPreview () () "," Stops capturing and drawing preview frames to the surface, and resets the camera for a future call to startPreview(). <br /><br />"
"android.hardware.Camera.startPreview () "," Starts capturing and drawing preview frames to the screen. <br /><br />"
"android.hardware.Camera.Camera.AutoFocusMoveCallback () "," Sets camera auto-focus move callback. <br /><br />"
"android.hardware.Camera.Camera.CameraInfo () "," Returns the information about a particular camera. <br /><br />"
"android.hardware.Camera.Camera.Parameters () "," Changes the settings for this Camera service. <br /><br />"
"android.hardware.Camera.startFaceDetection () "," Starts the face detection. <br /><br />"
"android.hardware.Camera.enableShutterSound (boolean enabled) "," Enable or disable the default shutter sound when taking a picture. <br /><br />"
"android.hardware.Camera.Camera.AutoFocusCallback () "," Starts camera auto-focus and registers a callback function to run when the camera is focused. <br /><br />"
"android.hardware.Camera.stopSmoothZoom () "," Stops the smooth zoom. <br /><br />"
"android.hardware.Camera.open () "," Creates a new Camera object to access the first back-facing camera on the device. <br /><br />"
"android.hardware.Camera.Surface () "," Sets the Surface to be used for live preview. <br /><br />"
"android.hardware.Camera.Camera.OnZoomChangeListener () "," Registers a listener to be notified when the zoom value is updated by the camera driver during smooth zoom. <br /><br />"
"android.hardware.Camera.lock () "," Re-locks the camera to prevent other processes from accessing it. <br /><br />"
"android.hardware.Camera.release () "," Disconnects and releases the Camera object resources. <br /><br />"
"android.hardware.Camera.cancelAutoFocus () "," Cancels any auto-focus function in progress. <br /><br />"
"android.hardware.Camera.setDisplayOrientation (int degrees) "," Set the clockwise rotation of preview display in degrees. <br /><br />"
"android.hardware.Camera.Camera.PictureCallback () "," Triggers an asynchronous image capture. <br /><br />"
"android.hardware.Camera.Camera.PreviewCallback () "," Installs a callback to be invoked for every preview frame in addition to displaying them on the screen. <br /><br />"
"android.hardware.Camera.unlock () "," Unlocks the camera to allow another process to access it. <br /><br />"
"android.hardware.Camera.SurfaceTexture () "," Sets the SurfaceTexture to be used for live preview. <br /><br />"
"android.hardware.Camera.OnZoomChangeListener.Camera () "," Called when the zoom value has changed during a smooth zoom. <br /><br />"
"android.hardware.Camera.Parameters.getZoomRatios () "," Gets the zoom ratios of all zoom values. <br /><br />"
"android.hardware.Camera.Parameters.getFocalLength () "," Gets the focal length (in millimeter) of the camera. <br /><br />"
"android.hardware.Camera.Parameters.getSupportedPictureFormats () "," Gets the supported picture formats. <br /><br />"
"android.hardware.Camera.Parameters.setExposureCompensation (int value) "," Sets the exposure compensation index. <br /><br />"
"android.hardware.Camera.Parameters.isAutoWhiteBalanceLockSupported () "," Returns true if auto-white balance locking is supported. <br /><br />"
"android.hardware.Camera.Parameters.getPreviewSize () "," Returns the dimensions setting for preview pictures. <br /><br />"
"android.hardware.Camera.Parameters.getFocusAreas () "," Gets the current focus areas. <br /><br />"
"android.hardware.Camera.Parameters.setJpegThumbnailQuality (int quality) "," Sets the quality of the EXIF thumbnail in Jpeg picture. <br /><br />"
"android.hardware.Camera.Parameters.isZoomSupported () "," Returns true if zoom is supported. <br /><br />"
"android.hardware.Camera.Parameters.getFlashMode () "," Gets the current flash mode setting. <br /><br />"
"android.hardware.Camera.Parameters.getJpegThumbnailQuality () "," Returns the quality setting for the EXIF thumbnail in Jpeg picture. <br /><br />"
"android.hardware.Camera.Parameters.isVideoStabilizationSupported () "," Returns true if video stabilization is supported. <br /><br />"
"android.hardware.Camera.Parameters.setGpsAltitude (double altitude) "," Sets GPS altitude. <br /><br />"
"android.hardware.Camera.Parameters.getMaxNumMeteringAreas () "," Gets the maximum number of metering areas supported. <br /><br />"
"android.hardware.Camera.Parameters.getPictureSize () "," Returns the dimension setting for pictures. <br /><br />"
"android.hardware.Camera.Parameters.getSupportedPreviewFpsRange () "," Gets the supported preview fps (frame-per-second) ranges. <br /><br />"
"android.hardware.Camera.Parameters.getMaxNumDetectedFaces () "," Gets the maximum number of detected faces supported. <br /><br />"
"android.hardware.Camera.Parameters.getMinExposureCompensation () "," Gets the minimum exposure compensation index. <br /><br />"
"android.hardware.Camera.Parameters.getPreviewFpsRange (int[]) () "," This method was deprecated in API level 9. replaced by getPreviewFpsRange(int[]) <br /><br />"
"android.hardware.Camera.Parameters.setAutoExposureLock (boolean toggle) "," Sets the auto-exposure lock state. <br /><br />"
"android.hardware.Camera.Parameters.getSupportedPreviewSizes () "," Gets the supported preview sizes. <br /><br />"
"android.hardware.Camera.Parameters.getMeteringAreas () "," Gets the current metering areas. <br /><br />"
"android.hardware.Camera.Parameters.getVideoStabilization () "," Get the current state of video stabilization. <br /><br />"
"android.hardware.Camera.Parameters.setPreviewFormat (int pixel_format) "," Sets the image format for preview pictures. <br /><br />"
"android.hardware.Camera.Parameters.setPreviewFpsRange (int min, int max) "," Sets the minimum and maximum preview fps. <br /><br />"
"android.hardware.Camera.Parameters.getSupportedPreviewFormats () "," Gets the supported preview formats. <br /><br />"
"android.hardware.Camera.Parameters.getMaxZoom () "," Gets the maximum zoom value allowed for snapshot. <br /><br />"
"android.hardware.Camera.Parameters.getWhiteBalance () "," Gets the current white balance setting. <br /><br />"
"android.hardware.Camera.Parameters.getSupportedAntibanding () "," Gets the supported antibanding values. <br /><br />"
"android.hardware.Camera.Parameters.getExposureCompensationStep () "," Gets the exposure compensation step. <br /><br />"
"android.hardware.Camera.Parameters.setZoom (int value) "," Sets current zoom value. <br /><br />"
"android.hardware.Camera.Parameters.isSmoothZoomSupported () "," Returns true if smooth zoom is supported. <br /><br />"
"android.hardware.Camera.Parameters.getAntibanding () "," Gets the current antibanding setting. <br /><br />"
"android.hardware.Camera.Parameters.getSupportedFocusModes () "," Gets the supported focus modes. <br /><br />"
"android.hardware.Camera.Parameters.getPictureFormat () "," Returns the image format for pictures. <br /><br />"
"android.hardware.Camera.Parameters.getJpegThumbnailSize () "," Returns the dimensions for EXIF thumbnail in Jpeg picture. <br /><br />"
"android.hardware.Camera.Parameters.getPreferredPreviewSizeForVideo () "," Returns the preferred or recommended preview size (width and height) in pixels for video recording. <br /><br />"
"android.hardware.Camera.Parameters.isVideoSnapshotSupported () "," Returns true if video snapshot is supported. <br /><br />"
"android.hardware.Camera.Parameters.setPreviewSize (int width, int height) "," Sets the dimensions for preview pictures. <br /><br />"
"android.hardware.Camera.Parameters.setPreviewFpsRange (int, int) (int fps) "," This method was deprecated in API level 9. replaced by setPreviewFpsRange(int, int) <br /><br />"
"android.hardware.Camera.Parameters.flatten () "," Creates a single string with all the parameters set in this Parameters object. <br /><br />"
"android.hardware.Camera.Parameters.setJpegThumbnailSize (int width, int height) "," Sets the dimensions for EXIF thumbnail in Jpeg picture. <br /><br />"
"android.hardware.Camera.Parameters.getSupportedVideoSizes () "," Gets the supported video frame sizes that can be used by MediaRecorder. <br /><br />"
"android.hardware.Camera.Parameters.setJpegQuality (int quality) "," Sets Jpeg quality of captured picture. <br /><br />"
"android.hardware.Camera.Parameters.setGpsLatitude (double latitude) "," Sets GPS latitude coordinate. <br /><br />"
"android.hardware.Camera.Parameters.setPictureSize (int width, int height) "," Sets the dimensions for pictures. <br /><br />"
"android.hardware.Camera.Parameters.getPreviewFpsRange (int[] range) "," Returns the current minimum and maximum preview fps. <br /><br />"
"android.hardware.Camera.Parameters.getSceneMode () "," Gets the current scene mode setting. <br /><br />"
"android.hardware.Camera.Parameters.setRotation (int rotation) "," Sets the clockwise rotation angle in degrees relative to the orientation of the camera. <br /><br />"
"android.hardware.Camera.Parameters.getMaxExposureCompensation () "," Gets the maximum exposure compensation index. <br /><br />"
"android.hardware.Camera.Parameters.getSupportedWhiteBalance () "," Gets the supported white balance. <br /><br />"
"android.hardware.Camera.Parameters.getSupportedPictureSizes () "," Gets the supported picture sizes. <br /><br />"
"android.hardware.Camera.Parameters.setVideoStabilization (boolean toggle) "," Enables and disables video stabilization. <br /><br />"
"android.hardware.Camera.Parameters.getSupportedPreviewFpsRange () () "," This method was deprecated in API level 9. replaced by getSupportedPreviewFpsRange() <br /><br />"
"android.hardware.Camera.Parameters.getColorEffect () "," Gets the current color effect setting. <br /><br />"
"android.hardware.Camera.Parameters.removeGpsData () "," Removes GPS latitude, longitude, altitude, and timestamp from the parameters. <br /><br />"
"android.hardware.Camera.Parameters.getExposureCompensation () "," Gets the current exposure compensation index. <br /><br />"
"android.hardware.Camera.Parameters.setRecordingHint (boolean hint) "," Sets recording mode hint. <br /><br />"
"android.hardware.Camera.Parameters.setGpsLongitude (double longitude) "," Sets GPS longitude coordinate. <br /><br />"
"android.hardware.Camera.Parameters.getSupportedSceneModes () "," Gets the supported scene modes. <br /><br />"
"android.hardware.Camera.Parameters.String () "," Takes a flattened string of parameters and adds each one to this Parameters object. <br /><br />"
"android.hardware.Camera.Parameters.getSupportedFlashModes () "," Gets the supported flash modes. <br /><br />"
"android.hardware.Camera.Parameters.getSupportedJpegThumbnailSizes () "," Gets the supported jpeg thumbnail sizes. <br /><br />"
"android.hardware.Camera.Parameters.getAutoExposureLock () "," Gets the state of the auto-exposure lock. <br /><br />"
"android.hardware.Camera.Parameters.getAutoWhiteBalanceLock () "," Gets the state of the auto-white balance lock. <br /><br />"
"android.hardware.Camera.Parameters.setPictureFormat (int pixel_format) "," Sets the image format for pictures. <br /><br />"
"android.hardware.Camera.Parameters.getFocusMode () "," Gets the current focus mode setting. <br /><br />"
"android.hardware.Camera.Parameters.getHorizontalViewAngle () "," Gets the horizontal angle of view in degrees. <br /><br />"
"android.hardware.Camera.Parameters.getFocusDistances (float[] output) "," Gets the distances from the camera to where an object appears to be in focus. <br /><br />"
"android.hardware.Camera.Parameters.getVerticalViewAngle () "," Gets the vertical angle of view in degrees. <br /><br />"
"android.hardware.Camera.Parameters.getJpegQuality () "," Returns the quality setting for the JPEG picture. <br /><br />"
"android.hardware.Camera.Parameters.setGpsTimestamp (long timestamp) "," Sets GPS timestamp. <br /><br />"
"android.hardware.Camera.Parameters.isAutoExposureLockSupported () "," Returns true if auto-exposure locking is supported. <br /><br />"
"android.hardware.Camera.Parameters.setAutoWhiteBalanceLock (boolean toggle) "," Sets the auto-white balance lock state. <br /><br />"
"android.hardware.Camera.Parameters.getSupportedColorEffects () "," Gets the supported color effects. <br /><br />"
"android.hardware.Camera.Parameters.getZoom () "," Gets current zoom value. <br /><br />"
"android.hardware.Camera.Parameters.getMaxNumFocusAreas () "," Gets the maximum number of focus areas supported. <br /><br />"
"android.hardware.Camera.Parameters.Camera.Area () "," Sets metering areas. <br /><br />"
"android.hardware.Camera.Parameters.Camera.PreviewCallback () "," Returns the image format for preview frames got from Camera.PreviewCallback. <br /><br />"
"android.hardware.Camera.PictureCallback.Camera () "," Called when image data is available after a picture is taken. <br /><br />"
"android.hardware.Camera.PreviewCallback.Camera () "," Called as preview frames are displayed. <br /><br />"
"android.hardware.Camera.ShutterCallback.onShutter () "," Called as near as possible to the moment when a photo is captured from the sensor. <br /><br />"
"android.hardware.Camera.Size.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.hardware.Camera.Size.Object () "," Compares obj to this size. <br /><br />"
"android.hardware.camera2.CameraAccessException.getReason () "," The reason for the failure to access the camera. <br /><br />"
"android.hardware.camera2.CameraCaptureSession.CaptureCallback.TotalCaptureResult () "," This method is called when an image capture has fully completed and all the result metadata is available. <br /><br />"
"android.hardware.camera2.CameraCaptureSession.CaptureCallback.CaptureFailure () "," This method is called independently of the others in CaptureCallback, when a capture sequence finishes and all CaptureResult or CaptureFailure for it have been returned via this listener. <br /><br />"
"android.hardware.camera2.CameraCaptureSession.CaptureCallback.CaptureRequest () "," This method is called when the camera device has started capturing the output image for the request, at the beginning of image exposure. <br /><br />"
"android.hardware.camera2.CameraCaptureSession.CaptureCallback.CaptureResult () "," This method is called when an image capture makes partial forward progress; some (but not all) results from an image capture are available. <br /><br />"
"android.hardware.camera2.CameraCaptureSession.getDevice () "," Get the camera device that this session is created for. <br /><br />"
"android.hardware.camera2.CameraCaptureSession.Handler () "," Request endlessly repeating capture of images by this capture session. <br /><br />"
"android.hardware.camera2.CameraCaptureSession.close () "," Close this capture session asynchronously. <br /><br />"
"android.hardware.camera2.CameraCaptureSession.abortCaptures () "," Discard all captures currently pending and in-progress as fast as possible. <br /><br />"
"android.hardware.camera2.CameraCaptureSession.setRepeatingRequest () "," Cancel any ongoing repeating capture set by either setRepeatingRequest or setRepeatingBurst(List  , CameraCaptureSession.CaptureCallback, Handler) . <br /><br />"
"android.hardware.camera2.CameraCaptureSession.StateCallback.CameraCaptureSession () "," This method is called every time the session has no more capture requests to process. <br /><br />"
"android.hardware.camera2.CameraCharacteristics.Key () "," Get a camera characteristics field value. <br /><br />"
"android.hardware.camera2.CameraCharacteristics.getKeys () "," Returns a list of the keys contained in this map. <br /><br />"
"android.hardware.camera2.CameraCharacteristics.CaptureResult () "," Returns the list of keys supported by this CameraDevice for querying with a CaptureResult. <br /><br />"
"android.hardware.camera2.CameraCharacteristics.CaptureRequest () "," Returns the list of keys supported by this CameraDevice for querying with a CaptureRequest. <br /><br />"
"android.hardware.camera2.CameraCharacteristics.Key&lt;T&gt;.getName () "," Return a camelCase, period separated name formatted like: 'root.section[.subsections].name'. <br /><br />"
"android.hardware.camera2.CameraCharacteristics.Key&lt;T&gt;.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.hardware.camera2.CameraCharacteristics.Key&lt;T&gt;.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.hardware.camera2.CameraDevice.Handler () "," Create a new camera capture session by providing the target output set of Surfaces to the camera device. <br /><br />"
"android.hardware.camera2.CameraDevice.getId () "," Get the ID of this camera device. <br /><br />"
"android.hardware.camera2.CameraDevice.close () "," Close the connection to this camera device as quickly as possible. <br /><br />"
"android.hardware.camera2.CameraDevice.CaptureRequest.Builder (int templateType) "," Create a CaptureRequest.Builder for new capture requests, initialized with template for a target use case. <br /><br />"
"android.hardware.camera2.CameraDevice.StateCallback.close () () "," The method called when a camera device has been closed with close(). <br /><br />"
"android.hardware.camera2.CameraDevice.StateCallback.CameraDevice () "," The method called when a camera device has finished opening. <br /><br />"
"android.hardware.camera2.CameraManager.AvailabilityCallback.String () "," A previously-available camera has become unavailable for use. <br /><br />"
"android.hardware.camera2.CameraMetadata&lt;TKey&gt;.getKeys () "," Returns a list of the keys contained in this map. <br /><br />"
"android.hardware.camera2.CaptureFailure.wasImageCaptured () "," Determine if the image was captured from the camera. <br /><br />"
"android.hardware.camera2.CaptureFailure.capture (CaptureRequest, CameraCaptureSession.CaptureCallback, Handler) () "," The sequence ID for this failed capture that was returned by the capture(CaptureRequest, CameraCaptureSession.CaptureCallback, Handler) family of functions. <br /><br />"
"android.hardware.camera2.CaptureFailure.getFrameNumber () "," Get the frame number associated with this failed capture. <br /><br />"
"android.hardware.camera2.CaptureFailure.getReason () "," Determine why the request was dropped, whether due to an error or to a user action. <br /><br />"
"android.hardware.camera2.CaptureFailure.getRequest () "," Get the request associated with this failed capture. <br /><br />"
"android.hardware.camera2.CaptureRequest.Builder.Key () "," Set a capture request field to a value. <br /><br />"
"android.hardware.camera2.CaptureRequest.Builder.Surface () "," Remove a surface from the list of targets for this request. <br /><br />"
"android.hardware.camera2.CaptureRequest.Builder.Object () "," Set a tag for this request. <br /><br />"
"android.hardware.camera2.CaptureRequest.Builder.build () "," Build a request using the current target Surfaces and settings. <br /><br />"
"android.hardware.camera2.CaptureRequest.getTag () "," Retrieve the tag for this request, if any. <br /><br />"
"android.hardware.camera2.CaptureRequest.Key () "," Get a capture request field value. <br /><br />"
"android.hardware.camera2.CaptureRequest.getKeys () "," Returns a list of the keys contained in this map. <br /><br />"
"android.hardware.camera2.CaptureRequest.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.hardware.camera2.CaptureRequest.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.hardware.camera2.CaptureRequest.Object () "," Determine whether this CaptureRequest is equal to another CaptureRequest. <br /><br />"
"android.hardware.camera2.CaptureRequest.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.hardware.camera2.CaptureRequest.Key&lt;T&gt;.getName () "," Return a camelCase, period separated name formatted like: 'root.section[.subsections].name'. <br /><br />"
"android.hardware.camera2.CaptureRequest.Key&lt;T&gt;.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.hardware.camera2.CaptureRequest.Key&lt;T&gt;.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.hardware.camera2.CaptureResult.capture (CaptureRequest, CameraCaptureSession.CaptureCallback, Handler) () "," The sequence ID for this failure that was returned by the capture(CaptureRequest, CameraCaptureSession.CaptureCallback, Handler) family of functions. <br /><br />"
"android.hardware.camera2.CaptureResult.getFrameNumber () "," Get the frame number associated with this result. <br /><br />"
"android.hardware.camera2.CaptureResult.Key () "," Get a capture result field value. <br /><br />"
"android.hardware.camera2.CaptureResult.getKeys () "," Returns a list of the keys contained in this map. <br /><br />"
"android.hardware.camera2.CaptureResult.getRequest () "," Get the request associated with this result. <br /><br />"
"android.hardware.camera2.CaptureResult.Key&lt;T&gt;.getName () "," Return a camelCase, period separated name formatted like: 'root.section[.subsections].name'. <br /><br />"
"android.hardware.camera2.CaptureResult.Key&lt;T&gt;.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.hardware.camera2.CaptureResult.Key&lt;T&gt;.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.hardware.camera2.DngCreator.RAW_SENSOR () "," Write the RAW_SENSOR pixel data to a DNG file with the currently configured metadata. <br /><br />"
"android.hardware.camera2.DngCreator.setOrientation (int orientation) "," Set the orientation value to write. <br /><br />"
"android.hardware.camera2.DngCreator.String () "," Set the user description string to write. <br /><br />"
"android.hardware.camera2.DngCreator.close () "," Closes the object and release any system resources it holds. <br /><br />"
"android.hardware.camera2.DngCreator.Location () "," Set image location metadata. <br /><br />"
"android.hardware.camera2.DngCreator.Image () "," Write the pixel data to a DNG file with the currently configured metadata. <br /><br />"
"android.hardware.camera2.DngCreator.Bitmap () "," Set the thumbnail image. <br /><br />"
"android.hardware.camera2.params.BlackLevelPattern.BlackLevelPattern () "," Check if this BlackLevelPattern is equal to another BlackLevelPattern. <br /><br />"
"android.hardware.camera2.params.BlackLevelPattern.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.hardware.camera2.params.BlackLevelPattern.getOffsetForIndex (int column, int row) "," Return the color channel offset for a given index into the array of raw pixel values. <br /><br />"
"android.hardware.camera2.params.BlackLevelPattern.copyTo (int[] destination, int offset) "," Copy the ColorChannel offsets into the destination vector. <br /><br />"
"android.hardware.camera2.params.ColorSpaceTransform.Rational () "," Copy the Rational elements in row-major order from this matrix into the destination. <br /><br />"
"android.hardware.camera2.params.ColorSpaceTransform.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.hardware.camera2.params.ColorSpaceTransform.ColorSpaceTransform () "," Check if this ColorSpaceTransform is equal to another ColorSpaceTransform. <br /><br />"
"android.hardware.camera2.params.ColorSpaceTransform.Rational (int[] destination, int offset) "," Copy the Rational elements in row-major order from this matrix into the destination. <br /><br />"
"android.hardware.camera2.params.ColorSpaceTransform.getElement (int column, int row) "," Get an element of this matrix by its row and column. <br /><br />"
"android.hardware.camera2.params.ColorSpaceTransform.toString () "," Return the color space transform as a string representation. <br /><br />"
"android.hardware.camera2.params.Face.getScore () "," The confidence level for the detection of the face. <br /><br />"
"android.hardware.camera2.params.Face.getId () "," An unique id per face while the face is visible to the tracker. <br /><br />"
"android.hardware.camera2.params.Face.getLeftEyePosition () "," The coordinates of the center of the left eye. <br /><br />"
"android.hardware.camera2.params.Face.getBounds () "," Bounds of the face. <br /><br />"
"android.hardware.camera2.params.Face.toString () "," Represent the Face as a string for debugging purposes. <br /><br />"
"android.hardware.camera2.params.Face.getRightEyePosition () "," The coordinates of the center of the right eye. <br /><br />"
"android.hardware.camera2.params.Face.getMouthPosition () "," The coordinates of the center of the mouth. <br /><br />"
"android.hardware.camera2.params.LensShadingMap.copyGainFactors (float[] destination, int offset) "," Copy all gain factors in row-major order from this lens shading map into the destination. <br /><br />"
"android.hardware.camera2.params.LensShadingMap.getColumnCount () "," Get the number of columns in this map. <br /><br />"
"android.hardware.camera2.params.LensShadingMap.getGainFactorCount () "," Get the total number of gain factors in this map. <br /><br />"
"android.hardware.camera2.params.LensShadingMap.getGainFactor (int colorChannel, int column, int row) "," Get a single color channel gain factor from this lens shading map by its row and column. <br /><br />"
"android.hardware.camera2.params.LensShadingMap.getGainFactorVector (int column, int row) "," Get a gain factor vector from this lens shading map by its row and column. <br /><br />"
"android.hardware.camera2.params.LensShadingMap.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.hardware.camera2.params.LensShadingMap.getRowCount () "," Get the number of rows in this map. <br /><br />"
"android.hardware.camera2.params.LensShadingMap.Object () "," Check if this LensShadingMap is equal to another LensShadingMap. <br /><br />"
"android.hardware.camera2.params.MeteringRectangle.Rect () "," Convenience method to create a Rect from this metering rectangle. <br /><br />"
"android.hardware.camera2.params.MeteringRectangle.getMeteringWeight () "," Return the metering weight of the rectangle. <br /><br />"
"android.hardware.camera2.params.MeteringRectangle.getX () "," Return the X coordinate of the left side of the rectangle. <br /><br />"
"android.hardware.camera2.params.MeteringRectangle.getHeight () "," Return the height of the rectangle. <br /><br />"
"android.hardware.camera2.params.MeteringRectangle.getSize () "," Convenience method to create the size from this metering rectangle. <br /><br />"
"android.hardware.camera2.params.MeteringRectangle.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.hardware.camera2.params.MeteringRectangle.getY () "," Return the Y coordinate of the upper side of the rectangle. <br /><br />"
"android.hardware.camera2.params.MeteringRectangle.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.hardware.camera2.params.MeteringRectangle.Point () "," Convenience method to create the upper-left (X,Y) coordinate as a Point. <br /><br />"
"android.hardware.camera2.params.MeteringRectangle.getWidth () "," Return the width of the rectangle. <br /><br />"
"android.hardware.camera2.params.MeteringRectangle.MeteringRectangle () "," Compare two metering rectangles to see if they are equal. <br /><br />"
"android.hardware.camera2.params.MeteringRectangle.toString () "," Return the metering rectangle as a string representation '(x:%d, y:%d, w:%d, h:%d, wt:%d)' where each %d respectively represents the x, y, width, height, and weight points. <br /><br />"
"android.hardware.camera2.params.RggbChannelVector.getRed () "," Get the red component. <br /><br />"
"android.hardware.camera2.params.RggbChannelVector.getGreenEven () "," Get the green (even rows) component. <br /><br />"
"android.hardware.camera2.params.RggbChannelVector.getBlue () "," Get the blue component. <br /><br />"
"android.hardware.camera2.params.RggbChannelVector.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.hardware.camera2.params.RggbChannelVector.RggbChannelVector () "," Check if this RggbChannelVector is equal to another RggbChannelVector. <br /><br />"
"android.hardware.camera2.params.RggbChannelVector.copyTo (float[] destination, int offset) "," Copy the vector into the destination in the order [R, Geven, Godd, B]. <br /><br />"
"android.hardware.camera2.params.RggbChannelVector.getGreenOdd () "," Get the green (odd rows) component. <br /><br />"
"android.hardware.camera2.params.RggbChannelVector.toString () "," Return the RggbChannelVector as a string representation. <br /><br />"
"android.hardware.camera2.params.RggbChannelVector.getComponent (int colorChannel) "," Get the component by the color channel index. <br /><br />"
"android.hardware.camera2.params.StreamConfigurationMap.frame duration () "," Get the minimum frame duration for the format/size combination (in nanoseconds). <br /><br />"
"android.hardware.camera2.params.StreamConfigurationMap.Integer () "," Get the supported video sizes for input FPS range. <br /><br />"
"android.hardware.camera2.params.StreamConfigurationMap.getHighSpeedVideoFpsRanges () "," Get a list of supported high speed video recording FPS ranges. <br /><br />"
"android.hardware.camera2.params.StreamConfigurationMap.getOutputSizes (int format) "," Get a list of sizes compatible with the requested image format. <br /><br />"
"android.hardware.camera2.params.StreamConfigurationMap.StreamConfigurationMap () "," Check if this StreamConfigurationMap is equal to another StreamConfigurationMap. <br /><br />"
"android.hardware.camera2.params.StreamConfigurationMap.Size () "," Get the stall duration for the format/size combination (in nanoseconds). <br /><br />"
"android.hardware.camera2.params.StreamConfigurationMap.capture session () "," Determine whether or not the surface in its current state is suitable to be included in a capture session as an output. <br /><br />"
"android.hardware.camera2.params.StreamConfigurationMap.createCaptureSession (int format) "," Determine whether or not output surfaces with a particular user-defined format can be passed createCaptureSession. <br /><br />"
"android.hardware.camera2.params.StreamConfigurationMap.getHighSpeedVideoSizes () "," Get a list of supported high speed video recording sizes. <br /><br />"
"android.hardware.camera2.params.StreamConfigurationMap.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.hardware.camera2.params.StreamConfigurationMap.Class () "," Determine whether or not output streams can be configured with a particular class as a consumer. <br /><br />"
"android.hardware.camera2.params.StreamConfigurationMap.getOutputFormats () "," Get the image format output formats in this stream configuration. <br /><br />"
"android.hardware.camera2.params.TonemapCurve.getPointCount (int colorChannel) "," Get the number of points stored in this tonemap curve for the specified color channel. <br /><br />"
"android.hardware.camera2.params.TonemapCurve.getPoint (int colorChannel, int index) "," Get the point for a color channel at a specified index. <br /><br />"
"android.hardware.camera2.params.TonemapCurve.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.hardware.camera2.params.TonemapCurve.Object () "," Check if this TonemapCurve is equal to another TonemapCurve. <br /><br />"
"android.hardware.camera2.params.TonemapCurve.copyColorCurve (int colorChannel, float[] destination, int offset) "," Copy the color curve for a single color channel from this tonemap curve into the destination. <br /><br />"
"android.hardware.camera2.params.TonemapCurve.toString () "," Return the TonemapCurve as a string representation. <br /><br />"
"android.hardware.camera2.TotalCaptureResult.getPartialResults () "," Get the read-only list of partial results that compose this total result. <br /><br />"
"android.hardware.ConsumerIrManager.CarrierFrequencyRange.getMaxFrequency () "," Get the maximum (inclusive) frequency in this range segment. <br /><br />"
"android.hardware.ConsumerIrManager.CarrierFrequencyRange.getMinFrequency () "," Get the minimum (inclusive) frequency in this range segment. <br /><br />"
"android.hardware.display.DisplayManager.DisplayListener.onDisplayRemoved (int displayId) "," Called whenever a logical display has been removed from the system. <br /><br />"
"android.hardware.display.DisplayManager.DisplayListener.onDisplayChanged (int displayId) "," Called whenever the properties of a logical display have changed. <br /><br />"
"android.hardware.display.DisplayManager.DisplayListener.onDisplayAdded (int displayId) "," Called whenever a logical display has been added to the system. <br /><br />"
"android.hardware.display.DisplayManager.getDisplays () "," Gets all currently valid logical displays. <br /><br />"
"android.hardware.display.DisplayManager.String () "," Gets all currently valid logical displays of the specified category. <br /><br />"
"android.hardware.display.DisplayManager.Handler () "," Registers an display listener to receive notifications about when displays are added, removed or changed. <br /><br />"
"android.hardware.display.DisplayManager.Surface () "," Creates a virtual display. <br /><br />"
"android.hardware.display.DisplayManager.DisplayManager.DisplayListener () "," Unregisters a display listener. <br /><br />"
"android.hardware.display.DisplayManager.getDisplay (int displayId) "," Gets information about a logical display. <br /><br />"
"android.hardware.display.VirtualDisplay.Callback.onPaused () "," Called when the virtual display video projection has been paused by the system or when the surface has been detached by the application by calling setSurface(null). <br /><br />"
"android.hardware.display.VirtualDisplay.Callback.onResumed () "," Called when the virtual display video projection has been resumed after having been paused. <br /><br />"
"android.hardware.display.VirtualDisplay.Callback.onStopped () "," Called when the virtual display video projection has been stopped by the system. <br /><br />"
"android.hardware.GeomagneticField.getX () "," no description <br /><br />"
"android.hardware.GeomagneticField.getZ () "," no description <br /><br />"
"android.hardware.GeomagneticField.getHorizontalStrength () "," no description <br /><br />"
"android.hardware.GeomagneticField.getInclination () "," no description <br /><br />"
"android.hardware.GeomagneticField.getDeclination () "," no description <br /><br />"
"android.hardware.GeomagneticField.getY () "," no description <br /><br />"
"android.hardware.GeomagneticField.getFieldStrength () "," no description <br /><br />"
"android.hardware.input.InputManager.Handler () "," Registers an input device listener to receive notifications about when input devices are added, removed or changed. <br /><br />"
"android.hardware.input.InputManager.InputManager.InputDeviceListener () "," Unregisters an input device listener. <br /><br />"
"android.hardware.input.InputManager.getInputDevice (int id) "," Gets information about the input device with the specified id. <br /><br />"
"android.hardware.input.InputManager.getInputDeviceIds () "," Gets the ids of all input devices in the system. <br /><br />"
"android.hardware.input.InputManager.InputDeviceListener.onInputDeviceAdded (int deviceId) "," Called whenever an input device has been added to the system. <br /><br />"
"android.hardware.input.InputManager.InputDeviceListener.onInputDeviceRemoved (int deviceId) "," Called whenever an input device has been removed from the system. <br /><br />"
"android.hardware.input.InputManager.InputDeviceListener.onInputDeviceChanged (int deviceId) "," Called whenever the properties of an input device have changed since they were last queried. <br /><br />"
"android.hardware.Sensor.getVendor () "," no description <br /><br />"
"android.hardware.Sensor.getFifoReservedEventCount () "," no description <br /><br />"
"android.hardware.Sensor.getType () "," no description <br /><br />"
"android.hardware.Sensor.getPower () "," no description <br /><br />"
"android.hardware.Sensor.getFifoMaxEventCount () "," no description <br /><br />"
"android.hardware.Sensor.getResolution () "," no description <br /><br />"
"android.hardware.Sensor.getMaximumRange () "," no description <br /><br />"
"android.hardware.Sensor.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.hardware.Sensor.isWakeUpSensor () "," Returns true if the sensor is a wake-up sensor. <br /><br />"
"android.hardware.Sensor.getName () "," no description <br /><br />"
"android.hardware.Sensor.getStringType () "," no description <br /><br />"
"android.hardware.Sensor.getMaxDelay () "," This value is defined only for continuous and on-change sensors. <br /><br />"
"android.hardware.Sensor.getVersion () "," no description <br /><br />"
"android.hardware.Sensor.getReportingMode () "," Each sensor has exactly one reporting mode associated with it. <br /><br />"
"android.hardware.Sensor.getMinDelay () "," no description <br /><br />"
"android.hardware.SensorEventListener.Sensor () "," Called when the accuracy of the registered sensor has changed. <br /><br />"
"android.hardware.SensorEventListener.SensorEvent () "," Called when sensor values have changed. <br /><br />"
"android.hardware.SensorEventListener2.Sensor () "," Called after flush() is completed. <br /><br />"
"android.hardware.SensorListener.onSensorChanged (int sensor, float[] values) "," Called when sensor values have changed. <br /><br />"
"android.hardware.SensorListener.onAccuracyChanged (int sensor, int accuracy) "," Called when the accuracy of a sensor has changed. <br /><br />"
"android.hardware.SensorManager.getDefaultSensor (int type, boolean wakeUp) "," Return a Sensor with the given type and wakeUp properties. <br /><br />"
"android.hardware.SensorManager.getRotationMatrixFromVector (float[] R, float[] rotationVector) "," Helper function to convert a rotation vector to a rotation matrix. <br /><br />"
"android.hardware.SensorManager.remapCoordinateSystem (float[] inR, int X, int Y, float[] outR) "," Rotates the supplied rotation matrix so it is expressed in a different coordinate system. <br /><br />"
"android.hardware.SensorManager.getDefaultSensor (int type) "," Use this method to get the default sensor for a given type. <br /><br />"
"android.hardware.SensorManager.getQuaternionFromVector (float[] Q, float[] rv) "," Helper function to convert a rotation vector to a normalized quaternion. <br /><br />"
"android.hardware.SensorManager.getAngleChange (float[] angleChange, float[] R, float[] prevR) "," Helper function to compute the angle change between two rotation matrices. <br /><br />"
"android.hardware.SensorManager.getRotationMatrix (float[] R, float[] I, float[] gravity, float[] geomagnetic) "," Computes the inclination matrix I as well as the rotation matrix R transforming a vector from the device coordinate system to the world's coordinate system which is defined as a direct orthonormal basis, where:   X is defined as the vector product Y.Z (It is tangential to the ground at the device's current location and roughly points East). <br /><br />"
"android.hardware.SensorManager.getRotationMatrix (float[], float[], float[], float[]) (float[] I) "," Computes the geomagnetic inclination angle in radians from the inclination matrix I returned by getRotationMatrix(float[], float[], float[], float[]). <br /><br />"
"android.hardware.SensorManager.registerListener (SensorEventListener, Sensor, int) () "," This method was deprecated in API level 3. This method is deprecated, use registerListener(SensorEventListener, Sensor, int) instead. <br /><br />"
"android.hardware.SensorManager.getSensorList (int) () "," This method was deprecated in API level 3. This method is deprecated, use getSensorList(int) instead <br /><br />"
"android.hardware.SensorManager.SensorEventListener () "," Unregisters a listener for all sensors. <br /><br />"
"android.hardware.SensorManager.getOrientation (float[] R, float[] values) "," Computes the device's orientation based on the rotation matrix. <br /><br />"
"android.hardware.SensorManager.Sensor () "," Unregisters a listener for the sensors with which it is registered. <br /><br />"
"android.hardware.SensorManager.unregisterListener (SensorEventListener, Sensor) () "," This method was deprecated in API level 3. This method is deprecated, use unregisterListener(SensorEventListener, Sensor) instead. <br /><br />"
"android.hardware.SensorManager.getAltitude (float p0, float p) "," Computes the Altitude in meters from the atmospheric pressure and the pressure at sea level. <br /><br />"
"android.hardware.SensorManager.unregisterListener (SensorEventListener) () "," This method was deprecated in API level 3. This method is deprecated, use unregisterListener(SensorEventListener) instead. <br /><br />"
"android.hardware.SensorManager.getSensorList (int type) "," Use this method to get the list of available sensors of a certain type. <br /><br />"
"android.hardware.TriggerEventListener.TriggerEvent () "," The method that will be called when the sensor is triggered. <br /><br />"
"android.hardware.usb.UsbAccessory.getDescription () "," Returns a user visible description of the accessory. <br /><br />"
"android.hardware.usb.UsbAccessory.getManufacturer () "," Returns the manufacturer name of the accessory. <br /><br />"
"android.hardware.usb.UsbAccessory.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.hardware.usb.UsbAccessory.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.hardware.usb.UsbAccessory.getVersion () "," Returns the version of the accessory. <br /><br />"
"android.hardware.usb.UsbAccessory.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.hardware.usb.UsbAccessory.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.hardware.usb.UsbAccessory.getSerial () "," Returns the unique serial number for the accessory. <br /><br />"
"android.hardware.usb.UsbAccessory.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.hardware.usb.UsbAccessory.getUri () "," Returns the URI for the accessory. <br /><br />"
"android.hardware.usb.UsbAccessory.getModel () "," Returns the model name of the accessory. <br /><br />"
"android.hardware.usb.UsbConfiguration.isRemoteWakeup () "," Returns the remote-wakeup attribute value configuration's attributes field. <br /><br />"
"android.hardware.usb.UsbConfiguration.getName () "," Returns the configuration's name. <br /><br />"
"android.hardware.usb.UsbConfiguration.isSelfPowered () "," Returns the self-powered attribute value configuration's attributes field. <br /><br />"
"android.hardware.usb.UsbConfiguration.getId () "," Returns the configuration's ID field. <br /><br />"
"android.hardware.usb.UsbConfiguration.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.hardware.usb.UsbConfiguration.UsbInterface (int index) "," Returns the UsbInterface at the given index. <br /><br />"
"android.hardware.usb.UsbConfiguration.getMaxPower () "," Returns the configuration's max power consumption, in milliamps. <br /><br />"
"android.hardware.usb.UsbConfiguration.UsbInterface () "," Returns the number of UsbInterfaces this configuration contains. <br /><br />"
"android.hardware.usb.UsbConfiguration.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.hardware.usb.UsbConfiguration.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.hardware.usb.UsbDevice.String () "," no description <br /><br />"
"android.hardware.usb.UsbDevice.UsbConfiguration (int index) "," Returns the UsbConfiguration at the given index. <br /><br />"
"android.hardware.usb.UsbDevice.getManufacturerName () "," Returns the manufacturer name of the device. <br /><br />"
"android.hardware.usb.UsbDevice.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.hardware.usb.UsbDevice.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.hardware.usb.UsbDevice.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.hardware.usb.UsbDevice.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.hardware.usb.UsbDevice.getDeviceName () "," Returns the name of the device. <br /><br />"
"android.hardware.usb.UsbDevice.getDeviceName (int id) "," no description <br /><br />"
"android.hardware.usb.UsbDevice.getProductId () "," Returns a product ID for the device. <br /><br />"
"android.hardware.usb.UsbDevice.getSerialNumber () "," Returns the serial number of the device. <br /><br />"
"android.hardware.usb.UsbDevice.UsbConfiguration () "," Returns the number of UsbConfigurations this device contains. <br /><br />"
"android.hardware.usb.UsbDevice.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.hardware.usb.UsbDevice.getDeviceSubclass () "," Returns the device's subclass field. <br /><br />"
"android.hardware.usb.UsbDevice.UsbInterface (int index) "," Returns the UsbInterface at the given index. <br /><br />"
"android.hardware.usb.UsbDevice.getVendorId () "," Returns a vendor ID for the device. <br /><br />"
"android.hardware.usb.UsbDevice.getDeviceClass () "," Returns the devices's class field. <br /><br />"
"android.hardware.usb.UsbDevice.getProductName () "," Returns the product name of the device. <br /><br />"
"android.hardware.usb.UsbDevice.UsbInterface () "," Returns the number of UsbInterfaces this device contains. <br /><br />"
"android.hardware.usb.UsbDevice.getDeviceProtocol () "," Returns the device's protocol field. <br /><br />"
"android.hardware.usb.UsbDevice.getDeviceId () "," Returns a unique integer ID for the device. <br /><br />"
"android.hardware.usb.UsbDeviceConnection.controlTransfer (int requestType, int request, int value, int index, byte[] buffer, int length, int timeout) "," Performs a control transaction on endpoint zero for this device. <br /><br />"
"android.hardware.usb.UsbDeviceConnection.UsbConfiguration () "," Sets the device's current UsbConfiguration. <br /><br />"
"android.hardware.usb.UsbDeviceConnection.close () "," Releases all system resources related to the device. <br /><br />"
"android.hardware.usb.UsbDeviceConnection.getRawDescriptors () "," Returns the raw USB descriptors for the device. <br /><br />"
"android.hardware.usb.UsbDeviceConnection.controlTransfer (int requestType, int request, int value, int index, byte[] buffer, int offset, int length, int timeout) "," Performs a control transaction on endpoint zero for this device. <br /><br />"
"android.hardware.usb.UsbDeviceConnection.UsbInterface () "," Sets the current UsbInterface. <br /><br />"
"android.hardware.usb.UsbDeviceConnection.getSerial () "," Returns the serial number for the device. <br /><br />"
"android.hardware.usb.UsbDeviceConnection.getFileDescriptor () "," Returns the native file descriptor for the device, or -1 if the device is not opened. <br /><br />"
"android.hardware.usb.UsbDeviceConnection.UsbEndpoint () "," Waits for the result of a queue(ByteBuffer, int) operation Note that this may return requests queued on multiple UsbEndpoints. <br /><br />"
"android.hardware.usb.UsbEndpoint.getAttributes () "," Returns the endpoint's attributes field. <br /><br />"
"android.hardware.usb.UsbEndpoint.getMaxPacketSize () "," Returns the endpoint's maximum packet size. <br /><br />"
"android.hardware.usb.UsbEndpoint.getType () "," Returns the endpoint's type. <br /><br />"
"android.hardware.usb.UsbEndpoint.getDirection () "," Returns the endpoint's direction. <br /><br />"
"android.hardware.usb.UsbEndpoint.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.hardware.usb.UsbEndpoint.getInterval () "," Returns the endpoint's interval field. <br /><br />"
"android.hardware.usb.UsbEndpoint.getAddress () "," Returns the endpoint's address field. <br /><br />"
"android.hardware.usb.UsbEndpoint.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.hardware.usb.UsbEndpoint.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.hardware.usb.UsbEndpoint.getEndpointNumber () "," Extracts the endpoint's endpoint number from its address <br /><br />"
"android.hardware.usb.UsbInterface.getName () "," Returns the interface's name. <br /><br />"
"android.hardware.usb.UsbInterface.getInterfaceSubclass () "," Returns the interface's subclass field. <br /><br />"
"android.hardware.usb.UsbInterface.getId () "," Returns the interface's bInterfaceNumber field. <br /><br />"
"android.hardware.usb.UsbInterface.getAlternateSetting () "," Returns the interface's bAlternateSetting field. <br /><br />"
"android.hardware.usb.UsbInterface.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.hardware.usb.UsbInterface.UsbEndpoint (int index) "," Returns the UsbEndpoint at the given index. <br /><br />"
"android.hardware.usb.UsbInterface.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.hardware.usb.UsbInterface.getInterfaceProtocol () "," Returns the interface's protocol field. <br /><br />"
"android.hardware.usb.UsbInterface.UsbEndpoint () "," Returns the number of UsbEndpoints this interface contains. <br /><br />"
"android.hardware.usb.UsbInterface.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.hardware.usb.UsbInterface.getInterfaceClass () "," Returns the interface's class field. <br /><br />"
"android.hardware.usb.UsbManager.UsbDevice () "," Returns true if the caller has permission to access the device. <br /><br />"
"android.hardware.usb.UsbManager.UsbRequest () "," Opens the device so it can be used to send and receive data using UsbRequest. <br /><br />"
"android.hardware.usb.UsbManager.PendingIntent () "," Requests temporary permission for the given package to access the device. <br /><br />"
"android.hardware.usb.UsbManager.getDeviceList () "," Returns a HashMap containing all USB devices currently attached. <br /><br />"
"android.hardware.usb.UsbManager.UsbAccessory () "," Opens a file descriptor for reading and writing data to the USB accessory. <br /><br />"
"android.hardware.usb.UsbManager.getAccessoryList () "," Returns a list of currently attached USB accessories. <br /><br />"
"android.hardware.usb.UsbRequest.getClientData () "," Returns the client data for the request. <br /><br />"
"android.hardware.usb.UsbRequest.ByteBuffer () "," Queues the request to send or receive data on its endpoint. <br /><br />"
"android.hardware.usb.UsbRequest.close () "," Releases all resources related to this request. <br /><br />"
"android.hardware.usb.UsbRequest.cancel () "," Cancels a pending queue operation. <br /><br />"
"android.hardware.usb.UsbRequest.Object () "," Sets the client data for the request. <br /><br />"
"android.hardware.usb.UsbRequest.getEndpoint () "," Returns the endpoint for the request, or null if the request is not opened. <br /><br />"
"android.hardware.usb.UsbRequest.UsbEndpoint () "," Initializes the request so it can read or write data on the given endpoint. <br /><br />"
"android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodImpl.AbstractInputMethodSessionImpl.setEnabled () () "," Take care of enabling or disabling an existing session by calling its AbstractInputMethodSessionImpl.setEnabled() method. <br /><br />"
"android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodImpl.AbstractInputMethodService.onCreateInputMethodSessionInterface () () "," Instantiate a new client session for the input method, by calling back to AbstractInputMethodService.onCreateInputMethodSessionInterface(). <br /><br />"
"android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodImpl.AbstractInputMethodSessionImpl.revokeSelf () () "," Take care of killing an existing session by calling its AbstractInputMethodSessionImpl.revokeSelf() method. <br /><br />"
"android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl.isRevoked () "," Check whether this session has been revoked by the system. <br /><br />"
"android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl.InputMethodSession.EventCallback () "," Take care of dispatching incoming trackball events to the appropriate callbacks on the service, and tell the client when this is done. <br /><br />"
"android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl.isEnabled () "," Check whether this session has been enabled by the system. <br /><br />"
"android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl.revokeSelf () "," Revoke the session from the client. <br /><br />"
"android.inputmethodservice.AbstractInputMethodService.AbstractInputMethodSessionImpl.setEnabled (boolean enabled) "," Change the enabled state of the session. <br /><br />"
"android.inputmethodservice.AbstractInputMethodService.onCreateInputMethodSessionInterface () "," Called by the framework when a new InputMethodSession interface is needed for a new client of the input method. <br /><br />"
"android.inputmethodservice.AbstractInputMethodService.KeyEvent.DispatcherState () "," Return the global KeyEvent.DispatcherState for used for processing events from the target application. <br /><br />"
"android.inputmethodservice.AbstractInputMethodService.MotionEvent () "," Implement this to handle trackball events on your input method. <br /><br />"
"android.inputmethodservice.AbstractInputMethodService.onCreateInputMethodInterface () "," Called by the framework during initialization, when the InputMethod interface for this service needs to be created. <br /><br />"
"android.inputmethodservice.AbstractInputMethodService.Intent () "," Return the communication channel to the service. <br /><br />"
"android.inputmethodservice.ExtractEditText.ExtractedText () "," Implement just to keep track of when we are setting text from the client (vs. <br /><br />"
"android.inputmethodservice.ExtractEditText.isFocused () "," Pretend like this view always has focus, so its highlight and cursor will be displayed. <br /><br />"
"android.inputmethodservice.ExtractEditText.finishInternalChanges () "," Finish making changes that will not be reported to the client. <br /><br />"
"android.inputmethodservice.ExtractEditText.performClick () "," Redirect clicks to the IME for handling there. <br /><br />"
"android.inputmethodservice.ExtractEditText.startInternalChanges () "," Start making changes that will not be reported to the client. <br /><br />"
"android.inputmethodservice.ExtractEditText.isInputMethodTarget () "," We are always considered to be an input method target. <br /><br />"
"android.inputmethodservice.ExtractEditText.hasVerticalScrollBar () "," Return true if the edit text is currently showing a scroll bar. <br /><br />"
"android.inputmethodservice.ExtractEditText.onTextContextMenuItem (int id) "," Called when a context menu option for the text view is selected. <br /><br />"
"android.inputmethodservice.ExtractEditText.hasFocus () "," Pretend like this view always has focus, so its highlight and cursor will be displayed. <br /><br />"
"android.inputmethodservice.ExtractEditText.hasWindowFocus () "," Pretend like the window this view is in always has focus, so its highlight and cursor will be displayed. <br /><br />"
"android.inputmethodservice.InputMethodService.ExtractedText () "," Called when the application has reported new extracted text to be shown due to changes in its current text state. <br /><br />"
"android.inputmethodservice.InputMethodService.KeyEvent.Callback.onKeyLongPress () () "," Default implementation of KeyEvent.Callback.onKeyLongPress(): always returns false (doesn't handle the event). <br /><br />"
"android.inputmethodservice.InputMethodService.onCreate () "," Called by the system when the service is first created. <br /><br />"
"android.inputmethodservice.InputMethodService.sendKeyChar (char charCode) "," Send the given UTF-16 character to the current input connection. <br /><br />"
"android.inputmethodservice.InputMethodService.onBindInput () "," Called when a new client has bound to the input method. <br /><br />"
"android.inputmethodservice.InputMethodService.KeyEvent (int keyEventCode) "," Send the given key event code (as defined by KeyEvent) to the current input connection is a key down + key up event pair. <br /><br />"
"android.inputmethodservice.InputMethodService.getCurrentInputStarted () "," no description <br /><br />"
"android.inputmethodservice.InputMethodService.onCreateInputView () "," Create and return the view hierarchy used for the input area (such as a soft keyboard). <br /><br />"
"android.inputmethodservice.InputMethodService.isFullscreenMode () "," Return whether the input method is currently running in fullscreen mode. <br /><br />"
"android.inputmethodservice.InputMethodService.onExtractedCursorMovement (int dx, int dy) "," This is called when the user has performed a cursor movement in the extracted text view, when it is running in fullscreen mode. <br /><br />"
"android.inputmethodservice.InputMethodService.onDestroy () "," Called by the system to notify a Service that it is no longer used and is being removed. <br /><br />"
"android.inputmethodservice.InputMethodService.InputConnection.performEditorAction () (boolean fromEnterKey) "," Ask the input target to execute its default action via InputConnection.performEditorAction(). <br /><br />"
"android.inputmethodservice.InputMethodService.getMaxWidth () "," Return the maximum width, in pixels, available the input method. <br /><br />"
"android.inputmethodservice.InputMethodService.isShowInputRequested () "," Returns true if we have been asked to show our input view. <br /><br />"
"android.inputmethodservice.InputMethodService.getBackDisposition () "," no description <br /><br />"
"android.inputmethodservice.InputMethodService.getCurrentInputConnection () "," Retrieve the currently active InputConnection that is bound to the input method, or null if there is none. <br /><br />"
"android.inputmethodservice.InputMethodService.getInputMethodWindowRecommendedHeight () "," no description <br /><br />"
"android.inputmethodservice.InputMethodService.onUnbindInput () "," Called when the previous bound client is no longer associated with the input method. <br /><br />"
"android.inputmethodservice.InputMethodService.CursorAnchorInfo () "," Called when the application has reported a new location of its text insertion point and characters in the composition string. <br /><br />"
"android.inputmethodservice.InputMethodService.onEvaluateInputViewShown () "," Override this to control when the soft input area should be shown to the user. <br /><br />"
"android.inputmethodservice.InputMethodService.updateFullscreenMode () "," Re-evaluate whether the input method should be running in fullscreen mode, and update its UI if this has changed since the last time it was evaluated. <br /><br />"
"android.inputmethodservice.InputMethodService.showStatusIcon (int iconResId) "," no description <br /><br />"
"android.inputmethodservice.InputMethodService.hideWindow () "," no description <br /><br />"
"android.inputmethodservice.InputMethodService.getWindow () "," no description <br /><br />"
"android.inputmethodservice.InputMethodService.onShowInputRequested (int flags, boolean configChange) "," The system has decided that it may be time to show your input method. <br /><br />"
"android.inputmethodservice.InputMethodService.onFinishInputView (boolean finishingInput) "," Called when the input view is being hidden from the user. <br /><br />"
"android.inputmethodservice.InputMethodService.getLayoutInflater () "," no description <br /><br />"
"android.inputmethodservice.InputMethodService.onWindowShown () "," Called when the input method window has been shown to the user, after previously not being visible. <br /><br />"
"android.inputmethodservice.InputMethodService.InputMethodService.InputMethodImpl () "," Implement to return our standard InputMethodService.InputMethodImpl. <br /><br />"
"android.inputmethodservice.InputMethodService.enableHardwareAcceleration () "," This method was deprecated in API level 21. Starting in API 21, hardware acceleration is always enabled on capable devices. <br /><br />"
"android.inputmethodservice.InputMethodService.onViewClicked (boolean focusChanged) "," Called when the user tapped or clicked a text view. <br /><br />"
"android.inputmethodservice.InputMethodService.CompletionInfo[] () "," Called when the application has reported auto-completion candidates that it would like to have the input method displayed. <br /><br />"
"android.inputmethodservice.InputMethodService.EditorInfo () "," Called when the fullscreen-mode extracting editor info has changed, to determine whether the extracting (extract text and candidates) portion of the UI should be shown. <br /><br />"
"android.inputmethodservice.InputMethodService.MotionEvent () "," Override this to intercept trackball motion events before they are processed by the application. <br /><br />"
"android.inputmethodservice.InputMethodService.setTheme (int theme) "," You can call this to customize the theme used by your IME's window. <br /><br />"
"android.inputmethodservice.InputMethodService.onExtractedSelectionChanged (int start, int end) "," This is called when the user has moved the cursor in the extracted text view, when running in fullsreen mode. <br /><br />"
"android.inputmethodservice.InputMethodService.onCreateCandidatesView () "," Create and return the view hierarchy used to show candidates. <br /><br />"
"android.inputmethodservice.InputMethodService.Rect () "," This method was deprecated in API level 21. Use {#link onUpdateCursorAnchorInfo(CursorAnchorInfo)} instead. <br /><br />"
"android.inputmethodservice.InputMethodService.isInputViewShown () "," Return whether the soft input view is currently shown to the user. <br /><br />"
"android.inputmethodservice.InputMethodService.onFinishInput () "," Called to inform the input method that text input has finished in the last editor. <br /><br />"
"android.inputmethodservice.InputMethodService.onCreateExtractTextView () "," Called by the framework to create the layout for showing extacted text. <br /><br />"
"android.inputmethodservice.InputMethodService.Configuration () "," Take care of handling configuration changes. <br /><br />"
"android.inputmethodservice.InputMethodService.updateInputViewShown () "," Re-evaluate whether the soft input area should currently be shown, and update its UI if this has changed since the last time it was evaluated. <br /><br />"
"android.inputmethodservice.InputMethodService.onUpdateSelection (int oldSelStart, int oldSelEnd, int newSelStart, int newSelEnd, int candidatesStart, int candidatesEnd) "," Called when the application has reported a new selection region of the text. <br /><br />"
"android.inputmethodservice.InputMethodService.Window () "," Update the given window's parameters for the given mode. <br /><br />"
"android.inputmethodservice.InputMethodService.View.GONE () "," Returns the visibility mode (either View.INVISIBLE or View.GONE) of the candidates view when it is not shown. <br /><br />"
"android.inputmethodservice.InputMethodService.showWindow (boolean showInput) "," no description <br /><br />"
"android.inputmethodservice.InputMethodService.onExtractedTextClicked () "," This is called when the user has clicked on the extracted text view, when running in fullscreen mode. <br /><br />"
"android.inputmethodservice.InputMethodService.onWindowHidden () "," Called when the input method window has been hidden from the user, after previously being visible. <br /><br />"
"android.inputmethodservice.InputMethodService.String () "," Force switch to a new input method, as identified by id. <br /><br />"
"android.inputmethodservice.InputMethodService.EditorInfo.imeOptions (int imeOptions) "," Return text that can be used as a button label for the given EditorInfo.imeOptions. <br /><br />"
"android.inputmethodservice.InputMethodService.getCurrentInputEditorInfo () "," no description <br /><br />"
"android.inputmethodservice.InputMethodService.onExtractTextContextMenuItem (int id) "," This is called when the user has selected a context menu item from the extracted text view, when running in fullscreen mode. <br /><br />"
"android.inputmethodservice.InputMethodService.requestHideSelf (int flags) "," Close this input method's soft input area, removing it from the display. <br /><br />"
"android.inputmethodservice.InputMethodService.setExtractViewShown (boolean shown) "," Controls the visibility of the extracted text area. <br /><br />"
"android.inputmethodservice.InputMethodService.getCurrentInputBinding () "," Return the currently active InputBinding for the input method, or null if there is none. <br /><br />"
"android.inputmethodservice.InputMethodService.View () "," Replaces the current input view with a new one. <br /><br />"
"android.inputmethodservice.InputMethodService.onEvaluateFullscreenMode () "," Override this to control when the input method should run in fullscreen mode. <br /><br />"
"android.inputmethodservice.InputMethodService.InputMethodService.InputMethodSessionImpl () "," Implement to return our standard InputMethodService.InputMethodSessionImpl. <br /><br />"
"android.inputmethodservice.InputMethodService.isExtractViewShown () "," Return whether the fullscreen extract view is shown. <br /><br />"
"android.inputmethodservice.InputMethodService.InputMethodService.Insets () "," Compute the interesting insets into your UI. <br /><br />"
"android.inputmethodservice.InputMethodService.hideStatusIcon () "," no description <br /><br />"
"android.inputmethodservice.InputMethodService.KeyEvent () "," Override this to intercept key up events before they are processed by the application. <br /><br />"
"android.inputmethodservice.InputMethodService.setBackDisposition (int disposition) "," no description <br /><br />"
"android.inputmethodservice.InputMethodService.onFinishCandidatesView (boolean finishingInput) "," Called when the candidates view is being hidden from the user. <br /><br />"
"android.inputmethodservice.InputMethodService.setCandidatesViewShown (boolean shown) "," Controls the visibility of the candidates display area. <br /><br />"
"android.inputmethodservice.InputMethodService.Bundle () "," no description <br /><br />"
"android.inputmethodservice.InputMethodService.onInitializeInterface () "," This is a hook that subclasses can use to perform initialization of their interface. <br /><br />"
"android.inputmethodservice.InputMethodService.InputMethodImpl.IBinder () "," Take care of attaching the given window token provided by the system. <br /><br />"
"android.inputmethodservice.InputMethodService.InputMethodImpl.unbindInput () "," Clear the current input binding. <br /><br />"
"android.inputmethodservice.InputMethodService.InputMethodImpl.EditorInfo () "," no description <br /><br />"
"android.inputmethodservice.InputMethodService.InputMethodImpl.InputMethodSubtype () "," no description <br /><br />"
"android.inputmethodservice.InputMethodService.InputMethodImpl.InputMethodService.onBindInput () () "," Handle a new input binding, calling InputMethodService.onBindInput() when done. <br /><br />"
"android.inputmethodservice.InputMethodService.InputMethodImpl.ResultReceiver () "," Handle a request by the system to show the soft input area. <br /><br />"
"android.inputmethodservice.InputMethodService.InputMethodSessionImpl.InputMethodService.onUpdateCursorAnchorInfo () () "," Call InputMethodService.onUpdateCursorAnchorInfo(). <br /><br />"
"android.inputmethodservice.InputMethodService.InputMethodSessionImpl.finishInput () "," no description <br /><br />"
"android.inputmethodservice.InputMethodService.InputMethodSessionImpl.InputMethodService.onUpdateCursor () () "," Call InputMethodService.onUpdateCursor(). <br /><br />"
"android.inputmethodservice.InputMethodService.InputMethodSessionImpl.InputMethodService.onDisplayCompletions () () "," Call InputMethodService.onDisplayCompletions(). <br /><br />"
"android.inputmethodservice.InputMethodService.InputMethodSessionImpl.InputMethodService.onUpdateSelection () (int oldSelStart, int oldSelEnd, int newSelStart, int newSelEnd, int candidatesStart, int candidatesEnd) "," Call InputMethodService.onUpdateSelection(). <br /><br />"
"android.inputmethodservice.InputMethodService.InputMethodSessionImpl.viewClicked (boolean focusChanged) "," no description <br /><br />"
"android.inputmethodservice.InputMethodService.InputMethodSessionImpl.toggleSoftInput (int showFlags, int hideFlags) ","  <br /><br />"
"android.inputmethodservice.InputMethodService.InputMethodSessionImpl.InputMethodService.onUpdateExtractedText () () "," Call InputMethodService.onUpdateExtractedText(). <br /><br />"
"android.inputmethodservice.InputMethodService.InputMethodSessionImpl.InputMethodService.onAppPrivateCommand () () "," Call InputMethodService.onAppPrivateCommand(). <br /><br />"
"android.inputmethodservice.Keyboard.getMinWidth () "," no description <br /><br />"
"android.inputmethodservice.Keyboard.isShifted () "," no description <br /><br />"
"android.inputmethodservice.Keyboard.getHeight () "," Returns the total height of the keyboard <br /><br />"
"android.inputmethodservice.Keyboard.getNearestKeys (int x, int y) "," Returns the indices of the keys that are closest to the given point. <br /><br />"
"android.inputmethodservice.Keyboard.getShiftKeyIndex () "," no description <br /><br />"
"android.inputmethodservice.Keyboard.getKeys () "," no description <br /><br />"
"android.inputmethodservice.Keyboard.getModifierKeys () "," no description <br /><br />"
"android.inputmethodservice.Keyboard.setShifted (boolean shiftState) "," no description <br /><br />"
"android.inputmethodservice.Keyboard.Key.isInside (int x, int y) "," Detects if a point falls inside this key. <br /><br />"
"android.inputmethodservice.Keyboard.Key.squaredDistanceFrom (int x, int y) "," Returns the square of the distance between the center of the key and the given point. <br /><br />"
"android.inputmethodservice.Keyboard.Key.onPressed () "," Informs the key that it has been pressed, in case it needs to change its appearance or state. <br /><br />"
"android.inputmethodservice.Keyboard.Key.getCurrentDrawableState () "," Returns the drawable state for the key, based on the current state and type of the key. <br /><br />"
"android.inputmethodservice.Keyboard.Key.onReleased (boolean inside) "," Changes the pressed state of the key. <br /><br />"
"android.inputmethodservice.KeyboardView.setVerticalCorrection (int verticalOffset) "," no description <br /><br />"
"android.inputmethodservice.KeyboardView.isProximityCorrectionEnabled () "," Returns true if proximity correction is enabled. <br /><br />"
"android.inputmethodservice.KeyboardView.MotionEvent () "," Implement this method to handle touch screen motion events. <br /><br />"
"android.inputmethodservice.KeyboardView.onKey (int, int[]) (boolean enabled) "," When enabled, calls to onKey(int, int[]) will include key codes for adjacent keys. <br /><br />"
"android.inputmethodservice.KeyboardView.Canvas () "," Implement this to do your drawing. <br /><br />"
"android.inputmethodservice.KeyboardView.invalidateKey (int keyIndex) "," Invalidates a key so that it will be redrawn on the next repaint. <br /><br />"
"android.inputmethodservice.KeyboardView.isPreviewEnabled () "," Returns the enabled state of the key feedback popup. <br /><br />"
"android.inputmethodservice.KeyboardView.setPopupOffset (int x, int y) "," no description <br /><br />"
"android.inputmethodservice.KeyboardView.KeyboardView.OnKeyboardActionListener () "," no description <br /><br />"
"android.inputmethodservice.KeyboardView.View () "," no description <br /><br />"
"android.inputmethodservice.KeyboardView.handleBack () "," no description <br /><br />"
"android.inputmethodservice.KeyboardView.setPreviewEnabled (boolean previewEnabled) "," Enables or disables the key feedback popup. <br /><br />"
"android.inputmethodservice.KeyboardView.Keyboard () "," Attaches a keyboard to this view. <br /><br />"
"android.inputmethodservice.KeyboardView.invalidateAllKeys () "," Requests a redraw of the entire keyboard. <br /><br />"
"android.inputmethodservice.KeyboardView.onDetachedFromWindow () "," This is called when the view is detached from a window. <br /><br />"
"android.inputmethodservice.KeyboardView.isShifted () "," Returns the state of the shift key of the keyboard, if any. <br /><br />"
"android.inputmethodservice.KeyboardView.closing () "," no description <br /><br />"
"android.inputmethodservice.KeyboardView.onSizeChanged (int w, int h, int oldw, int oldh) "," This is called during layout when the size of this view has changed. <br /><br />"
"android.inputmethodservice.KeyboardView.getKeyboard () "," Returns the current keyboard being displayed by this view. <br /><br />"
"android.inputmethodservice.KeyboardView.onMeasure (int widthMeasureSpec, int heightMeasureSpec) "," Measure the view and its content to determine the measured width and the measured height. <br /><br />"
"android.inputmethodservice.KeyboardView.setShifted (boolean shifted) "," Sets the state of the shift key of the keyboard, if any. <br /><br />"
"android.inputmethodservice.KeyboardView.OnKeyboardActionListener.onPress (int primaryCode) "," Called when the user presses a key. <br /><br />"
"android.inputmethodservice.KeyboardView.OnKeyboardActionListener.swipeLeft () "," Called when the user quickly moves the finger from right to left. <br /><br />"
"android.inputmethodservice.KeyboardView.OnKeyboardActionListener.swipeDown () "," Called when the user quickly moves the finger from up to down. <br /><br />"
"android.inputmethodservice.KeyboardView.OnKeyboardActionListener.swipeRight () "," Called when the user quickly moves the finger from left to right. <br /><br />"
"android.inputmethodservice.KeyboardView.OnKeyboardActionListener.CharSequence () "," Sends a sequence of characters to the listener. <br /><br />"
"android.inputmethodservice.KeyboardView.OnKeyboardActionListener.onRelease (int primaryCode) "," Called when the user releases a key. <br /><br />"
"android.inputmethodservice.KeyboardView.OnKeyboardActionListener.swipeUp () "," Called when the user quickly moves the finger from down to up. <br /><br />"
"android.inputmethodservice.KeyboardView.OnKeyboardActionListener.onKey (int primaryCode, int[] keyCodes) "," Send a key press to the listener. <br /><br />"
"android.location.Address.getLongitude () "," Returns the longitude of the address if known. <br /><br />"
"android.location.Address.getLatitude () "," Returns the latitude of the address if known. <br /><br />"
"android.location.Address.getSubLocality () "," Returns the sub-locality of the address, or null if it is unknown. <br /><br />"
"android.location.Address.clearLongitude () "," Removes any longitude associated with this address. <br /><br />"
"android.location.Address.hasLatitude () "," Returns true if a latitude has been assigned to this Address, false otherwise. <br /><br />"
"android.location.Address.getSubAdminArea () "," Returns the sub-administrative area name of the address, for example, 'Santa Clara County', or null if it is unknown <br /><br />"
"android.location.Address.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.location.Address.clearLatitude () "," Removes any latitude associated with this address. <br /><br />"
"android.location.Address.getLocality () "," Returns the locality of the address, for example 'Mountain View', or null if it is unknown. <br /><br />"
"android.location.Address.setLatitude (double latitude) "," Sets the latitude associated with this address. <br /><br />"
"android.location.Address.getPremises () "," Returns the premises of the address, or null if it is unknown. <br /><br />"
"android.location.Address.getThoroughfare () "," Returns the thoroughfare name of the address, for example, '1600 Ampitheater Parkway', which may be null <br /><br />"
"android.location.Address.getMaxAddressLineIndex () "," Returns the largest index currently in use to specify an address line. <br /><br />"
"android.location.Address.String () "," Sets the public URL associated with this address. <br /><br />"
"android.location.Address.getPostalCode () "," Returns the postal code of the address, for example '94110', or null if it is unknown. <br /><br />"
"android.location.Address.setLongitude (double longitude) "," Sets the longitude associated with this address. <br /><br />"
"android.location.Address.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.location.Address.getCountryName () "," Returns the localized country name of the address, for example 'Iceland', or null if it is unknown. <br /><br />"
"android.location.Address.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.location.Address.getUrl () "," Returns the public URL for the address if known, or null if it is unknown. <br /><br />"
"android.location.Address.getExtras () "," Returns additional provider-specific information about the address as a Bundle. <br /><br />"
"android.location.Address.getPhone () "," Returns the phone number of the address if known, or null if it is unknown. <br /><br />"
"android.location.Address.getLocale () "," Returns the Locale associated with this address. <br /><br />"
"android.location.Address.getAddressLine (int index) "," Returns a line of the address numbered by the given index (starting at 0), or null if no such line is present. <br /><br />"
"android.location.Address.getCountryCode () "," Returns the country code of the address, for example 'US', or null if it is unknown. <br /><br />"
"android.location.Address.getSubThoroughfare () "," Returns the sub-thoroughfare name of the address, which may be null. <br /><br />"
"android.location.Address.Bundle () "," Sets the extra information associated with this fix to the given Bundle. <br /><br />"
"android.location.Address.hasLongitude () "," Returns true if a longitude has been assigned to this Address, false otherwise. <br /><br />"
"android.location.Address.getAdminArea () "," Returns the administrative area name of the address, for example, 'CA', or null if it is unknown <br /><br />"
"android.location.Address.getFeatureName () "," Returns the feature name of the address, for example, 'Golden Gate Bridge', or null if it is unknown <br /><br />"
"android.location.Criteria.setVerticalAccuracy (int accuracy) "," Indicates the desired vertical accuracy (altitude). <br /><br />"
"android.location.Criteria.setBearingAccuracy (int accuracy) "," Indicates the desired bearing accuracy. <br /><br />"
"android.location.Criteria.isAltitudeRequired () "," Returns whether the provider must provide altitude information. <br /><br />"
"android.location.Criteria.setSpeedRequired (boolean speedRequired) "," Indicates whether the provider must provide speed information. <br /><br />"
"android.location.Criteria.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.location.Criteria.setHorizontalAccuracy (int accuracy) "," Indicates the desired horizontal accuracy (latitude and longitude). <br /><br />"
"android.location.Criteria.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.location.Criteria.getBearingAccuracy () "," Returns a constant indicating the desired bearing accuracy. <br /><br />"
"android.location.Criteria.ACCURACY_COARSE () "," Returns a constant indicating desired accuracy of location Accuracy may be ACCURACY_FINE if desired location is fine, else it can be ACCURACY_COARSE. <br /><br />"
"android.location.Criteria.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.location.Criteria.getPowerRequirement () "," Returns a constant indicating the desired power requirement. <br /><br />"
"android.location.Criteria.isSpeedRequired () "," Returns whether the provider must provide speed information. <br /><br />"
"android.location.Criteria.getVerticalAccuracy () "," Returns a constant indicating the desired vertical accuracy (altitude). <br /><br />"
"android.location.Criteria.setBearingRequired (boolean bearingRequired) "," Indicates whether the provider must provide bearing information. <br /><br />"
"android.location.Criteria.isCostAllowed () "," Returns whether the provider is allowed to incur monetary cost. <br /><br />"
"android.location.Criteria.setSpeedAccuracy (int accuracy) "," Indicates the desired speed accuracy. <br /><br />"
"android.location.Criteria.setAltitudeRequired (boolean altitudeRequired) "," Indicates whether the provider must provide altitude information. <br /><br />"
"android.location.Criteria.setCostAllowed (boolean costAllowed) "," Indicates whether the provider is allowed to incur monetary cost. <br /><br />"
"android.location.Criteria.getHorizontalAccuracy () "," Returns a constant indicating the desired horizontal accuracy (latitude and longitude). <br /><br />"
"android.location.Criteria.isBearingRequired () "," Returns whether the provider must provide bearing information. <br /><br />"
"android.location.Criteria.setAccuracy (int accuracy) "," Indicates the desired accuracy for latitude and longitude. <br /><br />"
"android.location.Criteria.setPowerRequirement (int level) "," Indicates the desired maximum power level. <br /><br />"
"android.location.Criteria.NO_REQUIREMENT () "," Returns a constant indicating the desired speed accuracy Accuracy may be ACCURACY_LOW, ACCURACY_HIGH, or NO_REQUIREMENT. <br /><br />"
"android.location.Geocoder.String () "," Returns an array of Addresses that are known to describe the named location, which may be a place name such as 'Dalvik, Iceland', an address such as '1600 Amphitheatre Parkway, Mountain View, CA', an airport code such as 'SFO', etc.. <br /><br />"
"android.location.Geocoder.isPresent () "," Returns true if the Geocoder methods getFromLocation and getFromLocationName are implemented. <br /><br />"
"android.location.Geocoder.getFromLocation (double latitude, double longitude, int maxResults) "," Returns an array of Addresses that are known to describe the area immediately surrounding the given latitude and longitude. <br /><br />"
"android.location.GpsSatellite.hasEphemeris () "," Returns true if the GPS engine has ephemeris data for the satellite. <br /><br />"
"android.location.GpsSatellite.usedInFix () "," Returns true if the satellite was used by the GPS engine when calculating the most recent GPS fix. <br /><br />"
"android.location.GpsSatellite.getSnr () "," Returns the signal to noise ratio for the satellite. <br /><br />"
"android.location.GpsSatellite.getElevation () "," Returns the elevation of the satellite in degrees. <br /><br />"
"android.location.GpsSatellite.getAzimuth () "," Returns the azimuth of the satellite in degrees. <br /><br />"
"android.location.GpsSatellite.hasAlmanac () "," Returns true if the GPS engine has almanac data for the satellite. <br /><br />"
"android.location.GpsSatellite.getPrn () "," Returns the PRN (pseudo-random number) for the satellite. <br /><br />"
"android.location.GpsStatus.getTimeToFirstFix () "," Returns the time required to receive the first fix since the most recent restart of the GPS engine. <br /><br />"
"android.location.GpsStatus.GpsSatellite () "," Returns an array of GpsSatellite objects, which represent the current state of the GPS engine. <br /><br />"
"android.location.GpsStatus.getSatellites () () "," Returns the maximum number of satellites that can be in the satellite list that can be returned by getSatellites(). <br /><br />"
"android.location.GpsStatus.Listener.onGpsStatusChanged (int event) "," Called to report changes in the GPS status. <br /><br />"
"android.location.GpsStatus.NmeaListener.String () "," no description <br /><br />"
"android.location.Location.getBearing () "," Get the bearing, in degrees. <br /><br />"
"android.location.Location.isFromMockProvider () "," Returns true if the Location came from a mock provider. <br /><br />"
"android.location.Location.getLongitude () "," Get the longitude, in degrees. <br /><br />"
"android.location.Location.getLatitude () "," Get the latitude, in degrees. <br /><br />"
"android.location.Location.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.location.Location.getElapsedRealtimeNanos () "," Return the time of this fix, in elapsed real-time since system boot. <br /><br />"
"android.location.Location.removeSpeed () "," Remove the speed from this location. <br /><br />"
"android.location.Location.hasAltitude () "," True if this location has an altitude. <br /><br />"
"android.location.Location.getProvider () "," Returns the name of the provider that generated this fix. <br /><br />"
"android.location.Location.removeAccuracy () "," Remove the accuracy from this location. <br /><br />"
"android.location.Location.removeAltitude () "," Remove the altitude from this location. <br /><br />"
"android.location.Location.setLatitude (double latitude) "," Set the latitude, in degrees. <br /><br />"
"android.location.Location.setBearing (float bearing) "," Set the bearing, in degrees. <br /><br />"
"android.location.Location.hasSpeed () "," True if this location has a speed. <br /><br />"
"android.location.Location.setElapsedRealtimeNanos (long time) "," Set the time of this fix, in elapsed real-time since system boot. <br /><br />"
"android.location.Location.setAltitude (double altitude) "," Set the altitude, in meters above the WGS 84 reference ellipsoid. <br /><br />"
"android.location.Location.String () "," Sets the name of the provider that generated this fix. <br /><br />"
"android.location.Location.hasAccuracy () "," True if this location has an accuracy. <br /><br />"
"android.location.Location.getAccuracy () "," Get the estimated accuracy of this location, in meters. <br /><br />"
"android.location.Location.setLongitude (double longitude) "," Set the longitude, in degrees. <br /><br />"
"android.location.Location.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.location.Location.removeBearing () "," Remove the bearing from this location. <br /><br />"
"android.location.Location.convert (double coordinate, int outputType) "," Converts a coordinate to a String representation. <br /><br />"
"android.location.Location.Location () "," Sets the contents of the location to the values from the given location. <br /><br />"
"android.location.Location.getAltitude () "," Get the altitude if available, in meters above the WGS 84 reference ellipsoid. <br /><br />"
"android.location.Location.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.location.Location.setAccuracy (float accuracy) "," Set the estimated accuracy of this location, meters. <br /><br />"
"android.location.Location.hasBearing () "," True if this location has a bearing. <br /><br />"
"android.location.Location.setSpeed (float speed) "," Set the speed, in meters/second over ground. <br /><br />"
"android.location.Location.getSpeed () "," Get the speed if it is available, in meters/second over ground. <br /><br />"
"android.location.Location.getExtras () "," Returns additional provider-specific information about the location fix as a Bundle. <br /><br />"
"android.location.Location.getTime () "," Return the UTC time of this fix, in milliseconds since January 1, 1970. <br /><br />"
"android.location.Location.distanceBetween (double startLatitude, double startLongitude, double endLatitude, double endLongitude, float[] results) "," Computes the approximate distance in meters between two locations, and optionally the initial and final bearings of the shortest path between them. <br /><br />"
"android.location.Location.setTime (long time) "," Set the UTC time of this fix, in milliseconds since January 1, 1970. <br /><br />"
"android.location.Location.Bundle () "," Sets the extra information associated with this fix to the given Bundle. <br /><br />"
"android.location.Location.reset () "," Clears the contents of the location. <br /><br />"
"android.location.LocationListener.String () "," Called when the provider is enabled by the user. <br /><br />"
"android.location.LocationListener.Location () "," Called when the location has changed. <br /><br />"
"android.location.LocationListener.Bundle () "," Called when the provider status changes. <br /><br />"
"android.location.LocationManager.String () "," Sets a mock enabled value for the given provider. <br /><br />"
"android.location.LocationManager.LocationListener () "," Register for location updates using the named provider, and a pending intent. <br /><br />"
"android.location.LocationManager.getAllProviders () "," Returns a list of the names of all known location providers. <br /><br />"
"android.location.LocationManager.getProviders (boolean enabledOnly) "," Returns a list of the names of location providers. <br /><br />"
"android.location.LocationManager.Looper () "," Register for a single location update using a Criteria and a callback. <br /><br />"
"android.location.LocationManager.GpsStatus.NmeaListener () "," Removes an NMEA listener. <br /><br />"
"android.location.LocationManager.Location () "," Sets a mock location for the given provider. <br /><br />"
"android.location.LocationManager.GpsStatus () "," Retrieves information about the current status of the GPS engine. <br /><br />"
"android.location.LocationManager.Bundle () "," Sets mock status values for the given provider. <br /><br />"
"android.location.LocationManager.Criteria () "," Returns a list of the names of LocationProviders that satisfy the given criteria, or null if none do. <br /><br />"
"android.location.LocationManager.GpsStatus.Listener () "," Removes a GPS status listener. <br /><br />"
"android.location.LocationManager.PendingIntent () "," Register for a single location update using a Criteria and pending intent. <br /><br />"
"android.location.LocationProvider.getName () "," Returns the name of this provider. <br /><br />"
"android.location.LocationProvider.requiresCell () "," Returns true if the provider requires access to an appropriate cellular network (e.g., to make use of cell tower IDs), false otherwise. <br /><br />"
"android.location.LocationProvider.getAccuracy () "," Returns a constant describing horizontal accuracy of this provider. <br /><br />"
"android.location.LocationProvider.hasMonetaryCost () "," Returns true if the use of this provider may result in a monetary charge to the user, false if use is free. <br /><br />"
"android.location.LocationProvider.requiresSatellite () "," Returns true if the provider requires access to a satellite-based positioning system (e.g., GPS), false otherwise. <br /><br />"
"android.location.LocationProvider.requiresNetwork () "," Returns true if the provider requires access to a data network (e.g., the Internet), false otherwise. <br /><br />"
"android.location.LocationProvider.Criteria () "," Returns true if this provider meets the given criteria, false otherwise. <br /><br />"
"android.location.LocationProvider.supportsAltitude () "," Returns true if the provider is able to provide altitude information, false otherwise. <br /><br />"
"android.location.LocationProvider.supportsSpeed () "," Returns true if the provider is able to provide speed information, false otherwise. <br /><br />"
"android.location.LocationProvider.supportsBearing () "," Returns true if the provider is able to provide bearing information, false otherwise. <br /><br />"
"android.location.LocationProvider.getPowerRequirement () "," Returns the power requirement for this provider. <br /><br />"
"android.location.SettingInjectorService.startService (Intent) () "," Called by the system every time a client explicitly starts the service by calling startService(Intent), providing the arguments it supplied and a unique integer token representing the start request. <br /><br />"
"android.location.SettingInjectorService.onStartCommand (Intent, int, int) () "," This method is deprecated. Implement onStartCommand(Intent, int, int) instead. <br /><br />"
"android.location.SettingInjectorService.Intent () "," Return the communication channel to the service. <br /><br />"
"android.media.AsyncPlayer.Uri () "," Start playing the sound. <br /><br />"
"android.media.AsyncPlayer.stop () "," Stop a previously played sound. <br /><br />"
"android.media.AudioAttributes.Builder.setUsage (int usage) "," Sets the attribute describing what is the intended use of the the audio signal, such as alarm or ringtone. <br /><br />"
"android.media.AudioAttributes.Builder.setLegacyStreamType (int streamType) "," Sets attributes as inferred from the legacy stream types. <br /><br />"
"android.media.AudioAttributes.Builder.setFlags (int flags) "," Sets the combination of flags. <br /><br />"
"android.media.AudioAttributes.Builder.setContentType (int contentType) "," Sets the attribute describing the content type of the audio signal, such as speech, or music. <br /><br />"
"android.media.AudioAttributes.Builder.AudioAttributes () "," Combines all of the attributes that have been set and return a new AudioAttributes object. <br /><br />"
"android.media.AudioAttributes.getContentType () "," Return the content type. <br /><br />"
"android.media.AudioAttributes.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.media.AudioAttributes.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.media.AudioAttributes.getFlags () "," Return the flags. <br /><br />"
"android.media.AudioAttributes.getUsage () "," Return the usage. <br /><br />"
"android.media.AudioAttributes.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.media.AudioAttributes.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.media.AudioAttributes.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.media.AudioFormat.Builder.setEncoding (int encoding) "," Sets the data encoding format. <br /><br />"
"android.media.AudioFormat.Builder.AudioFormat () "," Combines all of the format characteristics that have been set and return a new AudioFormat object. <br /><br />"
"android.media.AudioFormat.Builder.setSampleRate (int sampleRate) "," Sets the sample rate. <br /><br />"
"android.media.AudioFormat.Builder.setChannelMask (int channelMask) "," Sets the channel mask. <br /><br />"
"android.media.AudioFormat.getSampleRate () "," Return the sample rate. <br /><br />"
"android.media.AudioFormat.getEncoding () "," Return the encoding. <br /><br />"
"android.media.AudioFormat.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.media.AudioFormat.getChannelMask () "," Return the channel mask. <br /><br />"
"android.media.audiofx.AcousticEchoCanceler.isAvailable () "," Checks if the device implements acoustic echo cancellation. <br /><br />"
"android.media.audiofx.AcousticEchoCanceler.create (int audioSession) "," Creates an AcousticEchoCanceler and attaches it to the AudioRecord on the audio session specified. <br /><br />"
"android.media.audiofx.AudioEffect.getEnabled () "," Returns effect enabled state <br /><br />"
"android.media.audiofx.AudioEffect.hasControl () "," Checks if this AudioEffect object is controlling the effect engine. <br /><br />"
"android.media.audiofx.AudioEffect.getId () "," Returns effect unique identifier. <br /><br />"
"android.media.audiofx.AudioEffect.setEnabled (boolean enabled) "," Enable or disable the effect. <br /><br />"
"android.media.audiofx.AudioEffect.AudioEffect.OnEnableStatusChangeListener () "," Sets the listener AudioEffect notifies when the effect engine is enabled or disabled. <br /><br />"
"android.media.audiofx.AudioEffect.AudioEffect.OnControlStatusChangeListener () "," Sets the listener AudioEffect notifies when the effect engine control is taken or returned. <br /><br />"
"android.media.audiofx.AudioEffect.release () "," Releases the native AudioEffect resources. <br /><br />"
"android.media.audiofx.AudioEffect.getDescriptor () "," Get the effect descriptor. <br /><br />"
"android.media.audiofx.AudioEffect.queryEffects () "," Query all effects available on the platform. <br /><br />"
"android.media.audiofx.AudioEffect.OnControlStatusChangeListener.AudioEffect () "," Called on the listener to notify it that the effect engine control has been taken or returned. <br /><br />"
"android.media.audiofx.AudioEffect.OnEnableStatusChangeListener.AudioEffect () "," Called on the listener to notify it that the effect engine has been enabled or disabled. <br /><br />"
"android.media.audiofx.AutomaticGainControl.isAvailable () "," Checks if the device implements automatic gain control. <br /><br />"
"android.media.audiofx.AutomaticGainControl.create (int audioSession) "," Creates an AutomaticGainControl and attaches it to the AudioRecord on the audio session specified. <br /><br />"
"android.media.audiofx.BassBoost.BassBoost.Settings () "," Sets the bass boost properties. <br /><br />"
"android.media.audiofx.BassBoost.getRoundedStrength () "," Gets the current strength of the effect. <br /><br />"
"android.media.audiofx.BassBoost.setStrength (short strength) "," Sets the strength of the bass boost effect. <br /><br />"
"android.media.audiofx.BassBoost.getProperties () "," Gets the bass boost properties. <br /><br />"
"android.media.audiofx.BassBoost.BassBoost.OnParameterChangeListener () "," Registers an OnParameterChangeListener interface. <br /><br />"
"android.media.audiofx.BassBoost.getStrengthSupported () "," Indicates whether setting strength is supported. <br /><br />"
"android.media.audiofx.BassBoost.OnParameterChangeListener.BassBoost () "," Method called when a parameter value has changed. <br /><br />"
"android.media.audiofx.BassBoost.Settings.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.media.audiofx.EnvironmentalReverb.setReverbLevel (short reverbLevel) "," Sets the volume level of the late reverberation. <br /><br />"
"android.media.audiofx.EnvironmentalReverb.getReflectionsDelay () "," Gets the reflections delay. <br /><br />"
"android.media.audiofx.EnvironmentalReverb.setReverbDelay (int reverbDelay) "," Sets the time between the first reflection and the reverberation. <br /><br />"
"android.media.audiofx.EnvironmentalReverb.getReflectionsLevel () "," Gets the volume level of the early reflections. <br /><br />"
"android.media.audiofx.EnvironmentalReverb.getDecayTime () "," Gets the decay time. <br /><br />"
"android.media.audiofx.EnvironmentalReverb.getRoomLevel () "," Gets the master volume level of the environmental reverb effect. <br /><br />"
"android.media.audiofx.EnvironmentalReverb.getProperties () "," Gets the environmental reverb properties. <br /><br />"
"android.media.audiofx.EnvironmentalReverb.getRoomHFLevel () "," Gets the room HF level. <br /><br />"
"android.media.audiofx.EnvironmentalReverb.setRoomLevel (short room) "," Sets the master volume level of the environmental reverb effect. <br /><br />"
"android.media.audiofx.EnvironmentalReverb.getDecayHFRatio () "," Gets the ratio of high frequency decay time (at 5 kHz) relative to low frequencies. <br /><br />"
"android.media.audiofx.EnvironmentalReverb.setDecayTime (int decayTime) "," Sets the time taken for the level of reverberation to decay by 60 dB. <br /><br />"
"android.media.audiofx.EnvironmentalReverb.setReflectionsLevel (short reflectionsLevel) "," Sets the volume level of the early reflections. <br /><br />"
"android.media.audiofx.EnvironmentalReverb.setReflectionsDelay (int reflectionsDelay) "," Sets the delay time for the early reflections. <br /><br />"
"android.media.audiofx.EnvironmentalReverb.getReverbLevel () "," Gets the reverb level. <br /><br />"
"android.media.audiofx.EnvironmentalReverb.setRoomHFLevel (short roomHF) "," Sets the volume level at 5 kHz relative to the volume level at low frequencies of the overall reverb effect. <br /><br />"
"android.media.audiofx.EnvironmentalReverb.setDiffusion (short diffusion) "," Sets the echo density in the late reverberation decay. <br /><br />"
"android.media.audiofx.EnvironmentalReverb.EnvironmentalReverb.OnParameterChangeListener () "," Registers an OnParameterChangeListener interface. <br /><br />"
"android.media.audiofx.EnvironmentalReverb.setDecayHFRatio (short decayHFRatio) "," Sets the ratio of high frequency decay time (at 5 kHz) relative to the decay time at low frequencies. <br /><br />"
"android.media.audiofx.EnvironmentalReverb.getDiffusion () "," Gets diffusion level. <br /><br />"
"android.media.audiofx.EnvironmentalReverb.EnvironmentalReverb.Settings () "," Sets the environmental reverb properties. <br /><br />"
"android.media.audiofx.EnvironmentalReverb.getDensity () "," Gets the density level. <br /><br />"
"android.media.audiofx.EnvironmentalReverb.getReverbDelay () "," Gets the reverb delay. <br /><br />"
"android.media.audiofx.EnvironmentalReverb.setDensity (short density) "," Controls the modal density of the late reverberation decay. <br /><br />"
"android.media.audiofx.EnvironmentalReverb.OnParameterChangeListener.EnvironmentalReverb () "," Method called when a parameter value has changed. <br /><br />"
"android.media.audiofx.EnvironmentalReverb.Settings.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.media.audiofx.Equalizer.getBandLevel (short band) "," Gets the gain set for the given equalizer band. <br /><br />"
"android.media.audiofx.Equalizer.setBandLevel (short, short) () "," Gets the level range for use by setBandLevel(short, short). <br /><br />"
"android.media.audiofx.Equalizer.getBand (int frequency) "," Gets the band that has the most effect on the given frequency. <br /><br />"
"android.media.audiofx.Equalizer.getBandFreqRange (short band) "," Gets the frequency range of the given frequency band. <br /><br />"
"android.media.audiofx.Equalizer.getProperties () "," Gets the equalizer properties. <br /><br />"
"android.media.audiofx.Equalizer.getCurrentPreset () "," Gets current preset. <br /><br />"
"android.media.audiofx.Equalizer.getPresetName (short preset) "," Gets the preset name based on the index. <br /><br />"
"android.media.audiofx.Equalizer.getCenterFreq (short band) "," Gets the center frequency of the given band. <br /><br />"
"android.media.audiofx.Equalizer.Equalizer.Settings () "," Sets the equalizer properties. <br /><br />"
"android.media.audiofx.Equalizer.usePreset (short preset) "," Sets the equalizer according to the given preset. <br /><br />"
"android.media.audiofx.Equalizer.setBandLevel (short band, short level) "," Sets the given equalizer band to the given gain value. <br /><br />"
"android.media.audiofx.Equalizer.getNumberOfBands () "," Gets the number of frequency bands supported by the Equalizer engine. <br /><br />"
"android.media.audiofx.Equalizer.Equalizer.OnParameterChangeListener () "," Registers an OnParameterChangeListener interface. <br /><br />"
"android.media.audiofx.Equalizer.getNumberOfPresets () "," Gets the total number of presets the equalizer supports. <br /><br />"
"android.media.audiofx.Equalizer.OnParameterChangeListener.Equalizer () "," Method called when a parameter value has changed. <br /><br />"
"android.media.audiofx.Equalizer.Settings.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.media.audiofx.LoudnessEnhancer.getTargetGain () "," Return the target gain. <br /><br />"
"android.media.audiofx.LoudnessEnhancer.setTargetGain (int gainmB) "," Set the target gain for the audio effect. <br /><br />"
"android.media.audiofx.NoiseSuppressor.isAvailable () "," Checks if the device implements noise suppression. <br /><br />"
"android.media.audiofx.NoiseSuppressor.create (int audioSession) "," Creates a NoiseSuppressor and attaches it to the AudioRecord on the audio session specified. <br /><br />"
"android.media.audiofx.PresetReverb.setPreset (short preset) "," Enables a preset on the reverb. <br /><br />"
"android.media.audiofx.PresetReverb.PresetReverb.Settings () "," Sets the preset reverb properties. <br /><br />"
"android.media.audiofx.PresetReverb.PresetReverb.OnParameterChangeListener () "," Registers an OnParameterChangeListener interface. <br /><br />"
"android.media.audiofx.PresetReverb.getProperties () "," Gets the preset reverb properties. <br /><br />"
"android.media.audiofx.PresetReverb.getPreset () "," Gets current reverb preset. <br /><br />"
"android.media.audiofx.PresetReverb.OnParameterChangeListener.PresetReverb () "," Method called when a parameter value has changed. <br /><br />"
"android.media.audiofx.PresetReverb.Settings.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.media.audiofx.Virtualizer.getRoundedStrength () "," Gets the current strength of the effect. <br /><br />"
"android.media.audiofx.Virtualizer.Virtualizer.OnParameterChangeListener () "," Registers an OnParameterChangeListener interface. <br /><br />"
"android.media.audiofx.Virtualizer.forceVirtualizationMode (int virtualizationMode) "," Forces the virtualizer effect to use the given processing mode. <br /><br />"
"android.media.audiofx.Virtualizer.setStrength (short strength) "," Sets the strength of the virtualizer effect. <br /><br />"
"android.media.audiofx.Virtualizer.getSpeakerAngles (int inputChannelMask, int virtualizationMode, int[] angles) "," Queries the virtual speaker angles (azimuth and elevation) for a combination of a channel mask and virtualization mode. <br /><br />"
"android.media.audiofx.Virtualizer.canVirtualize (int inputChannelMask, int virtualizationMode) "," Checks if the combination of a channel mask and virtualization mode is supported by this virtualizer. <br /><br />"
"android.media.audiofx.Virtualizer.getProperties () "," Gets the virtualizer properties. <br /><br />"
"android.media.audiofx.Virtualizer.Virtualizer.Settings () "," Sets the virtualizer properties. <br /><br />"
"android.media.audiofx.Virtualizer.getVirtualizationMode () "," Return the virtualization mode being used, if any. <br /><br />"
"android.media.audiofx.Virtualizer.getStrengthSupported () "," Indicates whether setting strength is supported. <br /><br />"
"android.media.audiofx.Virtualizer.OnParameterChangeListener.Virtualizer () "," Method called when a parameter value has changed. <br /><br />"
"android.media.audiofx.Virtualizer.Settings.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.media.audiofx.Visualizer.getEnabled () "," Get current activation state of the visualizer. <br /><br />"
"android.media.audiofx.Visualizer.getCaptureSize () "," Returns current capture size. <br /><br />"
"android.media.audiofx.Visualizer.getWaveForm (byte[] waveform) "," Returns a waveform capture of currently playing audio content. <br /><br />"
"android.media.audiofx.Visualizer.getMeasurementMode () "," Returns the current measurement modes performed by this audio effect <br /><br />"
"android.media.audiofx.Visualizer.getMaxCaptureRate () "," Returns the maximum capture rate for the callback capture method. <br /><br />"
"android.media.audiofx.Visualizer.getScalingMode () "," Returns the current scaling mode on the captured visualization data. <br /><br />"
"android.media.audiofx.Visualizer.getCaptureSizeRange () "," Returns the capture size range. <br /><br />"
"android.media.audiofx.Visualizer.getFft (byte[] fft) "," Returns a frequency capture of currently playing audio content. <br /><br />"
"android.media.audiofx.Visualizer.setMeasurementMode (int mode) "," Sets the combination of measurement modes to be performed by this audio effect. <br /><br />"
"android.media.audiofx.Visualizer.release () "," Releases the native Visualizer resources. <br /><br />"
"android.media.audiofx.Visualizer.setEnabled (boolean enabled) "," Enable or disable the visualization engine. <br /><br />"
"android.media.audiofx.Visualizer.Visualizer.OnDataCaptureListener () "," Registers an OnDataCaptureListener interface and specifies the rate at which the capture should be updated as well as the type of capture requested. <br /><br />"
"android.media.audiofx.Visualizer.getSamplingRate () "," Returns the sampling rate of the captured audio. <br /><br />"
"android.media.audiofx.Visualizer.setCaptureSize (int size) "," Sets the capture size, i.e. <br /><br />"
"android.media.audiofx.Visualizer.setScalingMode (int mode) "," Set the type of scaling applied on the captured visualization data. <br /><br />"
"android.media.audiofx.Visualizer.Visualizer.MeasurementPeakRms () "," Retrieves the latest peak and RMS measurement. <br /><br />"
"android.media.audiofx.Visualizer.OnDataCaptureListener.Visualizer () "," Method called when a new waveform capture is available. <br /><br />"
"android.media.AudioManager.isVolumeFixed () "," Indicates if the device implements a fixed volume policy. <br /><br />"
"android.media.AudioManager.removeOnActiveSessionsChangedListener (android.media.session.MediaSessionManager.OnActiveSessionsChangedListener) () "," This method was deprecated in API level 21. Use removeOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener) instead. <br /><br />"
"android.media.AudioManager.startBluetoothSco () "," Start bluetooth SCO audio connection. <br /><br />"
"android.media.AudioManager.adjustSuggestedStreamVolume (int direction, int suggestedStreamType, int flags) "," Adjusts the volume of the most relevant stream, or the given fallback stream. <br /><br />"
"android.media.AudioManager.setBluetoothScoOn (boolean on) "," Request use of Bluetooth SCO headset for communications. <br /><br />"
"android.media.AudioManager.MediaController () "," This method was deprecated in API level 21. Use addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener, ComponentName) and MediaController instead. <br /><br />"
"android.media.AudioManager.setMediaButtonReceiver (PendingIntent) () "," This method was deprecated in API level 21. Use setMediaButtonReceiver(PendingIntent) instead. <br /><br />"
"android.media.AudioManager.setWiredHeadsetOn (boolean on) "," This method was deprecated in API level 5. Do not use. <br /><br />"
"android.media.AudioManager.loadSoundEffects () "," Load Sound effects. <br /><br />"
"android.media.AudioManager.getMode () "," Returns the current audio mode. <br /><br />"
"android.media.AudioManager.setBluetoothA2dpOn (boolean on) "," This method was deprecated in API level 5. Do not use. <br /><br />"
"android.media.AudioManager.getStreamVolume (int streamType) "," Returns the current volume index for a particular stream. <br /><br />"
"android.media.AudioManager.getRingerMode () (int vibrateType, int vibrateSetting) "," This method was deprecated in API level 16. Applications should maintain their own vibrate policy based on current ringer mode that can be queried via getRingerMode(). <br /><br />"
"android.media.AudioManager.isMicrophoneMute () "," Checks whether the microphone mute is on or off. <br /><br />"
"android.media.AudioManager.setMicrophoneMute (boolean on) "," Sets the microphone mute on or off. <br /><br />"
"android.media.AudioManager.isSpeakerphoneOn () "," Checks whether the speakerphone is on or off. <br /><br />"
"android.media.AudioManager.setStreamMute (int streamType, boolean state) "," Mute or unmute an audio stream. <br /><br />"
"android.media.AudioManager.AudioManager.OnAudioFocusChangeListener () "," Request audio focus. <br /><br />"
"android.media.AudioManager.playSoundEffect (int effectType) "," Plays a sound effect (Key clicks, lid open/close...) <br /><br />"
"android.media.AudioManager.String () "," Sets a variable number of parameter values to audio hardware. <br /><br />"
"android.media.AudioManager.setStreamSolo (int streamType, boolean state) "," Solo or unsolo a particular stream. <br /><br />"
"android.media.AudioManager.isWiredHeadsetOn () "," This method was deprecated in API level 14. Use only to check is a headset is connected or not. <br /><br />"
"android.media.AudioManager.unloadSoundEffects () "," Unload Sound effects. <br /><br />"
"android.media.AudioManager.isMusicActive () "," Checks whether any music is active. <br /><br />"
"android.media.AudioManager.setSpeakerphoneOn (boolean on) "," Sets the speakerphone on or off. <br /><br />"
"android.media.AudioManager.playSoundEffect (int effectType, float volume) "," Plays a sound effect (Key clicks, lid open/close...) <br /><br />"
"android.media.AudioManager.getRingerMode () (int vibrateType) "," This method was deprecated in API level 16. Applications should maintain their own vibrate policy based on current ringer mode that can be queried via getRingerMode(). <br /><br />"
"android.media.AudioManager.generateAudioSessionId () "," Return a new audio session identifier not associated with any player or effect. <br /><br />"
"android.media.AudioManager.getRouting (int mode) "," This method was deprecated in API level 4. Do not query audio routing directly, use isSpeakerphoneOn(), isBluetoothScoOn(), isBluetoothA2dpOn() and isWiredHeadsetOn() methods instead. <br /><br />"
"android.media.AudioManager.isBluetoothScoOn () "," Checks whether communications use Bluetooth SCO. <br /><br />"
"android.media.AudioManager.setStreamVolume (int streamType, int index, int flags) "," Sets the volume index for a particular stream. <br /><br />"
"android.media.AudioManager.setRingerMode (int ringerMode) "," Sets the ringer mode. <br /><br />"
"android.media.AudioManager.getStreamMaxVolume (int streamType) "," Returns the maximum volume index for a particular stream. <br /><br />"
"android.media.AudioManager.KeyEvent () "," Sends a simulated key event for a media button. <br /><br />"
"android.media.AudioManager.isBluetoothScoAvailableOffCall () "," Indicates if current platform supports use of SCO for off call use cases. <br /><br />"
"android.media.AudioManager.setRouting (int mode, int routes, int mask) "," This method was deprecated in API level 4. Do not set audio routing directly, use setSpeakerphoneOn(), setBluetoothScoOn() methods instead. <br /><br />"
"android.media.AudioManager.setMode (int mode) "," Sets the audio mode. <br /><br />"
"android.media.AudioManager.MediaSession () "," This method was deprecated in API level 21. Use MediaSession instead. <br /><br />"
"android.media.AudioManager.isBluetoothA2dpOn () "," Checks whether A2DP audio routing to the Bluetooth headset is on or off. <br /><br />"
"android.media.AudioManager.stopBluetoothSco () "," Stop bluetooth SCO audio connection. <br /><br />"
"android.media.AudioManager.adjustStreamVolume (int streamType, int direction, int flags) "," Adjusts the volume of a particular stream by one step in a direction. <br /><br />"
"android.media.AudioManager.getRingerMode () "," Returns the current ringtone mode. <br /><br />"
"android.media.AudioManager.adjustVolume (int direction, int flags) "," Adjusts the volume of the most relevant stream. <br /><br />"
"android.media.AudioManager.OnAudioFocusChangeListener.onAudioFocusChange (int focusChange) "," Called on the listener to notify it the audio focus for this listener has been changed. <br /><br />"
"android.media.AudioRecord.getAudioSource () "," Returns the audio recording source. <br /><br />"
"android.media.AudioRecord.startRecording () "," Starts recording from the AudioRecord instance. <br /><br />"
"android.media.AudioRecord.getState () "," Returns the state of the AudioRecord instance. <br /><br />"
"android.media.AudioRecord.read (byte[] audioData, int offsetInBytes, int sizeInBytes) "," Reads audio data from the audio hardware for recording into a buffer. <br /><br />"
"android.media.AudioRecord.release () "," Releases the native AudioRecord resources. <br /><br />"
"android.media.AudioRecord.getAudioFormat () "," Returns the configured audio data format. <br /><br />"
"android.media.AudioRecord.setRecordPositionUpdateListener (OnRecordPositionUpdateListener, Handler) (int periodInFrames) "," Sets the period at which the listener is called, if set with setRecordPositionUpdateListener(OnRecordPositionUpdateListener) or setRecordPositionUpdateListener(OnRecordPositionUpdateListener, Handler). <br /><br />"
"android.media.AudioRecord.getMinBufferSize (int sampleRateInHz, int channelConfig, int audioFormat) "," Returns the minimum buffer size required for the successful creation of an AudioRecord object, in byte units. <br /><br />"
"android.media.AudioRecord.getNotificationMarkerPosition () "," Returns the notification marker position expressed in frames. <br /><br />"
"android.media.AudioRecord.getPositionNotificationPeriod () "," Returns the notification update period expressed in frames. <br /><br />"
"android.media.AudioRecord.stop () "," Stops recording. <br /><br />"
"android.media.AudioRecord.Handler () "," Sets the listener the AudioRecord notifies when a previously set marker is reached or for each periodic record head position update. <br /><br />"
"android.media.AudioRecord.getSampleRate () "," Returns the configured audio data sample rate in Hz <br /><br />"
"android.media.AudioRecord.AudioRecord.OnRecordPositionUpdateListener () "," Sets the listener the AudioRecord notifies when a previously set marker is reached or for each periodic record head position update. <br /><br />"
"android.media.AudioRecord.ByteBuffer () "," Reads audio data from the audio hardware for recording into a direct buffer. <br /><br />"
"android.media.AudioRecord.getChannelCount () "," Returns the configured number of channels. <br /><br />"
"android.media.AudioRecord.getRecordingState () "," Returns the recording state of the AudioRecord instance. <br /><br />"
"android.media.AudioRecord.MediaSyncEvent () "," Starts recording from the AudioRecord instance when the specified synchronization event occurs on the specified audio session. <br /><br />"
"android.media.AudioRecord.read (short[] audioData, int offsetInShorts, int sizeInShorts) "," Reads audio data from the audio hardware for recording into a buffer. <br /><br />"
"android.media.AudioRecord.setRecordPositionUpdateListener (OnRecordPositionUpdateListener, Handler) (int markerInFrames) "," Sets the marker position at which the listener is called, if set with setRecordPositionUpdateListener(OnRecordPositionUpdateListener) or setRecordPositionUpdateListener(OnRecordPositionUpdateListener, Handler). <br /><br />"
"android.media.AudioRecord.getChannelConfiguration () "," Returns the configured channel configuration. <br /><br />"
"android.media.AudioRecord.getAudioSessionId () "," Returns the audio session ID. <br /><br />"
"android.media.AudioRecord.OnRecordPositionUpdateListener.AudioRecord () "," Called on the listener to periodically notify it that the record head has reached a multiple of the notification period. <br /><br />"
"android.media.AudioTrack.setVolume (float) (float leftGain, float rightGain) "," This method was deprecated in API level 21. Applications should use setVolume(float) instead, as it more gracefully scales down to mono, and up to multi-channel content beyond stereo. <br /><br />"
"android.media.AudioTrack.MODE_STREAM (int sampleRateInHz, int channelConfig, int audioFormat) "," Returns the minimum buffer size required for the successful creation of an AudioTrack object to be created in the MODE_STREAM mode. <br /><br />"
"android.media.AudioTrack.AudioTrack.OnPlaybackPositionUpdateListener () "," Sets the listener the AudioTrack notifies when a previously set marker is reached or for each periodic playback head position update. <br /><br />"
"android.media.AudioTrack.getNativeOutputSampleRate (int streamType) "," Returns the output sample rate in Hz for the specified stream type. <br /><br />"
"android.media.AudioTrack.getMinVolume () "," Returns the minimum gain value, which is the constant 0.0. <br /><br />"
"android.media.AudioTrack.AudioTimestamp () "," Poll for a timestamp on demand. <br /><br />"
"android.media.AudioTrack.setPlaybackHeadPosition (int positionInFrames) "," Sets the playback head position. <br /><br />"
"android.media.AudioTrack.setPositionNotificationPeriod (int periodInFrames) "," Sets the period for the periodic notification event. <br /><br />"
"android.media.AudioTrack.write (short[] audioData, int offsetInShorts, int sizeInShorts) "," Writes the audio data to the audio sink for playback (streaming mode), or copies audio data for later playback (static buffer mode). <br /><br />"
"android.media.AudioTrack.getPositionNotificationPeriod () "," Returns the notification update period expressed in frames. <br /><br />"
"android.media.AudioTrack.stop () "," Stops playing the audio data. <br /><br />"
"android.media.AudioTrack.getPlayState () "," Returns the playback state of the AudioTrack instance. <br /><br />"
"android.media.AudioTrack.getSampleRate () "," Returns the configured audio data sample rate in Hz <br /><br />"
"android.media.AudioTrack.getMaxVolume () "," Returns the maximum gain value, which is greater than or equal to 1.0. <br /><br />"
"android.media.AudioTrack.getChannelCount () "," Returns the configured number of channels. <br /><br />"
"android.media.AudioTrack.getPlaybackRate () "," Returns the current playback rate in Hz. <br /><br />"
"android.media.AudioTrack.getChannelConfiguration () "," Returns the configured channel configuration. <br /><br />"
"android.media.AudioTrack.setPlaybackRate (int sampleRateInHz) "," Sets the playback sample rate for this track. <br /><br />"
"android.media.AudioTrack.play () "," Starts playing an AudioTrack. <br /><br />"
"android.media.AudioTrack.setNotificationMarkerPosition (int markerInFrames) "," Sets the position of the notification marker. <br /><br />"
"android.media.AudioTrack.reloadStaticData () "," Notifies the native resource to reuse the audio data already loaded in the native layer, that is to rewind to start of buffer. <br /><br />"
"android.media.AudioTrack.getState () "," Returns the state of the AudioTrack instance. <br /><br />"
"android.media.AudioTrack.write (float[] audioData, int offsetInFloats, int sizeInFloats, int writeMode) "," Writes the audio data to the audio sink for playback (streaming mode), or copies audio data for later playback (static buffer mode). <br /><br />"
"android.media.AudioTrack.setVolume (float gain) "," Sets the specified output gain value on all channels of this track. <br /><br />"
"android.media.AudioTrack.flush () "," Flushes the audio data currently queued for playback. <br /><br />"
"android.media.AudioTrack.attachAuxEffect (int) (float level) "," Sets the send level of the audio track to the attached auxiliary effect attachAuxEffect(int). <br /><br />"
"android.media.AudioTrack.getAudioFormat () "," Returns the configured audio data format. <br /><br />"
"android.media.AudioTrack.release () "," Releases the native AudioTrack resources. <br /><br />"
"android.media.AudioTrack.getNotificationMarkerPosition () "," Returns marker position expressed in frames. <br /><br />"
"android.media.AudioTrack.Handler () "," Sets the listener the AudioTrack notifies when a previously set marker is reached or for each periodic playback head position update. <br /><br />"
"android.media.AudioTrack.getPlaybackHeadPosition () "," Returns the playback head position expressed in frames. <br /><br />"
"android.media.AudioTrack.ByteBuffer () "," Writes the audio data to the audio sink for playback (streaming mode), or copies audio data for later playback (static buffer mode). <br /><br />"
"android.media.AudioTrack.getStreamType () "," Returns the type of audio stream this AudioTrack is configured for. <br /><br />"
"android.media.AudioTrack.setLoopPoints (int startInFrames, int endInFrames, int loopCount) "," Sets the loop points and the loop count. <br /><br />"
"android.media.AudioTrack.attachAuxEffect (int effectId) "," Attaches an auxiliary effect to the audio track. <br /><br />"
"android.media.AudioTrack.getAudioSessionId () "," Returns the audio session ID. <br /><br />"
"android.media.AudioTrack.pause () "," Pauses the playback of the audio data. <br /><br />"
"android.media.AudioTrack.write (byte[] audioData, int offsetInBytes, int sizeInBytes) "," Writes the audio data to the audio sink for playback (streaming mode), or copies audio data for later playback (static buffer mode). <br /><br />"
"android.media.AudioTrack.OnPlaybackPositionUpdateListener.AudioTrack () "," Called on the listener to periodically notify it that the playback head has reached a multiple of the notification period. <br /><br />"
"android.media.browse.MediaBrowser.ConnectionCallback.connect () () "," Invoked after connect() when the request has successfully completed. <br /><br />"
"android.media.browse.MediaBrowser.ConnectionCallback.onConnectionSuspended () "," Invoked when the client is disconnected from the media browser. <br /><br />"
"android.media.browse.MediaBrowser.ConnectionCallback.onConnectionFailed () "," Invoked when the connection to the media browser failed. <br /><br />"
"android.media.browse.MediaBrowser.getExtras () "," Gets any extras for the media service. <br /><br />"
"android.media.browse.MediaBrowser.String () "," Unsubscribes for changes to the children of the specified media id. <br /><br />"
"android.media.browse.MediaBrowser.MediaBrowser.SubscriptionCallback () "," Queries for information about the media items that are contained within the specified id and subscribes to receive updates when they change. <br /><br />"
"android.media.browse.MediaBrowser.getSessionToken () "," Gets the media session token associated with the media browser. <br /><br />"
"android.media.browse.MediaBrowser.connect () "," Connects to the media browse service. <br /><br />"
"android.media.browse.MediaBrowser.isConnected () "," Returns whether the browser is connected to the service. <br /><br />"
"android.media.browse.MediaBrowser.getServiceComponent () "," Gets the service component that the media browser is connected to. <br /><br />"
"android.media.browse.MediaBrowser.getRoot () "," Gets the root id. <br /><br />"
"android.media.browse.MediaBrowser.disconnect () "," Disconnects from the media browse service. <br /><br />"
"android.media.browse.MediaBrowser.MediaItem.getDescription () "," Returns the description of the media. <br /><br />"
"android.media.browse.MediaBrowser.MediaItem.getMediaId () "," Returns the media id for this item. <br /><br />"
"android.media.browse.MediaBrowser.MediaItem.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.media.browse.MediaBrowser.MediaItem.isPlayable () "," Returns whether this item is playable. <br /><br />"
"android.media.browse.MediaBrowser.MediaItem.getFlags () "," Gets the flags of the item. <br /><br />"
"android.media.browse.MediaBrowser.MediaItem.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.media.browse.MediaBrowser.MediaItem.isBrowsable () "," Returns whether this item is browsable. <br /><br />"
"android.media.browse.MediaBrowser.MediaItem.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.media.browse.MediaBrowser.SubscriptionCallback.String () "," Called when the id doesn't exist or other errors in subscribing. <br /><br />"
"android.media.browse.MediaBrowser.SubscriptionCallback.MediaBrowser.MediaItem () "," Called when the list of children is loaded or updated. <br /><br />"
"android.media.CamcorderProfile.get (int cameraId, int quality) "," Returns the camcorder profile for the given camera at the given quality level. <br /><br />"
"android.media.CamcorderProfile.hasProfile (int quality) "," Returns true if camcorder profile exists for the first back-facing camera at the given quality level. <br /><br />"
"android.media.CamcorderProfile.hasProfile (int cameraId, int quality) "," Returns true if camcorder profile exists for the given camera at the given quality level. <br /><br />"
"android.media.CamcorderProfile.get (int quality) "," Returns the camcorder profile for the first back-facing camera on the device at the given quality level. <br /><br />"
"android.media.CameraProfile.getJpegEncodingQualityParameter (int cameraId, int quality) "," Returns a pre-defined still image capture (jpeg) quality level used for the given quality level in the Camera application for the specified camera. <br /><br />"
"android.media.CameraProfile.getJpegEncodingQualityParameter (int quality) "," Returns a pre-defined still image capture (jpeg) quality level used for the given quality level in the Camera application for the first back-facing camera on the device. <br /><br />"
"android.media.effect.Effect.getName () "," Get the effect name. <br /><br />"
"android.media.effect.Effect.apply (int inputTexId, int width, int height, int outputTexId) "," Apply an effect to GL textures. <br /><br />"
"android.media.effect.Effect.EffectUpdateListener () "," Set an effect listener. <br /><br />"
"android.media.effect.Effect.Object () "," Set a filter parameter. <br /><br />"
"android.media.effect.Effect.release () "," Release an effect. <br /><br />"
"android.media.effect.EffectContext.getFactory () "," Returns the EffectFactory for this context. <br /><br />"
"android.media.effect.EffectContext.release () "," Releases the context. <br /><br />"
"android.media.effect.EffectContext.createWithCurrentGlContext () "," Creates a context within the current GL context. <br /><br />"
"android.media.effect.EffectFactory.String () "," Check if an effect is supported on this platform. <br /><br />"
"android.media.effect.EffectUpdateListener.Object () "," Called when the effect state is updated. <br /><br />"
"android.media.ExifInterface.String () "," Set the value of the specified tag. <br /><br />"
"android.media.ExifInterface.getThumbnail () "," Returns the thumbnail inside the JPEG file, or null if there is no thumbnail. <br /><br />"
"android.media.ExifInterface.saveAttributes () "," Save the tag data into the JPEG file. <br /><br />"
"android.media.ExifInterface.hasThumbnail () "," Returns true if the JPEG file has a thumbnail. <br /><br />"
"android.media.ExifInterface.getLatLong (float[] output) "," Stores the latitude and longitude value in a float array. <br /><br />"
"android.media.ExifInterface.getAltitude (double defaultValue) "," Return the altitude in meters. <br /><br />"
"android.media.FaceDetector.Face.pose (int euler) "," Returns the face's pose. <br /><br />"
"android.media.FaceDetector.Face.eyesDistance () "," Returns the distance between the eyes. <br /><br />"
"android.media.FaceDetector.Face.PointF () "," Sets the position of the mid-point between the eyes. <br /><br />"
"android.media.FaceDetector.Face.confidence () "," Returns a confidence factor between 0 and 1. <br /><br />"
"android.media.FaceDetector.Bitmap () "," Finds all the faces found in a given Bitmap. <br /><br />"
"android.media.Image.Plane.getRowStride () "," The row stride for this color plane, in bytes. <br /><br />"
"android.media.Image.Plane.getPixelStride () "," The distance between adjacent pixel samples, in bytes. <br /><br />"
"android.media.Image.Plane.ByteBuffer () "," Get a direct ByteBuffer containing the frame data. <br /><br />"
"android.media.ImageReader.OnImageAvailableListener.ImageReader () "," Callback that is called when a new image is available from ImageReader. <br /><br />"
"android.media.JetPlayer.OnJetEventListener.JetPlayer () "," Callback for when JET's currently playing segment's userID is updated. <br /><br />"
"android.media.MediaActionSound.play (int soundName) "," Play one of the predefined platform sounds for media actions. <br /><br />"
"android.media.MediaActionSound.release () "," Free up all audio resources used by this MediaActionSound instance. <br /><br />"
"android.media.MediaActionSound.play (int) (int soundName) "," Preload a predefined platform sound to minimize latency when the sound is played later by play(int). <br /><br />"
"android.media.MediaCodec.BufferInfo.set (int newOffset, int newSize, long newTimeUs, int newFlags) "," Update the buffer metadata information. <br /><br />"
"android.media.MediaCodec.Callback.MediaCodec.BufferInfo () "," Called when an output buffer becomes available. <br /><br />"
"android.media.MediaCodec.Callback.MediaCodec () "," Called when an input buffer becomes available. <br /><br />"
"android.media.MediaCodec.Callback.MediaFormat () "," Called when the output format has changed <br /><br />"
"android.media.MediaCodec.Callback.MediaCodec.CodecException () "," Called when the MediaCodec encountered an error <br /><br />"
"android.media.MediaCodec.CodecException.isTransient () "," Returns true if the codec exception is a transient issue, perhaps due to resource constraints, and that the method (or encoding/decoding) may be retried at a later time. <br /><br />"
"android.media.MediaCodec.CodecException.isRecoverable () "," Returns true if the codec cannot proceed further, but can be recovered by stopping, configuring, and starting again. <br /><br />"
"android.media.MediaCodec.CodecException.getDiagnosticInfo () "," Retrieve a developer-readable diagnostic information string associated with the exception. <br /><br />"
"android.media.MediaCodec.CryptoException.getErrorCode () "," Retrieve the error code associated with a CryptoException <br /><br />"
"android.media.MediaCodec.CryptoInfo.set (int newNumSubSamples, int[] newNumBytesOfClearData, int[] newNumBytesOfEncryptedData, byte[] newKey, byte[] newIV, int newMode) "," no description <br /><br />"
"android.media.MediaCodec.CryptoInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.media.MediaCodec.getOutputFormat (int index) "," Returns the output format for a specific output buffer. <br /><br />"
"android.media.MediaCodec.dequeueInputBuffer (long timeoutUs) "," Returns the index of an input buffer to be filled with valid data or -1 if no such buffer is currently available. <br /><br />"
"android.media.MediaCodec.queueInputBuffer (int index, int offset, int size, long presentationTimeUs, int flags) "," After filling a range of the input buffer at the specified index submit it to the component. <br /><br />"
"android.media.MediaCodec.getInputImage (int index) "," Returns a writable Image object for a dequeued input buffer index to contain the raw input video frame. <br /><br />"
"android.media.MediaCodec.getCodecInfo () "," Get the codec info. <br /><br />"
"android.media.MediaCodec.dequeueOutputBuffer (MediaCodec.BufferInfo, long) () "," Flush both input and output ports of the component, all indices previously returned in calls to dequeueInputBuffer(long) and dequeueOutputBuffer(MediaCodec.BufferInfo, long) become invalid. <br /><br />"
"android.media.MediaCodec.getName () "," Get the component name. <br /><br />"
"android.media.MediaCodec.MediaCrypto () "," Configures a component. <br /><br />"
"android.media.MediaCodec.MediaCodec.BufferInfo () "," Dequeue an output buffer, block at most 'timeoutUs' microseconds. <br /><br />"
"android.media.MediaCodec.cleared (int index) "," Returns a cleared, writable ByteBuffer object for a dequeued input buffer index to contain the input data. <br /><br />"
"android.media.MediaCodec.String () "," Instantiate an encoder supporting output data of the given mime type. <br /><br />"
"android.media.MediaCodec.MediaCodec.Callback () "," Sets an asynchronous callback for actionable MediaCodec events. <br /><br />"
"android.media.MediaCodec.configure (MediaFormat, Surface, MediaCrypto, int) () "," Call this after configure(MediaFormat, Surface, MediaCrypto, int) returns successfully to get the input format accepted by the codec. <br /><br />"
"android.media.MediaCodec.getOutputImage (int index) "," Returns a read-only Image object for a dequeued output buffer index that contains the raw video frame. <br /><br />"
"android.media.MediaCodec.start () "," After successfully configuring the component, call start. <br /><br />"
"android.media.MediaCodec.signalEndOfInputStream () "," Signals end-of-stream on input. <br /><br />"
"android.media.MediaCodec.release () "," Make sure you call this when you're done to free up any opened component instance instead of relying on the garbage collector to do this for you at some point in the future. <br /><br />"
"android.media.MediaCodec.releaseOutputBuffer (int index, long renderTimestampNs) "," If you are done with a buffer, use this call to update its surface timestamp and return it to the codec to render it on the output surface. <br /><br />"
"android.media.MediaCodec.createInputSurface () "," Requests a Surface to use as the input to an encoder, in place of input buffers. <br /><br />"
"android.media.MediaCodec.queueInputBuffer (int, int, int, long, int) () "," Similar to queueInputBuffer(int, int, int, long, int) but submits a buffer that is potentially encrypted. <br /><br />"
"android.media.MediaCodec.getOutputBuffer (int index) "," Returns a read-only ByteBuffer for a dequeued output buffer index. <br /><br />"
"android.media.MediaCodec.getOutputBuffer (int) () "," This method was deprecated in API level 21. Use the new getOutputBuffer(int) method instead each time an output buffer is dequeued. This method is not supported if codec is configured in asynchronous mode. Note:As of API 21, the position and limit of output buffers that are dequeued will be set to the valid data range. <br /><br />"
"android.media.MediaCodec.releaseOutputBuffer (int index, boolean render) "," If you are done with a buffer, use this call to return the buffer to the codec. <br /><br />"
"android.media.MediaCodec.configure (MediaFormat, Surface, MediaCrypto, int) (int mode) "," If a surface has been specified in a previous call to configure(MediaFormat, Surface, MediaCrypto, int) specifies the scaling mode to use. <br /><br />"
"android.media.MediaCodec.cleared () "," This method was deprecated in API level 21. Use the new getInputBuffer(int) method instead each time an input buffer is dequeued. Note:As of API 21, dequeued input buffers are automatically cleared. <br /><br />"
"android.media.MediaCodec.Bundle () "," Communicate additional parameter changes to the component instance. <br /><br />"
"android.media.MediaCodec.reset () "," Returns the codec to its initial (Initialized) state. <br /><br />"
"android.media.MediaCodec.start () () "," Finish the decode/encode session, note that the codec instance remains active and ready to be start()ed again. <br /><br />"
"android.media.MediaCodec.INFO_OUTPUT_FORMAT_CHANGED () "," Call this after dequeueOutputBuffer signals a format change by returning INFO_OUTPUT_FORMAT_CHANGED. <br /><br />"
"android.media.MediaCodecInfo.AudioCapabilities.getMaxInputChannelCount () "," Returns the maximum number of input channels supported. <br /><br />"
"android.media.MediaCodecInfo.AudioCapabilities.getSupportedSampleRateRanges () "," Returns the array of supported sample rate ranges. <br /><br />"
"android.media.MediaCodecInfo.AudioCapabilities.isSampleRateSupported (int sampleRate) "," Query whether the sample rate is supported by the codec. <br /><br />"
"android.media.MediaCodecInfo.AudioCapabilities.getBitrateRange () "," Returns the range of supported bitrates in bits/second. <br /><br />"
"android.media.MediaCodecInfo.AudioCapabilities.getSupportedSampleRates () "," Returns the array of supported sample rates if the codec supports only discrete values. <br /><br />"
"android.media.MediaCodecInfo.CodecCapabilities.getDefaultFormat () "," Returns a MediaFormat object with default values for configurations that have defaults. <br /><br />"
"android.media.MediaCodecInfo.CodecCapabilities.String () "," Query codec feature capabilities. <br /><br />"
"android.media.MediaCodecInfo.CodecCapabilities.getEncoderCapabilities () "," Returns the encoding capabilities or null if this is not an encoder. <br /><br />"
"android.media.MediaCodecInfo.CodecCapabilities.getMimeType () "," Returns the mime type for which this codec-capability object was created. <br /><br />"
"android.media.MediaCodecInfo.CodecCapabilities.MediaFormat () "," Query whether codec supports a given MediaFormat. <br /><br />"
"android.media.MediaCodecInfo.CodecCapabilities.getVideoCapabilities () "," Returns the video capabilities or null if this is not a video codec. <br /><br />"
"android.media.MediaCodecInfo.CodecCapabilities.getAudioCapabilities () "," Returns the audio capabilities or null if this is not an audio codec. <br /><br />"
"android.media.MediaCodecInfo.EncoderCapabilities.isBitrateModeSupported (int mode) "," Query whether a bitrate mode is supported. <br /><br />"
"android.media.MediaCodecInfo.EncoderCapabilities.getComplexityRange () "," Returns the supported range of encoder complexity values. <br /><br />"
"android.media.MediaCodecInfo.VideoCapabilities.isSizeSupported (int width, int height) "," Returns whether a given video size ( width and height) is supported. <br /><br />"
"android.media.MediaCodecInfo.VideoCapabilities.getSupportedHeightsFor (int width) "," Returns the range of supported video heights for a video width <br /><br />"
"android.media.MediaCodecInfo.VideoCapabilities.areSizeAndRateSupported (int width, int height, double frameRate) "," Returns whether a given video size ( width and height) and frameRate combination is supported. <br /><br />"
"android.media.MediaCodecInfo.VideoCapabilities.getSupportedWidths () "," Returns the range of supported video widths. <br /><br />"
"android.media.MediaCodecInfo.VideoCapabilities.getSupportedWidthsFor (int height) "," Returns the range of supported video widths for a video height. <br /><br />"
"android.media.MediaCodecInfo.VideoCapabilities.getHeightAlignment () "," Returns the alignment requirement for video height (in pixels). <br /><br />"
"android.media.MediaCodecInfo.VideoCapabilities.getSupportedFrameRates () "," Returns the range of supported frame rates. <br /><br />"
"android.media.MediaCodecInfo.VideoCapabilities.getSupportedHeights () "," Returns the range of supported video heights. <br /><br />"
"android.media.MediaCodecInfo.VideoCapabilities.getSupportedFrameRatesFor (int width, int height) "," Returns the range of supported video frame rates for a video size. <br /><br />"
"android.media.MediaCodecInfo.VideoCapabilities.getBitrateRange () "," Returns the range of supported bitrates in bits/second. <br /><br />"
"android.media.MediaCodecInfo.VideoCapabilities.getWidthAlignment () "," Returns the alignment requirement for video width (in pixels). <br /><br />"
"android.media.MediaCodecList.getCodecInfos () (int index) "," This method was deprecated in API level 21. Use getCodecInfos() instead. <br /><br />"
"android.media.MediaCodecList.MediaFormat () "," Find an encoder supporting a given MediaFormat in the list of media-codecs. <br /><br />"
"android.media.MediaCodecList.MediaCodecInfo () "," Returns the list of MediaCodecInfo objects for the list of media-codecs. <br /><br />"
"android.media.MediaCodecList.getCodecInfos () () "," This method was deprecated in API level 21. Use getCodecInfos() instead. <br /><br />"
"android.media.MediaCrypto.String () "," Query if the crypto scheme requires the use of a secure decoder to decode data of the given mime type. <br /><br />"
"android.media.MediaCrypto.release () "," no description <br /><br />"
"android.media.MediaCrypto.UUID () "," Query if the given scheme identified by its UUID is supported on this device. <br /><br />"
"android.media.MediaDescription.Builder.Uri () "," Sets the icon uri. <br /><br />"
"android.media.MediaDescription.Builder.String () "," Sets the media id. <br /><br />"
"android.media.MediaDescription.Builder.CharSequence () "," Sets the title. <br /><br />"
"android.media.MediaDescription.Builder.Bundle () "," Sets a bundle of extras. <br /><br />"
"android.media.MediaDescription.Builder.build () "," no description <br /><br />"
"android.media.MediaDescription.Builder.Bitmap () "," Sets the icon. <br /><br />"
"android.media.MediaDescription.getExtras () "," Returns any extras that were added to the description. <br /><br />"
"android.media.MediaDescription.getDescription () "," Returns a description suitable for display or null. <br /><br />"
"android.media.MediaDescription.getIconBitmap () "," Returns a bitmap icon suitable for display or null. <br /><br />"
"android.media.MediaDescription.getMediaId () "," Returns the media id or null. <br /><br />"
"android.media.MediaDescription.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.media.MediaDescription.getTitle () "," Returns a title suitable for display or null. <br /><br />"
"android.media.MediaDescription.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.media.MediaDescription.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.media.MediaDescription.getSubtitle () "," Returns a subtitle suitable for display or null. <br /><br />"
"android.media.MediaDescription.getIconUri () "," Returns a Uri for an icon suitable for display or null. <br /><br />"
"android.media.MediaDrm.CryptoSession.encrypt (byte[] keyid, byte[] input, byte[] iv) "," Encrypt data using the CryptoSession's cipher algorithm <br /><br />"
"android.media.MediaDrm.CryptoSession.decrypt (byte[] keyid, byte[] input, byte[] iv) "," Decrypt data using the CryptoSessions's cipher algorithm <br /><br />"
"android.media.MediaDrm.CryptoSession.verify (byte[] keyid, byte[] message, byte[] signature) "," Verify a signature using the CryptoSessions's mac algorithm. <br /><br />"
"android.media.MediaDrm.CryptoSession.sign (byte[] keyid, byte[] message) "," Sign data using the CryptoSessions's mac algorithm. <br /><br />"
"android.media.MediaDrm.MediaDrm.OnEventListener () "," Register a callback to be invoked when an event occurs <br /><br />"
"android.media.MediaDrm.releaseAllSecureStops () "," Remove all secure stops without requiring interaction with the server. <br /><br />"
"android.media.MediaDrm.openSession () (byte[] sessionId) "," Close a session on the MediaDrm object that was previously opened with openSession(). <br /><br />"
"android.media.MediaDrm.String () "," Set a DRM engine plugin String property value. <br /><br />"
"android.media.MediaDrm.getProvisionRequest () "," A provision request/response exchange occurs between the app and a provisioning server to retrieve a device certificate. <br /><br />"
"android.media.MediaDrm.provideKeyResponse (byte[], byte[]) () "," Obtain a CryptoSession object which can be used to encrypt, decrypt, sign and verify messages or data using the session keys established for the session using methods getKeyRequest(byte[], byte[], String, int, HashMap  )  and provideKeyResponse(byte[], byte[]) using a session key server. <br /><br />"
"android.media.MediaDrm.release () "," no description <br /><br />"
"android.media.MediaDrm.releaseSecureStops (byte[] ssRelease) "," Process the SecureStop server response message ssRelease. <br /><br />"
"android.media.MediaDrm.openSession () "," Open a new session with the MediaDrm object. <br /><br />"
"android.media.MediaDrm.removeKeys (byte[] sessionId) "," Remove the current keys from a session. <br /><br />"
"android.media.MediaDrm.provideProvisionResponse (byte[] response) "," After a provision response is received by the app, it is provided to the DRM engine plugin using this method. <br /><br />"
"android.media.MediaDrm.queryKeyStatus (byte[] sessionId) "," Request an informative description of the key status for the session. <br /><br />"
"android.media.MediaDrm.getSecureStops () "," A means of enforcing limits on the number of concurrent streams per subscriber across devices is provided via SecureStop. <br /><br />"
"android.media.MediaDrm.UUID () "," Query if the given scheme identified by its UUID is supported on this device. <br /><br />"
"android.media.MediaDrm.restoreKeys (byte[] sessionId, byte[] keySetId) "," Restore persisted offline keys into a new session. <br /><br />"
"android.media.MediaDrm.getSecureStop (byte[] ssid) "," Access secure stop by secure stop ID. <br /><br />"
"android.media.MediaDrm.provideKeyResponse (byte[] scope, byte[] response) "," A key response is received from the license server by the app, then it is provided to the DRM engine plugin using provideKeyResponse. <br /><br />"
"android.media.MediaDrm.KeyRequest.getDefaultUrl () "," Get the default URL to use when sending the key request message to a server, if known. <br /><br />"
"android.media.MediaDrm.KeyRequest.getData () "," Get the opaque message data <br /><br />"
"android.media.MediaDrm.MediaDrmStateException.getDiagnosticInfo () "," Retrieve a developer-readable diagnostic information string associated with the exception. <br /><br />"
"android.media.MediaDrm.OnEventListener.MediaDrm () "," Called when an event occurs that requires the app to be notified <br /><br />"
"android.media.MediaDrm.ProvisionRequest.getDefaultUrl () "," Get the default URL to use when sending the provision request message to a server, if known. <br /><br />"
"android.media.MediaDrm.ProvisionRequest.getData () "," Get the opaque message data <br /><br />"
"android.media.MediaExtractor.String () "," Sets the data source as a content Uri. <br /><br />"
"android.media.MediaExtractor.seekTo (long timeUs, int mode) "," All selected tracks seek near the requested time according to the specified mode. <br /><br />"
"android.media.MediaExtractor.getPsshInfo () "," Get the PSSH info if present. <br /><br />"
"android.media.MediaExtractor.getSampleFlags () "," Returns the current sample's flags. <br /><br />"
"android.media.MediaExtractor.release () "," Make sure you call this when you're done to free up any resources instead of relying on the garbage collector to do this for you at some point in the future. <br /><br />"
"android.media.MediaExtractor.MediaCodec.CryptoInfo () "," If the sample flags indicate that the current sample is at least partially encrypted, this call returns relevant information about the structure of the sample data required for decryption. <br /><br />"
"android.media.MediaExtractor.getSampleTrackIndex () "," Returns the track index the current sample originates from (or -1 if no more samples are available) <br /><br />"
"android.media.MediaExtractor.getCachedDuration () "," Returns an estimate of how much data is presently cached in memory expressed in microseconds. <br /><br />"
"android.media.MediaExtractor.getTrackFormat (int index) "," Get the track format at the specified index. <br /><br />"
"android.media.MediaExtractor.getSampleTime () (int index) "," Subsequent calls to readSampleData(ByteBuffer, int), getSampleTrackIndex() and getSampleTime() only retrieve information for the subset of tracks selected. <br /><br />"
"android.media.MediaExtractor.getSampleTime () "," Returns the current sample's presentation time in microseconds. <br /><br />"
"android.media.MediaExtractor.ByteBuffer () "," Retrieve the current encoded sample and store it in the byte buffer starting at the given offset. <br /><br />"
"android.media.MediaExtractor.advance () "," Advance to the next sample. <br /><br />"
"android.media.MediaExtractor.FileDescriptor () "," Sets the data source (FileDescriptor) to use. <br /><br />"
"android.media.MediaExtractor.hasCacheReachedEndOfStream () "," Returns true iff we are caching data and the cache has reached the end of the data stream (for now, a future seek may of course restart the fetching of data). <br /><br />"
"android.media.MediaExtractor.getTrackCount () "," Count the number of tracks found in the data source. <br /><br />"
"android.media.MediaFormat.String () "," Sets the value of a string key. <br /><br />"
"android.media.MediaFormat.ByteBuffer () "," Sets the value of a ByteBuffer key. <br /><br />"
"android.media.MediaFormat.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.media.MediaMetadata.Builder.String () "," Put a String value into the metadata. <br /><br />"
"android.media.MediaMetadata.Builder.MediaMetadata () "," Creates a MediaMetadata instance with the specified fields. <br /><br />"
"android.media.MediaMetadata.Builder.CharSequence () "," Put a CharSequence value into the metadata. <br /><br />"
"android.media.MediaMetadata.Builder.Rating () "," Put a Rating into the metadata. <br /><br />"
"android.media.MediaMetadata.Builder.Bitmap () "," Put a Bitmap into the metadata. <br /><br />"
"android.media.MediaMetadata.getDescription () "," Returns a simple description of this metadata for display purposes. <br /><br />"
"android.media.MediaMetadata.String () "," Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key. <br /><br />"
"android.media.MediaMetadata.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.media.MediaMetadata.keySet () "," Returns a Set containing the Strings used as keys in this metadata. <br /><br />"
"android.media.MediaMetadata.size () "," Returns the number of fields in this metadata. <br /><br />"
"android.media.MediaMetadata.Rating () "," Returns a Rating for the given key or null if no rating exists for the given key. <br /><br />"
"android.media.MediaMetadata.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.media.MediaMetadata.Bitmap () "," Returns a Bitmap for the given key or null if no bitmap exists for the given key. <br /><br />"
"android.media.MediaMetadataEditor.String () "," Adds textual information. <br /><br />"
"android.media.MediaMetadataEditor.clear () "," Clears all the pending metadata changes set since the MediaMetadataEditor instance was created or since this method was last called. <br /><br />"
"android.media.MediaMetadataEditor.putLong (int key, long value) "," Adds numerical information. <br /><br />"
"android.media.MediaMetadataEditor.getLong (int key, long defaultValue) "," Returns the long value for the key. <br /><br />"
"android.media.MediaMetadataEditor.removeEditableKeys () "," Causes all metadata fields to be read-only. <br /><br />"
"android.media.MediaMetadataEditor.clear () () "," Applies all of the metadata changes that have been set since the MediaMetadataEditor instance was created or since clear() was called. <br /><br />"
"android.media.MediaMetadataEditor.Object () "," Adds information stored as an instance. <br /><br />"
"android.media.MediaMetadataEditor.getEditableKeys () "," Retrieves the keys flagged as editable. <br /><br />"
"android.media.MediaMetadataEditor.Bitmap () "," Adds image. <br /><br />"
"android.media.MediaMetadataEditor.addEditableKey (int key) "," Flags the given key as being editable. <br /><br />"
"android.media.MediaMetadataRetriever.Uri () "," Sets the data source as a content Uri. <br /><br />"
"android.media.MediaMetadataRetriever.String () "," Sets the data source (URI) to use. <br /><br />"
"android.media.MediaMetadataRetriever.getEmbeddedPicture () "," Call this method after setDataSource(). <br /><br />"
"android.media.MediaMetadataRetriever.FileDescriptor () "," Sets the data source (FileDescriptor) to use. <br /><br />"
"android.media.MediaMetadataRetriever.getFrameAtTime (long timeUs, int option) "," Call this method after setDataSource(). <br /><br />"
"android.media.MediaMetadataRetriever.getFrameAtTime () "," Call this method after setDataSource(). <br /><br />"
"android.media.MediaMetadataRetriever.getFrameAtTime (long timeUs) "," Call this method after setDataSource(). <br /><br />"
"android.media.MediaMetadataRetriever.release () "," Call it when one is done with the object. <br /><br />"
"android.media.MediaMetadataRetriever.extractMetadata (int keyCode) "," Call this method after setDataSource(). <br /><br />"
"android.media.MediaMuxer.setOrientationHint (int degrees) "," Sets the orientation hint for output video playback. <br /><br />"
"android.media.MediaMuxer.stop () "," Stops the muxer. <br /><br />"
"android.media.MediaMuxer.MediaCodec.BufferInfo () "," Writes an encoded sample into the muxer. <br /><br />"
"android.media.MediaMuxer.start () "," Starts the muxer. <br /><br />"
"android.media.MediaMuxer.setLocation (float latitude, float longitude) "," Set and store the geodata (latitude and longitude) in the output file. <br /><br />"
"android.media.MediaMuxer.release () "," Make sure you call this when you're done to free up any resources instead of relying on the garbage collector to do this for you at some point in the future. <br /><br />"
"android.media.MediaMuxer.MediaFormat () "," Adds a track with the specified format. <br /><br />"
"android.media.MediaPlayer.selectTrack (int index) "," Selects a track. <br /><br />"
"android.media.MediaPlayer.deselectTrack (int) (int trackType) "," Returns the index of the audio, video, or subtitle track currently selected for playback, The return value is an index into the array returned by getTrackInfo(), and can be used in calls to selectTrack(int) or deselectTrack(int). <br /><br />"
"android.media.MediaPlayer.MediaPlayer.OnInfoListener () "," Register a callback to be invoked when an info/warning is available. <br /><br />"
"android.media.MediaPlayer.MediaPlayer.OnVideoSizeChangedListener () "," Register a callback to be invoked when the video size is known or updated. <br /><br />"
"android.media.MediaPlayer.setAudioSessionId (int sessionId) "," Sets the audio session ID. <br /><br />"
"android.media.MediaPlayer.setAudioStreamType (int streamtype) "," Sets the audio stream type for this MediaPlayer. <br /><br />"
"android.media.MediaPlayer.MediaPlayer.OnErrorListener () "," Register a callback to be invoked when an error has happened during an asynchronous operation. <br /><br />"
"android.media.MediaPlayer.MediaPlayer.OnSeekCompleteListener () "," Register a callback to be invoked when a seek operation has been completed. <br /><br />"
"android.media.MediaPlayer.isPlaying () "," Checks whether the MediaPlayer is playing. <br /><br />"
"android.media.MediaPlayer.stop () "," Stops playback after playback has been stopped or paused. <br /><br />"
"android.media.MediaPlayer.getVideoWidth () "," Returns the width of the video. <br /><br />"
"android.media.MediaPlayer.FileDescriptor () "," Sets the data source (FileDescriptor) to use. <br /><br />"
"android.media.MediaPlayer.prepare () "," Prepares the player for playback, synchronously. <br /><br />"
"android.media.MediaPlayer.isLooping () "," Checks whether the MediaPlayer is looping or non-looping. <br /><br />"
"android.media.MediaPlayer.getTrackInfo () "," Returns an array of track information. <br /><br />"
"android.media.MediaPlayer.AudioAttributes () "," Sets the audio attributes for this MediaPlayer. <br /><br />"
"android.media.MediaPlayer.getDuration () "," Gets the duration of the file. <br /><br />"
"android.media.MediaPlayer.Uri () "," Sets the data source as a content Uri. <br /><br />"
"android.media.MediaPlayer.prepareAsync () "," Prepares the player for playback, asynchronously. <br /><br />"
"android.media.MediaPlayer.create (Context, Uri, SurfaceHolder) () "," Same factory method as create(Context, Uri, SurfaceHolder) but that lets you specify the audio attributes and session ID to be used by the new MediaPlayer instance. <br /><br />"
"android.media.MediaPlayer.String () "," Sets the data source as a content Uri. <br /><br />"
"android.media.MediaPlayer.setLooping (boolean looping) "," Sets the player to be looping or non-looping. <br /><br />"
"android.media.MediaPlayer.setVideoScalingMode (int mode) "," Sets video scaling mode. <br /><br />"
"android.media.MediaPlayer.setScreenOnWhilePlaying (boolean screenOn) "," Control whether we should use the attached SurfaceHolder to keep the screen on while video playback is occurring. <br /><br />"
"android.media.MediaPlayer.MediaPlayer.OnPreparedListener () "," Register a callback to be invoked when the media source is ready for playback. <br /><br />"
"android.media.MediaPlayer.create (Context, int) () "," Same factory method as create(Context, int) but that lets you specify the audio attributes and session ID to be used by the new MediaPlayer instance. <br /><br />"
"android.media.MediaPlayer.Surface () "," Sets the Surface to be used as the sink for the video portion of the media. <br /><br />"
"android.media.MediaPlayer.start () "," Starts or resumes playback. <br /><br />"
"android.media.MediaPlayer.release () "," Releases resources associated with this MediaPlayer object. <br /><br />"
"android.media.MediaPlayer.seekTo (int msec) "," Seeks to specified time position. <br /><br />"
"android.media.MediaPlayer.Context () "," Set the low-level power management behavior for this MediaPlayer. <br /><br />"
"android.media.MediaPlayer.MediaPlayer () "," Set the MediaPlayer to start when this MediaPlayer finishes playback (i.e. <br /><br />"
"android.media.MediaPlayer.setAuxEffectSendLevel (float level) "," Sets the send level of the player to the attached auxiliary effect. <br /><br />"
"android.media.MediaPlayer.deselectTrack (int index) "," Deselect a track. <br /><br />"
"android.media.MediaPlayer.MediaPlayer.OnCompletionListener () "," Register a callback to be invoked when the end of a media source has been reached during playback. <br /><br />"
"android.media.MediaPlayer.getCurrentPosition () "," Gets the current playback position. <br /><br />"
"android.media.MediaPlayer.attachAuxEffect (int effectId) "," Attaches an auxiliary effect to the player. <br /><br />"
"android.media.MediaPlayer.getVideoHeight () "," Returns the height of the video. <br /><br />"
"android.media.MediaPlayer.setVolume (float leftVolume, float rightVolume) "," Sets the volume on this player. <br /><br />"
"android.media.MediaPlayer.reset () "," Resets the MediaPlayer to its uninitialized state. <br /><br />"
"android.media.MediaPlayer.getAudioSessionId () "," Returns the audio session ID. <br /><br />"
"android.media.MediaPlayer.pause () "," Pauses playback. <br /><br />"
"android.media.MediaPlayer.MediaPlayer.OnTimedTextListener () "," Register a callback to be invoked when a timed text is available for display. <br /><br />"
"android.media.MediaPlayer.MediaPlayer.OnBufferingUpdateListener () "," Register a callback to be invoked when the status of a network stream's buffer has changed. <br /><br />"
"android.media.MediaPlayer.SurfaceHolder () "," Sets the SurfaceHolder to use for displaying the video portion of the media. <br /><br />"
"android.media.MediaPlayer.OnBufferingUpdateListener.MediaPlayer () "," Called to update status in buffering a media stream received through progressive HTTP download. <br /><br />"
"android.media.MediaPlayer.OnCompletionListener.MediaPlayer () "," Called when the end of a media source is reached during playback. <br /><br />"
"android.media.MediaPlayer.OnErrorListener.MediaPlayer () "," Called to indicate an error. <br /><br />"
"android.media.MediaPlayer.OnInfoListener.MediaPlayer () "," Called to indicate an info or a warning. <br /><br />"
"android.media.MediaPlayer.OnPreparedListener.MediaPlayer () "," Called when the media file is ready for playback. <br /><br />"
"android.media.MediaPlayer.OnSeekCompleteListener.MediaPlayer () "," Called to indicate the completion of a seek operation. <br /><br />"
"android.media.MediaPlayer.OnTimedTextListener.TimedText () "," Called to indicate an avaliable timed text <br /><br />"
"android.media.MediaPlayer.OnVideoSizeChangedListener.MediaPlayer () "," Called to indicate the video size The video size (width and height) could be 0 if there was no video, no display surface was set, or the value was not determined yet. <br /><br />"
"android.media.MediaPlayer.TrackInfo.getTrackType () "," Gets the track type. <br /><br />"
"android.media.MediaPlayer.TrackInfo.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.media.MediaPlayer.TrackInfo.getLanguage () "," Gets the language code of the track. <br /><br />"
"android.media.MediaPlayer.TrackInfo.MediaFormat () "," Gets the MediaFormat of the track. <br /><br />"
"android.media.MediaPlayer.TrackInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.media.MediaPlayer.TrackInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.media.MediaRecorder.setOrientationHint (int degrees) "," Sets the orientation hint for output video playback. <br /><br />"
"android.media.MediaRecorder.setMaxDuration (int max_duration_ms) "," Sets the maximum duration (in ms) of the recording session. <br /><br />"
"android.media.MediaRecorder.setAudioChannels (int numChannels) "," Sets the number of audio channels for recording. <br /><br />"
"android.media.MediaRecorder.setLocation (float latitude, float longitude) "," Set and store the geodata (latitude and longitude) in the output file. <br /><br />"
"android.media.MediaRecorder.getAudioSourceMax () "," Gets the maximum value for audio sources. <br /><br />"
"android.media.MediaRecorder.setVideoEncodingBitRate (int bitRate) "," Sets the video encoding bit rate for recording. <br /><br />"
"android.media.MediaRecorder.stop () "," Stops recording. <br /><br />"
"android.media.MediaRecorder.android.hardware.camera2 () "," This method was deprecated in API level 21. Use getSurface() and the android.hardware.camera2 API instead. <br /><br />"
"android.media.MediaRecorder.FileDescriptor () "," Pass in the file descriptor of the file to be written. <br /><br />"
"android.media.MediaRecorder.prepare () "," Prepares the recorder to begin capturing and encoding data. <br /><br />"
"android.media.MediaRecorder.MediaRecorder.OnErrorListener () "," Register a callback to be invoked when an error occurs while recording. <br /><br />"
"android.media.MediaRecorder.setMaxFileSize (long max_filesize_bytes) "," Sets the maximum filesize (in bytes) of the recording session. <br /><br />"
"android.media.MediaRecorder.String () "," Sets the path of the output file to be produced. <br /><br />"
"android.media.MediaRecorder.setOutputFormat (int output_format) "," Sets the format of the output file produced during recording. <br /><br />"
"android.media.MediaRecorder.Surface () "," Sets a Surface to show a preview of recorded media (video). <br /><br />"
"android.media.MediaRecorder.start () "," Begins capturing and encoding data to the file specified with setOutputFile(). <br /><br />"
"android.media.MediaRecorder.release () "," Releases resources associated with this MediaRecorder object. <br /><br />"
"android.media.MediaRecorder.setVideoSource (int video_source) "," Sets the video source to be used for recording. <br /><br />"
"android.media.MediaRecorder.MediaRecorder.OnInfoListener () "," Register a callback to be invoked when an informational event occurs while recording. <br /><br />"
"android.media.MediaRecorder.setAudioEncoder (int audio_encoder) "," Sets the audio encoder to be used for recording. <br /><br />"
"android.media.MediaRecorder.setVideoEncoder (int video_encoder) "," Sets the video encoder to be used for recording. <br /><br />"
"android.media.MediaRecorder.getSurface () "," Gets the surface to record from when using SURFACE video source. <br /><br />"
"android.media.MediaRecorder.setVideoFrameRate (int rate) "," Sets the frame rate of the video to be captured. <br /><br />"
"android.media.MediaRecorder.setVideoSize (int width, int height) "," Sets the width and height of the video to be captured. <br /><br />"
"android.media.MediaRecorder.setAudioSource (int audio_source) "," Sets the audio source to be used for recording. <br /><br />"
"android.media.MediaRecorder.setAudioSamplingRate (int samplingRate) "," Sets the audio sampling rate for recording. <br /><br />"
"android.media.MediaRecorder.reset () "," Restarts the MediaRecorder to its idle state. <br /><br />"
"android.media.MediaRecorder.setCaptureRate (double fps) "," Set video frame capture rate. <br /><br />"
"android.media.MediaRecorder.setAudioEncodingBitRate (int bitRate) "," Sets the audio encoding bit rate for recording. <br /><br />"
"android.media.MediaRecorder.getMaxAmplitude () "," Returns the maximum absolute amplitude that was sampled since the last call to this method. <br /><br />"
"android.media.MediaRecorder.CamcorderProfile () "," Uses the settings from a CamcorderProfile object for recording. <br /><br />"
"android.media.MediaRecorder.OnErrorListener.MediaRecorder () "," Called when an error occurs while recording. <br /><br />"
"android.media.MediaRecorder.OnInfoListener.MediaRecorder () "," Called when an error occurs while recording. <br /><br />"
"android.media.MediaRouter.Callback.MediaRouter.RouteInfo () "," Called when a route's volume changes. <br /><br />"
"android.media.MediaRouter.Callback.MediaRouter.RouteGroup () "," Called when a route is removed from a group. <br /><br />"
"android.media.MediaRouter.clearUserRoutes () "," Remove all app-specified routes from the MediaRouter. <br /><br />"
"android.media.MediaRouter.MediaRouter.Callback () "," Remove the specified callback. <br /><br />"
"android.media.MediaRouter.MediaRouter.RouteInfo () "," Select the specified route to use for output of the given media types. <br /><br />"
"android.media.MediaRouter.getSelectedRoute (int type) "," Return the currently selected route for any of the given types <br /><br />"
"android.media.MediaRouter.getRouteAt (int index) "," Return the route at the specified index. <br /><br />"
"android.media.MediaRouter.createRouteCategory (int nameResId, boolean isGroupable) "," Create a new route category. <br /><br />"
"android.media.MediaRouter.getDefaultRoute () "," Gets the default route for playing media content on the system. <br /><br />"
"android.media.MediaRouter.routes () "," Return the number of routes currently known to this MediaRouter. <br /><br />"
"android.media.MediaRouter.category (int index) "," Return the category at the given index. <br /><br />"
"android.media.MediaRouter.MediaRouter.RouteCategory () "," Create a new user route that may be modified and registered for use by the application. <br /><br />"
"android.media.MediaRouter.CharSequence () "," Create a new route category. <br /><br />"
"android.media.MediaRouter.categories () "," Return the number of categories currently represented by routes known to this MediaRouter. <br /><br />"
"android.media.MediaRouter.MediaRouter.UserRouteInfo () "," Remove an app-specified route for media from the MediaRouter. <br /><br />"
"android.media.MediaRouter.RouteCategory.getName () "," no description <br /><br />"
"android.media.MediaRouter.RouteCategory.Context () "," Return the properly localized/configuration dependent name of this RouteCategory. <br /><br />"
"android.media.MediaRouter.RouteCategory.MediaRouter.RouteInfo () "," Return the current list of routes in this category that have been added to the MediaRouter. <br /><br />"
"android.media.MediaRouter.RouteCategory.getSupportedTypes () "," no description <br /><br />"
"android.media.MediaRouter.RouteCategory.isGroupable () "," Return whether or not this category supports grouping. <br /><br />"
"android.media.MediaRouter.RouteCategory.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.media.MediaRouter.RouteGroup.MediaRouter.RouteInfo () "," Remove a route from this group. <br /><br />"
"android.media.MediaRouter.RouteGroup.setIconResource (int resId) "," Set an icon that will be used to represent this group. <br /><br />"
"android.media.MediaRouter.RouteGroup.Drawable () "," Set an icon that will be used to represent this group. <br /><br />"
"android.media.MediaRouter.RouteGroup.getRouteAt (int index) "," Return the route in this group at the specified index <br /><br />"
"android.media.MediaRouter.RouteGroup.removeRoute (int index) "," Remove the route at the specified index from this group. <br /><br />"
"android.media.MediaRouter.RouteGroup.requestUpdateVolume (int direction) "," Request an incremental volume update for this route. <br /><br />"
"android.media.MediaRouter.RouteGroup.requestSetVolume (int volume) "," Request a volume change for this route. <br /><br />"
"android.media.MediaRouter.RouteGroup.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.media.MediaRouter.RouteGroup.getRouteCount () "," no description <br /><br />"
"android.media.MediaRouter.RouteInfo.getTag () "," no description <br /><br />"
"android.media.MediaRouter.RouteInfo.getPlaybackType () "," no description <br /><br />"
"android.media.MediaRouter.RouteInfo.getSupportedTypes () "," no description <br /><br />"
"android.media.MediaRouter.RouteInfo.getCategory () "," no description <br /><br />"
"android.media.MediaRouter.RouteInfo.getVolume () "," Return the current volume for this route. <br /><br />"
"android.media.MediaRouter.RouteInfo.Object () "," Set an application-specific tag object for this route. <br /><br />"
"android.media.MediaRouter.RouteInfo.getVolumeMax () "," no description <br /><br />"
"android.media.MediaRouter.RouteInfo.getGroup () "," no description <br /><br />"
"android.media.MediaRouter.RouteInfo.requestSetVolume (int volume) "," Request a volume change for this route. <br /><br />"
"android.media.MediaRouter.RouteInfo.getVolumeHandling () "," no description <br /><br />"
"android.media.MediaRouter.RouteInfo.getIconDrawable () "," Get the icon representing this route. <br /><br />"
"android.media.MediaRouter.RouteInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.media.MediaRouter.RouteInfo.getDescription () "," Gets the user-visible description of the route. <br /><br />"
"android.media.MediaRouter.RouteInfo.getName () "," Gets the user-visible name of the route. <br /><br />"
"android.media.MediaRouter.RouteInfo.Context () "," Return the properly localized/resource user-visible name of this route. <br /><br />"
"android.media.MediaRouter.RouteInfo.getPlaybackStream () "," no description <br /><br />"
"android.media.MediaRouter.RouteInfo.isEnabled () "," Returns true if this route is enabled and may be selected. <br /><br />"
"android.media.MediaRouter.RouteInfo.getStatus () "," no description <br /><br />"
"android.media.MediaRouter.RouteInfo.Presentation () "," Gets the Display that should be used by the application to show a Presentation on an external display when this route is selected. <br /><br />"
"android.media.MediaRouter.RouteInfo.requestUpdateVolume (int direction) "," Request an incremental volume update for this route. <br /><br />"
"android.media.MediaRouter.RouteInfo.isConnecting () "," Returns true if the route is in the process of connecting and is not yet ready for use. <br /><br />"
"android.media.MediaRouter.SimpleCallback.MediaRouter.RouteInfo () "," Called when a route's volume changes. <br /><br />"
"android.media.MediaRouter.SimpleCallback.MediaRouter.RouteGroup () "," Called when a route is removed from a group. <br /><br />"
"android.media.MediaRouter.UserRouteInfo.MediaRouter.VolumeCallback () "," Set a callback to be notified of volume update requests <br /><br />"
"android.media.MediaRouter.UserRouteInfo.getRemoteControlClient () "," Retrieve the RemoteControlClient associated with this route, if one has been set. <br /><br />"
"android.media.MediaRouter.UserRouteInfo.CharSequence () "," Set the current user-visible status for this route. <br /><br />"
"android.media.MediaRouter.UserRouteInfo.RemoteControlClient () "," Set the RemoteControlClient responsible for reporting playback info for this user route. <br /><br />"
"android.media.MediaRouter.UserRouteInfo.requestSetVolume (int volume) "," Request a volume change for this route. <br /><br />"
"android.media.MediaRouter.UserRouteInfo.setPlaybackStream (int stream) "," Defines over what stream type the media is presented. <br /><br />"
"android.media.MediaRouter.UserRouteInfo.setVolume (int volume) "," Defines at what volume the playback associated with this route is performed (for user feedback purposes). <br /><br />"
"android.media.MediaRouter.UserRouteInfo.Drawable () "," Set an icon that will be used to represent this route. <br /><br />"
"android.media.MediaRouter.UserRouteInfo.setIconResource (int resId) "," Set an icon that will be used to represent this route. <br /><br />"
"android.media.MediaRouter.UserRouteInfo.PLAYBACK_TYPE_REMOTE (int type) "," Defines whether playback associated with this route is 'local' ( PLAYBACK_TYPE_LOCAL) or 'remote' ( PLAYBACK_TYPE_REMOTE). <br /><br />"
"android.media.MediaRouter.UserRouteInfo.PLAYBACK_VOLUME_VARIABLE (int volumeHandling) "," Defines whether volume for the playback associated with this route is fixed ( PLAYBACK_VOLUME_FIXED) or can modified ( PLAYBACK_VOLUME_VARIABLE). <br /><br />"
"android.media.MediaRouter.UserRouteInfo.setName (int resId) "," Set the user-visible name of this route. <br /><br />"
"android.media.MediaRouter.UserRouteInfo.requestUpdateVolume (int direction) "," Request an incremental volume update for this route. <br /><br />"
"android.media.MediaRouter.UserRouteInfo.setVolumeMax (int volumeMax) "," Defines the maximum volume at which the playback associated with this route is performed (for user feedback purposes). <br /><br />"
"android.media.MediaRouter.VolumeCallback.MediaRouter.RouteInfo () "," Called when the volume for the route should be increased or decreased. <br /><br />"
"android.media.MediaScannerConnection.IBinder () "," Part of the ServiceConnection interface. <br /><br />"
"android.media.MediaScannerConnection.String () "," Requests the media scanner to scan a file. <br /><br />"
"android.media.MediaScannerConnection.connect () "," Initiates a connection to the media scanner service. <br /><br />"
"android.media.MediaScannerConnection.scanFile (Context, String[], String[], MediaScannerConnection.OnScanCompletedListener) () "," Convenience for constructing a MediaScannerConnection, calling connect() on it, and calling scanFile(Context, String[], String[], MediaScannerConnection.OnScanCompletedListener) with the given path and mimeType when the connection is established. <br /><br />"
"android.media.MediaScannerConnection.isConnected () "," Returns whether we are connected to the media scanner service <br /><br />"
"android.media.MediaScannerConnection.ComponentName () "," Part of the ServiceConnection interface. <br /><br />"
"android.media.MediaScannerConnection.disconnect () "," Releases the connection to the media scanner service. <br /><br />"
"android.media.MediaScannerConnection.MediaScannerConnectionClient.Uri () "," Called to notify the client when the media scanner has finished scanning a file. <br /><br />"
"android.media.MediaScannerConnection.MediaScannerConnectionClient.onMediaScannerConnected () "," Called to notify the client when a connection to the MediaScanner service has been established. <br /><br />"
"android.media.MediaScannerConnection.OnScanCompletedListener.Uri () "," Called to notify the client when the media scanner has finished scanning a file. <br /><br />"
"android.media.MediaSyncEvent.setAudioSessionId (int audioSessionId) "," Sets the event source audio session ID. <br /><br />"
"android.media.MediaSyncEvent.getType () "," Gets the synchronization event type. <br /><br />"
"android.media.MediaSyncEvent.createEvent (int eventType) "," Creates a synchronization event of the sepcified type. <br /><br />"
"android.media.MediaSyncEvent.getAudioSessionId () "," Gets the synchronization event audio session ID. <br /><br />"
"android.media.projection.MediaProjection.Callback.onStop () "," Called when the MediaProjection session is no longer valid. <br /><br />"
"android.media.projection.MediaProjectionManager.Intent () "," Retrieve the MediaProjection obtained from a succesful screen capture request. <br /><br />"
"android.media.projection.MediaProjectionManager.createScreenCaptureIntent () "," Returns an Intent that must passed to startActivityForResult() in order to start screen capture. <br /><br />"
"android.media.Rating.hasHeart () "," Return whether the rating is 'heart selected'. <br /><br />"
"android.media.Rating.newHeartRating (boolean hasHeart) "," Return a Rating instance with a heart-based rating. <br /><br />"
"android.media.Rating.newStarRating (int starRatingStyle, float starRating) "," Return a Rating instance with a star-based rating. <br /><br />"
"android.media.Rating.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.media.Rating.isRated () "," Return whether there is a rating value available. <br /><br />"
"android.media.Rating.newPercentageRating (float percent) "," Return a Rating instance with a percentage-based rating. <br /><br />"
"android.media.Rating.newUnratedRating (int ratingStyle) "," Return a Rating instance with no rating. <br /><br />"
"android.media.Rating.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.media.Rating.getRatingStyle () "," Return the rating style. <br /><br />"
"android.media.Rating.newThumbRating (boolean thumbIsUp) "," Return a Rating instance with a thumb-based rating. <br /><br />"
"android.media.Rating.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.media.Rating.getPercentRating () "," Return the percentage-based rating value. <br /><br />"
"android.media.Rating.getStarRating () "," Return the star-based rating value. <br /><br />"
"android.media.Rating.isThumbUp () "," Return whether the rating is 'thumb up'. <br /><br />"
"android.media.RemoteControlClient.RemoteControlClient.MetadataEditor (boolean startEmpty) "," Creates a RemoteControlClient.MetadataEditor. <br /><br />"
"android.media.RemoteControlClient.RemoteControlClient.OnGetPlaybackPositionListener () "," Sets the listener to be called whenever the media current playback position is needed. <br /><br />"
"android.media.RemoteControlClient.RemoteControlClient.OnPlaybackPositionUpdateListener () "," Sets the listener to be called whenever the media playback position is requested to be updated. <br /><br />"
"android.media.RemoteControlClient.setPlaybackState (int state) "," Sets the current playback state. <br /><br />"
"android.media.RemoteControlClient.RemoteControlClient.OnMetadataUpdateListener () "," Sets the listener to be called whenever the metadata is updated. <br /><br />"
"android.media.RemoteControlClient.setPlaybackState (int state, long timeInMs, float playbackSpeed) "," Sets the current playback state and the matching media position for the current playback speed. <br /><br />"
"android.media.RemoteControlClient.MediaSession () "," Get a MediaSession associated with this RCC. <br /><br />"
"android.media.RemoteControlClient.setTransportControlFlags (int transportControlFlags) "," Sets the flags for the media transport control buttons that this client supports. <br /><br />"
"android.media.RemoteControlClient.MetadataEditor.String () "," Adds textual information to be displayed. <br /><br />"
"android.media.RemoteControlClient.MetadataEditor.editMetadata (boolean) () "," Clears all the metadata that has been set since the MetadataEditor instance was created (with editMetadata(boolean)). <br /><br />"
"android.media.RemoteControlClient.MetadataEditor.putLong (int key, long value) "," Adds numerical information to be displayed. <br /><br />"
"android.media.RemoteControlClient.MetadataEditor.clear () () "," Associates all the metadata that has been set since the MetadataEditor instance was created with editMetadata(boolean), or since clear() was called, with the RemoteControlClient. <br /><br />"
"android.media.RemoteControlClient.MetadataEditor.Object () "," Adds information stored as an instance. <br /><br />"
"android.media.RemoteControlClient.MetadataEditor.Bitmap () "," Sets the album / artwork picture to be displayed on the remote control. <br /><br />"
"android.media.RemoteControlClient.OnGetPlaybackPositionListener.onGetPlaybackPosition () "," Called on the implementer of the interface to query the current playback position. <br /><br />"
"android.media.RemoteControlClient.OnMetadataUpdateListener.Object () "," Called on the implementer to notify that the metadata field for the given key has been updated to the new value. <br /><br />"
"android.media.RemoteControlClient.OnPlaybackPositionUpdateListener.onPlaybackPositionUpdate (long newPositionMs) "," Called on the implementer to notify it that the playback head should be set at the given position. <br /><br />"
"android.media.RemoteController.getEstimatedMediaPosition () "," Return the estimated playback position of the current media track or a negative value if not available. <br /><br />"
"android.media.RemoteController.setSynchronizationMode (int sync) "," Set the playback position synchronization mode. <br /><br />"
"android.media.RemoteController.KeyEvent () "," Send a simulated key event for a media button to be received by the current client. <br /><br />"
"android.media.RemoteController.clearArtworkConfiguration () "," Prevents this RemoteController from receiving artwork images. <br /><br />"
"android.media.RemoteController.setArtworkConfiguration (int width, int height) "," Set the maximum artwork image dimensions to be received in the metadata. <br /><br />"
"android.media.RemoteController.RemoteControlClient () "," Creates a RemoteController.MetadataEditor for updating metadata values of the editable keys of the current RemoteControlClient. <br /><br />"
"android.media.RemoteController.seekTo (long timeMs) "," Sets the new playback position. <br /><br />"
"android.media.RemoteController.MetadataEditor.clear () () "," Applies all of the metadata changes that have been set since the MediaMetadataEditor instance was created with editMetadata() or since clear() was called. <br /><br />"
"android.media.RemoteController.OnClientUpdateListener.onClientPlaybackStateUpdate (int state, long stateChangeTimeMs, long currentPosMs, float speed) "," Called whenever the playback state has changed, and playback position and speed are known. <br /><br />"
"android.media.RemoteController.OnClientUpdateListener.onClientChange (boolean clearing) "," Called whenever all information, previously received through the other methods of the listener, is no longer valid and is about to be refreshed. <br /><br />"
"android.media.RemoteController.OnClientUpdateListener.RemoteController.MetadataEditor () "," Called whenever new metadata is available. <br /><br />"
"android.media.RemoteController.OnClientUpdateListener.onClientTransportControlUpdate (int transportControlFlags) "," Called whenever the transport control flags have changed. <br /><br />"
"android.media.RemoteController.OnClientUpdateListener.onClientPlaybackStateUpdate (int state) "," Called whenever the playback state has changed. <br /><br />"
"android.media.Ringtone.isPlaying () "," Whether this ringtone is currently playing. <br /><br />"
"android.media.Ringtone.Context () "," Returns a human-presentable title for ringtone. <br /><br />"
"android.media.Ringtone.stop () "," Stops a playing ringtone. <br /><br />"
"android.media.Ringtone.setAudioAttributes (AudioAttributes) () "," This method was deprecated in API level 21. use of stream types is deprecated, see setAudioAttributes(AudioAttributes) <br /><br />"
"android.media.Ringtone.setAudioAttributes (AudioAttributes) (int streamType) "," This method was deprecated in API level 21. use setAudioAttributes(AudioAttributes) <br /><br />"
"android.media.Ringtone.play () "," Plays the ringtone. <br /><br />"
"android.media.Ringtone.AudioAttributes () "," Sets the AudioAttributes for this ringtone. <br /><br />"
"android.media.RingtoneManager.Uri () "," Sets the Uri of the default sound for a given sound type. <br /><br />"
"android.media.RingtoneManager.setIncludeDrm (boolean includeDrm) "," This method was deprecated in API level 19. DRM ringtones are no longer supported <br /><br />"
"android.media.RingtoneManager.Ringtone () "," Stops playing the last Ringtone retrieved from this. <br /><br />"
"android.media.RingtoneManager.getIncludeDrm () "," This method was deprecated in API level 19. DRM ringtones are no longer supported <br /><br />"
"android.media.RingtoneManager.Cursor (int position) "," Gets a Uri for the ringtone at the given position in the Cursor. <br /><br />"
"android.media.RingtoneManager.RingtoneManager () "," Gets the position of a Uri within this RingtoneManager. <br /><br />"
"android.media.RingtoneManager.getStopPreviousRingtone () "," no description <br /><br />"
"android.media.RingtoneManager.Uri (int type) "," Returns the Uri for the default ringtone of a particular type. <br /><br />"
"android.media.RingtoneManager.Context () "," Returns a valid ringtone URI. <br /><br />"
"android.media.RingtoneManager.inferStreamType () "," Infers the playback stream type based on what type of ringtones this manager is returning. <br /><br />"
"android.media.RingtoneManager.setType (int type) "," Sets which type(s) of ringtones will be listed by this. <br /><br />"
"android.media.RingtoneManager.Cursor () "," Returns a Cursor of all the ringtones available. <br /><br />"
"android.media.RingtoneManager.Ringtone (boolean stopPreviousRingtone) "," Whether retrieving another Ringtone will stop playing the previously retrieved Ringtone. <br /><br />"
"android.media.session.MediaController.Callback.MediaMetadata () "," Override to handle changes to the current metadata. <br /><br />"
"android.media.session.MediaController.Callback.onSessionDestroyed () "," Override to handle the session being destroyed. <br /><br />"
"android.media.session.MediaController.Callback.MediaController.PlaybackInfo () "," Override to handle changes to the audio info. <br /><br />"
"android.media.session.MediaController.Callback.CharSequence () "," Override to handle changes to the queue title. <br /><br />"
"android.media.session.MediaController.Callback.MediaSession () "," Override to handle changes to the MediaSession extras. <br /><br />"
"android.media.session.MediaController.Callback.Bundle () "," Override to handle custom events sent by the session owner without a specified interface. <br /><br />"
"android.media.session.MediaController.Callback.MediaSession.QueueItem () "," Override to handle changes to items in the queue. <br /><br />"
"android.media.session.MediaController.Callback.PlaybackState () "," Override to handle changes in playback state. <br /><br />"
"android.media.session.MediaController.MediaController.Callback () "," Unregisters the specified callback. <br /><br />"
"android.media.session.MediaController.getSessionToken () "," Get the token for the session this is connected to. <br /><br />"
"android.media.session.MediaController.getPackageName () "," Get the session owner's package name. <br /><br />"
"android.media.session.MediaController.getSessionActivity () "," Get an intent for launching UI associated with this session if one exists. <br /><br />"
"android.media.session.MediaController.MediaController.TransportControls () "," Get a MediaController.TransportControls instance to send transport actions to the associated session. <br /><br />"
"android.media.session.MediaController.getFlags () "," Get the flags for this session. <br /><br />"
"android.media.session.MediaController.getExtras () "," Get the extras for this session. <br /><br />"
"android.media.session.MediaController.Handler () "," Registers a callback to receive updates from the session. <br /><br />"
"android.media.session.MediaController.getMetadata () "," Get the current metadata for this session. <br /><br />"
"android.media.session.MediaController.KeyEvent () "," Send the specified media button event to the session. <br /><br />"
"android.media.session.MediaController.getQueue () "," Get the current play queue for this session if one is set. <br /><br />"
"android.media.session.MediaController.getRatingType () "," Get the rating type supported by the session. <br /><br />"
"android.media.session.MediaController.setVolumeTo (int value, int flags) "," Set the volume of the output this session is playing on. <br /><br />"
"android.media.session.MediaController.ResultReceiver () "," Sends a generic command to the session. <br /><br />"
"android.media.session.MediaController.getPlaybackState () "," Get the current playback state for this session. <br /><br />"
"android.media.session.MediaController.getQueueTitle () "," Get the queue title for this session. <br /><br />"
"android.media.session.MediaController.adjustVolume (int direction, int flags) "," Adjust the volume of the output this session is playing on. <br /><br />"
"android.media.session.MediaController.getPlaybackInfo () "," Get the current playback info for this session. <br /><br />"
"android.media.session.MediaController.PlaybackInfo.getAudioAttributes () "," Get the audio attributes for this session. <br /><br />"
"android.media.session.MediaController.PlaybackInfo.getVolumeControl () "," Get the type of volume control that can be used. <br /><br />"
"android.media.session.MediaController.PlaybackInfo.getPlaybackType () "," Get the type of playback which affects volume handling. <br /><br />"
"android.media.session.MediaController.PlaybackInfo.getMaxVolume () "," Get the maximum volume that may be set for this session. <br /><br />"
"android.media.session.MediaController.PlaybackInfo.getCurrentVolume () "," Get the current volume for this session. <br /><br />"
"android.media.session.MediaController.TransportControls.skipToPrevious () "," Skip to the previous item. <br /><br />"
"android.media.session.MediaController.TransportControls.Uri () "," Request that the player start playback for a specific Uri. <br /><br />"
"android.media.session.MediaController.TransportControls.rewind () "," Start rewinding. <br /><br />"
"android.media.session.MediaController.TransportControls.stop () "," Request that the player stop its playback; it may clear its state in whatever way is appropriate. <br /><br />"
"android.media.session.MediaController.TransportControls.seekTo (long pos) "," Move to a new location in the media stream. <br /><br />"
"android.media.session.MediaController.TransportControls.fastForward () "," Start fast forwarding. <br /><br />"
"android.media.session.MediaController.TransportControls.MediaSession () "," Send a custom action back for the MediaSession to perform. <br /><br />"
"android.media.session.MediaController.TransportControls.skipToNext () "," Skip to the next item. <br /><br />"
"android.media.session.MediaController.TransportControls.Bundle () "," Request that the player start playback for a specific search query. <br /><br />"
"android.media.session.MediaController.TransportControls.Rating () "," Rate the current content. <br /><br />"
"android.media.session.MediaController.TransportControls.pause () "," Request that the player pause its playback and stay at its current position. <br /><br />"
"android.media.session.MediaController.TransportControls.skipToQueueItem (long id) "," Play an item with a specific id in the play queue. <br /><br />"
"android.media.session.MediaController.TransportControls.play () "," Request that the player start its playback at its current position. <br /><br />"
"android.media.session.MediaSession.Callback.onSkipToNext () "," Override to handle requests to skip to the next media item. <br /><br />"
"android.media.session.MediaSession.Callback.onPause () "," Override to handle requests to pause playback. <br /><br />"
"android.media.session.MediaSession.Callback.PlaybackState.CustomAction () "," Called when a MediaController wants a PlaybackState.CustomAction to be performed. <br /><br />"
"android.media.session.MediaSession.Callback.onPlay () "," Override to handle requests to begin playback. <br /><br />"
"android.media.session.MediaSession.Callback.onFastForward () "," Override to handle requests to fast forward. <br /><br />"
"android.media.session.MediaSession.Callback.onRewind () "," Override to handle requests to rewind. <br /><br />"
"android.media.session.MediaSession.Callback.Rating () "," Override to handle the item being rated. <br /><br />"
"android.media.session.MediaSession.Callback.MediaBrowserService () "," Override to handle requests to play a specific mediaId that was provided by your app's MediaBrowserService. <br /><br />"
"android.media.session.MediaSession.Callback.onStop () "," Override to handle requests to stop playback. <br /><br />"
"android.media.session.MediaSession.Callback.onSeekTo (long pos) "," Override to handle requests to seek to a specific position in ms. <br /><br />"
"android.media.session.MediaSession.Callback.onSkipToQueueItem (long id) "," Override to handle requests to play an item with a given id from the play queue. <br /><br />"
"android.media.session.MediaSession.Callback.Bundle () "," Override to handle requests to begin playback from a search query. <br /><br />"
"android.media.session.MediaSession.Callback.ResultReceiver () "," Called when a controller has sent a command to this session. <br /><br />"
"android.media.session.MediaSession.Callback.onSkipToPrevious () "," Override to handle requests to skip to the previous media item. <br /><br />"
"android.media.session.MediaSession.Callback.Intent () "," Called when a media button is pressed and this session has the highest priority or a controller sends a media button event to the session. <br /><br />"
"android.media.session.MediaSession.VolumeProvider () "," Configure this session to use remote volume handling. <br /><br />"
"android.media.session.MediaSession.getController () "," Get a controller for this session. <br /><br />"
"android.media.session.MediaSession.MediaController () "," Retrieve a token object that can be used by apps to create a MediaController for interacting with this session. <br /><br />"
"android.media.session.MediaSession.CharSequence () "," Set the title of the play queue. <br /><br />"
"android.media.session.MediaSession.release () "," This must be called when an app has finished performing playback. <br /><br />"
"android.media.session.MediaSession.MediaSession.QueueItem () "," Update the list of items in the play queue. <br /><br />"
"android.media.session.MediaSession.PlaybackState () "," Update the current playback state. <br /><br />"
"android.media.session.MediaSession.MediaMetadata () "," Update the current metadata. <br /><br />"
"android.media.session.MediaSession.Handler () "," Set the callback to receive updates for the MediaSession. <br /><br />"
"android.media.session.MediaSession.MediaSession.Callback () "," Set the callback to receive updates for the MediaSession. <br /><br />"
"android.media.session.MediaSession.setFlags (int flags) "," Set any flags for the session. <br /><br />"
"android.media.session.MediaSession.setRatingType (int type) "," Set the style of rating used by this session. <br /><br />"
"android.media.session.MediaSession.isActive () "," Get the current active state of this session. <br /><br />"
"android.media.session.MediaSession.setActive (boolean active) "," Set if this session is currently active and ready to receive commands. <br /><br />"
"android.media.session.MediaSession.MediaSession () "," Set some extras that can be associated with the MediaSession. <br /><br />"
"android.media.session.MediaSession.Bundle () "," Send a proprietary event to all MediaControllers listening to this Session. <br /><br />"
"android.media.session.MediaSession.AudioAttributes () "," Set the attributes for this session's audio. <br /><br />"
"android.media.session.MediaSession.PendingIntent () "," Set an intent for launching UI for this Session. <br /><br />"
"android.media.session.MediaSession.QueueItem.getDescription () "," Get the description for this item. <br /><br />"
"android.media.session.MediaSession.QueueItem.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.media.session.MediaSession.QueueItem.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.media.session.MediaSession.QueueItem.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.media.session.MediaSession.QueueItem.getQueueId () "," Get the queue id for this item. <br /><br />"
"android.media.session.MediaSession.Token.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.media.session.MediaSession.Token.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.media.session.MediaSession.Token.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.media.session.MediaSession.Token.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.media.session.MediaSessionManager.OnActiveSessionsChangedListener.MediaController () "," no description <br /><br />"
"android.media.session.PlaybackState.Builder.String () "," Add a custom action to the playback state. <br /><br />"
"android.media.session.PlaybackState.Builder.setState (int state, long position, float playbackSpeed, long updateTime) "," Set the current state of playback. <br /><br />"
"android.media.session.PlaybackState.Builder.setActiveQueueItemId (long id) "," Set the active item in the play queue by specifying its id. <br /><br />"
"android.media.session.PlaybackState.Builder.setBufferedPosition (long bufferedPosition) "," Set the current buffered position in ms. <br /><br />"
"android.media.session.PlaybackState.Builder.PlaybackState.CustomAction () "," Add a custom action to the playback state. <br /><br />"
"android.media.session.PlaybackState.Builder.setState (int state, long position, float playbackSpeed) "," Set the current state of playback. <br /><br />"
"android.media.session.PlaybackState.Builder.CharSequence () "," Set a user readable error message. <br /><br />"
"android.media.session.PlaybackState.Builder.Bundle () "," Set any custom extras to be included with the playback state. <br /><br />"
"android.media.session.PlaybackState.Builder.setActions (long actions) "," Set the current actions available on this session. <br /><br />"
"android.media.session.PlaybackState.Builder.PlaybackState () "," Build and return the PlaybackState instance with these values. <br /><br />"
"android.media.session.PlaybackState.CustomAction.Builder.PlaybackState.CustomAction () "," Set optional extras for the PlaybackState.CustomAction. <br /><br />"
"android.media.session.PlaybackState.CustomAction.getName () "," Returns the display name of this action. <br /><br />"
"android.media.session.PlaybackState.CustomAction.getExtras () "," Returns extras which provide additional application-specific information about the action, or null if none. <br /><br />"
"android.media.session.PlaybackState.CustomAction.PlaybackState.CustomAction () "," Returns the action of the PlaybackState.CustomAction. <br /><br />"
"android.media.session.PlaybackState.CustomAction.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.media.session.PlaybackState.CustomAction.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.media.session.PlaybackState.CustomAction.MediaSession's () "," Returns the resource id of the icon in the MediaSession's package. <br /><br />"
"android.media.session.PlaybackState.CustomAction.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.media.session.PlaybackState.getLastPositionUpdateTime () "," Get the elapsed real time at which position was last updated. <br /><br />"
"android.media.session.PlaybackState.getExtras () "," Get any custom extras that were set on this playback state. <br /><br />"
"android.media.session.PlaybackState.getCustomActions () "," Get the list of custom actions. <br /><br />"
"android.media.session.PlaybackState.getActiveQueueItemId () "," Get the id of the currently active item in the queue. <br /><br />"
"android.media.session.PlaybackState.getState () "," Get the current state of playback. <br /><br />"
"android.media.session.PlaybackState.getErrorMessage () "," Get a user readable error message. <br /><br />"
"android.media.session.PlaybackState.getActions () "," Get the current actions available on this session. <br /><br />"
"android.media.session.PlaybackState.getPlaybackSpeed () "," Get the current playback speed as a multiple of normal playback. <br /><br />"
"android.media.session.PlaybackState.getBufferedPosition () "," Get the current buffered position in ms. <br /><br />"
"android.media.session.PlaybackState.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.media.session.PlaybackState.getPosition () "," Get the current playback position in ms. <br /><br />"
"android.media.session.PlaybackState.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.media.session.PlaybackState.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.media.SoundPool.Builder.setMaxStreams (int maxStreams) "," Sets the maximum of number of simultaneous streams that can be played simultaneously. <br /><br />"
"android.media.SoundPool.Builder.build () "," no description <br /><br />"
"android.media.SoundPool.Builder.AudioAttributes () "," Sets the AudioAttributes. <br /><br />"
"android.media.SoundPool.setPriority (int streamID, int priority) "," Change stream priority. <br /><br />"
"android.media.SoundPool.String () "," Load the sound from the specified path. <br /><br />"
"android.media.SoundPool.stop (int streamID) "," Stop a playback stream. <br /><br />"
"android.media.SoundPool.pause (int streamID) "," Pause a playback stream. <br /><br />"
"android.media.SoundPool.SoundPool.OnLoadCompleteListener () "," Sets the callback hook for the OnLoadCompleteListener. <br /><br />"
"android.media.SoundPool.setRate (int streamID, float rate) "," Change playback rate. <br /><br />"
"android.media.SoundPool.release () "," Release the SoundPool resources. <br /><br />"
"android.media.SoundPool.unload (int soundID) "," Unload a sound from a sound ID. <br /><br />"
"android.media.SoundPool.Context () "," Load the sound from the specified APK resource. <br /><br />"
"android.media.SoundPool.setVolume (int streamID, float leftVolume, float rightVolume) "," Set stream volume. <br /><br />"
"android.media.SoundPool.play (int soundID, float leftVolume, float rightVolume, int priority, int loop, float rate) "," Play a sound from a sound ID. <br /><br />"
"android.media.SoundPool.autoResume () "," Resume all previously active streams. <br /><br />"
"android.media.SoundPool.autoPause () "," Pause all active streams. <br /><br />"
"android.media.SoundPool.resume (int streamID) "," Resume a playback stream. <br /><br />"
"android.media.SoundPool.AssetFileDescriptor () "," Load the sound from an asset file descriptor. <br /><br />"
"android.media.SoundPool.FileDescriptor () "," Load the sound from a FileDescriptor. <br /><br />"
"android.media.SoundPool.setLoop (int streamID, int loop) "," Set loop mode. <br /><br />"
"android.media.SoundPool.OnLoadCompleteListener.SoundPool () "," Called when a sound has completed loading. <br /><br />"
"android.media.ThumbnailUtils.String () "," Create a video thumbnail for a video. <br /><br />"
"android.media.ThumbnailUtils.Bitmap () "," Creates a centered bitmap of the desired size. <br /><br />"
"android.media.TimedText.getBounds () "," Get the rectangle area or region for rendering the timed text as specified by a Rect object. <br /><br />"
"android.media.TimedText.getText () "," Get the characters in the timed text. <br /><br />"
"android.media.ToneGenerator.startTone (int toneType, int durationMs) "," This method starts the playback of a tone of the specified type for the specified duration. <br /><br />"
"android.media.ToneGenerator.stopTone () "," This method stops the tone currently playing playback. <br /><br />"
"android.media.ToneGenerator.startTone (int toneType) "," This method starts the playback of a tone of the specified type. <br /><br />"
"android.media.ToneGenerator.release () "," Releases resources associated with this ToneGenerator object. <br /><br />"
"android.media.ToneGenerator.getAudioSessionId () "," Returns the audio session ID. <br /><br />"
"android.media.tv.TvContentRating.List () "," Returns the unmodifiable sub-rating string List of this TvContentRating object. <br /><br />"
"android.media.tv.TvContentRating.flattenToString () "," Returns a string that unambiguously describes the rating information contained in a TvContentRating object. <br /><br />"
"android.media.tv.TvContentRating.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.media.tv.TvContentRating.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.media.tv.TvContentRating.flattenToString () () "," Recovers a TvContentRating object from the string that was previously created from flattenToString(). <br /><br />"
"android.media.tv.TvContentRating.String... () "," Creates a TvContentRating object with predefined content rating strings. <br /><br />"
"android.media.tv.TvContentRating.getRatingSystem () "," Returns the rating system of this TvContentRating object. <br /><br />"
"android.media.tv.TvContentRating.getMainRating () "," Returns the main rating of this TvContentRating object. <br /><br />"
"android.media.tv.TvContentRating.getDomain () "," Returns the domain of this TvContentRating object. <br /><br />"
"android.media.tv.TvContract.Channels.String () "," Returns the video resolution (definition) for a given video format. <br /><br />"
"android.media.tv.TvContract.Uri () "," Builds a URI that points to programs on a specific channel whose schedules overlap with the given time frame. <br /><br />"
"android.media.tv.TvContract.String () "," Builds a URI that points to all channels from a given TV input. <br /><br />"
"android.media.tv.TvContract.buildChannelUri (long channelId) "," Builds a URI that points to a specific channel. <br /><br />"
"android.media.tv.TvContract.buildProgramsUriForChannel (long channelId, long startTime, long endTime) "," Builds a URI that points to programs on a specific channel whose schedules overlap with the given time frame. <br /><br />"
"android.media.tv.TvContract.buildProgramUri (long programId) "," Builds a URI that points to a specific program. <br /><br />"
"android.media.tv.TvContract.ComponentName () "," Builds an ID that uniquely identifies a TV input service. <br /><br />"
"android.media.tv.TvContract.buildProgramsUriForChannel (long channelId) "," Builds a URI that points to all programs on a given channel. <br /><br />"
"android.media.tv.TvContract.buildChannelLogoUri (long channelId) "," Builds a URI that points to a channel logo. <br /><br />"
"android.media.tv.TvContract.Programs.Genres.String () "," Decodes the canonical genre strings from the text stored in the database. <br /><br />"
"android.media.tv.TvContract.Programs.Genres.String... () "," Encodes canonical genre strings to a text that can be put into the database. <br /><br />"
"android.media.tv.TvInputInfo.Context () "," Loads the user-displayed label for this TV input. <br /><br />"
"android.media.tv.TvInputInfo.isPassthroughInput () "," Returns true if this TV input is pass-though which does not have any real channels in TvProvider. <br /><br />"
"android.media.tv.TvInputInfo.getServiceInfo () "," Returns the information of the service that implements this TV input. <br /><br />"
"android.media.tv.TvInputInfo.createSettingsIntent () "," Returns an intent to start the settings activity for this TV input. <br /><br />"
"android.media.tv.TvInputInfo.getType () "," Returns the type of this TV input. <br /><br />"
"android.media.tv.TvInputInfo.getId () "," Returns a unique ID for this TV input. <br /><br />"
"android.media.tv.TvInputInfo.Parcel () "," Used to package this object into a Parcel. <br /><br />"
"android.media.tv.TvInputInfo.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.media.tv.TvInputInfo.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.media.tv.TvInputInfo.createSetupIntent () "," Returns an intent to start the setup activity for this TV input. <br /><br />"
"android.media.tv.TvInputInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.media.tv.TvInputInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.media.tv.TvInputInfo.getParentId () "," Returns the parent input ID. <br /><br />"
"android.media.tv.TvInputManager.TvInputManager.TvInputCallback () "," Unregisters the existing TvInputManager.TvInputCallback. <br /><br />"
"android.media.tv.TvInputManager.String () "," Returns the state of a given TV input. <br /><br />"
"android.media.tv.TvInputManager.TvContentRating () "," Checks whether a given TV content rating is blocked by the user. <br /><br />"
"android.media.tv.TvInputManager.getTvInputList () "," Returns the complete list of TV inputs on the system. <br /><br />"
"android.media.tv.TvInputManager.TvInputInfo () "," Returns the TvInputInfo for a given TV input. <br /><br />"
"android.media.tv.TvInputManager.isParentalControlsEnabled () "," Returns the user's parental controls enabled state. <br /><br />"
"android.media.tv.TvInputManager.TvInputCallback.String () "," This is called when the state of a given TV input is changed. <br /><br />"
"android.media.tv.TvInputService.HardwareSession.notifyVideoAvailable () () "," Called when the underlying hardware TV input session calls notifyVideoAvailable(). <br /><br />"
"android.media.tv.TvInputService.HardwareSession.getHardwareInputId () "," Returns the hardware TV input ID the external device is connected to. <br /><br />"
"android.media.tv.TvInputService.HardwareSession.TvInputService.HardwareSession () "," This method will not be called in TvInputService.HardwareSession. <br /><br />"
"android.media.tv.TvInputService.HardwareSession.notifyVideoUnavailable (int) (int reason) "," Called when the underlying hardware TV input session calls notifyVideoUnavailable(int). <br /><br />"
"android.media.tv.TvInputService.TvInputService.Session () "," Returns a concrete implementation of TvInputService.Session. <br /><br />"
"android.media.tv.TvInputService.Intent () "," Return the communication channel to the service. <br /><br />"
"android.media.tv.TvInputService.Session.Uri () "," Tunes to a given channel. <br /><br />"
"android.media.tv.TvInputService.Session.String () "," Select a given track. <br /><br />"
"android.media.tv.TvInputService.Session.KeyEvent.Callback.onKeyUp () () "," Default implementation of KeyEvent.Callback.onKeyUp(): always returns false (doesn't handle the event). <br /><br />"
"android.media.tv.TvInputService.Session.onCreateOverlayView () "," Called when an application requests to create an overlay view. <br /><br />"
"android.media.tv.TvInputService.Session.notifyContentAllowed () "," Informs the application that the user is allowed to watch the current program content. <br /><br />"
"android.media.tv.TvInputService.Session.KeyEvent.Callback.onKeyLongPress () () "," Default implementation of KeyEvent.Callback.onKeyLongPress(): always returns false (doesn't handle the event). <br /><br />"
"android.media.tv.TvInputService.Session.MotionEvent () "," Implement this method to handle trackball events on the current input session. <br /><br />"
"android.media.tv.TvInputService.Session.Surface () "," Sets the Surface for the current input session on which the TV input renders video. <br /><br />"
"android.media.tv.TvInputService.Session.notifyVideoUnavailable (int reason) "," Informs the application that the video became unavailable for some reason. <br /><br />"
"android.media.tv.TvInputService.Session.TvTrackInfo () "," Sends the list of all audio/video/subtitle tracks. <br /><br />"
"android.media.tv.TvInputService.Session.onSetCaptionEnabled (boolean enabled) "," Enables or disables the caption. <br /><br />"
"android.media.tv.TvInputService.Session.onSetSurface (Surface) (int format, int width, int height) "," Called after any structural changes (format or size) have been made to the Surface passed by onSetSurface(Surface). <br /><br />"
"android.media.tv.TvInputService.Session.KeyEvent.Callback.onKeyMultiple () () "," Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event). <br /><br />"
"android.media.tv.TvInputService.Session.KeyEvent.Callback.onKeyDown () () "," Default implementation of KeyEvent.Callback.onKeyDown(): always returns false (doesn't handle the event). <br /><br />"
"android.media.tv.TvInputService.Session.notifyVideoAvailable () "," Informs the application that the video is now available for watching. <br /><br />"
"android.media.tv.TvInputService.Session.onRelease () "," Called when the session is released. <br /><br />"
"android.media.tv.TvInputService.Session.TvContentRating () "," Requests to unblock the content according to the given rating. <br /><br />"
"android.media.tv.TvInputService.Session.onSetStreamVolume (float volume) "," Sets the relative stream volume of the current TV input session to handle the change of audio focus by setting. <br /><br />"
"android.media.tv.TvInputService.Session.setOverlayViewEnabled (boolean enable) "," Enables or disables the overlay view. <br /><br />"
"android.media.tv.TvTrackInfo.Builder.setAudioSampleRate (int audioSampleRate) "," Sets the audio sample rate, in the unit of Hz. <br /><br />"
"android.media.tv.TvTrackInfo.Builder.String () "," Sets the language information of the current track. <br /><br />"
"android.media.tv.TvTrackInfo.Builder.setVideoFrameRate (float videoFrameRate) "," Sets the frame rate of the video, in the unit fps (frames per rate). <br /><br />"
"android.media.tv.TvTrackInfo.Builder.setVideoHeight (int videoHeight) "," Sets the height of the video, in the unit of pixels. <br /><br />"
"android.media.tv.TvTrackInfo.Builder.setAudioChannelCount (int audioChannelCount) "," Sets the audio channel count. <br /><br />"
"android.media.tv.TvTrackInfo.Builder.TvTrackInfo () "," Creates a TvTrackInfo instance with the specified fields. <br /><br />"
"android.media.tv.TvTrackInfo.Builder.setVideoWidth (int videoWidth) "," Sets the width of the video, in the unit of pixels. <br /><br />"
"android.media.tv.TvTrackInfo.Builder.Bundle () "," Sets the extra information about the current track. <br /><br />"
"android.media.tv.TvTrackInfo.getVideoWidth () "," Returns the width of the video, in the unit of pixels. <br /><br />"
"android.media.tv.TvTrackInfo.getVideoFrameRate () "," Returns the frame rate of the video, in the unit of fps (frames per second). <br /><br />"
"android.media.tv.TvTrackInfo.getAudioSampleRate () "," Returns the audio sample rate, in the unit of Hz. <br /><br />"
"android.media.tv.TvTrackInfo.getType () "," Returns the type of the track. <br /><br />"
"android.media.tv.TvTrackInfo.getId () "," Returns the ID of the track. <br /><br />"
"android.media.tv.TvTrackInfo.getAudioChannelCount () "," Returns the audio channel count. <br /><br />"
"android.media.tv.TvTrackInfo.Parcel () "," Used to package this object into a Parcel. <br /><br />"
"android.media.tv.TvTrackInfo.getExtra () "," Returns the extra information about the current track. <br /><br />"
"android.media.tv.TvTrackInfo.getVideoHeight () "," Returns the height of the video, in the unit of pixels. <br /><br />"
"android.media.tv.TvTrackInfo.getLanguage () "," Returns the language information encoded by either ISO 639-1 or ISO 639-2/T. <br /><br />"
"android.media.tv.TvTrackInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.media.tv.TvView.Uri () "," Tunes to a given channel. <br /><br />"
"android.media.tv.TvView.Region () "," This is used by the RootView to perform an optimization when the view hierarchy contains one or several SurfaceView. <br /><br />"
"android.media.tv.TvView.String () "," Selects a track. <br /><br />"
"android.media.tv.TvView.MotionEvent () "," Pass a trackball motion event down to the focused view. <br /><br />"
"android.media.tv.TvView.TvView.OnUnhandledInputEventListener () "," Registers a callback to be invoked when an input event is not handled by the bound TV input. <br /><br />"
"android.media.tv.TvView.InputEvent () "," Called when an unhandled input event also has not been handled by the user provided callback. <br /><br />"
"android.media.tv.TvView.Canvas () "," Manually render this view (and all of its children) to the given Canvas. <br /><br />"
"android.media.tv.TvView.TvView.TvInputCallback () "," Sets the callback to be invoked when an event is dispatched to this TvView. <br /><br />"
"android.media.tv.TvView.dispatchWindowFocusChanged (boolean hasFocus) "," Called when the window containing this view gains or loses window focus. <br /><br />"
"android.media.tv.TvView.setStreamVolume (float volume) "," Sets the relative stream volume of this session to handle a change of audio focus. <br /><br />"
"android.media.tv.TvView.setCaptionEnabled (boolean enabled) "," Enables or disables the caption in this TvView. <br /><br />"
"android.media.tv.TvView.KeyEvent () "," Dispatch a key event to the next view on the focus path. <br /><br />"
"android.media.tv.TvView.getSelectedTrack (int type) "," Returns the ID of the selected track for a given type. <br /><br />"
"android.media.tv.TvView.getTracks (int type) "," Returns the list of tracks. <br /><br />"
"android.media.tv.TvView.reset () "," Resets this TvView. <br /><br />"
"android.media.tv.TvView.OnUnhandledInputEventListener.InputEvent () "," Called when an input event was not handled by the bound TV input. <br /><br />"
"android.media.tv.TvView.TvInputCallback.String () "," This is called when the video is not available, so the TV input stops the playback. <br /><br />"
"android.media.tv.TvView.TvInputCallback.TvContentRating () "," This is called when the current program content turns out to be not allowed to watch since its content rating is blocked by parental controls. <br /><br />"
"android.media.tv.TvView.TvInputCallback.TvTrackInfo () "," This is called when the track information has been changed. <br /><br />"
"android.media.tv.TvView.TvInputCallback.tune (String, Uri) () "," This is invoked when the channel of this TvView is changed by the underlying TV input without any tune(String, Uri) request. <br /><br />"
"android.media.VolumeProvider.onAdjustVolume (int direction) "," Override to handle requests to adjust the volume of the current output. <br /><br />"
"android.media.VolumeProvider.getVolumeControl () "," Get the volume control type that this volume provider uses. <br /><br />"
"android.media.VolumeProvider.getMaxVolume () "," Get the maximum volume this provider allows. <br /><br />"
"android.media.VolumeProvider.setCurrentVolume (int currentVolume) "," Notify the system that the current volume has been changed. <br /><br />"
"android.media.VolumeProvider.onSetVolumeTo (int volume) "," Override to handle requests to set the volume of the current output. <br /><br />"
"android.media.VolumeProvider.getCurrentVolume () "," Gets the current volume. <br /><br />"
"android.mtp.MtpConstants.isAbstractObject (int format) "," Returns true if the object is abstract (that is, it has no representation in the underlying file system). <br /><br />"
"android.mtp.MtpDevice.String () "," Copies the data for an object to a file in external storage. <br /><br />"
"android.mtp.MtpDevice.getObjectHandles (int storageId, int format, int objectHandle) "," Returns the list of object handles for all objects on the given storage unit, with the given format and parent. <br /><br />"
"android.mtp.MtpDevice.close () "," Closes all resources related to the MtpDevice object. <br /><br />"
"android.mtp.MtpDevice.getStorageInfo (int) () "," Returns the list of IDs for all storage units on this device Information about each storage unit can be accessed via getStorageInfo(int). <br /><br />"
"android.mtp.MtpDevice.UsbDeviceConnection () "," Opens the MTP device. <br /><br />"
"android.mtp.MtpDevice.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.mtp.MtpDevice.getThumbnail (int objectHandle) "," Returns the thumbnail data for an object as a byte array. <br /><br />"
"android.mtp.MtpDevice.getParent (int objectHandle) "," Retrieves the object handle for the parent of an object on the device. <br /><br />"
"android.mtp.MtpDevice.UsbDevice () "," Returns the name of the USB device This returns the same value as getDeviceName() for the device's UsbDevice <br /><br />"
"android.mtp.MtpDevice.MtpStorageInfo (int storageId) "," Retrieves the MtpStorageInfo for a storage unit. <br /><br />"
"android.mtp.MtpDevice.getStorageId (int objectHandle) "," Retrieves the ID of the storage unit containing the given object on the device. <br /><br />"
"android.mtp.MtpDevice.getObject (int objectHandle, int objectSize) "," Returns the data for an object as a byte array. <br /><br />"
"android.mtp.MtpDevice.MtpDeviceInfo () "," Returns the MtpDeviceInfo for this device <br /><br />"
"android.mtp.MtpDevice.MtpObjectInfo (int objectHandle) "," Retrieves the MtpObjectInfo for an object. <br /><br />"
"android.mtp.MtpDevice.getDeviceId () "," Returns the USB ID of the USB device. <br /><br />"
"android.mtp.MtpDevice.deleteObject (int objectHandle) "," Deletes an object on the device. <br /><br />"
"android.mtp.MtpDeviceInfo.getSerialNumber () "," Returns the unique serial number for the MTP device <br /><br />"
"android.mtp.MtpDeviceInfo.getManufacturer () "," Returns the manufacturer's name for the MTP device <br /><br />"
"android.mtp.MtpDeviceInfo.getVersion () "," Returns the version string the MTP device <br /><br />"
"android.mtp.MtpDeviceInfo.getModel () "," Returns the model name for the MTP device <br /><br />"
"android.mtp.MtpObjectInfo.getThumbCompressedSize () "," Returns the size of the MTP object's thumbnail Will be zero for objects with no thumbnail <br /><br />"
"android.mtp.MtpObjectInfo.getFormat () "," Returns the format code for the MTP object <br /><br />"
"android.mtp.MtpObjectInfo.getDateCreated () "," Returns the creation date of the MTP object The value is represented as milliseconds since January 1, 1970 <br /><br />"
"android.mtp.MtpObjectInfo.getStorageId () "," Returns the storage ID for the MTP object's storage unit <br /><br />"
"android.mtp.MtpObjectInfo.getThumbPixWidth () "," Returns the width of the MTP object's thumbnail in pixels Will be zero for objects with no thumbnail <br /><br />"
"android.mtp.MtpObjectInfo.FORMAT_ASSOCIATION () "," Returns the association description for the MTP object Will be zero objects that are not of format FORMAT_ASSOCIATION <br /><br />"
"android.mtp.MtpObjectInfo.getSequenceNumber () "," Returns the sequence number for the MTP object This field is typically not used for MTP devices, but is sometimes used to define a sequence of photos on PTP cameras. <br /><br />"
"android.mtp.MtpObjectInfo.getImagePixDepth () "," Returns the depth of the MTP object in bits per pixel Will be zero for non-image objects <br /><br />"
"android.mtp.MtpObjectInfo.ASSOCIATION_TYPE_GENERIC_FOLDER () "," Returns the association type for the MTP object Will be zero objects that are not of format FORMAT_ASSOCIATION For directories the association type is typically ASSOCIATION_TYPE_GENERIC_FOLDER <br /><br />"
"android.mtp.MtpObjectInfo.getImagePixHeight () "," Returns the height of the MTP object in pixels Will be zero for non-image objects <br /><br />"
"android.mtp.MtpObjectInfo.getThumbPixHeight () "," Returns the height of the MTP object's thumbnail in pixels Will be zero for objects with no thumbnail <br /><br />"
"android.mtp.MtpObjectInfo.getDateModified () "," Returns the modification date of the MTP object The value is represented as milliseconds since January 1, 1970 <br /><br />"
"android.mtp.MtpObjectInfo.getImagePixWidth () "," Returns the width of the MTP object in pixels Will be zero for non-image objects <br /><br />"
"android.mtp.MtpObjectInfo.getName () "," Returns the name of the MTP object <br /><br />"
"android.mtp.MtpObjectInfo.PROTECTION_STATUS_NON_TRANSFERABLE_DATA () "," Returns the protection status for the MTP object Possible values are:   PROTECTION_STATUS_NONE   PROTECTION_STATUS_READ_ONLY   PROTECTION_STATUS_NON_TRANSFERABLE_DATA <br /><br />"
"android.mtp.MtpObjectInfo.getCompressedSize () "," Returns the size of the MTP object <br /><br />"
"android.mtp.MtpObjectInfo.getObjectHandle () "," Returns the object handle for the MTP object <br /><br />"
"android.mtp.MtpObjectInfo.getParent () "," Returns the object handle for the object's parent Will be zero for the root directory of a storage unit <br /><br />"
"android.mtp.MtpObjectInfo.getThumbFormat () "," Returns the format code for the MTP object's thumbnail Will be zero for objects with no thumbnail <br /><br />"
"android.mtp.MtpObjectInfo.getKeywords () "," Returns a comma separated list of keywords for the MTP object <br /><br />"
"android.mtp.MtpStorageInfo.getVolumeIdentifier () "," Returns the volume identifier for the storage unit <br /><br />"
"android.mtp.MtpStorageInfo.getDescription () "," Returns the description string for the storage unit. <br /><br />"
"android.mtp.MtpStorageInfo.getMaxCapacity () "," Returns the maximum storage capacity for the storage unit in bytes <br /><br />"
"android.mtp.MtpStorageInfo.getStorageId () "," Returns the storage ID for the storage unit. <br /><br />"
"android.mtp.MtpStorageInfo.getFreeSpace () "," Returns the amount of free space in the storage unit in bytes <br /><br />"
"android.net.ConnectivityManager.getNetworkPreference () "," This method was deprecated in API level 21. Functionality has been removed as it no longer makes sense, with many more than two networks - we'd need an array to express preference. Instead we use dynamic network properties of the networks to describe their precedence. <br /><br />"
"android.net.ConnectivityManager.getActiveNetworkInfo () () "," This method was deprecated in API level 14. As of ICE_CREAM_SANDWICH, availability of background data depends on several combined factors, and this method will always return true. Instead, when background data is unavailable, getActiveNetworkInfo() will now appear disconnected. <br /><br />"
"android.net.ConnectivityManager.registerNetworkCallback (NetworkRequest, ConnectivityManager.NetworkCallback) () "," Unregisters callbacks about and possibly releases networks originating from requestNetwork(NetworkRequest, PendingIntent) and registerNetworkCallback(NetworkRequest, ConnectivityManager.NetworkCallback) calls. <br /><br />"
"android.net.ConnectivityManager.getActiveNetworkInfo () "," Returns details about the currently active default data network. <br /><br />"
"android.net.ConnectivityManager.isActiveNetworkMetered () "," Returns if the currently active data network is metered. <br /><br />"
"android.net.ConnectivityManager.isDefaultNetworkActive () "," Return whether the data network is currently active. <br /><br />"
"android.net.ConnectivityManager.setNetworkPreference (int preference) "," This method was deprecated in API level 21. Functionality has been removed as it no longer makes sense, with many more than two networks - we'd need an array to express preference. Instead we use dynamic network properties of the networks to describe their precedence. <br /><br />"
"android.net.ConnectivityManager.getAllNetworkInfo () "," Returns connection status information about all network types supported by the device. <br /><br />"
"android.net.ConnectivityManager.requestNetwork (NetworkRequest, PendingIntent) () "," This method was deprecated in API level 21. Deprecated in favor of the cleaner requestNetwork(NetworkRequest, PendingIntent) api. <br /><br />"
"android.net.ConnectivityManager.NetworkCapabilities () "," Request a network to satisfy a set of NetworkCapabilities. <br /><br />"
"android.net.ConnectivityManager.addDefaultNetworkActiveListener (ConnectivityManager.OnNetworkActiveListener) () "," Remove network active listener previously registered with addDefaultNetworkActiveListener(ConnectivityManager.OnNetworkActiveListener). <br /><br />"
"android.net.ConnectivityManager.ConnectivityManager.OnNetworkActiveListener () "," Start listening to reports when the system's default data network is active, meaning it is a good time to perform network traffic. <br /><br />"
"android.net.ConnectivityManager.Network () "," Binds the current process to network. <br /><br />"
"android.net.ConnectivityManager.getSocketFactory () (int networkType, int hostAddress) "," This method was deprecated in API level 21. Deprecated in favor of the requestNetwork(NetworkRequest, PendingIntent), setProcessDefaultNetwork(Network) and getSocketFactory() api. <br /><br />"
"android.net.ConnectivityManager.getNetworkInfo (int networkType) "," Returns connection status information about a particular network type. <br /><br />"
"android.net.ConnectivityManager.NetworkRequest () "," Registers to receive notifications about all networks which satisfy the given NetworkRequest. <br /><br />"
"android.net.ConnectivityManager.isNetworkTypeValid (int networkType) "," Tests if a given integer represents a valid network type. <br /><br />"
"android.net.ConnectivityManager.unregisterNetworkCallback (ConnectivityManager.NetworkCallback) () "," Removes a request made via requestNetwork(NetworkRequest, android.app.PendingIntent)  This method has the same behavior as unregisterNetworkCallback(ConnectivityManager.NetworkCallback) with respect to releasing network resources and disconnecting. <br /><br />"
"android.net.ConnectivityManager.NetworkCallback.LinkProperties () "," Called when the network the framework connected to for this request changes LinkProperties. <br /><br />"
"android.net.ConnectivityManager.NetworkCallback.Network () "," Called when the framework has a hard loss of the network or when the graceful failure ends. <br /><br />"
"android.net.ConnectivityManager.NetworkCallback.NetworkCapabilities () "," Called when the network the framework connected to for this request changes capabilities but still satisfies the stated need. <br /><br />"
"android.net.ConnectivityManager.OnNetworkActiveListener.onNetworkActive () "," Called on the main thread of the process to report that the current data network has become active, and it is now a good time to perform any pending network operations. <br /><br />"
"android.net.Credentials.getPid () "," no description <br /><br />"
"android.net.Credentials.getUid () "," no description <br /><br />"
"android.net.Credentials.getGid () "," no description <br /><br />"
"android.net.DhcpInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.net.http.AndroidHttpClient.getConnectionManager () "," Obtains the connection manager used by this client. <br /><br />"
"android.net.http.AndroidHttpClient.setRequestProperty (String, String) () "," This method is deprecated. Please use URLConnection and friends instead. See SSLCertificateSocketFactory for SSL cache support. If you'd like to set a custom useragent, please use setRequestProperty(String, String) with field set to User-Agent. <br /><br />"
"android.net.http.AndroidHttpClient.String () "," Returns the date of the given HTTP date string. <br /><br />"
"android.net.http.AndroidHttpClient.HttpContext () "," Executes a request to the target using the given context. <br /><br />"
"android.net.http.AndroidHttpClient.ContentResolver () "," Retrieves the minimum size for compressing data. <br /><br />"
"android.net.http.AndroidHttpClient.HttpRequest () "," Modifies a request to indicate to the server that we would like a gzipped response. <br /><br />"
"android.net.http.AndroidHttpClient.ResponseHandler () "," Executes a request to the target using the default context and processes the response using the given response handler. <br /><br />"
"android.net.http.AndroidHttpClient.close () "," Release resources associated with this client. <br /><br />"
"android.net.http.AndroidHttpClient.disableCurlLogging () "," Disables cURL logging for this client. <br /><br />"
"android.net.http.AndroidHttpClient.HttpEntity () "," Gets the input stream from a response entity. <br /><br />"
"android.net.http.AndroidHttpClient.getParams () "," Obtains the parameters for this client. <br /><br />"
"android.net.http.AndroidHttpClient.HttpUriRequest () "," Executes a request using the default context. <br /><br />"
"android.net.http.HttpResponseCache.String () "," Returns the cached response corresponding to the given request. <br /><br />"
"android.net.http.HttpResponseCache.delete () "," Uninstalls the cache and deletes all of its stored contents. <br /><br />"
"android.net.http.HttpResponseCache.maxSize () "," Returns the maximum number of bytes that this cache should use to store its data. <br /><br />"
"android.net.http.HttpResponseCache.getNetworkCount () "," Returns the number of HTTP requests that required the network to either supply a response or validate a locally cached response. <br /><br />"
"android.net.http.HttpResponseCache.getRequestCount () "," Returns the total number of HTTP requests that were made. <br /><br />"
"android.net.http.HttpResponseCache.getInstalled () "," Returns the currently-installed HttpResponseCache, or null if there is no cache installed or it is not a HttpResponseCache. <br /><br />"
"android.net.http.HttpResponseCache.close () "," Uninstalls the cache and releases any active resources. <br /><br />"
"android.net.http.HttpResponseCache.sets it () "," Creates a new HTTP response cache and sets it as the system default cache. <br /><br />"
"android.net.http.HttpResponseCache.flush () "," Force buffered operations to the filesystem. <br /><br />"
"android.net.http.HttpResponseCache.size () "," Returns the number of bytes currently being used to store the values in this cache. <br /><br />"
"android.net.http.HttpResponseCache.URLConnection () "," Allows the protocol handler to cache data after retrieving resources. <br /><br />"
"android.net.http.HttpResponseCache.getHitCount () "," Returns the number of HTTP requests whose response was provided by the cache. <br /><br />"
"android.net.http.SslCertificate.DName.getOName () "," no description <br /><br />"
"android.net.http.SslCertificate.DName.getDName () "," no description <br /><br />"
"android.net.http.SslCertificate.DName.getCName () "," no description <br /><br />"
"android.net.http.SslCertificate.DName.getUName () "," no description <br /><br />"
"android.net.http.SslCertificate.SslCertificate () "," Saves the certificate state to a bundle <br /><br />"
"android.net.http.SslCertificate.getValidNotBeforeDate () "," no description <br /><br />"
"android.net.http.SslCertificate.getValidNotAfterDate () () "," This method was deprecated in API level 8. Use getValidNotAfterDate() <br /><br />"
"android.net.http.SslCertificate.getIssuedBy () "," no description <br /><br />"
"android.net.http.SslCertificate.getValidNotAfterDate () "," no description <br /><br />"
"android.net.http.SslCertificate.Bundle () "," Restores the certificate stored in the bundle <br /><br />"
"android.net.http.SslCertificate.getIssuedTo () "," no description <br /><br />"
"android.net.http.SslCertificate.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.net.http.SslCertificate.getValidNotBeforeDate () () "," This method was deprecated in API level 8. Use getValidNotBeforeDate() <br /><br />"
"android.net.http.SslError.hasError (int error) "," Determines whether this object includes the supplied error. <br /><br />"
"android.net.http.SslError.getPrimaryError () "," Gets the most severe SSL error in this object's set of errors. <br /><br />"
"android.net.http.SslError.addError (int error) "," Adds the supplied SSL error to the set. <br /><br />"
"android.net.http.SslError.getCertificate () "," Gets the SSL certificate associated with this object. <br /><br />"
"android.net.http.SslError.getUrl () "," Gets the URL associated with this object. <br /><br />"
"android.net.http.SslError.toString () "," Returns a string representation of this object. <br /><br />"
"android.net.http.X509TrustManagerExtensions.String () "," Verifies the given certificate chain. <br /><br />"
"android.net.http.X509TrustManagerExtensions.X509Certificate () "," Checks whether a CA certificate is added by an user. <br /><br />"
"android.net.IpPrefix.getPrefixLength () "," Returns the prefix length of this IpPrefix. <br /><br />"
"android.net.IpPrefix.Parcel () "," Implement the Parcelable interface. <br /><br />"
"android.net.IpPrefix.hashCode () "," Gets the hashcode of the represented IP prefix. <br /><br />"
"android.net.IpPrefix.getAddress () "," Returns a copy of the first IP address in the prefix. <br /><br />"
"android.net.IpPrefix.Object () "," Compares this IpPrefix object against the specified object in obj. <br /><br />"
"android.net.IpPrefix.describeContents () "," Implement the Parcelable interface. <br /><br />"
"android.net.IpPrefix.getRawAddress () "," Returns a copy of the IP address bytes in network order (the highest order byte is the zeroth element). <br /><br />"
"android.net.IpPrefix.toString () "," Returns a string representation of this IpPrefix. <br /><br />"
"android.net.LinkAddress.getPrefixLength () "," Returns the prefix length of this LinkAddress. <br /><br />"
"android.net.LinkAddress.InetAddress () "," Returns the InetAddress of this LinkAddress. <br /><br />"
"android.net.LinkAddress.Parcel () "," Implement the Parcelable interface. <br /><br />"
"android.net.LinkAddress.hashCode () "," Returns a hashcode for this address. <br /><br />"
"android.net.LinkAddress.getFlags () "," Returns the flags of this LinkAddress. <br /><br />"
"android.net.LinkAddress.Object () "," Compares this LinkAddress instance against obj. <br /><br />"
"android.net.LinkAddress.describeContents () "," Implement the Parcelable interface. <br /><br />"
"android.net.LinkAddress.getScope () "," Returns the scope of this LinkAddress. <br /><br />"
"android.net.LinkAddress.toString () "," Returns a string representation of this address, such as '192.0.2.1/24' or '2001:db8::1/64'. <br /><br />"
"android.net.LinkProperties.getDomains () "," Get the DNS domains search path set for this link. <br /><br />"
"android.net.LinkProperties.InetAddress () "," Returns all the InetAddress for DNS servers on this link. <br /><br />"
"android.net.LinkProperties.Parcel () "," Implement the Parcelable interface. <br /><br />"
"android.net.LinkProperties.RouteInfo () "," Returns all the RouteInfo set on this link. <br /><br />"
"android.net.LinkProperties.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.net.LinkProperties.LinkAddress () "," Returns all the LinkAddress on this link. <br /><br />"
"android.net.LinkProperties.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.net.LinkProperties.describeContents () "," Implement the Parcelable interface <br /><br />"
"android.net.LinkProperties.ProxyInfo () "," Gets the recommended ProxyInfo (or null) set on this link. <br /><br />"
"android.net.LinkProperties.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.net.LinkProperties.getInterfaceName () "," Gets the interface name for this link. <br /><br />"
"android.net.LocalServerSocket.close () "," Closes server socket. <br /><br />"
"android.net.LocalServerSocket.getLocalSocketAddress () "," Obtains the socket's local address <br /><br />"
"android.net.LocalServerSocket.getFileDescriptor () "," Returns file descriptor or null if not yet open/already closed <br /><br />"
"android.net.LocalServerSocket.accept () "," Accepts a new connection to the socket. <br /><br />"
"android.net.LocalSocket.getPeerCredentials () "," Retrieves the credentials of this socket's peer. <br /><br />"
"android.net.LocalSocket.setSendBufferSize (int n) "," no description <br /><br />"
"android.net.LocalSocket.getOutputStream () "," Retrieves the output stream for this instance. <br /><br />"
"android.net.LocalSocket.getReceiveBufferSize () "," no description <br /><br />"
"android.net.LocalSocket.isConnected () "," no description <br /><br />"
"android.net.LocalSocket.close () "," Closes the socket. <br /><br />"
"android.net.LocalSocket.shutdownInput () "," Shuts down the input side of the socket. <br /><br />"
"android.net.LocalSocket.setSoTimeout (int n) "," no description <br /><br />"
"android.net.LocalSocket.FileDescriptor[] () "," Enqueues a set of file descriptors to send to the peer. <br /><br />"
"android.net.LocalSocket.getSoTimeout () "," no description <br /><br />"
"android.net.LocalSocket.isOutputShutdown () "," no description <br /><br />"
"android.net.LocalSocket.setReceiveBufferSize (int size) "," no description <br /><br />"
"android.net.LocalSocket.getFileDescriptor () "," Returns file descriptor or null if not yet open/already closed <br /><br />"
"android.net.LocalSocket.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.net.LocalSocket.LocalSocketAddress () "," Connects this socket to an endpoint. <br /><br />"
"android.net.LocalSocket.getAncillaryFileDescriptors () "," Retrieves a set of file descriptors that a peer has sent through an ancillary message. <br /><br />"
"android.net.LocalSocket.getRemoteSocketAddress () "," no description <br /><br />"
"android.net.LocalSocket.getSendBufferSize () "," no description <br /><br />"
"android.net.LocalSocket.isClosed () "," no description <br /><br />"
"android.net.LocalSocket.getLocalSocketAddress () "," Retrieves the name that this socket is bound to, if any. <br /><br />"
"android.net.LocalSocket.isInputShutdown () "," no description <br /><br />"
"android.net.LocalSocket.isBound () "," no description <br /><br />"
"android.net.LocalSocket.shutdownOutput () "," Shuts down the output side of the socket. <br /><br />"
"android.net.LocalSocket.getInputStream () "," Retrieves the input stream for this instance. <br /><br />"
"android.net.LocalSocketAddress.getName () "," Retrieves the string name of this address <br /><br />"
"android.net.LocalSocketAddress.getNamespace () "," Returns the namespace used by this address. <br /><br />"
"android.net.MailTo.String () "," Parse and decode a mailto scheme string. <br /><br />"
"android.net.MailTo.getBody () "," Retrieve the body line from the parsed mailto URL. <br /><br />"
"android.net.MailTo.getTo () "," Retrieve the To address line from the parsed mailto URL. <br /><br />"
"android.net.MailTo.getCc () "," Retrieve the CC address line from the parsed mailto URL. <br /><br />"
"android.net.MailTo.getHeaders () "," Retrieve all the parsed email headers from the mailto URL <br /><br />"
"android.net.MailTo.getSubject () "," Retrieve the subject line from the parsed mailto URL. <br /><br />"
"android.net.MailTo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.net.Network.URL () "," Opens the specified URL on this Network, such that all traffic will be sent on this Network. <br /><br />"
"android.net.Network.String () "," Operates the same as InetAddress.getByName except that host resolution is done on this network. <br /><br />"
"android.net.Network.SocketFactory () "," Returns a SocketFactory bound to this network. <br /><br />"
"android.net.Network.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.net.Network.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.net.Network.Socket () "," Binds the specified Socket to this Network. <br /><br />"
"android.net.Network.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.net.Network.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.net.Network.DatagramSocket () "," Binds the specified DatagramSocket to this Network. <br /><br />"
"android.net.Network.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.net.NetworkCapabilities.getLinkUpstreamBandwidthKbps () "," Retrieves the upstream bandwidth for this network in Kbps. <br /><br />"
"android.net.NetworkCapabilities.hasTransport (int transportType) "," Tests for the presence of a transport on this instance. <br /><br />"
"android.net.NetworkCapabilities.hasCapability (int capability) "," Tests for the presence of a capabilitity on this instance. <br /><br />"
"android.net.NetworkCapabilities.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.net.NetworkCapabilities.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.net.NetworkCapabilities.getLinkDownstreamBandwidthKbps () "," Retrieves the downstream bandwidth for this network in Kbps. <br /><br />"
"android.net.NetworkCapabilities.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.net.NetworkCapabilities.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.net.NetworkCapabilities.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.net.NetworkInfo.isRoaming () "," Indicates whether the device is currently roaming on this network. <br /><br />"
"android.net.NetworkInfo.isConnectedOrConnecting () "," Indicates whether network connectivity exists or is in the process of being established. <br /><br />"
"android.net.NetworkInfo.getState () "," Reports the current coarse-grained state of the network. <br /><br />"
"android.net.NetworkInfo.getType () "," Reports the type of network to which the info in this NetworkInfo pertains. <br /><br />"
"android.net.NetworkInfo.isConnected () "," Indicates whether network connectivity exists and it is possible to establish connections and pass data. <br /><br />"
"android.net.NetworkInfo.getSubtype () "," Return a network-type-specific integer describing the subtype of the network. <br /><br />"
"android.net.NetworkInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.net.NetworkInfo.isAvailable () "," Indicates whether network connectivity is possible. <br /><br />"
"android.net.NetworkInfo.getExtraInfo () "," Report the extra information about the network state, if any was provided by the lower networking layers. <br /><br />"
"android.net.NetworkInfo.isFailover () "," Indicates whether the current attempt to connect to the network resulted from the ConnectivityManager trying to fail over to this network following a disconnect from another network. <br /><br />"
"android.net.NetworkInfo.getReason () "," Report the reason an attempt to establish connectivity failed, if one is available. <br /><br />"
"android.net.NetworkInfo.getTypeName () "," Return a human-readable name describe the type of the network, for example 'WIFI' or 'MOBILE'. <br /><br />"
"android.net.NetworkInfo.getSubtypeName () "," Return a human-readable name describing the subtype of the network. <br /><br />"
"android.net.NetworkInfo.getDetailedState () "," Reports the current fine-grained state of the network. <br /><br />"
"android.net.NetworkRequest.Builder.removeCapability (int capability) "," Removes (if found) the given capability from this builder instance. <br /><br />"
"android.net.NetworkRequest.Builder.String () "," Sets the optional bearer specific network specifier. <br /><br />"
"android.net.NetworkRequest.Builder.removeTransportType (int transportType) "," Removes (if found) the given transport from this builder instance. <br /><br />"
"android.net.NetworkRequest.Builder.addCapability (int capability) "," Add the given capability requirement to this builder. <br /><br />"
"android.net.NetworkRequest.Builder.NetworkRequest () "," Build NetworkRequest give the current set of capabilities. <br /><br />"
"android.net.NetworkRequest.Builder.addTransportType (int transportType) "," Adds the given transport requirement to this builder. <br /><br />"
"android.net.NetworkRequest.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.net.NetworkRequest.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.net.NetworkRequest.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.net.NetworkRequest.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.net.NetworkRequest.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.net.nsd.NsdManager.DiscoveryListener.String () "," no description <br /><br />"
"android.net.nsd.NsdManager.DiscoveryListener.NsdServiceInfo () "," no description <br /><br />"
"android.net.nsd.NsdManager.NsdManager.ResolveListener () "," Resolve a discovered service. <br /><br />"
"android.net.nsd.NsdManager.discoverServices (String, int, NsdManager.DiscoveryListener) () "," Stop service discovery initiated with discoverServices(String, int, NsdManager.DiscoveryListener). <br /><br />"
"android.net.nsd.NsdManager.registerService (NsdServiceInfo, int, NsdManager.RegistrationListener) () "," Unregister a service registered through registerService(NsdServiceInfo, int, NsdManager.RegistrationListener). <br /><br />"
"android.net.nsd.NsdManager.NsdManager.RegistrationListener () "," Register a service to be discovered by other services. <br /><br />"
"android.net.nsd.NsdManager.NsdManager.DiscoveryListener () "," Initiate service discovery to browse for instances of a service type. <br /><br />"
"android.net.nsd.NsdManager.RegistrationListener.NsdServiceInfo () "," no description <br /><br />"
"android.net.nsd.NsdManager.ResolveListener.NsdServiceInfo () "," no description <br /><br />"
"android.net.nsd.NsdServiceInfo.String () "," Set the service type <br /><br />"
"android.net.nsd.NsdServiceInfo.getAttributes () "," Retrive attributes as a map of String keys to byte[] values. <br /><br />"
"android.net.nsd.NsdServiceInfo.InetAddress () "," Set the host address <br /><br />"
"android.net.nsd.NsdServiceInfo.Parcel () "," Implement the Parcelable interface <br /><br />"
"android.net.nsd.NsdServiceInfo.setPort (int p) "," Set port number <br /><br />"
"android.net.nsd.NsdServiceInfo.getHost () "," Get the host address. <br /><br />"
"android.net.nsd.NsdServiceInfo.getPort () "," Get port number. <br /><br />"
"android.net.nsd.NsdServiceInfo.getServiceType () "," Get the service type <br /><br />"
"android.net.nsd.NsdServiceInfo.describeContents () "," Implement the Parcelable interface <br /><br />"
"android.net.nsd.NsdServiceInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.net.nsd.NsdServiceInfo.getServiceName () "," Get the service name <br /><br />"
"android.net.Proxy.Context () "," This method was deprecated in API level 11. Use standard java vm proxy values to find the host, port and exclusion list. This call ignores the exclusion list. <br /><br />"
"android.net.Proxy.getDefaultHost () "," This method was deprecated in API level 11. Use standard java vm proxy values to find the host, port and exclusion list. This call ignores the exclusion list and no longer reports only mobile-data apn-based proxy values. <br /><br />"
"android.net.Proxy.getDefaultPort () "," This method was deprecated in API level 11. Use standard java vm proxy values to find the host, port and exclusion list. This call ignores the exclusion list and no longer reports only mobile-data apn-based proxy values. <br /><br />"
"android.net.ProxyInfo.getPacFileUrl () "," Returns the URL of the current PAC script or null if there is no PAC script. <br /><br />"
"android.net.ProxyInfo.getExclusionList () "," When configured to use a Direct Proxy this returns the list of hosts for which the proxy is ignored. <br /><br />"
"android.net.ProxyInfo.getHost () "," When configured to use a Direct Proxy this returns the host of the proxy. <br /><br />"
"android.net.ProxyInfo.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.net.ProxyInfo.getPort () "," When configured to use a Direct Proxy this returns the port of the proxy <br /><br />"
"android.net.ProxyInfo.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.net.ProxyInfo.ProxyInfo () "," Construct a ProxyInfo that will download and run the PAC script at the specified URL. <br /><br />"
"android.net.ProxyInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.net.PskKeyManager.Socket () "," Gets the PSK to use for the provided socket. <br /><br />"
"android.net.PskKeyManager.SSLEngine () "," Gets the PSK to use for the provided engine. <br /><br />"
"android.net.RouteInfo.IpPrefix () "," Retrieves the destination address and prefix length in the form of an IpPrefix. <br /><br />"
"android.net.RouteInfo.InetAddress () "," Determines whether the destination and prefix of this route includes the specified address. <br /><br />"
"android.net.RouteInfo.Parcel () "," Implement the Parcelable interface <br /><br />"
"android.net.RouteInfo.getInterface () "," Retrieves the interface used for this route if specified, else null. <br /><br />"
"android.net.RouteInfo.hashCode () "," Returns a hashcode for this RouteInfo object. <br /><br />"
"android.net.RouteInfo.Object () "," Compares this RouteInfo object against the specified object and indicates if they are equal. <br /><br />"
"android.net.RouteInfo.describeContents () "," Implement the Parcelable interface <br /><br />"
"android.net.RouteInfo.toString () "," Returns a human-readable description of this object. <br /><br />"
"android.net.RouteInfo.isDefaultRoute () "," Indicates if this route is a default route (ie, has no destination specified). <br /><br />"
"android.net.rtp.AudioCodec.String () "," Creates an AudioCodec according to the given configuration. <br /><br />"
"android.net.rtp.AudioCodec.getCodecs () "," Returns system supported audio codecs. <br /><br />"
"android.net.rtp.AudioGroup.setMode (int mode) "," Changes the current mode. <br /><br />"
"android.net.rtp.AudioGroup.AudioStream (int event) "," Sends a DTMF digit to every AudioStream in this group. <br /><br />"
"android.net.rtp.AudioGroup.AudioStream () "," Returns the AudioStreams in this group. <br /><br />"
"android.net.rtp.AudioGroup.getMode () "," Returns the current mode. <br /><br />"
"android.net.rtp.AudioStream.setDtmfType (int type) "," Sets the RTP payload type for dual-tone multi-frequency (DTMF) digits. <br /><br />"
"android.net.rtp.AudioStream.AudioGroup () "," Joins an AudioGroup. <br /><br />"
"android.net.rtp.AudioStream.getDtmfType () "," Returns the RTP payload type for dual-tone multi-frequency (DTMF) digits, or -1 if it is not enabled. <br /><br />"
"android.net.rtp.AudioStream.AudioCodec () "," Sets the AudioCodec. <br /><br />"
"android.net.rtp.RtpStream.InetAddress () "," Associates with a remote host. <br /><br />"
"android.net.rtp.RtpStream.isBusy () "," Returns true if the stream is busy. <br /><br />"
"android.net.rtp.RtpStream.setMode (int mode) "," Changes the current mode. <br /><br />"
"android.net.rtp.RtpStream.getRemoteAddress () "," Returns the network address of the remote host or null if the stream is not associated. <br /><br />"
"android.net.rtp.RtpStream.getLocalPort () "," Returns the network port of the local host. <br /><br />"
"android.net.rtp.RtpStream.release () "," Releases allocated resources. <br /><br />"
"android.net.rtp.RtpStream.getRemotePort () "," Returns the network port of the remote host or -1 if the stream is not associated. <br /><br />"
"android.net.rtp.RtpStream.getMode () "," Returns the current mode. <br /><br />"
"android.net.rtp.RtpStream.getLocalAddress () "," Returns the network address of the local host. <br /><br />"
"android.net.sip.SipAudioCall.String () "," Attaches an incoming call to this call object. <br /><br />"
"android.net.sip.SipAudioCall.Message () "," Sends a DTMF code. <br /><br />"
"android.net.sip.SipAudioCall.answerCall (int timeout) "," Answers a call. <br /><br />"
"android.net.sip.SipAudioCall.close () "," Closes this object. <br /><br />"
"android.net.sip.SipAudioCall.SipAudioCall.Listener () "," Sets the listener to listen to the audio call events. <br /><br />"
"android.net.sip.SipAudioCall.isOnHold () "," Checks if the call is on hold. <br /><br />"
"android.net.sip.SipAudioCall.getPeerProfile () "," Gets the peer's SIP profile. <br /><br />"
"android.net.sip.SipAudioCall.isInCall () "," Checks if the call is established. <br /><br />"
"android.net.sip.SipAudioCall.sendDtmf (int code) "," Sends a DTMF code. <br /><br />"
"android.net.sip.SipAudioCall.SipSession () "," Initiates an audio call to the specified profile. <br /><br />"
"android.net.sip.SipAudioCall.continueCall (int timeout) "," Continues a call that's on hold. <br /><br />"
"android.net.sip.SipAudioCall.getLocalProfile () "," Gets the local SIP profile. <br /><br />"
"android.net.sip.SipAudioCall.toggleMute () "," Toggles mute. <br /><br />"
"android.net.sip.SipAudioCall.setSpeakerMode (boolean speakerMode) "," Puts the device to speaker mode. <br /><br />"
"android.net.sip.SipAudioCall.isMuted () "," Checks if the call is muted. <br /><br />"
"android.net.sip.SipAudioCall.startAudio () "," Starts the audio for the established call. <br /><br />"
"android.net.sip.SipAudioCall.endCall () "," Ends a call. <br /><br />"
"android.net.sip.SipAudioCall.holdCall (int timeout) "," Puts a call on hold. <br /><br />"
"android.net.sip.SipAudioCall.Listener.String () "," Called when an error occurs. <br /><br />"
"android.net.sip.SipAudioCall.Listener.SipProfile () "," Called when a new call comes in. <br /><br />"
"android.net.sip.SipAudioCall.Listener.SipAudioCall () "," Called when a RINGING response is received for the INVITE request sent. <br /><br />"
"android.net.sip.SipErrorCode.toString (int errorCode) "," no description <br /><br />"
"android.net.sip.SipManager.Context () "," Creates a manager instance. <br /><br />"
"android.net.sip.SipManager.SipSession () "," Gets the SipSession that handles the incoming call. <br /><br />"
"android.net.sip.SipManager.String () "," Checks if the SIP service has successfully registered the profile to the SIP provider (specified in the profile) for receiving calls. <br /><br />"
"android.net.sip.SipManager.SipProfile () "," Opens the profile for making generic SIP calls. <br /><br />"
"android.net.sip.SipManager.SipAudioCall () "," Creates a SipAudioCall to take an incoming call. <br /><br />"
"android.net.sip.SipManager.SipRegistrationListener () "," Manually unregisters the profile from the corresponding SIP provider for stop receiving further calls. <br /><br />"
"android.net.sip.SipManager.Intent () "," Checks if the intent is an incoming call broadcast intent. <br /><br />"
"android.net.sip.SipProfile.Builder.String () "," Sets the protocol used to connect to the SIP server. <br /><br />"
"android.net.sip.SipProfile.Builder.setPort (int port) "," Sets the port number of the server. <br /><br />"
"android.net.sip.SipProfile.Builder.setAutoRegistration (boolean flag) "," Sets the auto. <br /><br />"
"android.net.sip.SipProfile.Builder.setSendKeepAlive (boolean flag) "," Sets the send keep-alive flag. <br /><br />"
"android.net.sip.SipProfile.Builder.build () "," Builds and returns the SIP profile object. <br /><br />"
"android.net.sip.SipProfile.getAutoRegistration () "," Gets the flag of 'Auto Registration'. <br /><br />"
"android.net.sip.SipProfile.getPassword () "," Gets the password. <br /><br />"
"android.net.sip.SipProfile.getProtocol () "," Gets the protocol used to connect to the server. <br /><br />"
"android.net.sip.SipProfile.getProxyAddress () "," Gets the network address of the server outbound proxy. <br /><br />"
"android.net.sip.SipProfile.getDisplayName () "," Gets the display name of the user. <br /><br />"
"android.net.sip.SipProfile.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.net.sip.SipProfile.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.net.sip.SipProfile.getProfileName () "," Gets the (user-defined) name of the profile. <br /><br />"
"android.net.sip.SipProfile.getSendKeepAlive () "," Gets the flag of 'Sending keep-alive'. <br /><br />"
"android.net.sip.SipProfile.getUserName () "," Gets the username. <br /><br />"
"android.net.sip.SipProfile.getAuthUserName () "," Gets the username for authentication. <br /><br />"
"android.net.sip.SipProfile.getPort () "," Gets the port number of the SIP server. <br /><br />"
"android.net.sip.SipProfile.getSipDomain () "," Gets the SIP domain. <br /><br />"
"android.net.sip.SipProfile.getUriString () "," Gets the SIP URI string of this profile. <br /><br />"
"android.net.sip.SipRegistrationListener.String () "," Called when the registration failed. <br /><br />"
"android.net.sip.SipSession.Listener.String () "," Called when an INVITE request is received. <br /><br />"
"android.net.sip.SipSession.Listener.SipSession () "," Called when a RINGING response is received for the INVITE request sent <br /><br />"
"android.net.sip.SipSession.State.toString (int state) "," Converts the state to string. <br /><br />"
"android.net.SSLCertificateSocketFactory.KeyManager () "," Sets the KeyManagers to be used for connections made by this factory. <br /><br />"
"android.net.SSLCertificateSocketFactory.session ticket () "," Enables session ticket support on the given socket. <br /><br />"
"android.net.SSLCertificateSocketFactory.SSLSessionCache () "," Returns a new instance of a socket factory with all SSL security checks disabled, using an optional handshake timeout and SSL session cache. <br /><br />"
"android.net.SSLCertificateSocketFactory.Next Protocol Negotiation  (NPN) (byte[][] npnProtocols) "," Sets the Next Protocol Negotiation (NPN) protocols that this peer is interested in. <br /><br />"
"android.net.SSLCertificateSocketFactory.Server Name Indication  (SNI) () "," Turns on Server Name Indication (SNI) on a given socket. <br /><br />"
"android.net.SSLCertificateSocketFactory.InetAddress () "," Creates a new socket which is connected to the remote host specified by the InetAddress host. Warning: Hostname verification is not performed with this method. <br /><br />"
"android.net.SSLCertificateSocketFactory.getInsecure (int, SSLSessionCache) () "," Creates an SSLSocket over the specified socket that is connected to the specified host at the specified port. This method verifies the peer's certificate hostname after connecting (unless created with getInsecure(int, SSLSessionCache)). <br /><br />"
"android.net.SSLCertificateSocketFactory.this webpage () "," This method is deprecated. Use getDefault() along with a HttpsURLConnection instead. The Apache HTTP client is no longer maintained and may be removed in a future release. Please visit this webpage for further details. <br /><br />"
"android.net.SSLCertificateSocketFactory.TrustManager () "," Sets the TrustManagers to be used for connections made by this factory. <br /><br />"
"android.net.SSLCertificateSocketFactory.getDefaultCipherSuites () "," Returns the names of the cipher suites that are enabled by default. <br /><br />"
"android.net.SSLCertificateSocketFactory.createSocket () "," Creates a new socket which is not connected to any remote host. <br /><br />"
"android.net.SSLCertificateSocketFactory.getDefault (int handshakeTimeoutMillis) "," Returns a new socket factory instance with an optional handshake timeout. <br /><br />"
"android.net.SSLCertificateSocketFactory.Next Protocol Negotiation  (NPN) () "," Returns the Next Protocol Negotiation (NPN) protocol selected by client and server, or null if no protocol was negotiated. <br /><br />"
"android.net.SSLCertificateSocketFactory.getSupportedCipherSuites () "," Returns the names of the cipher suites that are supported and could be enabled for an SSL connection. <br /><br />"
"android.net.TrafficStats.getTotalTxBytes () "," Return number of bytes transmitted since device boot. <br /><br />"
"android.net.TrafficStats.incrementOperationCount (int operationCount) "," Increment count of network operations performed under the accounting tag currently active on the calling thread. <br /><br />"
"android.net.TrafficStats.getUidRxBytes (int uid) "," Return number of bytes received by the given UID since device boot. <br /><br />"
"android.net.TrafficStats.getMobileTxPackets () "," Return number of packets transmitted across mobile networks since device boot. <br /><br />"
"android.net.TrafficStats.getUidTxPackets (int uid) "," Return number of packets transmitted by the given UID since device boot. <br /><br />"
"android.net.TrafficStats.Socket () "," Remove any statistics parameters from the given Socket. <br /><br />"
"android.net.TrafficStats.getMobileRxBytes () "," Return number of bytes received across mobile networks since device boot. <br /><br />"
"android.net.TrafficStats.getMobileTxBytes () "," Return number of bytes transmitted across mobile networks since device boot. <br /><br />"
"android.net.TrafficStats.Socket (int tag) "," Set active tag to use when accounting Socket traffic originating from the current thread. <br /><br />"
"android.net.TrafficStats.getTotalTxPackets () "," Return number of packets transmitted since device boot. <br /><br />"
"android.net.TrafficStats.getUidRxPackets (int uid) "," Return number of packets received by the given UID since device boot. <br /><br />"
"android.net.TrafficStats.UNSUPPORTED (int uid) "," This method was deprecated in API level 18. Starting in JELLY_BEAN_MR2, transport layer statistics are no longer available, and will always return UNSUPPORTED. <br /><br />"
"android.net.TrafficStats.incrementOperationCount (int tag, int operationCount) "," Increment count of network operations performed under the given accounting tag. <br /><br />"
"android.net.TrafficStats.getUidTxBytes (int uid) "," Return number of bytes transmitted by the given UID since device boot. <br /><br />"
"android.net.TrafficStats.getTotalRxBytes () "," Return number of bytes received since device boot. <br /><br />"
"android.net.TrafficStats.getMobileRxPackets () "," Return number of packets received across mobile networks since device boot. <br /><br />"
"android.net.TrafficStats.getTotalRxPackets () "," Return number of packets received since device boot. <br /><br />"
"android.net.Uri.Builder.String () "," Sets the scheme. <br /><br />"
"android.net.Uri.Builder.clearQuery () "," Clears the the previously set query. <br /><br />"
"android.net.Uri.Builder.build () "," Constructs a Uri with the current attributes. <br /><br />"
"android.net.Uri.Builder.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.net.Uri.getEncodedPath () "," Gets the encoded path. <br /><br />"
"android.net.Uri.getLastPathSegment () "," Gets the decoded last segment in the path. <br /><br />"
"android.net.Uri.getUserInfo () "," Gets the decoded user information from the authority. <br /><br />"
"android.net.Uri.getEncodedSchemeSpecificPart () "," Gets the scheme-specific part of this URI, i.e.&nbsp;everything between the scheme separator ':' and the fragment separator '#'. <br /><br />"
"android.net.Uri.getScheme () "," Gets the scheme of this URI. <br /><br />"
"android.net.Uri.toString () "," Returns the encoded string representation of this URI. <br /><br />"
"android.net.Uri.isAbsolute () "," Returns true if this URI is absolute, i.e.&nbsp;if it contains an explicit scheme. <br /><br />"
"android.net.Uri.getFragment () "," Gets the decoded fragment part of this URI, everything after the '#'. <br /><br />"
"android.net.Uri.isOpaque () "," Returns true if this URI is opaque like 'mailto:nobody@google.com'. <br /><br />"
"android.net.Uri.getQuery () "," Gets the decoded query component from this URI. <br /><br />"
"android.net.Uri.getPort () "," Gets the port from the authority for this URI. <br /><br />"
"android.net.Uri.buildUpon () "," Constructs a new builder, copying the attributes from this Uri. <br /><br />"
"android.net.Uri.getSchemeSpecificPart () "," Gets the scheme-specific part of this URI, i.e.&nbsp;everything between the scheme separator ':' and the fragment separator '#'. <br /><br />"
"android.net.Uri.getAuthority () "," Gets the decoded authority part of this URI. <br /><br />"
"android.net.Uri.isHierarchical () "," Returns true if this URI is hierarchical like 'http://google.com'. <br /><br />"
"android.net.Uri.Uri () "," Writes a Uri to a Parcel. <br /><br />"
"android.net.Uri.normalizeScheme () "," Return an equivalent URI with a lowercase scheme component. <br /><br />"
"android.net.Uri.isRelative () "," Returns true if this URI is relative, i.e.&nbsp;if it doesn't contain an explicit scheme. <br /><br />"
"android.net.Uri.String () "," Creates a new Uri by appending an already-encoded path segment to a base Uri. <br /><br />"
"android.net.Uri.getQueryParameterNames () "," Returns a set of the unique names of all query parameters. <br /><br />"
"android.net.Uri.getPath () "," Gets the decoded path. <br /><br />"
"android.net.Uri.getPathSegments () "," Gets the decoded path segments. <br /><br />"
"android.net.Uri.getEncodedUserInfo () "," Gets the encoded user information from the authority. <br /><br />"
"android.net.Uri.Object () "," Compares this Uri to another object for equality. <br /><br />"
"android.net.Uri.equals (Object) () "," Hashes the encoded string represention of this Uri consistently with equals(Object). <br /><br />"
"android.net.Uri.File () "," Creates a Uri from a file. <br /><br />"
"android.net.Uri.getHost () "," Gets the encoded host from the authority for this URI. <br /><br />"
"android.net.Uri.getEncodedFragment () "," Gets the encoded fragment part of this URI, everything after the '#'. <br /><br />"
"android.net.Uri.getEncodedQuery () "," Gets the encoded query component from this URI. <br /><br />"
"android.net.Uri.getEncodedAuthority () "," Gets the encoded authority part of this URI. <br /><br />"
"android.net.UrlQuerySanitizer.getUrlAndSpaceLegal () "," Return a value sanitizer that allows all the characters used by encoded URLs and allows spaces, which are not technically legal in encoded URLs, but commonly appear anyway. <br /><br />"
"android.net.UrlQuerySanitizer.getAllowUnregisteredParamaters () "," Get whether or not unregistered parameters are allowed. <br /><br />"
"android.net.UrlQuerySanitizer.String () "," Unescape an escaped string. <br /><br />"
"android.net.UrlQuerySanitizer.getAmpAndSpaceLegal () "," Return a value sanitizer that does not allow any special characters except ampersand ('&amp;') and space (' '). <br /><br />"
"android.net.UrlQuerySanitizer.getAmpLegal () "," Return a value sanitizer that does not allow any special characters except ampersand ('&amp;'). <br /><br />"
"android.net.UrlQuerySanitizer.getAllButNulLegal () "," Return a value sanitizer that allows everything except Nul ('\0') characters. <br /><br />"
"android.net.UrlQuerySanitizer.UrlQuerySanitizer.ValueSanitizer () "," Set the value sanitizer used when processing unregistered parameter values. <br /><br />"
"android.net.UrlQuerySanitizer.setAllowUnregisteredParamaters (boolean allowUnregisteredParamaters) "," Set whether or not unregistered parameters are allowed. <br /><br />"
"android.net.UrlQuerySanitizer.getSpaceLegal () "," Return a value sanitizer that does not allow any special characters except space (' '). <br /><br />"
"android.net.UrlQuerySanitizer.getPreferFirstRepeatedParameter () "," Get whether or not the first occurrence of a repeated parameter is preferred. <br /><br />"
"android.net.UrlQuerySanitizer.getAllButNulAndAngleBracketsLegal () "," Return a value sanitizer that allows any special characters except angle brackets ('&lt;' and '&gt;') and Nul ('\0'). <br /><br />"
"android.net.UrlQuerySanitizer.getUrlLegal () "," Return a value sanitizer that allows all the characters used by encoded URLs. <br /><br />"
"android.net.UrlQuerySanitizer.getAllIllegal () "," Return a value sanitizer that does not allow any special characters, and also does not allow script URLs. <br /><br />"
"android.net.UrlQuerySanitizer.getParameterList () "," An array list of all of the parameter value pairs in the sanitized query, in the order they appeared in the query. <br /><br />"
"android.net.UrlQuerySanitizer.getAllButWhitespaceLegal () "," Return a value sanitizer that allows everything except Nul ('\0') characters, space (' '), and other whitespace characters. <br /><br />"
"android.net.UrlQuerySanitizer.getUnregisteredParameterValueSanitizer () "," Get the current value sanitizer used when processing unregistered parameter values. <br /><br />"
"android.net.UrlQuerySanitizer.getParameterSet () "," Get a set of all of the parameters found in the sanitized query. <br /><br />"
"android.net.UrlQuerySanitizer.setPreferFirstRepeatedParameter (boolean preferFirstRepeatedParameter) "," Set whether or not the first occurrence of a repeated parameter is preferred. <br /><br />"
"android.net.UrlQuerySanitizer.IllegalCharacterValueSanitizer.String () "," Sanitize a value. <br /><br />"
"android.net.UrlQuerySanitizer.ValueSanitizer.String () "," Sanitize an unencoded value. <br /><br />"
"android.net.VpnService.Builder.String () "," Set the name of this session. <br /><br />"
"android.net.VpnService.Builder.Network[] () "," Sets the underlying networks used by the VPN for its upstream connections. <br /><br />"
"android.net.VpnService.Builder.setBlocking (boolean blocking) "," Sets the VPN interface's file descriptor to be in blocking/non-blocking mode. <br /><br />"
"android.net.VpnService.Builder.allowBypass () "," Allows all apps to bypass this VPN connection. <br /><br />"
"android.net.VpnService.Builder.setMtu (int mtu) "," Set the maximum transmission unit (MTU) of the VPN interface. <br /><br />"
"android.net.VpnService.Builder.InetAddress () "," Add a network route to the VPN interface. <br /><br />"
"android.net.VpnService.Builder.establish () "," Create a VPN interface using the parameters supplied to this builder. <br /><br />"
"android.net.VpnService.Builder.PendingIntent () "," Set the PendingIntent to an activity for users to configure the VPN connection. <br /><br />"
"android.net.VpnService.Builder.allowFamily (int family) "," Allows traffic from the specified address family. <br /><br />"
"android.net.VpnService.Context () "," Prepare to establish a VPN connection. <br /><br />"
"android.net.VpnService.Network[] () "," Sets the underlying networks used by the VPN for its upstream connections. <br /><br />"
"android.net.VpnService.protect (int socket) "," Protect a socket from VPN connections. <br /><br />"
"android.net.VpnService.onRevoke () "," Invoked when the application is revoked. <br /><br />"
"android.net.VpnService.Socket () "," Convenience method to protect a Socket from VPN connections. <br /><br />"
"android.net.VpnService.DatagramSocket () "," Convenience method to protect a DatagramSocket from VPN connections. <br /><br />"
"android.net.VpnService.Intent () "," Return the communication interface to the service. <br /><br />"
"android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceInfo.String () "," Create a Bonjour service information object. <br /><br />"
"android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest.String () "," Create a service discovery request to get the TXT data from the specified Bonjour service. <br /><br />"
"android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest.newInstance () "," Create a service discovery request to search all Bonjour services. <br /><br />"
"android.net.wifi.p2p.nsd.WifiP2pServiceInfo.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.net.wifi.p2p.nsd.WifiP2pServiceInfo.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.net.wifi.p2p.nsd.WifiP2pServiceRequest.String () "," Create a service discovery request. <br /><br />"
"android.net.wifi.p2p.nsd.WifiP2pServiceRequest.newInstance (int protocolType) "," Create a service discovery request. <br /><br />"
"android.net.wifi.p2p.nsd.WifiP2pServiceRequest.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.net.wifi.p2p.nsd.WifiP2pServiceRequest.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.net.wifi.p2p.nsd.WifiP2pUpnpServiceInfo.String () "," Create UPnP service information object. <br /><br />"
"android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest.String () "," Create a service discovery request to search specified UPnP services. <br /><br />"
"android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest.newInstance () "," Create a service discovery request to search all UPnP services. <br /><br />"
"android.net.wifi.p2p.WifiP2pConfig.Parcel () "," Implement the Parcelable interface <br /><br />"
"android.net.wifi.p2p.WifiP2pConfig.describeContents () "," Implement the Parcelable interface <br /><br />"
"android.net.wifi.p2p.WifiP2pConfig.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.net.wifi.p2p.WifiP2pDevice.isServiceDiscoveryCapable () "," Returns true if the device is capable of service discovery <br /><br />"
"android.net.wifi.p2p.WifiP2pDevice.isGroupOwner () "," Returns true if the device is a group owner <br /><br />"
"android.net.wifi.p2p.WifiP2pDevice.wpsPbcSupported () "," Returns true if WPS push button configuration is supported <br /><br />"
"android.net.wifi.p2p.WifiP2pDevice.Parcel () "," Implement the Parcelable interface <br /><br />"
"android.net.wifi.p2p.WifiP2pDevice.wpsDisplaySupported () "," Returns true if WPS display configuration is supported <br /><br />"
"android.net.wifi.p2p.WifiP2pDevice.wpsKeypadSupported () "," Returns true if WPS keypad configuration is supported <br /><br />"
"android.net.wifi.p2p.WifiP2pDevice.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.net.wifi.p2p.WifiP2pDevice.describeContents () "," Implement the Parcelable interface <br /><br />"
"android.net.wifi.p2p.WifiP2pDevice.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.net.wifi.p2p.WifiP2pDeviceList.String () "," Fetch a device from the list <br /><br />"
"android.net.wifi.p2p.WifiP2pDeviceList.Parcel () "," Implement the Parcelable interface <br /><br />"
"android.net.wifi.p2p.WifiP2pDeviceList.describeContents () "," Implement the Parcelable interface <br /><br />"
"android.net.wifi.p2p.WifiP2pDeviceList.getDeviceList () "," Get the list of devices <br /><br />"
"android.net.wifi.p2p.WifiP2pDeviceList.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.net.wifi.p2p.WifiP2pGroup.isGroupOwner () "," Check whether this device is the group owner of the created p2p group <br /><br />"
"android.net.wifi.p2p.WifiP2pGroup.WifiP2pDevice () "," Get the details of the group owner as a WifiP2pDevice object <br /><br />"
"android.net.wifi.p2p.WifiP2pGroup.Parcel () "," Implement the Parcelable interface <br /><br />"
"android.net.wifi.p2p.WifiP2pGroup.getInterface () "," Get the interface name on which the group is created <br /><br />"
"android.net.wifi.p2p.WifiP2pGroup.getNetworkName () "," Get the network name (SSID) of the group. <br /><br />"
"android.net.wifi.p2p.WifiP2pGroup.getPassphrase () "," Get the passphrase of the group. <br /><br />"
"android.net.wifi.p2p.WifiP2pGroup.describeContents () "," Implement the Parcelable interface <br /><br />"
"android.net.wifi.p2p.WifiP2pGroup.getClientList () "," Get the list of clients currently part of the p2p group <br /><br />"
"android.net.wifi.p2p.WifiP2pGroup.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.net.wifi.p2p.WifiP2pInfo.Parcel () "," Implement the Parcelable interface <br /><br />"
"android.net.wifi.p2p.WifiP2pInfo.describeContents () "," Implement the Parcelable interface <br /><br />"
"android.net.wifi.p2p.WifiP2pInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.net.wifi.p2p.WifiP2pManager.ActionListener.onSuccess () "," The operation succeeded <br /><br />"
"android.net.wifi.p2p.WifiP2pManager.ActionListener.onFailure (int reason) "," The operation failed <br /><br />"
"android.net.wifi.p2p.WifiP2pManager.ChannelListener.onChannelDisconnected () "," The channel to the framework has been disconnected. <br /><br />"
"android.net.wifi.p2p.WifiP2pManager.ConnectionInfoListener.WifiP2pInfo () "," The requested connection info is available <br /><br />"
"android.net.wifi.p2p.WifiP2pManager.DnsSdServiceResponseListener.WifiP2pDevice () "," The requested Bonjour service response is available. <br /><br />"
"android.net.wifi.p2p.WifiP2pManager.DnsSdTxtRecordListener.WifiP2pDevice () "," The requested Bonjour service response is available. <br /><br />"
"android.net.wifi.p2p.WifiP2pManager.GroupInfoListener.WifiP2pGroup () "," The requested p2p group info is available <br /><br />"
"android.net.wifi.p2p.WifiP2pManager.WifiP2pManager.ServiceResponseListener () "," Register a callback to be invoked on receiving service discovery response. <br /><br />"
"android.net.wifi.p2p.WifiP2pManager.WifiP2pManager.ActionListener () "," Stop an ongoing peer discovery  The function call immediately returns after sending a stop request to the framework. <br /><br />"
"android.net.wifi.p2p.WifiP2pManager.WifiP2pManager.PeerListListener () "," Request the current list of peers. <br /><br />"
"android.net.wifi.p2p.WifiP2pManager.addServiceRequest (WifiP2pManager.Channel, WifiP2pServiceRequest, WifiP2pManager.ActionListener) () "," Remove a specified service discovery request added with addServiceRequest(WifiP2pManager.Channel, WifiP2pServiceRequest, WifiP2pManager.ActionListener)  The function call immediately returns after sending a request to remove service discovery request to the framework. <br /><br />"
"android.net.wifi.p2p.WifiP2pManager.WifiP2pManager.UpnpServiceResponseListener () "," Register a callback to be invoked on receiving upnp service discovery response. <br /><br />"
"android.net.wifi.p2p.WifiP2pManager.WifiP2pManager.ChannelListener () "," Registers the application with the Wi-Fi framework. <br /><br />"
"android.net.wifi.p2p.WifiP2pManager.addLocalService (WifiP2pManager.Channel, WifiP2pServiceInfo, WifiP2pManager.ActionListener) () "," Remove a registered local service added with addLocalService(WifiP2pManager.Channel, WifiP2pServiceInfo, WifiP2pManager.ActionListener)  The function call immediately returns after sending a request to remove a local service to the framework. <br /><br />"
"android.net.wifi.p2p.WifiP2pManager.WifiP2pManager.DnsSdTxtRecordListener () "," Register a callback to be invoked on receiving Bonjour service discovery response. <br /><br />"
"android.net.wifi.p2p.WifiP2pManager.WifiP2pManager.GroupInfoListener () "," Request p2p group info. <br /><br />"
"android.net.wifi.p2p.WifiP2pManager.WifiP2pManager.ConnectionInfoListener () "," Request device connection info. <br /><br />"
"android.net.wifi.p2p.WifiP2pManager.PeerListListener.WifiP2pDeviceList () "," The requested peer list is available <br /><br />"
"android.net.wifi.p2p.WifiP2pManager.ServiceResponseListener.WifiP2pDevice () "," The requested service response is available. <br /><br />"
"android.net.wifi.p2p.WifiP2pManager.UpnpServiceResponseListener.WifiP2pDevice () "," The requested upnp service response is available. <br /><br />"
"android.net.wifi.ScanResult.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.net.wifi.SupplicantState.String () "," no description <br /><br />"
"android.net.wifi.SupplicantState.SupplicantState () "," Returns true if the supplicant state is valid and false otherwise. <br /><br />"
"android.net.wifi.SupplicantState.values () "," no description <br /><br />"
"android.net.wifi.WifiConfiguration.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.net.wifi.WifiEnterpriseConfig.getEapMethod () "," Get the eap method. <br /><br />"
"android.net.wifi.WifiEnterpriseConfig.setPhase2Method (int phase2Method) "," Set Phase 2 authentication method. <br /><br />"
"android.net.wifi.WifiEnterpriseConfig.String () "," Set subject match. <br /><br />"
"android.net.wifi.WifiEnterpriseConfig.getPhase2Method () "," Get the phase 2 authentication method. <br /><br />"
"android.net.wifi.WifiEnterpriseConfig.getPassword () "," Get the password. <br /><br />"
"android.net.wifi.WifiEnterpriseConfig.X509Certificate () "," Specify a private key and client certificate for client authorization. <br /><br />"
"android.net.wifi.WifiEnterpriseConfig.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.net.wifi.WifiEnterpriseConfig.getClientCertificate () "," Get client certificate <br /><br />"
"android.net.wifi.WifiEnterpriseConfig.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.net.wifi.WifiEnterpriseConfig.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.net.wifi.WifiEnterpriseConfig.getIdentity () "," Get the identity <br /><br />"
"android.net.wifi.WifiEnterpriseConfig.getAnonymousIdentity () "," Get the anonymous identity <br /><br />"
"android.net.wifi.WifiEnterpriseConfig.setEapMethod (int eapMethod) "," Set the EAP authentication method. <br /><br />"
"android.net.wifi.WifiEnterpriseConfig.getCaCertificate () "," Get CA certificate <br /><br />"
"android.net.wifi.WifiEnterpriseConfig.getSubjectMatch () "," Get subject match <br /><br />"
"android.net.wifi.WifiInfo.getMacAddress () "," no description <br /><br />"
"android.net.wifi.WifiInfo.getRssi () "," Returns the received signal strength indicator of the current 802.11 network, in dBm. <br /><br />"
"android.net.wifi.WifiInfo.SupplicantState () "," Return the detailed state of the supplicant's negotiation with an access point, in the form of a SupplicantState object. <br /><br />"
"android.net.wifi.WifiInfo.getSSID () "," Returns the service set identifier (SSID) of the current 802.11 network. <br /><br />"
"android.net.wifi.WifiInfo.getIpAddress () "," no description <br /><br />"
"android.net.wifi.WifiInfo.getHiddenSSID () "," no description <br /><br />"
"android.net.wifi.WifiInfo.getNetworkId () "," Each configured network has a unique small integer ID, used to identify the network when performing operations on the supplicant. <br /><br />"
"android.net.wifi.WifiInfo.LINK_SPEED_UNITS () "," Returns the current link speed in LINK_SPEED_UNITS. <br /><br />"
"android.net.wifi.WifiInfo.getBSSID () "," Return the basic service set identifier (BSSID) of the current access point. <br /><br />"
"android.net.wifi.WifiInfo.FREQUENCY_UNITS () "," Returns the current frequency in FREQUENCY_UNITS. <br /><br />"
"android.net.wifi.WifiInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.net.wifi.WifiManager.getConfiguredNetworks () "," Return a list of all the networks configured in the supplicant. <br /><br />"
"android.net.wifi.WifiManager.reassociate () "," Reconnect to the currently active access point, even if we are already connected. <br /><br />"
"android.net.wifi.WifiManager.getConnectionInfo () "," Return dynamic information about the current Wi-Fi connection, if any is active. <br /><br />"
"android.net.wifi.WifiManager.WifiManager.WpsCallback () "," Start Wi-fi Protected Setup <br /><br />"
"android.net.wifi.WifiManager.startScan () "," Request a scan for access points. <br /><br />"
"android.net.wifi.WifiManager.setWifiEnabled (boolean enabled) "," Enable or disable Wi-Fi. <br /><br />"
"android.net.wifi.WifiManager.isDeviceToApRttSupported () "," no description <br /><br />"
"android.net.wifi.WifiManager.disableNetwork (int netId) "," Disable a configured network. <br /><br />"
"android.net.wifi.WifiManager.WifiConfiguration () "," Update the network description of an existing configured network. <br /><br />"
"android.net.wifi.WifiManager.enableNetwork (int netId, boolean disableOthers) "," Allow a previously configured network to be associated with. <br /><br />"
"android.net.wifi.WifiManager.isEnhancedPowerReportingSupported () "," no description <br /><br />"
"android.net.wifi.WifiManager.calculateSignalLevel (int rssi, int numLevels) "," Calculates the level of the signal. <br /><br />"
"android.net.wifi.WifiManager.isWifiEnabled () "," Return whether Wi-Fi is enabled or disabled. <br /><br />"
"android.net.wifi.WifiManager.isScanAlwaysAvailable () "," Check if scanning is always available. <br /><br />"
"android.net.wifi.WifiManager.setTdlsEnabled (InetAddress, boolean) () "," Similar to setTdlsEnabled(InetAddress, boolean), except this version allows you to specify remote endpoint with a MAC address. <br /><br />"
"android.net.wifi.WifiManager.getWifiState () "," Gets the Wi-Fi enabled state. <br /><br />"
"android.net.wifi.WifiManager.reconnect () "," Reconnect to the currently active access point, if we are currently disconnected. <br /><br />"
"android.net.wifi.WifiManager.isTdlsSupported () "," no description <br /><br />"
"android.net.wifi.WifiManager.compareSignalLevel (int rssiA, int rssiB) "," Compares two signal strengths. <br /><br />"
"android.net.wifi.WifiManager.disconnect () "," Disassociate from the currently active access point. <br /><br />"
"android.net.wifi.WifiManager.String () "," Creates a new WifiLock. <br /><br />"
"android.net.wifi.WifiManager.getScanResults () "," Return the results of the latest access point scan. <br /><br />"
"android.net.wifi.WifiManager.getDhcpInfo () "," Return the DHCP-assigned addresses from the last successful DHCP request, if any. <br /><br />"
"android.net.wifi.WifiManager.InetAddress () "," Enable/Disable TDLS on a specific local route. <br /><br />"
"android.net.wifi.WifiManager.isPreferredNetworkOffloadSupported () "," no description <br /><br />"
"android.net.wifi.WifiManager.isP2pSupported () "," no description <br /><br />"
"android.net.wifi.WifiManager.pingSupplicant () "," Check that the supplicant daemon is responding to requests. <br /><br />"
"android.net.wifi.WifiManager.saveConfiguration () "," Tell the supplicant to persist the current list of configured networks. <br /><br />"
"android.net.wifi.WifiManager.is5GHzBandSupported () "," no description <br /><br />"
"android.net.wifi.WifiManager.removeNetwork (int netId) "," Remove the specified network from the list of configured networks. <br /><br />"
"android.net.wifi.WifiManager.MulticastLock.isHeld () "," Checks whether this MulticastLock is currently held. <br /><br />"
"android.net.wifi.WifiManager.MulticastLock.release () () "," Locks Wifi Multicast on until release() is called. <br /><br />"
"android.net.wifi.WifiManager.MulticastLock.setReferenceCounted (boolean refCounted) "," Controls whether this is a reference-counted or non-reference- counted MulticastLock. <br /><br />"
"android.net.wifi.WifiManager.MulticastLock.release () "," Unlocks Wifi Multicast, restoring the filter of packets not addressed specifically to this device and saving power. <br /><br />"
"android.net.wifi.WifiManager.MulticastLock.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.net.wifi.WifiManager.WifiLock.isHeld () "," Checks whether this WifiLock is currently held. <br /><br />"
"android.net.wifi.WifiManager.WifiLock.release () () "," Locks the Wi-Fi radio on until release() is called. <br /><br />"
"android.net.wifi.WifiManager.WifiLock.WorkSource () "," no description <br /><br />"
"android.net.wifi.WifiManager.WifiLock.setReferenceCounted (boolean refCounted) "," Controls whether this is a reference-counted or non-reference-counted WifiLock. <br /><br />"
"android.net.wifi.WifiManager.WifiLock.release () "," Unlocks the Wi-Fi radio, allowing it to turn off when the device is idle. <br /><br />"
"android.net.wifi.WifiManager.WifiLock.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.net.wifi.WifiManager.WpsCallback.String () "," WPS start succeeded <br /><br />"
"android.net.wifi.WifiManager.WpsCallback.onFailed (int reason) "," WPS operation failed <br /><br />"
"android.net.wifi.WifiManager.WpsCallback.onSucceeded () "," WPS operation completed succesfully <br /><br />"
"android.net.wifi.WpsInfo.Parcel () "," Implement the Parcelable interface <br /><br />"
"android.net.wifi.WpsInfo.describeContents () "," Implement the Parcelable interface <br /><br />"
"android.net.wifi.WpsInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.nfc.cardemulation.CardEmulation.String () "," Removes a previously registered list of AIDs for the specified category for the service provided. <br /><br />"
"android.nfc.cardemulation.CardEmulation.supportsAidPrefixRegistration () "," Some devices may allow an application to register all AIDs that starts with a certain prefix, e.g. <br /><br />"
"android.nfc.cardemulation.CardEmulation.ComponentName () "," Allows a foreground application to specify which card emulation service should be preferred while a specific Activity is in the foreground. <br /><br />"
"android.nfc.cardemulation.CardEmulation.Activity () "," Unsets the preferred service for the specified Activity. <br /><br />"
"android.nfc.cardemulation.CardEmulation.NfcAdapter () "," Helper to get an instance of this class. <br /><br />"
"android.nfc.cardemulation.HostApduService.onDeactivated (int reason) "," This method will be called in two possible scenarios: The NFC link has been deactivated or lost  A different AID has been selected and was resolved to a different service component <br /><br />"
"android.nfc.cardemulation.HostApduService.notifyUnhandled () "," Calling this method allows the service to tell the OS that it won't be able to complete this transaction - for example, because it requires data connectivity that is not present at that moment. <br /><br />"
"android.nfc.cardemulation.HostApduService.Bundle () "," This method will be called when a command APDU has been received from a remote device. <br /><br />"
"android.nfc.cardemulation.HostApduService.Intent () "," Return the communication channel to the service. <br /><br />"
"android.nfc.cardemulation.HostApduService.sendResponseApdu (byte[] responseApdu) "," Sends a response APDU back to the remote device. <br /><br />"
"android.nfc.cardemulation.OffHostApduService.Intent () "," The Android platform itself will not bind to this service, but merely uses its declaration to keep track of what AIDs the service is interested in. <br /><br />"
"android.nfc.NdefMessage.getRecords () "," Get the NDEF Records inside this NDEF Message. <br /><br />"
"android.nfc.NdefMessage.toByteArray () "," Return this NDEF Message as raw bytes. <br /><br />"
"android.nfc.NdefMessage.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.nfc.NdefMessage.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.nfc.NdefMessage.toByteArray () () "," Return the length of this NDEF Message if it is written to a byte array with toByteArray(). <br /><br />"
"android.nfc.NdefMessage.Object () "," Returns true if the specified NDEF Message contains identical NDEF Records. <br /><br />"
"android.nfc.NdefMessage.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.nfc.NdefMessage.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.nfc.NdefRecord.Uri () "," Create a new NDEF Record containing a URI. <br /><br />"
"android.nfc.NdefRecord.String () "," Create a new NDEF Record containing a URI. <br /><br />"
"android.nfc.NdefRecord.getTnf () "," Returns the 3-bit TNF. <br /><br />"
"android.nfc.NdefRecord.getType () "," Returns the variable length Type field. <br /><br />"
"android.nfc.NdefRecord.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.nfc.NdefRecord.Object () "," Returns true if the specified NDEF Record contains identical tnf, type, id and payload fields. <br /><br />"
"android.nfc.NdefRecord.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.nfc.NdefRecord.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.nfc.NdefRecord.toMimeType () "," Map this record to a MIME type, or return null if it cannot be mapped. <br /><br />"
"android.nfc.NdefRecord.getPayload () "," Returns the variable length payload. <br /><br />"
"android.nfc.NdefRecord.toUri () "," Map this record to a URI, or return null if it cannot be mapped. <br /><br />"
"android.nfc.NdefRecord.getId () "," Returns the variable length ID. <br /><br />"
"android.nfc.NdefRecord.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.nfc.NdefRecord.toByteArray () () "," This method was deprecated in API level 16. use toByteArray() instead <br /><br />"
"android.nfc.NfcAdapter.CreateBeamUrisCallback.NfcEvent () "," no description <br /><br />"
"android.nfc.NfcAdapter.CreateNdefMessageCallback.NdefMessage () "," Called to provide a NdefMessage to push. <br /><br />"
"android.nfc.NfcAdapter.NdefMessage () "," Set a static NdefMessage to send using Android Beam (TM). <br /><br />"
"android.nfc.NfcAdapter.Uri () "," Set a callback that will dynamically generate one or more Uris to send using Android Beam (TM). <br /><br />"
"android.nfc.NfcAdapter.Context () "," Helper to get the default NFC Adapter. <br /><br />"
"android.nfc.NfcAdapter.isEnabled () "," Return true if this NFC Adapter has any features enabled. <br /><br />"
"android.nfc.NfcAdapter.String[][] () "," Enable foreground dispatch to the given Activity. <br /><br />"
"android.nfc.NfcAdapter.Activity... () "," Set a callback on successful Android Beam (TM). <br /><br />"
"android.nfc.NfcAdapter.Bundle () "," Limit the NFC controller to reader mode while this Activity is in the foreground. <br /><br />"
"android.nfc.NfcAdapter.Activity () "," Manually invoke Android Beam to share data. <br /><br />"
"android.nfc.NfcAdapter.isNdefPushEnabled () "," Return true if the NDEF Push (Android Beam) feature is enabled. <br /><br />"
"android.nfc.NfcAdapter.setNdefPushMessage (NdefMessage, Activity, Activity...) () "," This method was deprecated in API level 14. use setNdefPushMessage(NdefMessage, Activity, Activity...) instead <br /><br />"
"android.nfc.NfcAdapter.OnNdefPushCompleteCallback.NfcEvent () "," Called on successful NDEF push. <br /><br />"
"android.nfc.NfcAdapter.ReaderCallback.Tag () "," no description <br /><br />"
"android.nfc.NfcManager.getDefaultAdapter () "," Get the default NFC Adapter for this device. <br /><br />"
"android.nfc.Tag.getId () "," Get the Tag Identifier (if it has one). <br /><br />"
"android.nfc.Tag.getTechList () "," Get the technologies available in this tag, as fully qualified class names. <br /><br />"
"android.nfc.Tag.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.nfc.Tag.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.nfc.Tag.toString () "," Human-readable description of the tag, for debugging. <br /><br />"
"android.nfc.tech.IsoDep.transceive (byte[]) (int timeout) "," Set the timeout of transceive(byte[]) in milliseconds. <br /><br />"
"android.nfc.tech.IsoDep.TagTechnology () "," Get the Tag object backing this TagTechnology object. <br /><br />"
"android.nfc.tech.IsoDep.NfcB () "," Return the higher layer response bytes for NfcB tags. <br /><br />"
"android.nfc.tech.IsoDep.IsoDep () "," Get an instance of IsoDep for the given tag. <br /><br />"
"android.nfc.tech.IsoDep.isConnected () "," Helper to indicate if I/O operations should be possible. <br /><br />"
"android.nfc.tech.IsoDep.isExtendedLengthApduSupported () "," Standard APDUs have a 1-byte length field, allowing a maximum of 255 payload bytes, which results in a maximum APDU length of 261 bytes. <br /><br />"
"android.nfc.tech.IsoDep.NfcA () "," Return the ISO-DEP historical bytes for NfcA tags. <br /><br />"
"android.nfc.tech.IsoDep.transceive (byte[]) () "," Get the current timeout for transceive(byte[]) in milliseconds. <br /><br />"
"android.nfc.tech.IsoDep.transceive (byte[] data) "," Send raw ISO-DEP data to the tag and receive the response. <br /><br />"
"android.nfc.tech.MifareClassic.transceive (byte[]) (int timeout) "," Set the transceive(byte[]) timeout in milliseconds. <br /><br />"
"android.nfc.tech.MifareClassic.TagTechnology () "," Get the Tag object backing this TagTechnology object. <br /><br />"
"android.nfc.tech.MifareClassic.MifareClassic () "," Get an instance of MifareClassic for the given tag. <br /><br />"
"android.nfc.tech.MifareClassic.increment (int blockIndex, int value) "," Increment a value block, storing the result in the temporary block on the tag. <br /><br />"
"android.nfc.tech.MifareClassic.readBlock (int blockIndex) "," Read 16-byte block. <br /><br />"
"android.nfc.tech.MifareClassic.authenticateSectorWithKeyB (int sectorIndex, byte[] key) "," Authenticate a sector with key B. <br /><br />"
"android.nfc.tech.MifareClassic.getType () "," Return the type of this MIFARE Classic compatible tag. <br /><br />"
"android.nfc.tech.MifareClassic.isConnected () "," Helper to indicate if I/O operations should be possible. <br /><br />"
"android.nfc.tech.MifareClassic.getBlockCountInSector (int sectorIndex) "," Return the number of blocks in the given sector. <br /><br />"
"android.nfc.tech.MifareClassic.writeBlock (int blockIndex, byte[] data) "," Write 16-byte block. <br /><br />"
"android.nfc.tech.MifareClassic.transceive (byte[] data) "," Send raw NfcA data to a tag and receive the response. <br /><br />"
"android.nfc.tech.MifareClassic.getSectorCount () "," Return the number of MIFARE Classic sectors. <br /><br />"
"android.nfc.tech.MifareClassic.restore (int blockIndex) "," Copy from a value block to the temporary block. <br /><br />"
"android.nfc.tech.MifareClassic.transfer (int blockIndex) "," Copy from the temporary block to a value block. <br /><br />"
"android.nfc.tech.MifareClassic.sectorToBlock (int sectorIndex) "," Return the first block of a given sector. <br /><br />"
"android.nfc.tech.MifareClassic.decrement (int blockIndex, int value) "," Decrement a value block, storing the result in the temporary block on the tag. <br /><br />"
"android.nfc.tech.MifareClassic.transceive (byte[]) () "," Get the current transceive(byte[]) timeout in milliseconds. <br /><br />"
"android.nfc.tech.MifareClassic.blockToSector (int blockIndex) "," Return the sector that contains a given block. <br /><br />"
"android.nfc.tech.MifareClassic.getBlockCount () "," Return the total number of MIFARE Classic blocks. <br /><br />"
"android.nfc.tech.MifareClassic.SIZE_4K () "," Return the size of the tag in bytes One of SIZE_MINI, SIZE_1K, SIZE_2K, SIZE_4K. <br /><br />"
"android.nfc.tech.MifareClassic.authenticateSectorWithKeyA (int sectorIndex, byte[] key) "," Authenticate a sector with key A. <br /><br />"
"android.nfc.tech.MifareUltralight.transceive (byte[]) (int timeout) "," Set the transceive(byte[]) timeout in milliseconds. <br /><br />"
"android.nfc.tech.MifareUltralight.TagTechnology () "," Get the Tag object backing this TagTechnology object. <br /><br />"
"android.nfc.tech.MifareUltralight.readPages (int pageOffset) "," Read 4 pages (16 bytes). <br /><br />"
"android.nfc.tech.MifareUltralight.MifareUltralight () "," Get an instance of MifareUltralight for the given tag. <br /><br />"
"android.nfc.tech.MifareUltralight.getType () "," Return the MIFARE Ultralight type of the tag. <br /><br />"
"android.nfc.tech.MifareUltralight.isConnected () "," Helper to indicate if I/O operations should be possible. <br /><br />"
"android.nfc.tech.MifareUltralight.transceive (byte[]) () "," Get the current transceive(byte[]) timeout in milliseconds. <br /><br />"
"android.nfc.tech.MifareUltralight.writePage (int pageOffset, byte[] data) "," Write 1 page (4 bytes). <br /><br />"
"android.nfc.tech.MifareUltralight.transceive (byte[] data) "," Send raw NfcA data to a tag and receive the response. <br /><br />"
"android.nfc.tech.Ndef.makeReadOnly () "," Make a tag read-only. <br /><br />"
"android.nfc.tech.Ndef.NdefMessage () "," Overwrite the NdefMessage on this tag. <br /><br />"
"android.nfc.tech.Ndef.TagTechnology () "," Get the Tag object backing this TagTechnology object. <br /><br />"
"android.nfc.tech.Ndef.getMaxSize () "," Get the maximum NDEF message size in bytes. <br /><br />"
"android.nfc.tech.Ndef.isWritable () "," Determine if the tag is writable. <br /><br />"
"android.nfc.tech.Ndef.getType () "," Get the NDEF tag type. <br /><br />"
"android.nfc.tech.Ndef.isConnected () "," Helper to indicate if I/O operations should be possible. <br /><br />"
"android.nfc.tech.Ndef.makeReadOnly () () "," Indicates whether a tag can be made read-only with makeReadOnly(). <br /><br />"
"android.nfc.tech.Ndef.Ndef () "," Get an instance of Ndef for the given tag. <br /><br />"
"android.nfc.tech.NdefFormatable.NdefFormatable () "," Get an instance of NdefFormatable for the given tag. <br /><br />"
"android.nfc.tech.NdefFormatable.NdefMessage () "," Formats a tag as NDEF, write a NdefMessage, and make read-only. <br /><br />"
"android.nfc.tech.NdefFormatable.TagTechnology () "," Get the Tag object backing this TagTechnology object. <br /><br />"
"android.nfc.tech.NdefFormatable.isConnected () "," Helper to indicate if I/O operations should be possible. <br /><br />"
"android.nfc.tech.NfcA.transceive (byte[]) (int timeout) "," Set the transceive(byte[]) timeout in milliseconds. <br /><br />"
"android.nfc.tech.NfcA.getAtqa () "," Return the ATQA/SENS_RES bytes from tag discovery. <br /><br />"
"android.nfc.tech.NfcA.TagTechnology () "," Get the Tag object backing this TagTechnology object. <br /><br />"
"android.nfc.tech.NfcA.isConnected () "," Helper to indicate if I/O operations should be possible. <br /><br />"
"android.nfc.tech.NfcA.NfcA () "," Get an instance of NfcA for the given tag. <br /><br />"
"android.nfc.tech.NfcA.getSak () "," Return the SAK/SEL_RES bytes from tag discovery. <br /><br />"
"android.nfc.tech.NfcA.transceive (byte[]) () "," Get the current transceive(byte[]) timeout in milliseconds. <br /><br />"
"android.nfc.tech.NfcA.transceive (byte[] data) "," Send raw NFC-A commands to the tag and receive the response. <br /><br />"
"android.nfc.tech.NfcB.TagTechnology () "," Get the Tag object backing this TagTechnology object. <br /><br />"
"android.nfc.tech.NfcB.NfcB () "," Get an instance of NfcB for the given tag. <br /><br />"
"android.nfc.tech.NfcB.isConnected () "," Helper to indicate if I/O operations should be possible. <br /><br />"
"android.nfc.tech.NfcB.transceive (byte[]) () "," Return the maximum number of bytes that can be sent with transceive(byte[]). <br /><br />"
"android.nfc.tech.NfcB.getApplicationData () "," Return the Application Data bytes from ATQB/SENSB_RES at tag discovery. <br /><br />"
"android.nfc.tech.NfcB.getProtocolInfo () "," Return the Protocol Info bytes from ATQB/SENSB_RES at tag discovery. <br /><br />"
"android.nfc.tech.NfcB.transceive (byte[] data) "," Send raw NFC-B commands to the tag and receive the response. <br /><br />"
"android.nfc.tech.NfcBarcode.TagTechnology () "," Get the Tag object backing this TagTechnology object. <br /><br />"
"android.nfc.tech.NfcBarcode.getType () "," Returns the NFC Barcode tag type. <br /><br />"
"android.nfc.tech.NfcBarcode.isConnected () "," Helper to indicate if I/O operations should be possible. <br /><br />"
"android.nfc.tech.NfcBarcode.getBarcode () "," Returns the barcode of an NfcBarcode tag. <br /><br />"
"android.nfc.tech.NfcBarcode.NfcBarcode () "," Get an instance of NfcBarcode for the given tag. <br /><br />"
"android.nfc.tech.NfcF.transceive (byte[]) (int timeout) "," Set the transceive(byte[]) timeout in milliseconds. <br /><br />"
"android.nfc.tech.NfcF.TagTechnology () "," Get the Tag object backing this TagTechnology object. <br /><br />"
"android.nfc.tech.NfcF.getManufacturer () "," Return the Manufacturer bytes from tag discovery. <br /><br />"
"android.nfc.tech.NfcF.isConnected () "," Helper to indicate if I/O operations should be possible. <br /><br />"
"android.nfc.tech.NfcF.NfcF () "," Get an instance of NfcF for the given tag. <br /><br />"
"android.nfc.tech.NfcF.transceive (byte[]) () "," Get the current transceive(byte[]) timeout in milliseconds. <br /><br />"
"android.nfc.tech.NfcF.transceive (byte[] data) "," Send raw NFC-F commands to the tag and receive the response. <br /><br />"
"android.nfc.tech.NfcF.getSystemCode () "," Return the System Code bytes from tag discovery. <br /><br />"
"android.nfc.tech.NfcV.NfcV () "," Get an instance of NfcV for the given tag. <br /><br />"
"android.nfc.tech.NfcV.TagTechnology () "," Get the Tag object backing this TagTechnology object. <br /><br />"
"android.nfc.tech.NfcV.getDsfId () "," Return the DSF ID bytes from tag discovery. <br /><br />"
"android.nfc.tech.NfcV.getResponseFlags () "," Return the Response Flag bytes from tag discovery. <br /><br />"
"android.nfc.tech.NfcV.isConnected () "," Helper to indicate if I/O operations should be possible. <br /><br />"
"android.nfc.tech.NfcV.transceive (byte[]) () "," Return the maximum number of bytes that can be sent with transceive(byte[]). <br /><br />"
"android.nfc.tech.NfcV.transceive (byte[] data) "," Send raw NFC-V commands to the tag and receive the response. <br /><br />"
"android.nfc.tech.TagTechnology.TagTechnology () "," Get the Tag object backing this TagTechnology object. <br /><br />"
"android.nfc.tech.TagTechnology.isConnected () "," Helper to indicate if I/O operations should be possible. <br /><br />"
"android.opengl.EGL14.eglGetCurrentSurface (int readdraw) "," no description <br /><br />"
"android.opengl.EGL14.eglQueryAPI () "," no description <br /><br />"
"android.opengl.EGL14.eglGetCurrentContext () "," no description <br /><br />"
"android.opengl.EGL14.eglGetCurrentDisplay () "," no description <br /><br />"
"android.opengl.EGL14.eglGetError () "," no description <br /><br />"
"android.opengl.EGL14.eglWaitGL () "," no description <br /><br />"
"android.opengl.EGL14.EGLContext () "," no description <br /><br />"
"android.opengl.EGL14.EGLSurface () "," no description <br /><br />"
"android.opengl.EGL14.Object () "," no description <br /><br />"
"android.opengl.EGL14.EGLDisplay () "," no description <br /><br />"
"android.opengl.EGL14.eglWaitClient () "," no description <br /><br />"
"android.opengl.EGL14.EGLConfig () "," no description <br /><br />"
"android.opengl.EGL14.EGLConfig[] () "," no description <br /><br />"
"android.opengl.EGL14.eglWaitNative (int engine) "," no description <br /><br />"
"android.opengl.EGL14.eglBindAPI (int api) "," no description <br /><br />"
"android.opengl.EGL14.eglGetDisplay (int display_id) "," no description <br /><br />"
"android.opengl.EGL14.eglReleaseThread () "," no description <br /><br />"
"android.opengl.EGLConfig.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.opengl.EGLContext.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.opengl.EGLDisplay.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.opengl.EGLExt.EGLSurface () "," no description <br /><br />"
"android.opengl.EGLObjectHandle.getNativeHandle () () "," This method was deprecated in API level 21. Use getNativeHandle() instead. Handles on 64 bit platforms will be wider than java ints. <br /><br />"
"android.opengl.EGLObjectHandle.getNativeHandle () "," Returns the native handle of the wrapped EGL object. <br /><br />"
"android.opengl.EGLObjectHandle.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.opengl.EGLSurface.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.opengl.ETC1.Buffer () "," Check if a PKM header is correctly formatted. <br /><br />"
"android.opengl.ETC1.getEncodedDataSize (int width, int height) "," Return the size of the encoded image data (does not include size of PKM header). <br /><br />"
"android.opengl.ETC1Util.ETC1Texture.getHeight () "," Get the height of the texture in pixels. <br /><br />"
"android.opengl.ETC1Util.ETC1Texture.getData () "," Get the compressed data of the texture. <br /><br />"
"android.opengl.ETC1Util.ETC1Texture.getWidth () "," Get the width of the texture in pixels. <br /><br />"
"android.opengl.ETC1Util.OutputStream () "," Helper function that writes an ETC1Texture to an output stream formatted as a PKM file. <br /><br />"
"android.opengl.ETC1Util.Buffer () "," Helper function that compresses an image into an ETC1Texture. <br /><br />"
"android.opengl.ETC1Util.isETC1Supported () "," Check if ETC1 texture compression is supported by the active OpenGL ES context. <br /><br />"
"android.opengl.ETC1Util.InputStream () "," Convenience method to load an ETC1 texture whether or not the active OpenGL context supports the ETC1 texture compression format. <br /><br />"
"android.opengl.ETC1Util.ETC1Util.ETC1Texture () "," Convenience method to load an ETC1 texture whether or not the active OpenGL context supports the ETC1 texture compression format. <br /><br />"
"android.opengl.GLDebugHelper.Writer () "," no description <br /><br />"
"android.opengl.GLES10.glHint (int target, int mode) "," no description <br /><br />"
"android.opengl.GLES10.glColor4x (int red, int green, int blue, int alpha) "," no description <br /><br />"
"android.opengl.GLES10.glDrawArrays (int mode, int first, int count) "," no description <br /><br />"
"android.opengl.GLES10.glFogx (int pname, int param) "," no description <br /><br />"
"android.opengl.GLES10.glStencilFunc (int func, int ref, int mask) "," no description <br /><br />"
"android.opengl.GLES10.glMaterialf (int face, int pname, float param) "," no description <br /><br />"
"android.opengl.GLES10.glTexParameterx (int target, int pname, int param) "," no description <br /><br />"
"android.opengl.GLES10.glViewport (int x, int y, int width, int height) "," no description <br /><br />"
"android.opengl.GLES10.glNormal3x (int nx, int ny, int nz) "," no description <br /><br />"
"android.opengl.GLES10.glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) "," no description <br /><br />"
"android.opengl.GLES10.glLoadMatrixf (float[] m, int offset) "," no description <br /><br />"
"android.opengl.GLES10.glDisableClientState (int array) "," no description <br /><br />"
"android.opengl.GLES10.glOrthox (int left, int right, int bottom, int top, int zNear, int zFar) "," no description <br /><br />"
"android.opengl.GLES10.glMaterialfv (int face, int pname, float[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES10.glActiveTexture (int texture) "," no description <br /><br />"
"android.opengl.GLES10.glScissor (int x, int y, int width, int height) "," no description <br /><br />"
"android.opengl.GLES10.glDepthRangex (int zNear, int zFar) "," no description <br /><br />"
"android.opengl.GLES10.glAlphaFuncx (int func, int ref) "," no description <br /><br />"
"android.opengl.GLES10.glClearDepthf (float depth) "," no description <br /><br />"
"android.opengl.GLES10.glScalef (float x, float y, float z) "," no description <br /><br />"
"android.opengl.GLES10.glStencilMask (int mask) "," no description <br /><br />"
"android.opengl.GLES10.glLoadMatrixx (int[] m, int offset) "," no description <br /><br />"
"android.opengl.GLES10.glLightx (int light, int pname, int param) "," no description <br /><br />"
"android.opengl.GLES10.glTexParameterf (int target, int pname, float param) "," no description <br /><br />"
"android.opengl.GLES10.glDepthMask (boolean flag) "," no description <br /><br />"
"android.opengl.GLES10.glMultiTexCoord4f (int target, float s, float t, float r, float q) "," no description <br /><br />"
"android.opengl.GLES10.glClear (int mask) "," no description <br /><br />"
"android.opengl.GLES10.glFinish () "," no description <br /><br />"
"android.opengl.GLES10.glNormal3f (float nx, float ny, float nz) "," no description <br /><br />"
"android.opengl.GLES10.glTranslatef (float x, float y, float z) "," no description <br /><br />"
"android.opengl.GLES10.glClearColor (float red, float green, float blue, float alpha) "," no description <br /><br />"
"android.opengl.GLES10.glLightModelf (int pname, float param) "," no description <br /><br />"
"android.opengl.GLES10.glFogf (int pname, float param) "," no description <br /><br />"
"android.opengl.GLES10.glCullFace (int mode) "," no description <br /><br />"
"android.opengl.GLES10.glLightModelxv (int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES10.glLightfv (int light, int pname, float[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES10.Buffer () "," no description <br /><br />"
"android.opengl.GLES10.glFrustumf (float left, float right, float bottom, float top, float zNear, float zFar) "," no description <br /><br />"
"android.opengl.GLES10.glDepthFunc (int func) "," no description <br /><br />"
"android.opengl.GLES10.glMultMatrixf (float[] m, int offset) "," no description <br /><br />"
"android.opengl.GLES10.glMatrixMode (int mode) "," no description <br /><br />"
"android.opengl.GLES10.glLineWidthx (int width) "," no description <br /><br />"
"android.opengl.GLES10.glEnableClientState (int array) "," no description <br /><br />"
"android.opengl.GLES10.FloatBuffer () "," no description <br /><br />"
"android.opengl.GLES10.glBlendFunc (int sfactor, int dfactor) "," no description <br /><br />"
"android.opengl.GLES10.glSampleCoverage (float value, boolean invert) "," no description <br /><br />"
"android.opengl.GLES10.glColorMask (boolean red, boolean green, boolean blue, boolean alpha) "," no description <br /><br />"
"android.opengl.GLES10.glGetString (int name) "," no description <br /><br />"
"android.opengl.GLES10.glLoadIdentity () "," no description <br /><br />"
"android.opengl.GLES10.glGetError () "," no description <br /><br />"
"android.opengl.GLES10.glLightxv (int light, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES10.glTexEnvf (int target, int pname, float param) "," no description <br /><br />"
"android.opengl.GLES10.glColor4f (float red, float green, float blue, float alpha) "," no description <br /><br />"
"android.opengl.GLES10.glRotatef (float angle, float x, float y, float z) "," no description <br /><br />"
"android.opengl.GLES10.glStencilOp (int fail, int zfail, int zpass) "," no description <br /><br />"
"android.opengl.GLES10.glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) "," no description <br /><br />"
"android.opengl.GLES10.glFrustumx (int left, int right, int bottom, int top, int zNear, int zFar) "," no description <br /><br />"
"android.opengl.GLES10.glPointSize (float size) "," no description <br /><br />"
"android.opengl.GLES10.glClearStencil (int s) "," no description <br /><br />"
"android.opengl.GLES10.glTexEnvx (int target, int pname, int param) "," no description <br /><br />"
"android.opengl.GLES10.glPixelStorei (int pname, int param) "," no description <br /><br />"
"android.opengl.GLES10.glScalex (int x, int y, int z) "," no description <br /><br />"
"android.opengl.GLES10.glLightModelx (int pname, int param) "," no description <br /><br />"
"android.opengl.GLES10.glTexEnvxv (int target, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES10.glLightModelfv (int pname, float[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES10.glRotatex (int angle, int x, int y, int z) "," no description <br /><br />"
"android.opengl.GLES10.IntBuffer () "," no description <br /><br />"
"android.opengl.GLES10.glLightf (int light, int pname, float param) "," no description <br /><br />"
"android.opengl.GLES10.glFogfv (int pname, float[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES10.glLineWidth (float width) "," no description <br /><br />"
"android.opengl.GLES10.glFrontFace (int mode) "," no description <br /><br />"
"android.opengl.GLES10.glBindTexture (int target, int texture) "," no description <br /><br />"
"android.opengl.GLES10.glGenTextures (int n, int[] textures, int offset) "," no description <br /><br />"
"android.opengl.GLES10.glDisable (int cap) "," no description <br /><br />"
"android.opengl.GLES10.glMultiTexCoord4x (int target, int s, int t, int r, int q) "," no description <br /><br />"
"android.opengl.GLES10.glTranslatex (int x, int y, int z) "," no description <br /><br />"
"android.opengl.GLES10.glGetIntegerv (int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES10.glPushMatrix () "," no description <br /><br />"
"android.opengl.GLES10.glDepthRangef (float zNear, float zFar) "," no description <br /><br />"
"android.opengl.GLES10.glLogicOp (int opcode) "," no description <br /><br />"
"android.opengl.GLES10.glSampleCoveragex (int value, boolean invert) "," no description <br /><br />"
"android.opengl.GLES10.glTexEnvfv (int target, int pname, float[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES10.glShadeModel (int mode) "," no description <br /><br />"
"android.opengl.GLES10.glPolygonOffsetx (int factor, int units) "," no description <br /><br />"
"android.opengl.GLES10.glClearColorx (int red, int green, int blue, int alpha) "," no description <br /><br />"
"android.opengl.GLES10.glClearDepthx (int depth) "," no description <br /><br />"
"android.opengl.GLES10.glPointSizex (int size) "," no description <br /><br />"
"android.opengl.GLES10.glDeleteTextures (int n, int[] textures, int offset) "," no description <br /><br />"
"android.opengl.GLES10.glFlush () "," no description <br /><br />"
"android.opengl.GLES10.glEnable (int cap) "," no description <br /><br />"
"android.opengl.GLES10.glMaterialxv (int face, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES10.glOrthof (float left, float right, float bottom, float top, float zNear, float zFar) "," no description <br /><br />"
"android.opengl.GLES10.glClientActiveTexture (int texture) "," no description <br /><br />"
"android.opengl.GLES10.glAlphaFunc (int func, float ref) "," no description <br /><br />"
"android.opengl.GLES10.glMaterialx (int face, int pname, int param) "," no description <br /><br />"
"android.opengl.GLES10.glPolygonOffset (float factor, float units) "," no description <br /><br />"
"android.opengl.GLES10.glFogxv (int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES10.glMultMatrixx (int[] m, int offset) "," no description <br /><br />"
"android.opengl.GLES10.glPopMatrix () "," no description <br /><br />"
"android.opengl.GLES10Ext.IntBuffer () "," no description <br /><br />"
"android.opengl.GLES10Ext.glQueryMatrixxOES (int[] mantissa, int mantissaOffset, int[] exponent, int exponentOffset) "," no description <br /><br />"
"android.opengl.GLES11.glGetTexParameteriv (int target, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11.glClipPlanef (int plane, float[] equation, int offset) "," no description <br /><br />"
"android.opengl.GLES11.glPointParameterf (int pname, float param) "," no description <br /><br />"
"android.opengl.GLES11.glGetMaterialxv (int face, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11.glDeleteBuffers (int n, int[] buffers, int offset) "," no description <br /><br />"
"android.opengl.GLES11.glTexParameterfv (int target, int pname, float[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11.glGetLightxv (int light, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11.glGetMaterialfv (int face, int pname, float[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11.glGetFixedv (int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11.glGetLightfv (int light, int pname, float[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11.glGetClipPlanef (int pname, float[] eqn, int offset) "," no description <br /><br />"
"android.opengl.GLES11.glGetBooleanv (int pname, boolean[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11.Buffer () "," no description <br /><br />"
"android.opengl.GLES11.glVertexPointer (int size, int type, int stride, int offset) "," no description <br /><br />"
"android.opengl.GLES11.glGetTexEnvfv (int env, int pname, float[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11.glTexParameteri (int target, int pname, int param) "," no description <br /><br />"
"android.opengl.GLES11.glGetClipPlanex (int pname, int[] eqn, int offset) "," no description <br /><br />"
"android.opengl.GLES11.glTexParameterxv (int target, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11.glGetTexParameterxv (int target, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11.glBindBuffer (int target, int buffer) "," no description <br /><br />"
"android.opengl.GLES11.glPointParameterxv (int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11.glGetFloatv (int pname, float[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11.glTexCoordPointer (int size, int type, int stride, int offset) "," no description <br /><br />"
"android.opengl.GLES11.glGetTexParameterfv (int target, int pname, float[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11.glNormalPointer (int type, int stride, int offset) "," no description <br /><br />"
"android.opengl.GLES11.glDrawElements (int mode, int count, int type, int offset) "," no description <br /><br />"
"android.opengl.GLES11.IntBuffer () "," no description <br /><br />"
"android.opengl.GLES11.glColorPointer (int size, int type, int stride, int offset) "," no description <br /><br />"
"android.opengl.GLES11.glGetBufferParameteriv (int target, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11.glTexEnviv (int target, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11.glPointParameterfv (int pname, float[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11.glClipPlanex (int plane, int[] equation, int offset) "," no description <br /><br />"
"android.opengl.GLES11.glPointParameterx (int pname, int param) "," no description <br /><br />"
"android.opengl.GLES11.glGetTexEnviv (int env, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11.FloatBuffer () "," no description <br /><br />"
"android.opengl.GLES11.glTexEnvi (int target, int pname, int param) "," no description <br /><br />"
"android.opengl.GLES11.glColor4ub (byte red, byte green, byte blue, byte alpha) "," no description <br /><br />"
"android.opengl.GLES11.glIsTexture (int texture) "," no description <br /><br />"
"android.opengl.GLES11.glIsEnabled (int cap) "," no description <br /><br />"
"android.opengl.GLES11.glGenBuffers (int n, int[] buffers, int offset) "," no description <br /><br />"
"android.opengl.GLES11.glGetTexEnvxv (int env, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11.glTexParameteriv (int target, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11.glIsBuffer (int buffer) "," no description <br /><br />"
"android.opengl.GLES11Ext.glTexEnvxOES (int target, int pname, int param) "," no description <br /><br />"
"android.opengl.GLES11Ext.glDeleteRenderbuffersOES (int n, int[] renderbuffers, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glGetLightxvOES (int light, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glLoadPaletteFromModelViewMatrixOES () "," no description <br /><br />"
"android.opengl.GLES11Ext.glGetRenderbufferParameterivOES (int target, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glLightModelxvOES (int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glPointParameterxOES (int pname, int param) "," no description <br /><br />"
"android.opengl.GLES11Ext.glDrawTexivOES (int[] coords, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glClipPlanefOES (int plane, float[] equation, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glBlendEquationSeparateOES (int modeRGB, int modeAlpha) "," no description <br /><br />"
"android.opengl.GLES11Ext.glGenerateMipmapOES (int target) "," no description <br /><br />"
"android.opengl.GLES11Ext.glMultMatrixxOES (int[] m, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glDeleteFramebuffersOES (int n, int[] framebuffers, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glTranslatexOES (int x, int y, int z) "," no description <br /><br />"
"android.opengl.GLES11Ext.glAlphaFuncxOES (int func, int ref) "," no description <br /><br />"
"android.opengl.GLES11Ext.glBindFramebufferOES (int target, int framebuffer) "," no description <br /><br />"
"android.opengl.GLES11Ext.glTexGenivOES (int coord, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glMultiTexCoord4xOES (int target, int s, int t, int r, int q) "," no description <br /><br />"
"android.opengl.GLES11Ext.glDrawTexsOES (short x, short y, short z, short width, short height) "," no description <br /><br />"
"android.opengl.GLES11Ext.glFrustumfOES (float left, float right, float bottom, float top, float zNear, float zFar) "," no description <br /><br />"
"android.opengl.GLES11Ext.glGetTexEnvxvOES (int env, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glGetClipPlanefOES (int pname, float[] eqn, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glPointSizexOES (int size) "," no description <br /><br />"
"android.opengl.GLES11Ext.glBlendFuncSeparateOES (int srcRGB, int dstRGB, int srcAlpha, int dstAlpha) "," no description <br /><br />"
"android.opengl.GLES11Ext.glDrawTexsvOES (short[] coords, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glTexGeniOES (int coord, int pname, int param) "," no description <br /><br />"
"android.opengl.GLES11Ext.glGetTexGenfvOES (int coord, int pname, float[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glTexGenfvOES (int coord, int pname, float[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glScalexOES (int x, int y, int z) "," no description <br /><br />"
"android.opengl.GLES11Ext.glGetFramebufferAttachmentParameterivOES (int target, int attachment, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glPolygonOffsetxOES (int factor, int units) "," no description <br /><br />"
"android.opengl.GLES11Ext.glClearColorxOES (int red, int green, int blue, int alpha) "," no description <br /><br />"
"android.opengl.GLES11Ext.glTexGenfOES (int coord, int pname, float param) "," no description <br /><br />"
"android.opengl.GLES11Ext.glGenRenderbuffersOES (int n, int[] renderbuffers, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glLightxOES (int light, int pname, int param) "," no description <br /><br />"
"android.opengl.GLES11Ext.glDrawTexfOES (float x, float y, float z, float width, float height) "," no description <br /><br />"
"android.opengl.GLES11Ext.IntBuffer () "," no description <br /><br />"
"android.opengl.GLES11Ext.glLightModelxOES (int pname, int param) "," no description <br /><br />"
"android.opengl.GLES11Ext.glGetTexGenxvOES (int coord, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glLineWidthxOES (int width) "," no description <br /><br />"
"android.opengl.GLES11Ext.glClearDepthxOES (int depth) "," no description <br /><br />"
"android.opengl.GLES11Ext.glDepthRangefOES (float zNear, float zFar) "," no description <br /><br />"
"android.opengl.GLES11Ext.glTexGenxvOES (int coord, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glFramebufferTexture2DOES (int target, int attachment, int textarget, int texture, int level) "," no description <br /><br />"
"android.opengl.GLES11Ext.glGetFixedvOES (int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glTexParameterxvOES (int target, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glPointParameterxvOES (int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glDepthRangexOES (int zNear, int zFar) "," no description <br /><br />"
"android.opengl.GLES11Ext.glMaterialxOES (int face, int pname, int param) "," no description <br /><br />"
"android.opengl.GLES11Ext.glDrawTexxOES (int x, int y, int z, int width, int height) "," no description <br /><br />"
"android.opengl.GLES11Ext.glNormal3xOES (int nx, int ny, int nz) "," no description <br /><br />"
"android.opengl.GLES11Ext.glDrawTexiOES (int x, int y, int z, int width, int height) "," no description <br /><br />"
"android.opengl.GLES11Ext.glFogxOES (int pname, int param) "," no description <br /><br />"
"android.opengl.GLES11Ext.glTexParameterxOES (int target, int pname, int param) "," no description <br /><br />"
"android.opengl.GLES11Ext.glGenFramebuffersOES (int n, int[] framebuffers, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glDrawTexxvOES (int[] coords, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glGetTexGenivOES (int coord, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glRotatexOES (int angle, int x, int y, int z) "," no description <br /><br />"
"android.opengl.GLES11Ext.glTexEnvxvOES (int target, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glGetTexParameterxvOES (int target, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glClipPlanexOES (int plane, int[] equation, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glFramebufferRenderbufferOES (int target, int attachment, int renderbuffertarget, int renderbuffer) "," no description <br /><br />"
"android.opengl.GLES11Ext.glMaterialxvOES (int face, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glCheckFramebufferStatusOES (int target) "," no description <br /><br />"
"android.opengl.GLES11Ext.Buffer () "," no description <br /><br />"
"android.opengl.GLES11Ext.glIsFramebufferOES (int framebuffer) "," no description <br /><br />"
"android.opengl.GLES11Ext.glDrawTexfvOES (float[] coords, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glCurrentPaletteMatrixOES (int matrixpaletteindex) "," no description <br /><br />"
"android.opengl.GLES11Ext.glSampleCoveragexOES (int value, boolean invert) "," no description <br /><br />"
"android.opengl.GLES11Ext.glOrthofOES (float left, float right, float bottom, float top, float zNear, float zFar) "," no description <br /><br />"
"android.opengl.GLES11Ext.glFogxvOES (int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glBindRenderbufferOES (int target, int renderbuffer) "," no description <br /><br />"
"android.opengl.GLES11Ext.glRenderbufferStorageOES (int target, int internalformat, int width, int height) "," no description <br /><br />"
"android.opengl.GLES11Ext.glColor4xOES (int red, int green, int blue, int alpha) "," no description <br /><br />"
"android.opengl.GLES11Ext.ShortBuffer () "," no description <br /><br />"
"android.opengl.GLES11Ext.glClearDepthfOES (float depth) "," no description <br /><br />"
"android.opengl.GLES11Ext.glLoadMatrixxOES (int[] m, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glTexGenxOES (int coord, int pname, int param) "," no description <br /><br />"
"android.opengl.GLES11Ext.FloatBuffer () "," no description <br /><br />"
"android.opengl.GLES11Ext.glGetClipPlanexOES (int pname, int[] eqn, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glFrustumxOES (int left, int right, int bottom, int top, int zNear, int zFar) "," no description <br /><br />"
"android.opengl.GLES11Ext.glLightxvOES (int light, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES11Ext.glOrthoxOES (int left, int right, int bottom, int top, int zNear, int zFar) "," no description <br /><br />"
"android.opengl.GLES11Ext.glBlendEquationOES (int mode) "," no description <br /><br />"
"android.opengl.GLES11Ext.glIsRenderbufferOES (int renderbuffer) "," no description <br /><br />"
"android.opengl.GLES11Ext.glGetMaterialxvOES (int face, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glHint (int target, int mode) "," no description <br /><br />"
"android.opengl.GLES20.glUniform2f (int location, float x, float y) "," no description <br /><br />"
"android.opengl.GLES20.glDrawArrays (int mode, int first, int count) "," no description <br /><br />"
"android.opengl.GLES20.glFramebufferTexture2D (int target, int attachment, int textarget, int texture, int level) "," no description <br /><br />"
"android.opengl.GLES20.glStencilFunc (int func, int ref, int mask) "," no description <br /><br />"
"android.opengl.GLES20.glBlendEquation (int mode) "," no description <br /><br />"
"android.opengl.GLES20.glGenRenderbuffers (int n, int[] renderbuffers, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glBlendEquationSeparate (int modeRGB, int modeAlpha) "," no description <br /><br />"
"android.opengl.GLES20.glCompileShader (int shader) "," no description <br /><br />"
"android.opengl.GLES20.glTexParameterfv (int target, int pname, float[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glGetActiveUniform (int program, int index, int bufsize, int[] length, int lengthOffset, int[] size, int sizeOffset, int[] type, int typeOffset, byte[] name, int nameOffset) "," no description <br /><br />"
"android.opengl.GLES20.glValidateProgram (int program) "," no description <br /><br />"
"android.opengl.GLES20.glViewport (int x, int y, int width, int height) "," no description <br /><br />"
"android.opengl.GLES20.glVertexAttrib4f (int indx, float x, float y, float z, float w) "," no description <br /><br />"
"android.opengl.GLES20.glCopyTexImage2D (int target, int level, int internalformat, int x, int y, int width, int height, int border) "," no description <br /><br />"
"android.opengl.GLES20.glDetachShader (int program, int shader) "," no description <br /><br />"
"android.opengl.GLES20.glUniform4fv (int location, int count, float[] v, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glUseProgram (int program) "," no description <br /><br />"
"android.opengl.GLES20.glDeleteFramebuffers (int n, int[] framebuffers, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glUniform4f (int location, float x, float y, float z, float w) "," no description <br /><br />"
"android.opengl.GLES20.glVertexAttrib2fv (int indx, float[] values, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glUniformMatrix3fv (int location, int count, boolean transpose, float[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glActiveTexture (int texture) "," no description <br /><br />"
"android.opengl.GLES20.glScissor (int x, int y, int width, int height) "," no description <br /><br />"
"android.opengl.GLES20.glGetShaderSource (int shader, int bufsize, int[] length, int lengthOffset, byte[] source, int sourceOffset) "," no description <br /><br />"
"android.opengl.GLES20.glClearDepthf (float depth) "," no description <br /><br />"
"android.opengl.GLES20.glCheckFramebufferStatus (int target) "," no description <br /><br />"
"android.opengl.GLES20.glStencilMask (int mask) "," no description <br /><br />"
"android.opengl.GLES20.glReleaseShaderCompiler () "," no description <br /><br />"
"android.opengl.GLES20.glTexParameterf (int target, int pname, float param) "," no description <br /><br />"
"android.opengl.GLES20.glDepthMask (boolean flag) "," no description <br /><br />"
"android.opengl.GLES20.glGetActiveAttrib (int program, int index, int bufsize, int[] length, int lengthOffset, int[] size, int sizeOffset, int[] type, int typeOffset, byte[] name, int nameOffset) "," no description <br /><br />"
"android.opengl.GLES20.glGetShaderInfoLog (int shader) "," no description <br /><br />"
"android.opengl.GLES20.glDeleteRenderbuffers (int n, int[] renderbuffers, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glIsTexture (int texture) "," no description <br /><br />"
"android.opengl.GLES20.glGetUniformfv (int program, int location, float[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glClear (int mask) "," no description <br /><br />"
"android.opengl.GLES20.glFinish () "," no description <br /><br />"
"android.opengl.GLES20.glUniform3fv (int location, int count, float[] v, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glRenderbufferStorage (int target, int internalformat, int width, int height) "," no description <br /><br />"
"android.opengl.GLES20.glVertexAttribPointer (int indx, int size, int type, boolean normalized, int stride, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glClearColor (float red, float green, float blue, float alpha) "," no description <br /><br />"
"android.opengl.GLES20.glUniform3iv (int location, int count, int[] v, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glGetProgramiv (int program, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glCullFace (int mode) "," no description <br /><br />"
"android.opengl.GLES20.Buffer () "," no description <br /><br />"
"android.opengl.GLES20.glTexParameteri (int target, int pname, int param) "," no description <br /><br />"
"android.opengl.GLES20.glDepthFunc (int func) "," no description <br /><br />"
"android.opengl.GLES20.glBindBuffer (int target, int buffer) "," no description <br /><br />"
"android.opengl.GLES20.String () "," no description <br /><br />"
"android.opengl.GLES20.glUniform2fv (int location, int count, float[] v, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glGetBufferParameteriv (int target, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glUniform1fv (int location, int count, float[] v, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glVertexAttrib1f (int indx, float x) "," no description <br /><br />"
"android.opengl.GLES20.glUniform3f (int location, float x, float y, float z) "," no description <br /><br />"
"android.opengl.GLES20.glBlendFunc (int sfactor, int dfactor) "," no description <br /><br />"
"android.opengl.GLES20.FloatBuffer () "," no description <br /><br />"
"android.opengl.GLES20.glSampleCoverage (float value, boolean invert) "," no description <br /><br />"
"android.opengl.GLES20.glColorMask (boolean red, boolean green, boolean blue, boolean alpha) "," no description <br /><br />"
"android.opengl.GLES20.glUniform4i (int location, int x, int y, int z, int w) "," no description <br /><br />"
"android.opengl.GLES20.glGetString (int name) "," no description <br /><br />"
"android.opengl.GLES20.glGenBuffers (int n, int[] buffers, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glDeleteShader (int shader) "," no description <br /><br />"
"android.opengl.GLES20.glDeleteProgram (int program) "," no description <br /><br />"
"android.opengl.GLES20.glTexParameteriv (int target, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glGetVertexAttribiv (int index, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glUniform1f (int location, float x) "," no description <br /><br />"
"android.opengl.GLES20.glGetError () "," no description <br /><br />"
"android.opengl.GLES20.glVertexAttrib3f (int indx, float x, float y, float z) "," no description <br /><br />"
"android.opengl.GLES20.glStencilOp (int fail, int zfail, int zpass) "," no description <br /><br />"
"android.opengl.GLES20.glIsShader (int shader) "," no description <br /><br />"
"android.opengl.GLES20.glFramebufferRenderbuffer (int target, int attachment, int renderbuffertarget, int renderbuffer) "," no description <br /><br />"
"android.opengl.GLES20.glUniform2iv (int location, int count, int[] v, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glCopyTexSubImage2D (int target, int level, int xoffset, int yoffset, int x, int y, int width, int height) "," no description <br /><br />"
"android.opengl.GLES20.glGetRenderbufferParameteriv (int target, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glIsRenderbuffer (int renderbuffer) "," no description <br /><br />"
"android.opengl.GLES20.glEnableVertexAttribArray (int index) "," no description <br /><br />"
"android.opengl.GLES20.glClearStencil (int s) "," no description <br /><br />"
"android.opengl.GLES20.glGetShaderiv (int shader, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glUniform3i (int location, int x, int y, int z) "," no description <br /><br />"
"android.opengl.GLES20.glPixelStorei (int pname, int param) "," no description <br /><br />"
"android.opengl.GLES20.glVertexAttrib3fv (int indx, float[] values, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glGetActiveUniform (int program, int index, int[] size, int sizeOffset, int[] type, int typeOffset) "," no description <br /><br />"
"android.opengl.GLES20.glGetFloatv (int pname, float[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glVertexAttrib2f (int indx, float x, float y) "," no description <br /><br />"
"android.opengl.GLES20.glGenerateMipmap (int target) "," no description <br /><br />"
"android.opengl.GLES20.glGetTexParameterfv (int target, int pname, float[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glDrawElements (int mode, int count, int type, int offset) "," no description <br /><br />"
"android.opengl.GLES20.IntBuffer () "," no description <br /><br />"
"android.opengl.GLES20.glGetAttachedShaders (int program, int maxcount, int[] count, int countOffset, int[] shaders, int shadersOffset) "," no description <br /><br />"
"android.opengl.GLES20.glBindRenderbuffer (int target, int renderbuffer) "," no description <br /><br />"
"android.opengl.GLES20.glDisableVertexAttribArray (int index) "," no description <br /><br />"
"android.opengl.GLES20.glBlendFuncSeparate (int srcRGB, int dstRGB, int srcAlpha, int dstAlpha) "," no description <br /><br />"
"android.opengl.GLES20.glLineWidth (float width) "," no description <br /><br />"
"android.opengl.GLES20.glGetVertexAttribfv (int index, int pname, float[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glUniform1i (int location, int x) "," no description <br /><br />"
"android.opengl.GLES20.glFrontFace (int mode) "," no description <br /><br />"
"android.opengl.GLES20.glBindTexture (int target, int texture) "," no description <br /><br />"
"android.opengl.GLES20.glGetShaderSource (int shader) "," no description <br /><br />"
"android.opengl.GLES20.glGenTextures (int n, int[] textures, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glDisable (int cap) "," no description <br /><br />"
"android.opengl.GLES20.glIsEnabled (int cap) "," no description <br /><br />"
"android.opengl.GLES20.glStencilMaskSeparate (int face, int mask) "," no description <br /><br />"
"android.opengl.GLES20.glUniform1iv (int location, int count, int[] v, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glGetProgramInfoLog (int program) "," no description <br /><br />"
"android.opengl.GLES20.glCreateProgram () "," no description <br /><br />"
"android.opengl.GLES20.glGetIntegerv (int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glGetTexParameteriv (int target, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glIsFramebuffer (int framebuffer) "," no description <br /><br />"
"android.opengl.GLES20.glVertexAttrib1fv (int indx, float[] values, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glCreateShader (int type) "," no description <br /><br />"
"android.opengl.GLES20.glDepthRangef (float zNear, float zFar) "," no description <br /><br />"
"android.opengl.GLES20.glDeleteBuffers (int n, int[] buffers, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glBindFramebuffer (int target, int framebuffer) "," no description <br /><br />"
"android.opengl.GLES20.glGetShaderPrecisionFormat (int shadertype, int precisiontype, int[] range, int rangeOffset, int[] precision, int precisionOffset) "," no description <br /><br />"
"android.opengl.GLES20.glGetFramebufferAttachmentParameteriv (int target, int attachment, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glUniformMatrix4fv (int location, int count, boolean transpose, float[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glUniformMatrix2fv (int location, int count, boolean transpose, float[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glVertexAttrib4fv (int indx, float[] values, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glStencilFuncSeparate (int face, int func, int ref, int mask) "," no description <br /><br />"
"android.opengl.GLES20.glGetBooleanv (int pname, boolean[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glUniform4iv (int location, int count, int[] v, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glBlendColor (float red, float green, float blue, float alpha) "," no description <br /><br />"
"android.opengl.GLES20.glGetUniformiv (int program, int location, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glGenFramebuffers (int n, int[] framebuffers, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glDeleteTextures (int n, int[] textures, int offset) "," no description <br /><br />"
"android.opengl.GLES20.glStencilOpSeparate (int face, int fail, int zfail, int zpass) "," no description <br /><br />"
"android.opengl.GLES20.glFlush () "," no description <br /><br />"
"android.opengl.GLES20.glUniform2i (int location, int x, int y) "," no description <br /><br />"
"android.opengl.GLES20.glEnable (int cap) "," no description <br /><br />"
"android.opengl.GLES20.glIsProgram (int program) "," no description <br /><br />"
"android.opengl.GLES20.glGetActiveAttrib (int program, int index, int[] size, int sizeOffset, int[] type, int typeOffset) "," no description <br /><br />"
"android.opengl.GLES20.glPolygonOffset (float factor, float units) "," no description <br /><br />"
"android.opengl.GLES20.glLinkProgram (int program) "," no description <br /><br />"
"android.opengl.GLES20.glAttachShader (int program, int shader) "," no description <br /><br />"
"android.opengl.GLES20.glIsBuffer (int buffer) "," no description <br /><br />"
"android.opengl.GLES30.glIsSync (long sync) "," no description <br /><br />"
"android.opengl.GLES30.glInvalidateSubFramebuffer (int target, int numAttachments, int[] attachments, int offset, int x, int y, int width, int height) "," no description <br /><br />"
"android.opengl.GLES30.glMapBufferRange (int target, int offset, int length, int access) "," no description <br /><br />"
"android.opengl.GLES30.glBlitFramebuffer (int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter) "," no description <br /><br />"
"android.opengl.GLES30.glUniform4uiv (int location, int count, int[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES30.LongBuffer () "," no description <br /><br />"
"android.opengl.GLES30.glDeleteSamplers (int count, int[] samplers, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glGetSamplerParameteriv (int sampler, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glGetInteger64v (int pname, long[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glGetActiveUniformBlockName (int program, int uniformBlockIndex) "," no description <br /><br />"
"android.opengl.GLES30.glUniform2uiv (int location, int count, int[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glUniform4ui (int location, int v0, int v1, int v2, int v3) "," no description <br /><br />"
"android.opengl.GLES30.glFramebufferTextureLayer (int target, int attachment, int texture, int level, int layer) "," no description <br /><br />"
"android.opengl.GLES30.glSamplerParameterf (int sampler, int pname, float param) "," no description <br /><br />"
"android.opengl.GLES30.glUniformMatrix3x4fv (int location, int count, boolean transpose, float[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glVertexAttribI4iv (int index, int[] v, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glGetActiveUniformsiv (int program, int uniformCount, int[] uniformIndices, int uniformIndicesOffset, int pname, int[] params, int paramsOffset) "," no description <br /><br />"
"android.opengl.GLES30.glUniform1uiv (int location, int count, int[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glClearBufferuiv (int buffer, int drawbuffer, int[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glBeginTransformFeedback (int primitiveMode) "," no description <br /><br />"
"android.opengl.GLES30.glDrawElementsInstanced (int mode, int count, int type, int indicesOffset, int instanceCount) "," no description <br /><br />"
"android.opengl.GLES30.glTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glEndTransformFeedback () "," no description <br /><br />"
"android.opengl.GLES30.glWaitSync (long sync, int flags, long timeout) "," no description <br /><br />"
"android.opengl.GLES30.glBeginQuery (int target, int id) "," no description <br /><br />"
"android.opengl.GLES30.glGetIntegeri_v (int target, int index, int[] data, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glDrawRangeElements (int mode, int start, int end, int count, int type, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glCopyTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height) "," no description <br /><br />"
"android.opengl.GLES30.glTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glUniformMatrix2x4fv (int location, int count, boolean transpose, float[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glGetUniformuiv (int program, int location, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glDrawBuffers (int n, int[] bufs, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glUniform2ui (int location, int v0, int v1) "," no description <br /><br />"
"android.opengl.GLES30.Buffer () "," no description <br /><br />"
"android.opengl.GLES30.glDrawArraysInstanced (int mode, int first, int count, int instanceCount) "," no description <br /><br />"
"android.opengl.GLES30.glVertexAttribIPointer (int index, int size, int type, int stride, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glSamplerParameteri (int sampler, int pname, int param) "," no description <br /><br />"
"android.opengl.GLES30.String () "," no description <br /><br />"
"android.opengl.GLES30.glGenTransformFeedbacks (int n, int[] ids, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glCopyBufferSubData (int readTarget, int writeTarget, int readOffset, int writeOffset, int size) "," no description <br /><br />"
"android.opengl.GLES30.glGetQueryObjectuiv (int id, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glUniformBlockBinding (int program, int uniformBlockIndex, int uniformBlockBinding) "," no description <br /><br />"
"android.opengl.GLES30.glBindBufferRange (int target, int index, int buffer, int offset, int size) "," no description <br /><br />"
"android.opengl.GLES30.glGetActiveUniformBlockiv (int program, int uniformBlockIndex, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glVertexAttribI4ui (int index, int x, int y, int z, int w) "," no description <br /><br />"
"android.opengl.GLES30.glUniformMatrix4x2fv (int location, int count, boolean transpose, float[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES30.FloatBuffer () "," no description <br /><br />"
"android.opengl.GLES30.glFenceSync (int condition, int flags) "," no description <br /><br />"
"android.opengl.GLES30.glUniformMatrix2x3fv (int location, int count, boolean transpose, float[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glVertexAttribDivisor (int index, int divisor) "," no description <br /><br />"
"android.opengl.GLES30.glIsQuery (int id) "," no description <br /><br />"
"android.opengl.GLES30.glCompressedTexSubImage3D (int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glClearBufferiv (int buffer, int drawbuffer, int[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glSamplerParameteriv (int sampler, int pname, int[] param, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glVertexAttribI4uiv (int index, int[] v, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glIsVertexArray (int array) "," no description <br /><br />"
"android.opengl.GLES30.glPauseTransformFeedback () "," no description <br /><br />"
"android.opengl.GLES30.glGetStringi (int name, int index) "," no description <br /><br />"
"android.opengl.GLES30.glBindSampler (int unit, int sampler) "," no description <br /><br />"
"android.opengl.GLES30.glIsTransformFeedback (int id) "," no description <br /><br />"
"android.opengl.GLES30.glTexStorage3D (int target, int levels, int internalformat, int width, int height, int depth) "," no description <br /><br />"
"android.opengl.GLES30.glGetSamplerParameterfv (int sampler, int pname, float[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glBindVertexArray (int array) "," no description <br /><br />"
"android.opengl.GLES30.glGetBufferPointerv (int target, int pname) "," no description <br /><br />"
"android.opengl.GLES30.glTexStorage2D (int target, int levels, int internalformat, int width, int height) "," no description <br /><br />"
"android.opengl.GLES30.glUnmapBuffer (int target) "," no description <br /><br />"
"android.opengl.GLES30.glUniformMatrix4x3fv (int location, int count, boolean transpose, float[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glDeleteQueries (int n, int[] ids, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glRenderbufferStorageMultisample (int target, int samples, int internalformat, int width, int height) "," no description <br /><br />"
"android.opengl.GLES30.String[] () "," no description <br /><br />"
"android.opengl.GLES30.glSamplerParameterfv (int sampler, int pname, float[] param, int offset) "," no description <br /><br />"
"android.opengl.GLES30.IntBuffer () "," no description <br /><br />"
"android.opengl.GLES30.glEndQuery (int target) "," no description <br /><br />"
"android.opengl.GLES30.glDeleteTransformFeedbacks (int n, int[] ids, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glGetTransformFeedbackVarying (int program, int index, int[] size, int sizeOffset, int[] type, int typeOffset) "," no description <br /><br />"
"android.opengl.GLES30.glGetQueryiv (int target, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glIsSampler (int sampler) "," no description <br /><br />"
"android.opengl.GLES30.glGenQueries (int n, int[] ids, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glDeleteSync (long sync) "," no description <br /><br />"
"android.opengl.GLES30.glGenSamplers (int count, int[] samplers, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glUniformMatrix3x2fv (int location, int count, boolean transpose, float[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glGetInteger64i_v (int target, int index, long[] data, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glUniform3uiv (int location, int count, int[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glFlushMappedBufferRange (int target, int offset, int length) "," no description <br /><br />"
"android.opengl.GLES30.glClearBufferfv (int buffer, int drawbuffer, float[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glCompressedTexImage3D (int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glClientWaitSync (long sync, int flags, long timeout) "," no description <br /><br />"
"android.opengl.GLES30.glBindBufferBase (int target, int index, int buffer) "," no description <br /><br />"
"android.opengl.GLES30.glDeleteVertexArrays (int n, int[] arrays, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glResumeTransformFeedback () "," no description <br /><br />"
"android.opengl.GLES30.glReadBuffer (int mode) "," no description <br /><br />"
"android.opengl.GLES30.glInvalidateFramebuffer (int target, int numAttachments, int[] attachments, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glGetActiveUniformBlockName (int program, int uniformBlockIndex, int bufSize, int[] length, int lengthOffset, byte[] uniformBlockName, int uniformBlockNameOffset) "," no description <br /><br />"
"android.opengl.GLES30.glBindTransformFeedback (int target, int id) "," no description <br /><br />"
"android.opengl.GLES30.glGetVertexAttribIiv (int index, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glGetTransformFeedbackVarying (int program, int index, int bufsize, int[] length, int lengthOffset, int[] size, int sizeOffset, int[] type, int typeOffset, byte[] name, int nameOffset) "," no description <br /><br />"
"android.opengl.GLES30.glGetBufferParameteri64v (int target, int pname, long[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glGenVertexArrays (int n, int[] arrays, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glClearBufferfi (int buffer, int drawbuffer, float depth, int stencil) "," no description <br /><br />"
"android.opengl.GLES30.glGetSynciv (long sync, int pname, int bufSize, int[] length, int lengthOffset, int[] values, int valuesOffset) "," no description <br /><br />"
"android.opengl.GLES30.glUniform3ui (int location, int v0, int v1, int v2) "," no description <br /><br />"
"android.opengl.GLES30.glVertexAttribI4i (int index, int x, int y, int z, int w) "," no description <br /><br />"
"android.opengl.GLES30.glUniform1ui (int location, int v0) "," no description <br /><br />"
"android.opengl.GLES30.glGetVertexAttribIuiv (int index, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES30.glProgramParameteri (int program, int pname, int value) "," no description <br /><br />"
"android.opengl.GLES30.glGetInternalformativ (int target, int internalformat, int pname, int bufSize, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniform4fv (int program, int location, int count, float[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniformMatrix2x4fv (int program, int location, int count, boolean transpose, float[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES31.glDrawArraysIndirect (int mode, long indirect) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniform1f (int program, int location, float v0) "," no description <br /><br />"
"android.opengl.GLES31.glVertexAttribBinding (int attribindex, int bindingindex) "," no description <br /><br />"
"android.opengl.GLES31.glValidateProgramPipeline (int pipeline) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniform4i (int program, int location, int v0, int v1, int v2, int v3) "," no description <br /><br />"
"android.opengl.GLES31.glGetTexLevelParameterfv (int target, int level, int pname, float[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES31.glGetFramebufferParameteriv (int target, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniform2fv (int program, int location, int count, float[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES31.glVertexAttribIFormat (int attribindex, int size, int type, int relativeoffset) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniform4f (int program, int location, float v0, float v1, float v2, float v3) "," no description <br /><br />"
"android.opengl.GLES31.glGetProgramResourceName (int program, int programInterface, int index) "," no description <br /><br />"
"android.opengl.GLES31.String[] () "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniform2f (int program, int location, float v0, float v1) "," no description <br /><br />"
"android.opengl.GLES31.glTexStorage2DMultisample (int target, int samples, int internalformat, int width, int height, boolean fixedsamplelocations) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniform1iv (int program, int location, int count, int[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES31.glActiveShaderProgram (int pipeline, int program) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniformMatrix2x3fv (int program, int location, int count, boolean transpose, float[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES31.glGetProgramInterfaceiv (int program, int programInterface, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniform3ui (int program, int location, int v0, int v1, int v2) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniform3uiv (int program, int location, int count, int[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES31.IntBuffer () "," no description <br /><br />"
"android.opengl.GLES31.glUseProgramStages (int pipeline, int stages, int program) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniform2i (int program, int location, int v0, int v1) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniform1ui (int program, int location, int v0) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniform2uiv (int program, int location, int count, int[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniformMatrix3x2fv (int program, int location, int count, boolean transpose, float[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES31.glDispatchCompute (int num_groups_x, int num_groups_y, int num_groups_z) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniform4iv (int program, int location, int count, int[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniform3iv (int program, int location, int count, int[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES31.glVertexBindingDivisor (int bindingindex, int divisor) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniformMatrix4x3fv (int program, int location, int count, boolean transpose, float[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniform1fv (int program, int location, int count, float[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniformMatrix4x2fv (int program, int location, int count, boolean transpose, float[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniform1i (int program, int location, int v0) "," no description <br /><br />"
"android.opengl.GLES31.glBindVertexBuffer (int bindingindex, int buffer, long offset, int stride) "," no description <br /><br />"
"android.opengl.GLES31.glDeleteProgramPipelines (int n, int[] pipelines, int offset) "," no description <br /><br />"
"android.opengl.GLES31.glSampleMaski (int maskNumber, int mask) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniformMatrix3fv (int program, int location, int count, boolean transpose, float[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniformMatrix2fv (int program, int location, int count, boolean transpose, float[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES31.glFramebufferParameteri (int target, int pname, int param) "," no description <br /><br />"
"android.opengl.GLES31.glVertexAttribFormat (int attribindex, int size, int type, boolean normalized, int relativeoffset) "," no description <br /><br />"
"android.opengl.GLES31.glGetProgramPipelineInfoLog (int program) "," no description <br /><br />"
"android.opengl.GLES31.glDrawElementsIndirect (int mode, int type, long indirect) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniformMatrix3x4fv (int program, int location, int count, boolean transpose, float[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES31.String () "," no description <br /><br />"
"android.opengl.GLES31.glBindImageTexture (int unit, int texture, int level, boolean layered, int layer, int access, int format) "," no description <br /><br />"
"android.opengl.GLES31.glMemoryBarrier (int barriers) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniform3fv (int program, int location, int count, float[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES31.glGetBooleani_v (int target, int index, boolean[] data, int offset) "," no description <br /><br />"
"android.opengl.GLES31.glGetProgramPipelineiv (int pipeline, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES31.glGetTexLevelParameteriv (int target, int level, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES31.glMemoryBarrierByRegion (int barriers) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniform4ui (int program, int location, int v0, int v1, int v2, int v3) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniform3i (int program, int location, int v0, int v1, int v2) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniform4uiv (int program, int location, int count, int[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES31.glGetMultisamplefv (int pname, int index, float[] val, int offset) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniform2ui (int program, int location, int v0, int v1) "," no description <br /><br />"
"android.opengl.GLES31.glDispatchComputeIndirect (long indirect) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniformMatrix4fv (int program, int location, int count, boolean transpose, float[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES31.FloatBuffer () "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniform1uiv (int program, int location, int count, int[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES31.glBindProgramPipeline (int pipeline) "," no description <br /><br />"
"android.opengl.GLES31.glGenProgramPipelines (int n, int[] pipelines, int offset) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniform3f (int program, int location, float v0, float v1, float v2) "," no description <br /><br />"
"android.opengl.GLES31.glIsProgramPipeline (int pipeline) "," no description <br /><br />"
"android.opengl.GLES31.glGetProgramResourceiv (int program, int programInterface, int index, int propCount, int[] props, int propsOffset, int bufSize, int[] length, int lengthOffset, int[] params, int paramsOffset) "," no description <br /><br />"
"android.opengl.GLES31.glProgramUniform2iv (int program, int location, int count, int[] value, int offset) "," no description <br /><br />"
"android.opengl.GLES31Ext.DebugProcKHR.String () "," no description <br /><br />"
"android.opengl.GLES31Ext.glTexBufferEXT (int target, int internalformat, int buffer) "," no description <br /><br />"
"android.opengl.GLES31Ext.glGetTexParameterIuivEXT (int target, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES31Ext.glSamplerParameterIivEXT (int sampler, int pname, int[] param, int offset) "," no description <br /><br />"
"android.opengl.GLES31Ext.glBlendFuncSeparateiEXT (int buf, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha) "," no description <br /><br />"
"android.opengl.GLES31Ext.glBlendEquationSeparateiEXT (int buf, int modeRGB, int modeAlpha) "," no description <br /><br />"
"android.opengl.GLES31Ext.glBlendBarrierKHR () "," no description <br /><br />"
"android.opengl.GLES31Ext.glGetDebugMessageLogKHR (int count, int[] sources, int sourcesOffset, int[] types, int typesOffset, int[] ids, int idsOffset, int[] severities, int severitiesOffset) "," no description <br /><br />"
"android.opengl.GLES31Ext.glTexParameterIivEXT (int target, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES31Ext.glTexBufferRangeEXT (int target, int internalformat, int buffer, int offset, int size) "," no description <br /><br />"
"android.opengl.GLES31Ext.glDisableiEXT (int target, int index) "," no description <br /><br />"
"android.opengl.GLES31Ext.glGetSamplerParameterIuivEXT (int sampler, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES31Ext.glTexParameterIuivEXT (int target, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES31Ext.glGetDebugMessageCallbackKHR () "," no description <br /><br />"
"android.opengl.GLES31Ext.glIsEnablediEXT (int target, int index) "," no description <br /><br />"
"android.opengl.GLES31Ext.glGetDebugMessageLogKHR (int count, int bufSize, int[] sources, int sourcesOffset, int[] types, int typesOffset, int[] ids, int idsOffset, int[] severities, int severitiesOffset, int[] lengths, int lengthsOffset, byte[] messageLog, int messageLogOffset) "," no description <br /><br />"
"android.opengl.GLES31Ext.glSamplerParameterIuivEXT (int sampler, int pname, int[] param, int offset) "," no description <br /><br />"
"android.opengl.GLES31Ext.GLES31Ext.DebugProcKHR () "," no description <br /><br />"
"android.opengl.GLES31Ext.glGetObjectLabelKHR (int identifier, int name) "," no description <br /><br />"
"android.opengl.GLES31Ext.String () "," no description <br /><br />"
"android.opengl.GLES31Ext.glGetSamplerParameterIivEXT (int sampler, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES31Ext.glMinSampleShadingOES (float value) "," no description <br /><br />"
"android.opengl.GLES31Ext.IntBuffer () "," no description <br /><br />"
"android.opengl.GLES31Ext.glColorMaskiEXT (int index, boolean r, boolean g, boolean b, boolean a) "," no description <br /><br />"
"android.opengl.GLES31Ext.glPrimitiveBoundingBoxEXT (float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW) "," no description <br /><br />"
"android.opengl.GLES31Ext.glCopyImageSubDataEXT (int srcName, int srcTarget, int srcLevel, int srcX, int srcY, int srcZ, int dstName, int dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth) "," no description <br /><br />"
"android.opengl.GLES31Ext.glFramebufferTextureEXT (int target, int attachment, int texture, int level) "," no description <br /><br />"
"android.opengl.GLES31Ext.glPatchParameteriEXT (int pname, int value) "," no description <br /><br />"
"android.opengl.GLES31Ext.glGetTexParameterIivEXT (int target, int pname, int[] params, int offset) "," no description <br /><br />"
"android.opengl.GLES31Ext.glGetObjectPtrLabelKHR (long ptr) "," no description <br /><br />"
"android.opengl.GLES31Ext.ByteBuffer () "," no description <br /><br />"
"android.opengl.GLES31Ext.glBlendFunciEXT (int buf, int src, int dst) "," no description <br /><br />"
"android.opengl.GLES31Ext.glBlendEquationiEXT (int buf, int mode) "," no description <br /><br />"
"android.opengl.GLES31Ext.glDebugMessageControlKHR (int source, int type, int severity, int count, int[] ids, int offset, boolean enabled) "," no description <br /><br />"
"android.opengl.GLES31Ext.glEnableiEXT (int target, int index) "," no description <br /><br />"
"android.opengl.GLES31Ext.glTexStorage3DMultisampleOES (int target, int samples, int internalformat, int width, int height, int depth, boolean fixedsamplelocations) "," no description <br /><br />"
"android.opengl.GLES31Ext.glPopDebugGroupKHR () "," no description <br /><br />"
"android.opengl.GLSurfaceView.EGLConfigChooser.EGLDisplay () "," Choose a configuration from the list. <br /><br />"
"android.opengl.GLSurfaceView.EGLContextFactory.EGLContext () "," no description <br /><br />"
"android.opengl.GLSurfaceView.EGLContextFactory.EGLConfig () "," no description <br /><br />"
"android.opengl.GLSurfaceView.EGLWindowSurfaceFactory.EGLSurface () "," no description <br /><br />"
"android.opengl.GLSurfaceView.EGLWindowSurfaceFactory.Object () "," no description <br /><br />"
"android.opengl.GLSurfaceView.GLWrapper.GL () "," Wraps a gl interface in another gl interface. <br /><br />"
"android.opengl.GLSurfaceView.setDebugFlags (int debugFlags) "," Set the debug flags to a new value. <br /><br />"
"android.opengl.GLSurfaceView.GLSurfaceView.GLWrapper () "," Set the glWrapper. <br /><br />"
"android.opengl.GLSurfaceView.onPause () "," Inform the view that the activity is paused. <br /><br />"
"android.opengl.GLSurfaceView.setEGLContextClientVersion (int version) "," Inform the default EGLContextFactory and default EGLConfigChooser which EGLContext client version to pick. <br /><br />"
"android.opengl.GLSurfaceView.setPreserveEGLContextOnPause (boolean preserveOnPause) "," Control whether the EGL context is preserved when the GLSurfaceView is paused and resumed. <br /><br />"
"android.opengl.GLSurfaceView.GLSurfaceView.EGLWindowSurfaceFactory () "," Install a custom EGLWindowSurfaceFactory. <br /><br />"
"android.opengl.GLSurfaceView.getPreserveEGLContextOnPause () "," no description <br /><br />"
"android.opengl.GLSurfaceView.GLSurfaceView.EGLContextFactory () "," Install a custom EGLContextFactory. <br /><br />"
"android.opengl.GLSurfaceView.getDebugFlags () "," Get the current value of the debug flags. <br /><br />"
"android.opengl.GLSurfaceView.requestRender () "," Request that the renderer render a frame. <br /><br />"
"android.opengl.GLSurfaceView.setEGLConfigChooser (boolean needDepth) "," Install a config chooser which will choose a config as close to 16-bit RGB as possible, with or without an optional depth buffer as close to 16-bits as possible. <br /><br />"
"android.opengl.GLSurfaceView.getRenderMode () "," Get the current rendering mode. <br /><br />"
"android.opengl.GLSurfaceView.setEGLConfigChooser (int redSize, int greenSize, int blueSize, int alphaSize, int depthSize, int stencilSize) "," Install a config chooser which will choose a config with at least the specified depthSize and stencilSize, and exactly the specified redSize, greenSize, blueSize and alphaSize. <br /><br />"
"android.opengl.GLSurfaceView.GLSurfaceView.Renderer () "," Set the renderer associated with this view. <br /><br />"
"android.opengl.GLSurfaceView.setRenderMode (int renderMode) "," Set the rendering mode. <br /><br />"
"android.opengl.GLSurfaceView.onResume () "," Inform the view that the activity is resumed. <br /><br />"
"android.opengl.GLSurfaceView.GLSurfaceView.EGLConfigChooser () "," Install a custom EGLConfigChooser. <br /><br />"
"android.opengl.GLSurfaceView.SurfaceHolder () "," This method is part of the SurfaceHolder.Callback interface, and is not normally called or subclassed by clients of GLSurfaceView. <br /><br />"
"android.opengl.GLSurfaceView.Runnable () "," Queue a runnable to be run on the GL rendering thread. <br /><br />"
"android.opengl.GLSurfaceView.Renderer.GL10 () "," Called when the surface changed size. <br /><br />"
"android.opengl.GLSurfaceView.Renderer.EGLConfig () "," Called when the surface is created or recreated. <br /><br />"
"android.opengl.GLU.GL10 () "," Set up a perspective projection matrix <br /><br />"
"android.opengl.GLU.gluErrorString (int error) "," Return an error string from a GL or GLU error code. <br /><br />"
"android.opengl.GLU.gluProject (float objX, float objY, float objZ, float[] model, int modelOffset, float[] project, int projectOffset, int[] view, int viewOffset, float[] win, int winOffset) "," Map object coordinates into window coordinates. <br /><br />"
"android.opengl.GLU.gluUnProject (float winX, float winY, float winZ, float[] model, int modelOffset, float[] project, int projectOffset, int[] view, int viewOffset, float[] obj, int objOffset) "," Map window coordinates to object coordinates. <br /><br />"
"android.opengl.GLUtils.getEGLErrorString (int error) "," Return a string for the EGL error code, or the hex representation if the error is unknown. <br /><br />"
"android.opengl.GLUtils.Bitmap () "," A version of texSubImage2D() that takes an explicit type parameter as defined by the OpenGL ES specification. <br /><br />"
"android.opengl.Matrix.multiplyMV (float[] resultVec, int resultVecOffset, float[] lhsMat, int lhsMatOffset, float[] rhsVec, int rhsVecOffset) "," Multiplies a 4 element vector by a 4x4 matrix and stores the result in a 4-element column vector. <br /><br />"
"android.opengl.Matrix.translateM (float[] m, int mOffset, float x, float y, float z) "," Translates matrix m by x, y, and z in place. <br /><br />"
"android.opengl.Matrix.setRotateM (float[] rm, int rmOffset, float a, float x, float y, float z) "," Creates a matrix for rotation by angle a (in degrees) around the axis (x, y, z). <br /><br />"
"android.opengl.Matrix.rotateM (float[] m, int mOffset, float a, float x, float y, float z) "," Rotates matrix m in place by angle a (in degrees) around the axis (x, y, z). <br /><br />"
"android.opengl.Matrix.setIdentityM (float[] sm, int smOffset) "," Sets matrix m to the identity matrix. <br /><br />"
"android.opengl.Matrix.length (float x, float y, float z) "," Computes the length of a vector. <br /><br />"
"android.opengl.Matrix.scaleM (float[] sm, int smOffset, float[] m, int mOffset, float x, float y, float z) "," Scales matrix m by x, y, and z, putting the result in sm. <br /><br />"
"android.opengl.Matrix.transposeM (float[] mTrans, int mTransOffset, float[] m, int mOffset) "," Transposes a 4 x 4 matrix. <br /><br />"
"android.opengl.Matrix.orthoM (float[] m, int mOffset, float left, float right, float bottom, float top, float near, float far) "," Computes an orthographic projection matrix. <br /><br />"
"android.opengl.Matrix.setLookAtM (float[] rm, int rmOffset, float eyeX, float eyeY, float eyeZ, float centerX, float centerY, float centerZ, float upX, float upY, float upZ) "," Defines a viewing transformation in terms of an eye point, a center of view, and an up vector. <br /><br />"
"android.opengl.Matrix.translateM (float[] tm, int tmOffset, float[] m, int mOffset, float x, float y, float z) "," Translates matrix m by x, y, and z, putting the result in tm. <br /><br />"
"android.opengl.Matrix.multiplyMM (float[] result, int resultOffset, float[] lhs, int lhsOffset, float[] rhs, int rhsOffset) "," Multiplies two 4x4 matrices together and stores the result in a third 4x4 matrix. <br /><br />"
"android.opengl.Matrix.setRotateEulerM (float[] rm, int rmOffset, float x, float y, float z) "," Converts Euler angles to a rotation matrix. <br /><br />"
"android.opengl.Matrix.perspectiveM (float[] m, int offset, float fovy, float aspect, float zNear, float zFar) "," Defines a projection matrix in terms of a field of view angle, an aspect ratio, and z clip planes. <br /><br />"
"android.opengl.Matrix.rotateM (float[] rm, int rmOffset, float[] m, int mOffset, float a, float x, float y, float z) "," Rotates matrix m by angle a (in degrees) around the axis (x, y, z). <br /><br />"
"android.opengl.Matrix.invertM (float[] mInv, int mInvOffset, float[] m, int mOffset) "," Inverts a 4 x 4 matrix. <br /><br />"
"android.opengl.Matrix.scaleM (float[] m, int mOffset, float x, float y, float z) "," Scales matrix m in place by sx, sy, and sz. <br /><br />"
"android.opengl.Matrix.frustumM (float[] m, int offset, float left, float right, float bottom, float top, float near, float far) "," Defines a projection matrix in terms of six clip planes. <br /><br />"
"android.opengl.Visibility.visibilityTest (float[] ws, int wsOffset, float[] positions, int positionsOffset, char[] indices, int indicesOffset, int indexCount) "," Test whether a given triangle mesh is visible on the screen. <br /><br />"
"android.opengl.Visibility.computeBoundingSphere (float[] positions, int positionsOffset, int positionsCount, float[] sphere, int sphereOffset) "," Compute a bounding sphere for a set of points. <br /><br />"
"android.opengl.Visibility.frustumCullSpheres (float[] mvp, int mvpOffset, float[] spheres, int spheresOffset, int spheresCount, int[] results, int resultsOffset, int resultsCapacity) "," Given an OpenGL ES ModelView-Projection matrix (which implicitly describes a frustum) and a list of spheres, determine which spheres intersect the frustum. <br /><br />"
"android.os.AsyncTask&lt;Params,&nbsp;Progress,&nbsp;Result&gt;.Executor () "," Executes the task with the specified parameters. <br /><br />"
"android.os.AsyncTask&lt;Params,&nbsp;Progress,&nbsp;Result&gt;.TimeUnit () "," Waits if necessary for at most the given time for the computation to complete, and then retrieves its result. <br /><br />"
"android.os.AsyncTask&lt;Params,&nbsp;Progress,&nbsp;Result&gt;.execute (Params... params) "," Executes the task with the specified parameters. <br /><br />"
"android.os.AsyncTask&lt;Params,&nbsp;Progress,&nbsp;Result&gt;.execute (Object) () "," Convenience version of execute(Object) for use with a simple Runnable object. <br /><br />"
"android.os.AsyncTask&lt;Params,&nbsp;Progress,&nbsp;Result&gt;.cancel (boolean mayInterruptIfRunning) "," Attempts to cancel execution of this task. <br /><br />"
"android.os.AsyncTask&lt;Params,&nbsp;Progress,&nbsp;Result&gt;.getStatus () "," Returns the current status of this task. <br /><br />"
"android.os.AsyncTask&lt;Params,&nbsp;Progress,&nbsp;Result&gt;.get () "," Waits if necessary for the computation to complete, and then retrieves its result. <br /><br />"
"android.os.AsyncTask&lt;Params,&nbsp;Progress,&nbsp;Result&gt;.isCancelled () "," Returns true if this task was cancelled before it completed normally. <br /><br />"
"android.os.BaseBundle.String () "," Removes any entry with the given key from the mapping of this Bundle. <br /><br />"
"android.os.BaseBundle.clear () "," Removes all elements from the mapping of this Bundle. <br /><br />"
"android.os.BaseBundle.keySet () "," Returns a Set containing the Strings used as keys in this Bundle. <br /><br />"
"android.os.BaseBundle.isEmpty () "," Returns true if the mapping of this Bundle is empty, false otherwise. <br /><br />"
"android.os.BaseBundle.String[] () "," Inserts a String array value into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />"
"android.os.BaseBundle.size () "," Returns the number of mappings contained in this Bundle. <br /><br />"
"android.os.BaseBundle.PersistableBundle () "," Inserts all mappings from the given PersistableBundle into this BaseBundle. <br /><br />"
"android.os.BatteryManager.getIntProperty (int id) "," Return the value of a battery property of integer type. <br /><br />"
"android.os.BatteryManager.getLongProperty (int id) "," Return the value of a battery property of long type If the platform does not provide the property queried, this value will be Long.MIN_VALUE. <br /><br />"
"android.os.Binder.isBinderAlive () "," Check to see if the process that the binder is in is still alive. Note that if you're calling on a local binder, this always returns true because your process is alive if you're calling it. <br /><br />"
"android.os.Binder.String () "," Use information supplied to attachInterface() to return the associated IInterface if it matches the requested descriptor. <br /><br />"
"android.os.Binder.dump (FileDescriptor, PrintWriter, String[]) () "," Implemented to call the more convenient version dump(FileDescriptor, PrintWriter, String[]). <br /><br />"
"android.os.Binder.flushPendingCommands () "," Flush any Binder commands pending in the current thread to the kernel driver. <br /><br />"
"android.os.Binder.Parcel () "," Default implementation rewinds the parcels and calls onTransact. <br /><br />"
"android.os.Binder.dump (FileDescriptor, String[]) () "," Like dump(FileDescriptor, String[]), but ensures the target executes asynchronously. <br /><br />"
"android.os.Binder.getCallingPid () "," Return the ID of the process that sent you the current transaction that is being processed. <br /><br />"
"android.os.Binder.pingBinder () "," Default implementation always returns true -- if you got here, the object is alive. <br /><br />"
"android.os.Binder.getCallingUserHandle () "," Return the UserHandle assigned to the process that sent you the current transaction that is being processed. <br /><br />"
"android.os.Binder.getInterfaceDescriptor () "," Default implementation returns an empty interface name. <br /><br />"
"android.os.Binder.clearCallingIdentity () (long token) "," Restore the identity of the incoming IPC on the current thread back to a previously identity that was returned by clearCallingIdentity(). <br /><br />"
"android.os.Binder.joinThreadPool () "," Add the calling thread to the IPC thread pool. <br /><br />"
"android.os.Binder.getCallingUid () "," Return the Linux uid assigned to the process that sent you the current transaction that is being processed. <br /><br />"
"android.os.Binder.clearCallingIdentity () "," Reset the identity of the incoming IPC on the current thread. <br /><br />"
"android.os.Binder.IBinder.DeathRecipient () "," Local implementation is a no-op. <br /><br />"
"android.os.Build.getRadioVersion () "," Returns the version string for the radio firmware. <br /><br />"
"android.os.Bundle.ClassLoader () "," Changes the ClassLoader this Bundle uses when instantiating objects. <br /><br />"
"android.os.Bundle.String () "," Inserts an ArrayList  value into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />"
"android.os.Bundle.hasFileDescriptors () "," Reports whether the bundle contains any parcelled file descriptors. <br /><br />"
"android.os.Bundle.Size () "," Inserts a Size value into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />"
"android.os.Bundle.Parcelable[] () "," Inserts an array of Parcelable values into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />"
"android.os.Bundle.Parcel () "," Writes the Bundle contents to a Parcel, typically in order for it to be passed through an IBinder connection. <br /><br />"
"android.os.Bundle.Serializable () "," Inserts a Serializable value into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />"
"android.os.Bundle.CharSequence () "," Inserts an ArrayList  value into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />"
"android.os.Bundle.describeContents () "," Report the nature of this Parcelable's contents <br /><br />"
"android.os.Bundle.SizeF () "," Inserts a SizeF value into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />"
"android.os.Bundle.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.os.Bundle.IBinder () "," Inserts an IBinder value into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />"
"android.os.Bundle.Integer () "," Inserts an ArrayList  value into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />"
"android.os.Bundle.CharSequence[] () "," Inserts a CharSequence array value into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />"
"android.os.Bundle.clear () "," Removes all elements from the mapping of this Bundle. <br /><br />"
"android.os.Bundle.getClassLoader () "," Return the ClassLoader currently associated with this Bundle. <br /><br />"
"android.os.Bundle.clone () "," Clones the current Bundle. <br /><br />"
"android.os.Bundle.Parcelable () "," Inserts a SparceArray of Parcelable values into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />"
"android.os.Bundle.Bundle () "," Inserts a Bundle value into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />"
"android.os.CancellationSignal.CancellationSignal.OnCancelListener () "," Sets the cancellation listener to be called when canceled. <br /><br />"
"android.os.CancellationSignal.OperationCanceledException () "," Throws OperationCanceledException if the operation has been canceled. <br /><br />"
"android.os.CancellationSignal.isCanceled () "," Returns true if the operation has been canceled. <br /><br />"
"android.os.CancellationSignal.cancel () "," Cancels the operation and signals the cancellation listener. <br /><br />"
"android.os.CancellationSignal.OnCancelListener.cancel () () "," Called when cancel() is invoked. <br /><br />"
"android.os.ConditionVariable.block (long timeout) "," Block the current thread until the condition is opened or until timeout milliseconds have passed. <br /><br />"
"android.os.ConditionVariable.open () "," Open the condition, and release all threads that are blocked. <br /><br />"
"android.os.ConditionVariable.close () "," Reset the condition to the closed state. <br /><br />"
"android.os.ConditionVariable.block () "," Block the current thread until the condition is opened. <br /><br />"
"android.os.CountDownTimer.onFinish () "," Callback fired when the time is up. <br /><br />"
"android.os.CountDownTimer.onTick (long millisUntilFinished) "," Callback fired on regular interval. <br /><br />"
"android.os.CountDownTimer.start () "," Start the countdown. <br /><br />"
"android.os.CountDownTimer.cancel () "," Cancel the countdown. <br /><br />"
"android.os.Debug.Debug.MemoryInfo () "," Retrieves information about this processes memory usages. <br /><br />"
"android.os.Debug.resetThreadAllocCount () "," Clears the thread-local count of objects allocated. <br /><br />"
"android.os.Debug.resetThreadExternalAllocCount () "," This method was deprecated in API level 11. This method is now obsolete. <br /><br />"
"android.os.Debug.waitingForDebugger () "," Returns 'true' if one or more threads is waiting for a debugger to attach. <br /><br />"
"android.os.Debug.resetGlobalAllocCount () "," Clears the global count of objects allocated. <br /><br />"
"android.os.Debug.resetGlobalGcInvocationCount () "," Clears the count of non-concurrent GC invocations. <br /><br />"
"android.os.Debug.stopAllocCounting () "," Stop counting the number and aggregate size of memory allocations. <br /><br />"
"android.os.Debug.startAllocCounting () "," This method was deprecated in API level 18. Accurate counting is a burden on the runtime and may be removed. <br /><br />"
"android.os.Debug.changeDebugPort (int port) "," This method was deprecated in API level 3. no longer needed or useful <br /><br />"
"android.os.Debug.getBinderReceivedTransactions () "," Returns the number of received transactions from the binder driver. <br /><br />"
"android.os.Debug.waitForDebugger () "," Wait until a debugger attaches. <br /><br />"
"android.os.Debug.getGlobalExternalAllocSize () "," This method was deprecated in API level 11. This method is now obsolete. <br /><br />"
"android.os.Debug.getThreadExternalAllocSize () "," This method was deprecated in API level 11. This method is now obsolete. <br /><br />"
"android.os.Debug.threadCpuTimeNanos () "," Get an indication of thread CPU usage. <br /><br />"
"android.os.Debug.startNativeTracing () "," Enable qemu tracing. <br /><br />"
"android.os.Debug.resetGlobalFreedSize () "," Clears the global size of objects freed. <br /><br />"
"android.os.Debug.String[] () "," Get a debugging dump of a system service by name. <br /><br />"
"android.os.Debug.getGlobalExternalAllocCount () "," This method was deprecated in API level 11. This method is now obsolete. <br /><br />"
"android.os.Debug.resetGlobalExternalAllocSize () "," This method was deprecated in API level 11. This method is now obsolete. <br /><br />"
"android.os.Debug.setGlobalAllocationLimit (int limit) "," This method was deprecated in API level 11. This method is now obsolete. <br /><br />"
"android.os.Debug.stopNativeTracing () "," Stop qemu tracing. <br /><br />"
"android.os.Debug.getBinderDeathObjectCount () "," Returns the number of death notification links to Binder objects that exist in the current process. <br /><br />"
"android.os.Debug.startMethodTracing () "," Start method tracing with default log name and buffer size. <br /><br />"
"android.os.Debug.getNativeHeapAllocatedSize () "," Returns the amount of allocated memory in the native heap. <br /><br />"
"android.os.Debug.resetGlobalClassInitCount () "," Clears the count of classes initialized. <br /><br />"
"android.os.Debug.resetGlobalExternalAllocCount () "," This method was deprecated in API level 11. This method is now obsolete. <br /><br />"
"android.os.Debug.getBinderProxyObjectCount () "," Returns the number of references to remote proxy Binder objects that exist in the current process. <br /><br />"
"android.os.Debug.resetGlobalFreedCount () "," Clears the global count of objects freed. <br /><br />"
"android.os.Debug.getNativeHeapSize () "," Returns the size of the native heap. <br /><br />"
"android.os.Debug.resetGlobalAllocSize () "," Clears the global size of objects allocated. <br /><br />"
"android.os.Debug.resetThreadGcInvocationCount () "," Clears the thread-local count of non-concurrent GC invocations. <br /><br />"
"android.os.Debug.stopMethodTracing () "," Stop method tracing. <br /><br />"
"android.os.Debug.resetGlobalClassInitTime () "," Clears the count of time spent initializing classes. <br /><br />"
"android.os.Debug.isDebuggerConnected () "," Determine if a debugger is currently attached. <br /><br />"
"android.os.Debug.resetGlobalExternalFreedCount () "," This method was deprecated in API level 11. This method is now obsolete. <br /><br />"
"android.os.Debug.stop () "," Returns the number of thread-local non-concurrent GC invocations between a start and stop. <br /><br />"
"android.os.Debug.resetAllCounts () "," Clears all the global and thread-local memory allocation counters. <br /><br />"
"android.os.Debug.getBinderLocalObjectCount () "," Returns the number of active local Binder objects that exist in the current process. <br /><br />"
"android.os.Debug.printLoadedClasses (int flags) "," Dump a list of all currently loaded class to the log file. <br /><br />"
"android.os.Debug.String () "," Start sampling-based method tracing, specifying the trace log file name, the buffer size, and the sampling interval. <br /><br />"
"android.os.Debug.getPss () "," Retrieves the PSS memory used by the process as given by the smaps. <br /><br />"
"android.os.Debug.resetThreadAllocSize () "," Clears the thread-local count of objects allocated. <br /><br />"
"android.os.Debug.getLoadedClassCount () "," Get the number of loaded classes. <br /><br />"
"android.os.Debug.setAllocationLimit (int limit) "," This method was deprecated in API level 11. This method is now obsolete. <br /><br />"
"android.os.Debug.getGlobalExternalFreedSize () "," This method was deprecated in API level 11. This method is now obsolete. <br /><br />"
"android.os.Debug.getGlobalExternalFreedCount () "," This method was deprecated in API level 11. This method is now obsolete. <br /><br />"
"android.os.Debug.resetThreadExternalAllocSize () "," This method was deprecated in API level 11. This method is now obsolete. <br /><br />"
"android.os.Debug.resetGlobalExternalFreedSize () "," This method was deprecated in API level 11. This method is now obsolete. <br /><br />"
"android.os.Debug.getNativeHeapFreeSize () "," Returns the amount of free memory in the native heap. <br /><br />"
"android.os.Debug.getBinderSentTransactions () "," Returns the number of sent transactions from this process. <br /><br />"
"android.os.Debug.getThreadExternalAllocCount () "," This method was deprecated in API level 11. This method is now obsolete. <br /><br />"
"android.os.Debug.enableEmulatorTraceOutput () "," Enable 'emulator traces', in which information about the current method is made available to the 'emulator -trace' feature. <br /><br />"
"android.os.Debug.InstructionCount.resetAndStart () "," Reset counters and ensure counts are running. <br /><br />"
"android.os.Debug.InstructionCount.globalMethodInvocations () "," Return the total number of method-invocation instructions executed globally. <br /><br />"
"android.os.Debug.InstructionCount.collect () "," Collect instruction counts. <br /><br />"
"android.os.Debug.InstructionCount.globalTotal () "," Return the total number of instructions executed globally (i.e. <br /><br />"
"android.os.Debug.MemoryInfo.getTotalPss () "," Return total PSS memory usage in kB. <br /><br />"
"android.os.Debug.MemoryInfo.getTotalSharedDirty () "," Return total shared dirty memory usage in kB. <br /><br />"
"android.os.Debug.MemoryInfo.getTotalSwappablePss () "," Return total PSS memory usage in kB. <br /><br />"
"android.os.Debug.MemoryInfo.getTotalPrivateClean () "," Return total shared clean memory usage in kB. <br /><br />"
"android.os.Debug.MemoryInfo.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.os.Debug.MemoryInfo.getTotalSharedClean () "," Return total shared clean memory usage in kB. <br /><br />"
"android.os.Debug.MemoryInfo.getTotalPrivateDirty () "," Return total private dirty memory usage in kB. <br /><br />"
"android.os.Debug.MemoryInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.os.DropBoxManager.Entry.getTag () "," no description <br /><br />"
"android.os.DropBoxManager.Entry.getTimeMillis () "," no description <br /><br />"
"android.os.DropBoxManager.Entry.close () "," Close the input stream associated with this entry. <br /><br />"
"android.os.DropBoxManager.Entry.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.os.DropBoxManager.Entry.getFlags () "," no description <br /><br />"
"android.os.DropBoxManager.Entry.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.os.DropBoxManager.Entry.getText (int maxBytes) "," no description <br /><br />"
"android.os.DropBoxManager.Entry.getInputStream () "," no description <br /><br />"
"android.os.DropBoxManager.addText (String, String) () "," Stores the contents of a file, which may be ignored or discarded as with addText(String, String). <br /><br />"
"android.os.DropBoxManager.String () "," Checks any blacklists (set in system settings) to see whether a certain tag is allowed. <br /><br />"
"android.os.Environment.getExternalStorageState (File) () "," This method was deprecated in API level 21. use getExternalStorageState(File) <br /><br />"
"android.os.Environment.String () "," Get a top-level public external storage directory for placing files of a particular type. <br /><br />"
"android.os.Environment.isExternalStorageEmulated () "," Returns whether the primary 'external' storage device is emulated. <br /><br />"
"android.os.Environment.isExternalStorageRemovable () "," Returns whether the primary 'external' storage device is removable. <br /><br />"
"android.os.Environment.getExternalStorageDirectory () "," Return the primary external storage directory. <br /><br />"
"android.os.Environment.File () "," Returns whether the storage device that provides the given path is removable. <br /><br />"
"android.os.Environment.getExternalStorageState () "," Returns the current state of the primary 'external' storage device. <br /><br />"
"android.os.Environment.getDownloadCacheDirectory () "," Return the download/cache content directory. <br /><br />"
"android.os.Environment.getDataDirectory () "," Return the user data directory. <br /><br />"
"android.os.Environment.getRootDirectory () "," Return root of the 'system' partition holding the core Android OS. <br /><br />"
"android.os.FileObserver.stopWatching () "," Stop watching for events. <br /><br />"
"android.os.FileObserver.String () "," The event handler, which must be implemented by subclasses. <br /><br />"
"android.os.FileObserver.startWatching () "," Start watching for events. <br /><br />"
"android.os.Handler.Callback.Message () "," no description <br /><br />"
"android.os.Handler.String () "," no description <br /><br />"
"android.os.Handler.removeMessages (int what) "," Remove any pending posts of messages with code 'what' that are in the message queue. <br /><br />"
"android.os.Handler.sendEmptyMessageAtTime (int what, long uptimeMillis) "," Sends a Message containing only the what value, to be delivered at a specific time. <br /><br />"
"android.os.Handler.Message () "," Enqueue a message into the message queue after all pending messages before (current time + delayMillis). <br /><br />"
"android.os.Handler.getLooper () "," no description <br /><br />"
"android.os.Handler.obtainMessage () (int what, int arg1, int arg2) "," Same as obtainMessage(), except that it also sets the what, arg1 and arg2 members of the returned Message. <br /><br />"
"android.os.Handler.Object () "," Remove any pending posts of messages with code 'what' and whose obj is 'object' that are in the message queue. <br /><br />"
"android.os.Handler.obtainMessage () () "," Same as obtainMessage(), except that it also sets the what and obj members of the returned Message. <br /><br />"
"android.os.Handler.obtainMessage () (int what) "," Same as obtainMessage(), except that it also sets the what member of the returned Message. <br /><br />"
"android.os.Handler.hasMessages (int what) "," Check if there are any pending posts of messages with code 'what' in the message queue. <br /><br />"
"android.os.Handler.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.os.Handler.sendEmptyMessageDelayed (int what, long delayMillis) "," Sends a Message containing only the what value, to be delivered after the specified amount of time elapses. <br /><br />"
"android.os.Handler.sendEmptyMessage (int what) "," Sends a Message containing only the what value. <br /><br />"
"android.os.Handler.Runnable () "," Remove any pending posts of Runnable r that are in the message queue. <br /><br />"
"android.os.HandlerThread.getThreadId () "," Returns the identifier of this thread. <br /><br />"
"android.os.HandlerThread.run () "," Calls the run() method of the Runnable object the receiver holds. <br /><br />"
"android.os.HandlerThread.getLooper () "," This method returns the Looper associated with this thread. <br /><br />"
"android.os.HandlerThread.quitSafely () "," Quits the handler thread's looper safely. <br /><br />"
"android.os.HandlerThread.quit () "," Quits the handler thread's looper. <br /><br />"
"android.os.IBinder.DeathRecipient.binderDied () "," no description <br /><br />"
"android.os.IBinder.isBinderAlive () "," Check to see if the process that the binder is in is still alive. <br /><br />"
"android.os.IBinder.getInterfaceDescriptor () "," Get the canonical name of the interface supported by this binder. <br /><br />"
"android.os.IBinder.String () "," Attempt to retrieve a local implementation of an interface for this Binder object. <br /><br />"
"android.os.IBinder.Parcel () "," Perform a generic operation with the object. <br /><br />"
"android.os.IBinder.dump (FileDescriptor, String[]) () "," Like dump(FileDescriptor, String[]) but always executes asynchronously. <br /><br />"
"android.os.IBinder.String[] () "," Print the object's state into the given stream. <br /><br />"
"android.os.IBinder.IBinder.DeathRecipient () "," Remove a previously registered death notification. <br /><br />"
"android.os.IBinder.pingBinder () "," Check to see if the object still exists. <br /><br />"
"android.os.IInterface.asBinder () "," Retrieve the Binder object associated with this interface. <br /><br />"
"android.os.Looper.String () "," no description <br /><br />"
"android.os.Looper.myLooper () "," Return the Looper object associated with the current thread. <br /><br />"
"android.os.Looper.MessageQueue () "," Return the MessageQueue object associated with the current thread. <br /><br />"
"android.os.Looper.Printer () "," Control logging of messages as they are processed by this Looper. <br /><br />"
"android.os.Looper.quitSafely () "," Quits the looper safely. <br /><br />"
"android.os.Looper.quit () "," Quits the looper. <br /><br />"
"android.os.Looper.prepareMainLooper () "," Initialize the current thread as a looper, marking it as an application's main looper. <br /><br />"
"android.os.Looper.loop () "," Run the message queue in this thread. <br /><br />"
"android.os.Looper.prepare () "," Initialize the current thread as a looper. <br /><br />"
"android.os.Looper.getThread () "," Return the Thread associated with this Looper. <br /><br />"
"android.os.Looper.getMainLooper () "," Returns the application's main looper, which lives in the main thread of the application. <br /><br />"
"android.os.Looper.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.os.MemoryFile.length () "," Returns the length of the memory file. <br /><br />"
"android.os.MemoryFile.writeBytes (byte[] buffer, int srcOffset, int destOffset, int count) "," Write bytes to the memory file. <br /><br />"
"android.os.MemoryFile.readBytes (byte[] buffer, int srcOffset, int destOffset, int count) "," Reads bytes from the memory file. <br /><br />"
"android.os.MemoryFile.getOutputStream () "," Creates a new OutputStream for writing to the memory file. <br /><br />"
"android.os.MemoryFile.allowPurging (boolean allowPurging) "," Enables or disables purging of the memory file. <br /><br />"
"android.os.MemoryFile.close () "," Closes the memory file. <br /><br />"
"android.os.MemoryFile.isPurgingAllowed () "," Is memory file purging enabled? <br /><br />"
"android.os.MemoryFile.getInputStream () "," Creates a new InputStream for reading from the memory file. <br /><br />"
"android.os.Message.getCallback () "," Retrieve callback object that will execute when this message is handled. <br /><br />"
"android.os.Message.Message () "," Make this message like o. <br /><br />"
"android.os.Message.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.os.Message.Looper () "," Returns true if the message is asynchronous, meaning that it is not subject to Looper synchronization barriers. <br /><br />"
"android.os.Message.peekData () "," Like getData(), but does not lazily create the Bundle. <br /><br />"
"android.os.Message.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.os.Message.getWhen () "," Return the targeted delivery time of this message, in milliseconds. <br /><br />"
"android.os.Message.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.os.Message.Handler () "," no description <br /><br />"
"android.os.Message.Looper (boolean async) "," Sets whether the message is asynchronous, meaning that it is not subject to Looper synchronization barriers. <br /><br />"
"android.os.Message.getTarget () () "," Sends this Message to the Handler specified by getTarget(). <br /><br />"
"android.os.Message.getData () "," Obtains a Bundle of arbitrary data associated with this event, lazily creating it if necessary. <br /><br />"
"android.os.Message.obtain () "," Return a new Message instance from the global pool. <br /><br />"
"android.os.Message.recycle () "," Return a Message instance to the global pool. <br /><br />"
"android.os.Message.Bundle () "," Sets a Bundle of arbitrary data values. <br /><br />"
"android.os.Message.obtain () () "," Same as obtain(), but copies the values of an existing message (including its target) into the new one. <br /><br />"
"android.os.Message.obtain (Handler) () "," Same as obtain(Handler), but assigns a callback Runnable on the Message that is returned. <br /><br />"
"android.os.MessageQueue.IdleHandler.queueIdle () "," Called when the message queue has run out of messages and will now wait for more. <br /><br />"
"android.os.Messenger.Message () "," Send a Message to this Messenger's Handler. <br /><br />"
"android.os.Messenger.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.os.Messenger.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.os.Messenger.Object () "," Comparison operator on two Messenger objects, such that true is returned then they both point to the same Handler. <br /><br />"
"android.os.Messenger.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.os.Messenger.getBinder () "," Retrieve the IBinder that this Messenger is using to communicate with its associated Handler. <br /><br />"
"android.os.Parcel.writeBooleanArray (boolean[] val) "," no description <br /><br />"
"android.os.Parcel.setDataCapacity (int size) "," Change the capacity (current available space) of the parcel. <br /><br />"
"android.os.Parcel.createBooleanArray () "," no description <br /><br />"
"android.os.Parcel.createStringArrayList () "," Read and return a new ArrayList containing String objects from the parcel that was written with writeStringList(List  )  at the current dataPosition(). <br /><br />"
"android.os.Parcel.readBooleanArray (boolean[] val) "," no description <br /><br />"
"android.os.Parcel.readStrongBinder () "," Read an object from the parcel at the current dataPosition(). <br /><br />"
"android.os.Parcel.writeTypedArray (T[] val, int parcelableFlags) "," Flatten a heterogeneous array containing a particular object type into the parcel, at the current dataPosition() and growing dataCapacity() if needed. <br /><br />"
"android.os.Parcel.writeByte (byte val) "," Write a byte value into the parcel at the current dataPosition(), growing dataCapacity() if needed. <br /><br />"
"android.os.Parcel.readCharArray (char[] val) "," no description <br /><br />"
"android.os.Parcel.IBinder () "," Write an object into the parcel at the current dataPosition(), growing dataCapacity() if needed. <br /><br />"
"android.os.Parcel.List () "," Flatten a List containing a particular object type into the parcel, at the current dataPosition() and growing dataCapacity() if needed. <br /><br />"
"android.os.Parcel.readLong () "," Read a long integer value from the parcel at the current dataPosition(). <br /><br />"
"android.os.Parcel.FileDescriptor () "," Write a FileDescriptor into the parcel at the current dataPosition(), growing dataCapacity() if needed. <br /><br />"
"android.os.Parcel.String[] () "," no description <br /><br />"
"android.os.Parcel.dataPosition () "," Returns the current position in the parcel data. <br /><br />"
"android.os.Parcel.IInterface () "," Write an object into the parcel at the current dataPosition(), growing dataCapacity() if needed. <br /><br />"
"android.os.Parcel.createFloatArray () "," no description <br /><br />"
"android.os.Parcel.readByteArray (byte[] val) "," Read a byte[] object from the parcel and copy it into the given byte array. <br /><br />"
"android.os.Parcel.ClassLoader () "," Read a typed object from a parcel. <br /><br />"
"android.os.Parcel.readSize () "," Read a Size from the parcel at the current dataPosition(). <br /><br />"
"android.os.Parcel.createCharArray () "," no description <br /><br />"
"android.os.Parcel.writeParcelableArray (T[] value, int parcelableFlags) "," Write a heterogeneous array of Parcelable objects into the Parcel. <br /><br />"
"android.os.Parcel.Parcel () "," no description <br /><br />"
"android.os.Parcel.readPersistableBundle () "," Read and return a new Bundle object from the parcel at the current dataPosition(). <br /><br />"
"android.os.Parcel.Object () "," Flatten a generic object in to a parcel. <br /><br />"
"android.os.Parcel.setDataSize (int size) "," Change the amount of data in the parcel. <br /><br />"
"android.os.Parcel.SizeF () "," Flatten a SizeF into the parcel at the current dataPosition(), growing dataCapacity() if needed. <br /><br />"
"android.os.Parcel.createBinderArray () "," no description <br /><br />"
"android.os.Parcel.marshall () "," Returns the raw bytes of the parcel. <br /><br />"
"android.os.Parcel.dataPosition () () "," Store or read an IBinder interface token in the parcel at the current dataPosition(). <br /><br />"
"android.os.Parcel.dataSize () "," Returns the total amount of data contained in the parcel. <br /><br />"
"android.os.Parcel.createByteArray () "," Read and return a byte[] object from the parcel. <br /><br />"
"android.os.Parcel.writeInt (int val) "," Write an integer value into the parcel at the current dataPosition(), growing dataCapacity() if needed. <br /><br />"
"android.os.Parcel.obtain () "," Retrieve a new Parcel object from the pool. <br /><br />"
"android.os.Parcel.readByte () "," Read a byte value from the parcel at the current dataPosition(). <br /><br />"
"android.os.Parcel.readString () "," Read a string value from the parcel at the current dataPosition(). <br /><br />"
"android.os.Parcel.PersistableBundle () "," Flatten a PersistableBundle into the parcel at the current dataPosition(), growing dataCapacity() if needed. <br /><br />"
"android.os.Parcel.setDataPosition (int pos) "," Move the current read/write position in the parcel. <br /><br />"
"android.os.Parcel.hasFileDescriptors () "," Report whether the parcel contains any marshalled file descriptors. <br /><br />"
"android.os.Parcel.Size () "," Flatten a Size into the parcel at the current dataPosition(), growing dataCapacity() if needed. <br /><br />"
"android.os.Parcel.writeDouble (double val) "," Write a double precision floating point value into the parcel at the current dataPosition(), growing dataCapacity() if needed. <br /><br />"
"android.os.Parcel.readDoubleArray (double[] val) "," no description <br /><br />"
"android.os.Parcel.SparseBooleanArray () "," no description <br /><br />"
"android.os.Parcel.createStringArray () "," no description <br /><br />"
"android.os.Parcel.readFileDescriptor () "," Read a FileDescriptor from the parcel at the current dataPosition(). <br /><br />"
"android.os.Parcel.createBinderArrayList () "," Read and return a new ArrayList containing IBinder objects from the parcel that was written with writeBinderList(List  )  at the current dataPosition(). <br /><br />"
"android.os.Parcel.createIntArray () "," no description <br /><br />"
"android.os.Parcel.readSerializable () "," Read and return a new Serializable object from the parcel. <br /><br />"
"android.os.Parcel.IBinder[] () "," no description <br /><br />"
"android.os.Parcel.createLongArray () "," no description <br /><br />"
"android.os.Parcel.Creator () "," Read into the given List items containing a particular object type that were written with writeTypedList(List  )  at the current dataPosition(). <br /><br />"
"android.os.Parcel.writeNoException () "," Special function for writing information at the front of the Parcel indicating that no exception occurred. <br /><br />"
"android.os.Parcel.readDouble () "," Read a double precision floating point value from the parcel at the current dataPosition(). <br /><br />"
"android.os.Parcel.Parcelable () "," Flatten the name of the class of the Parcelable and its contents into the parcel. <br /><br />"
"android.os.Parcel.readException () "," Special function for reading an exception result from the header of a parcel, to be used after receiving the result of a transaction. <br /><br />"
"android.os.Parcel.writeDoubleArray (double[] val) "," no description <br /><br />"
"android.os.Parcel.readSparseBooleanArray () "," Read and return a new SparseBooleanArray object from the parcel at the current dataPosition(). <br /><br />"
"android.os.Parcel.dataCapacity () (byte[] b, int offset, int len) "," Write a byte array into the parcel at the current dataPosition(), growing dataCapacity() if needed. <br /><br />"
"android.os.Parcel.String () "," Flatten a List containing String objects into the parcel, at the current dataPosition() and growing dataCapacity() if needed. <br /><br />"
"android.os.Parcel.writeFloat (float val) "," Write a floating point value into the parcel at the current dataPosition(), growing dataCapacity() if needed. <br /><br />"
"android.os.Parcel.readFloat () "," Read a floating point value from the parcel at the current dataPosition(). <br /><br />"
"android.os.Parcel.readSizeF () "," Read a SizeF from the parcel at the current dataPosition(). <br /><br />"
"android.os.Parcel.writeLongArray (long[] val) "," no description <br /><br />"
"android.os.Parcel.Serializable () "," Write a generic serializable object in to a Parcel. <br /><br />"
"android.os.Parcel.writeFloatArray (float[] val) "," no description <br /><br />"
"android.os.Parcel.Object[] () "," Flatten an Object array into the parcel at the current dataPosition(), growing dataCapacity() if needed. <br /><br />"
"android.os.Parcel.Exception () "," Special function for writing an exception result at the header of a parcel, to be used when returning an exception from a transaction. <br /><br />"
"android.os.Parcel.dataCapacity () (byte[] b) "," Write a byte array into the parcel at the current dataPosition(), growing dataCapacity() if needed. <br /><br />"
"android.os.Parcel.writeCharArray (char[] val) "," no description <br /><br />"
"android.os.Parcel.readLongArray (long[] val) "," no description <br /><br />"
"android.os.Parcel.createDoubleArray () "," no description <br /><br />"
"android.os.Parcel.readBundle () "," Read and return a new Bundle object from the parcel at the current dataPosition(). <br /><br />"
"android.os.Parcel.writeIntArray (int[] val) "," no description <br /><br />"
"android.os.Parcel.unmarshall (byte[] data, int offset, int length) "," Set the bytes in data to be the raw bytes of this Parcel. <br /><br />"
"android.os.Parcel.writeLong (long val) "," Write a long integer value into the parcel at the current dataPosition(), growing dataCapacity() if needed. <br /><br />"
"android.os.Parcel.readIntArray (int[] val) "," no description <br /><br />"
"android.os.Parcel.recycle () "," Put a Parcel object back into the pool. <br /><br />"
"android.os.Parcel.readFloatArray (float[] val) "," no description <br /><br />"
"android.os.Parcel.readInt () "," Read an integer value from the parcel at the current dataPosition(). <br /><br />"
"android.os.Parcel.writeBundle (Bundle) () "," Please use writeBundle(Bundle) instead. <br /><br />"
"android.os.Parcel.dataAvail () "," Returns the amount of data remaining to be read from the parcel. <br /><br />"
"android.os.Parcel.Bundle () "," Flatten a Bundle into the parcel at the current dataPosition(), growing dataCapacity() if needed. <br /><br />"
"android.os.Parcel.dataCapacity () "," Returns the total amount of space in the parcel. <br /><br />"
"android.os.Parcelable.ClassLoaderCreator&lt;T&gt;.Parcelable.writeToParcel () () "," Create a new instance of the Parcelable class, instantiating it from the given Parcel whose data had previously been written by Parcelable.writeToParcel() and using the given ClassLoader. <br /><br />"
"android.os.Parcelable.Creator&lt;T&gt;.Parcelable.writeToParcel () () "," Create a new instance of the Parcelable class, instantiating it from the given Parcel whose data had previously been written by Parcelable.writeToParcel(). <br /><br />"
"android.os.Parcelable.Creator&lt;T&gt;.newArray (int size) "," Create a new array of the Parcelable class. <br /><br />"
"android.os.Parcelable.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.os.Parcelable.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.os.ParcelFileDescriptor.AutoCloseInputStream.close () "," Closes this stream. <br /><br />"
"android.os.ParcelFileDescriptor.AutoCloseOutputStream.close () "," Closes this stream. <br /><br />"
"android.os.ParcelFileDescriptor.String () "," Close the ParcelFileDescriptor, informing any peer that an error occurred while processing. <br /><br />"
"android.os.ParcelFileDescriptor.adoptFd (int fd) "," Take ownership of a raw native fd in to a new ParcelFileDescriptor. <br /><br />"
"android.os.ParcelFileDescriptor.getStatSize () "," Return the total size of the file representing this fd, as determined by stat(). <br /><br />"
"android.os.ParcelFileDescriptor.ParcelFileDescriptor.OnCloseListener () "," Create a new ParcelFileDescriptor accessing a given file. <br /><br />"
"android.os.ParcelFileDescriptor.close () "," Close the ParcelFileDescriptor. <br /><br />"
"android.os.ParcelFileDescriptor.Socket () "," Create a new ParcelFileDescriptor from the specified Socket. <br /><br />"
"android.os.ParcelFileDescriptor.fromFd (int fd) "," Create a new ParcelFileDescriptor from a raw native fd. <br /><br />"
"android.os.ParcelFileDescriptor.dup () "," Create a new ParcelFileDescriptor that is a dup of the existing FileDescriptor. <br /><br />"
"android.os.ParcelFileDescriptor.createReliableSocketPair () "," Create two ParcelFileDescriptors structured as a pair of sockets connected to each other. <br /><br />"
"android.os.ParcelFileDescriptor.createSocketPair () "," Create two ParcelFileDescriptors structured as a pair of sockets connected to each other. <br /><br />"
"android.os.ParcelFileDescriptor.getFd () "," Return the native fd int for this ParcelFileDescriptor. <br /><br />"
"android.os.ParcelFileDescriptor.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.os.ParcelFileDescriptor.getFileDescriptor () "," Retrieve the actual FileDescriptor associated with this object. <br /><br />"
"android.os.ParcelFileDescriptor.DatagramSocket () "," Create a new ParcelFileDescriptor from the specified DatagramSocket. <br /><br />"
"android.os.ParcelFileDescriptor.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.os.ParcelFileDescriptor.PARCELABLE_WRITE_RETURN_VALUE () "," Flatten this object in to a Parcel. If PARCELABLE_WRITE_RETURN_VALUE is set in flags, the file descriptor will be closed after a copy is written to the Parcel. <br /><br />"
"android.os.ParcelFileDescriptor.checkError () "," Detect and throw if the other end of a pipe or socket pair encountered an error or crashed. <br /><br />"
"android.os.ParcelFileDescriptor.createReliablePipe () "," Create two ParcelFileDescriptors structured as a data pipe. <br /><br />"
"android.os.ParcelFileDescriptor.createPipe () "," Create two ParcelFileDescriptors structured as a data pipe. <br /><br />"
"android.os.ParcelFileDescriptor.File () "," Create a new ParcelFileDescriptor accessing a given file. <br /><br />"
"android.os.ParcelFileDescriptor.FileDescriptor () "," Create a new ParcelFileDescriptor that is a dup of an existing FileDescriptor. <br /><br />"
"android.os.ParcelFileDescriptor.open (File, int) () "," Converts a string representing a file mode, such as 'rw', into a bitmask suitable for use with open(File, int). <br /><br />"
"android.os.ParcelFileDescriptor.detachFd () "," Return the native fd int for this ParcelFileDescriptor and detach it from the object here. <br /><br />"
"android.os.ParcelFileDescriptor.canDetectErrors () "," Indicates if this ParcelFileDescriptor can communicate and detect remote errors/crashes. <br /><br />"
"android.os.ParcelFileDescriptor.OnCloseListener.IOException () "," Event indicating the ParcelFileDescriptor to which this listener was attached has been closed. <br /><br />"
"android.os.ParcelUuid.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.os.ParcelUuid.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.os.ParcelUuid.Object () "," Compares this ParcelUuid to another object for equality. <br /><br />"
"android.os.ParcelUuid.UUID () "," Get the UUID represented by the ParcelUuid. <br /><br />"
"android.os.ParcelUuid.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.os.ParcelUuid.toString () "," Returns a string representation of the ParcelUuid For example: 0000110B-0000-1000-8000-00805F9B34FB will be the return value. <br /><br />"
"android.os.PatternMatcher.String () "," no description <br /><br />"
"android.os.PatternMatcher.getType () "," no description <br /><br />"
"android.os.PatternMatcher.getPath () "," no description <br /><br />"
"android.os.PatternMatcher.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.os.PatternMatcher.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.os.PatternMatcher.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.os.PersistableBundle.String () "," Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key. <br /><br />"
"android.os.PersistableBundle.clone () "," Clones the current PersistableBundle. <br /><br />"
"android.os.PersistableBundle.Parcel () "," Writes the PersistableBundle contents to a Parcel, typically in order for it to be passed through an IBinder connection. <br /><br />"
"android.os.PersistableBundle.describeContents () "," Report the nature of this Parcelable's contents <br /><br />"
"android.os.PersistableBundle.PersistableBundle () "," Inserts a PersistableBundle value into the mapping of this Bundle, replacing any existing value for the given key. <br /><br />"
"android.os.PersistableBundle.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.os.PowerManager.String () "," Reboot the device. <br /><br />"
"android.os.PowerManager.isInteractive () () "," This method was deprecated in API level 20. Use isInteractive() instead. <br /><br />"
"android.os.PowerManager.isInteractive () "," Returns true if the device is in an interactive state. <br /><br />"
"android.os.PowerManager.isWakeLockLevelSupported (int level) "," Returns true if the specified wake lock level is supported. <br /><br />"
"android.os.PowerManager.isPowerSaveMode () "," Returns true if the device is currently in power save mode. <br /><br />"
"android.os.PowerManager.WakeLock.isHeld () "," Returns true if the wake lock has been acquired but not yet released. <br /><br />"
"android.os.PowerManager.WakeLock.acquire () "," Acquires the wake lock. <br /><br />"
"android.os.PowerManager.WakeLock.WorkSource () "," Sets the work source associated with the wake lock. <br /><br />"
"android.os.PowerManager.WakeLock.acquire (long timeout) "," Acquires the wake lock with a timeout. <br /><br />"
"android.os.PowerManager.WakeLock.release (int flags) "," Releases the wake lock with flags to modify the release behavior. <br /><br />"
"android.os.PowerManager.WakeLock.setReferenceCounted (boolean value) "," Sets whether this WakeLock is reference counted. <br /><br />"
"android.os.PowerManager.WakeLock.release () "," Releases the wake lock. <br /><br />"
"android.os.PowerManager.WakeLock.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.os.Process.myUid () "," Returns the identifier of this process's uid. <br /><br />"
"android.os.Process.String () "," Returns the UID assigned to a particular user name, or -1 if there is none. <br /><br />"
"android.os.Process.sendSignal (int, int) () "," Returns the identifier of this process, which can be used with killProcess(int) and sendSignal(int, int). <br /><br />"
"android.os.Process.myUserHandle () "," Returns this process's user handle. <br /><br />"
"android.os.Process.getElapsedCpuTime () "," Returns elapsed milliseconds of the time this process has run. <br /><br />"
"android.os.Process.supportsProcesses () "," This method was deprecated in API level 14. This method always returns true. Do not use. <br /><br />"
"android.os.Process.killProcess (int pid) "," Kill the process with the given PID. <br /><br />"
"android.os.Process.setThreadPriority (int priority) "," Set the priority of the calling thread, based on Linux priorities. <br /><br />"
"android.os.Process.getThreadPriority (int tid) "," Return the current priority of a thread, based on Linux priorities. <br /><br />"
"android.os.Process.setThreadPriority (int tid, int priority) "," Set the priority of a thread, based on Linux priorities. <br /><br />"
"android.os.Process.setThreadPriority (int, int) () "," Returns the identifier of the calling thread, which be used with setThreadPriority(int, int). <br /><br />"
"android.os.Process.sendSignal (int pid, int signal) "," Send a signal to the given process. <br /><br />"
"android.os.RecoverySystem.Context () "," Reboots the device and wipes the user data and cache partitions. <br /><br />"
"android.os.RecoverySystem.File () "," Verify the cryptographic signature of a system update package before installing it. <br /><br />"
"android.os.RecoverySystem.ProgressListener.onProgress (int progress) "," Called periodically as the verification progresses. <br /><br />"
"android.os.RemoteCallbackList&lt;E&nbsp;extends&nbsp;android.os.IInterface&gt;.onCallbackDied (E, Object) (E callback) "," Old version of onCallbackDied(E, Object) that does not provide a cookie. <br /><br />"
"android.os.RemoteCallbackList&lt;E&nbsp;extends&nbsp;android.os.IInterface&gt;.beginBroadcast () (int index) "," Retrieve an item in the active broadcast that was previously started with beginBroadcast(). <br /><br />"
"android.os.RemoteCallbackList&lt;E&nbsp;extends&nbsp;android.os.IInterface&gt;.register (E, Object) (E callback) "," Simple version of register(E, Object) that does not take a cookie object. <br /><br />"
"android.os.RemoteCallbackList&lt;E&nbsp;extends&nbsp;android.os.IInterface&gt;.getBroadcastItem (int) (int index) "," Retrieve the cookie associated with the item returned by getBroadcastItem(int). <br /><br />"
"android.os.RemoteCallbackList&lt;E&nbsp;extends&nbsp;android.os.IInterface&gt;.register (E) (E callback) "," Remove from the list a callback that was previously added with register(E). <br /><br />"
"android.os.RemoteCallbackList&lt;E&nbsp;extends&nbsp;android.os.IInterface&gt;.Object () "," Add a new callback to the list. <br /><br />"
"android.os.RemoteCallbackList&lt;E&nbsp;extends&nbsp;android.os.IInterface&gt;.beginBroadcast () "," Prepare to start making calls to the currently registered callbacks. <br /><br />"
"android.os.RemoteCallbackList&lt;E&nbsp;extends&nbsp;android.os.IInterface&gt;.getRegisteredCallbackCount () "," Returns the number of registered callbacks. <br /><br />"
"android.os.RemoteCallbackList&lt;E&nbsp;extends&nbsp;android.os.IInterface&gt;.kill () "," Disable this callback list. <br /><br />"
"android.os.RemoteCallbackList&lt;E&nbsp;extends&nbsp;android.os.IInterface&gt;.beginBroadcast () () "," Clean up the state of a broadcast previously initiated by calling beginBroadcast(). <br /><br />"
"android.os.ResultReceiver.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.os.ResultReceiver.Bundle () "," Deliver a result to this receiver. <br /><br />"
"android.os.ResultReceiver.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.os.StatFs.String () "," Perform a restat of the file system referenced by this object. <br /><br />"
"android.os.StatFs.getBlockCountLong () "," The total number of blocks on the file system. <br /><br />"
"android.os.StatFs.getAvailableBytes () "," The number of bytes that are free on the file system and available to applications. <br /><br />"
"android.os.StatFs.getAvailableBlocksLong () () "," This method was deprecated in API level 18. Use getAvailableBlocksLong() instead. <br /><br />"
"android.os.StatFs.getFreeBlocksLong () () "," This method was deprecated in API level 18. Use getFreeBlocksLong() instead. <br /><br />"
"android.os.StatFs.getBlockSizeLong () "," The size, in bytes, of a block on the file system. <br /><br />"
"android.os.StatFs.getTotalBytes () "," The total number of bytes supported by the file system. <br /><br />"
"android.os.StatFs.getFreeBytes () "," The number of bytes that are free on the file system, including reserved blocks (that are not available to normal applications). <br /><br />"
"android.os.StatFs.getAvailableBlocksLong () "," The number of blocks that are free on the file system and available to applications. <br /><br />"
"android.os.StatFs.getBlockSizeLong () () "," This method was deprecated in API level 18. Use getBlockSizeLong() instead. <br /><br />"
"android.os.StatFs.getFreeBlocksLong () "," The total number of blocks that are free on the file system, including reserved blocks (that are not available to normal applications). <br /><br />"
"android.os.StatFs.getBlockCountLong () () "," This method was deprecated in API level 18. Use getBlockCountLong() instead. <br /><br />"
"android.os.storage.OnObbStateChangeListener.String () "," Called when an OBB has changed states. <br /><br />"
"android.os.storage.StorageManager.String () "," Check whether an Opaque Binary Blob (OBB) is mounted or not. <br /><br />"
"android.os.storage.StorageManager.OnObbStateChangeListener () "," Unmount an Opaque Binary Blob (OBB) file asynchronously. <br /><br />"
"android.os.StrictMode.ThreadPolicy.Builder.permitCustomSlowCalls () "," Disable detection of slow calls. <br /><br />"
"android.os.StrictMode.ThreadPolicy.Builder.detectNetwork () "," Enable detection of network operations. <br /><br />"
"android.os.StrictMode.ThreadPolicy.Builder.penaltyDialog () "," Show an annoying dialog to the developer on detected violations, rate-limited to be only a little annoying. <br /><br />"
"android.os.StrictMode.ThreadPolicy.Builder.penaltyDeath () "," Crash the whole process on violation. <br /><br />"
"android.os.StrictMode.ThreadPolicy.Builder.permitDiskReads () "," Disable detection of disk reads. <br /><br />"
"android.os.StrictMode.ThreadPolicy.Builder.build () "," Construct the ThreadPolicy instance. <br /><br />"
"android.os.StrictMode.ThreadPolicy.Builder.detectAll () "," Detect everything that's potentially suspect. <br /><br />"
"android.os.StrictMode.ThreadPolicy.Builder.permitNetwork () "," Disable detection of network operations. <br /><br />"
"android.os.StrictMode.ThreadPolicy.Builder.permitAll () "," Disable the detection of everything. <br /><br />"
"android.os.StrictMode.ThreadPolicy.Builder.permitDiskWrites () "," Disable detection of disk writes. <br /><br />"
"android.os.StrictMode.ThreadPolicy.Builder.penaltyDeathOnNetwork () "," Crash the whole process on any network usage. <br /><br />"
"android.os.StrictMode.ThreadPolicy.Builder.penaltyFlashScreen () "," Flash the screen during a violation. <br /><br />"
"android.os.StrictMode.ThreadPolicy.Builder.detectCustomSlowCalls () "," Enable detection of slow calls. <br /><br />"
"android.os.StrictMode.ThreadPolicy.Builder.detectDiskWrites () "," Enable detection of disk writes. <br /><br />"
"android.os.StrictMode.ThreadPolicy.Builder.DropBox () "," Enable detected violations log a stacktrace and timing data to the DropBox on policy violation. <br /><br />"
"android.os.StrictMode.ThreadPolicy.Builder.detectDiskReads () "," Enable detection of disk reads. <br /><br />"
"android.os.StrictMode.ThreadPolicy.Builder.penaltyLog () "," Log detected violations to the system log. <br /><br />"
"android.os.StrictMode.ThreadPolicy.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.os.StrictMode.VmPolicy.Builder.Uri () "," Detect when a file:// Uri is exposed beyond this app. <br /><br />"
"android.os.StrictMode.VmPolicy.Builder.Context () "," Detect when a BroadcastReceiver or ServiceConnection is leaked during Context teardown. <br /><br />"
"android.os.StrictMode.VmPolicy.Builder.penaltyDeath () "," Crashes the whole process on violation. <br /><br />"
"android.os.StrictMode.VmPolicy.Builder.Closeable () "," Detect when an Closeable or other object with a explict termination method is finalized without having been closed. <br /><br />"
"android.os.StrictMode.VmPolicy.Builder.SQLiteCursor () "," Detect when an SQLiteCursor or other SQLite object is finalized without having been closed. <br /><br />"
"android.os.StrictMode.VmPolicy.Builder.Activity () "," Detect leaks of Activity subclasses. <br /><br />"
"android.os.StrictMode.VmPolicy.Builder.build () "," Construct the VmPolicy instance. <br /><br />"
"android.os.StrictMode.VmPolicy.Builder.DropBox () "," Enable detected violations log a stacktrace and timing data to the DropBox on policy violation. <br /><br />"
"android.os.StrictMode.VmPolicy.Builder.penaltyLog () "," Log detected violations to the system log. <br /><br />"
"android.os.StrictMode.VmPolicy.Builder.detectAll () "," Detect everything that's potentially suspect. <br /><br />"
"android.os.StrictMode.VmPolicy.Builder.Class () "," Set an upper bound on how many instances of a class can be in memory at once. <br /><br />"
"android.os.StrictMode.VmPolicy.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.os.SystemClock.elapsedRealtimeNanos () "," Returns nanoseconds since boot, including time spent in sleep. <br /><br />"
"android.os.SystemClock.currentThreadTimeMillis () "," Returns milliseconds running in the current thread. <br /><br />"
"android.os.SystemClock.uptimeMillis () "," Returns milliseconds since boot, not counting time spent in deep sleep. <br /><br />"
"android.os.SystemClock.setCurrentTimeMillis (long millis) "," Sets the current wall time, in milliseconds. <br /><br />"
"android.os.SystemClock.sleep (long ms) "," Waits a given number of milliseconds (of uptimeMillis) before returning. <br /><br />"
"android.os.SystemClock.elapsedRealtime () "," Returns milliseconds since boot, including time spent in sleep. <br /><br />"
"android.os.TokenWatcher.IBinder () "," no description <br /><br />"
"android.os.TokenWatcher.String () "," Record that this token has been acquired. <br /><br />"
"android.os.TokenWatcher.dump () "," no description <br /><br />"
"android.os.TokenWatcher.acquired () "," Called when the number of active tokens goes from 0 to 1. <br /><br />"
"android.os.TokenWatcher.released () "," Called when the number of active tokens goes from 1 to 0. <br /><br />"
"android.os.TokenWatcher.PrintWriter () "," no description <br /><br />"
"android.os.TokenWatcher.isAcquired () "," no description <br /><br />"
"android.os.Trace.String () "," Writes a trace message to indicate that a given section of code has begun. <br /><br />"
"android.os.Trace.endSection () "," Writes a trace message to indicate that a given section of code has ended. <br /><br />"
"android.os.UserHandle.writeToParcel (UserHandle, Parcel) () "," Read a UserHandle from a Parcel that was previously written with writeToParcel(UserHandle, Parcel), returning either a null or new object as appropriate. <br /><br />"
"android.os.UserHandle.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.os.UserHandle.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.os.UserHandle.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.os.UserHandle.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.os.UserHandle.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.os.UserManager.String () "," Sets a new challenge PIN for restrictions. <br /><br />"
"android.os.UserManager.UserHandle () "," Return whether the given user is actively running or stopping. <br /><br />"
"android.os.UserManager.clearUserRestriction (android.content.ComponentName, String) () "," This method was deprecated in API level 21. use addUserRestriction(android.content.ComponentName, String) or clearUserRestriction(android.content.ComponentName, String) instead. <br /><br />"
"android.os.UserManager.getUserCount () "," Return the number of users currently created on the device. <br /><br />"
"android.os.UserManager.getUserName () "," Returns the user name of the user making this call. <br /><br />"
"android.os.UserManager.getUserRestrictions () "," Returns the user-wide restrictions imposed on this user. <br /><br />"
"android.os.UserManager.getSerialNumberForUser (UserHandle) (long serialNumber) "," Return the user associated with a serial number previously returned by getSerialNumberForUser(UserHandle). <br /><br />"
"android.os.UserManager.isUserAGoat () "," Used to determine whether the user making this call is subject to teleportations. <br /><br />"
"android.os.UserManager.getUserProfiles () "," Returns a list of UserHandles for profiles associated with the user that the calling process is running on, including the user itself. <br /><br />"
"android.os.Vibrator.vibrate (long milliseconds) "," Vibrate constantly for the specified period of time. <br /><br />"
"android.os.Vibrator.hasVibrator () "," Check whether the hardware has a vibrator. <br /><br />"
"android.os.Vibrator.vibrate (long[] pattern, int repeat) "," Vibrate with a given pattern. <br /><br />"
"android.os.Vibrator.cancel () "," Turn the vibrator off. <br /><br />"
"android.os.Vibrator.AudioAttributes () "," Vibrate constantly for the specified period of time. <br /><br />"
"android.os.WorkSource.WorkSource () "," Replace the current contents of this work source with the given work source. <br /><br />"
"android.os.WorkSource.clear () "," Clear this WorkSource to be empty. <br /><br />"
"android.os.WorkSource.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.os.WorkSource.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.os.WorkSource.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.os.WorkSource.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.os.WorkSource.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.preference.DialogPreference.getDialogLayoutResource () "," Returns the layout resource that is used as the content View for subsequent dialogs. <br /><br />"
"android.preference.DialogPreference.getPositiveButtonText () "," Returns the text of the positive button to be shown on subsequent dialogs. <br /><br />"
"android.preference.DialogPreference.getDialogIcon () "," Returns the icon to be shown on subsequent dialogs. <br /><br />"
"android.preference.DialogPreference.getDialogMessage () "," Returns the message to be shown on subsequent dialogs. <br /><br />"
"android.preference.DialogPreference.setNegativeButtonText (int negativeButtonTextResId) "," no description <br /><br />"
"android.preference.DialogPreference.CharSequence () "," Sets the text of the positive button of the dialog. <br /><br />"
"android.preference.DialogPreference.setDialogIcon (int dialogIconRes) "," Sets the icon (resource ID) of the dialog. <br /><br />"
"android.preference.DialogPreference.getNegativeButtonText () "," Returns the text of the negative button to be shown on subsequent dialogs. <br /><br />"
"android.preference.DialogPreference.setPositiveButtonText (int positiveButtonTextResId) "," no description <br /><br />"
"android.preference.DialogPreference.setDialogTitle (int dialogTitleResId) "," no description <br /><br />"
"android.preference.DialogPreference.getDialogTitle () "," Returns the title to be shown on subsequent dialogs. <br /><br />"
"android.preference.DialogPreference.Drawable () "," Sets the icon of the dialog. <br /><br />"
"android.preference.DialogPreference.getDialog () "," Gets the dialog that is shown by this preference. <br /><br />"
"android.preference.DialogPreference.View (int dialogLayoutResId) "," Sets the layout resource that is inflated as the View to be shown as the content View of subsequent dialogs. <br /><br />"
"android.preference.DialogPreference.onActivityDestroy () "," See Activity's onDestroy. <br /><br />"
"android.preference.DialogPreference.DialogInterface () "," This method will be invoked when the dialog is dismissed. <br /><br />"
"android.preference.DialogPreference.setDialogMessage (int dialogMessageResId) "," no description <br /><br />"
"android.preference.EditTextPreference.EditText () "," Returns the EditText widget that will be shown in the dialog. <br /><br />"
"android.preference.EditTextPreference.SharedPreferences () "," Saves the text to the SharedPreferences. <br /><br />"
"android.preference.EditTextPreference.shouldDisableDependents () "," Checks whether this preference's dependents should currently be disabled. <br /><br />"
"android.preference.ListPreference.getValue () "," Returns the value of the key. <br /><br />"
"android.preference.ListPreference.getEntryValues () "," Returns the array of values to be saved for the preference. <br /><br />"
"android.preference.ListPreference.String () "," Sets the value of the key. <br /><br />"
"android.preference.ListPreference.setEntryValues (int entryValuesResId) "," no description <br /><br />"
"android.preference.ListPreference.CharSequence[] () "," The array to find the value to save for a preference when an entry from entries is selected. <br /><br />"
"android.preference.ListPreference.setValueIndex (int index) "," Sets the value to the given index from the entry values. <br /><br />"
"android.preference.ListPreference.getEntries () "," The list of entries to be shown in the list in subsequent dialogs. <br /><br />"
"android.preference.ListPreference.getSummary () "," Returns the summary of this ListPreference. <br /><br />"
"android.preference.ListPreference.getEntry () "," Returns the entry corresponding to the current value. <br /><br />"
"android.preference.ListPreference.CharSequence () "," Sets the summary for this Preference with a CharSequence. <br /><br />"
"android.preference.ListPreference.setEntries (int entriesResId) "," no description <br /><br />"
"android.preference.MultiSelectListPreference.getEntryValues () "," Returns the array of values to be saved for the preference. <br /><br />"
"android.preference.MultiSelectListPreference.String () "," Sets the value of the key. <br /><br />"
"android.preference.MultiSelectListPreference.setEntryValues (int entryValuesResId) "," no description <br /><br />"
"android.preference.MultiSelectListPreference.CharSequence[] () "," The array to find the value to save for a preference when an entry from entries is selected. <br /><br />"
"android.preference.MultiSelectListPreference.getEntries () "," The list of entries to be shown in the list in subsequent dialogs. <br /><br />"
"android.preference.MultiSelectListPreference.setEntries (int entriesResId) "," no description <br /><br />"
"android.preference.MultiSelectListPreference.getValues () "," Retrieves the current value of the key. <br /><br />"
"android.preference.Preference.Preference () "," Called when the implicit parent dependency changes. <br /><br />"
"android.preference.Preference.getWidgetLayoutResource () "," Gets the layout resource for the controllable widget portion of this Preference. <br /><br />"
"android.preference.Preference.SharedPreferences.Editor () "," Returns an SharedPreferences.Editor where this Preference can save its value(s). <br /><br />"
"android.preference.Preference.hasKey () "," Checks whether this Preference has a valid key. <br /><br />"
"android.preference.Preference.setOrder (int order) "," Sets the order of this Preference with respect to other Preference objects on the same level. <br /><br />"
"android.preference.Preference.notifyDependencyChange (boolean disableDependents) "," Notifies any listening dependents of a change that affects the dependency. <br /><br />"
"android.preference.Preference.setWidgetLayoutResource (int widgetLayoutResId) "," Sets the layout for the controllable widget portion of this Preference. <br /><br />"
"android.preference.Preference.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.preference.Preference.shouldDisableDependents () "," Checks whether this preference's dependents should currently be disabled. <br /><br />"
"android.preference.Preference.PreferenceActivity () "," Gets the View that will be shown in the PreferenceActivity. <br /><br />"
"android.preference.Preference.getEditor () () "," Returns whether the Preference should commit its saved value(s) in getEditor(). <br /><br />"
"android.preference.Preference.setPersistent (boolean persistent) "," Sets whether this Preference is persistent. <br /><br />"
"android.preference.Preference.Drawable () "," Sets the icon for this Preference with a Drawable. <br /><br />"
"android.preference.Preference.getOnPreferenceClickListener () "," Returns the callback to be invoked when this Preference is clicked. <br /><br />"
"android.preference.Preference.getFragment () "," Return the fragment class name associated with this Preference. <br /><br />"
"android.preference.Preference.setEnabled (boolean enabled) "," Sets whether this Preference is enabled. <br /><br />"
"android.preference.Preference.setShouldDisableView (boolean shouldDisableView) "," Sets whether this Preference should disable its view when it gets disabled. <br /><br />"
"android.preference.Preference.startActivity (Intent) () "," Sets an Intent to be used for startActivity(Intent) when this Preference is clicked. <br /><br />"
"android.preference.Preference.SharedPreferences () "," Sets the key for this Preference, which is used as a key to the SharedPreferences. <br /><br />"
"android.preference.Preference.getTitle () "," Returns the title of this Preference. <br /><br />"
"android.preference.Preference.peekExtras () "," Return the extras Bundle object associated with this preference, returning null if there is not currently one. <br /><br />"
"android.preference.Preference.String () "," Sets the class name of a fragment to be shown when this Preference is clicked. <br /><br />"
"android.preference.Preference.isPersistent () "," Checks whether this Preference is persistent. <br /><br />"
"android.preference.Preference.setSummary (int summaryResId) "," Sets the summary for this Preference with a resource ID. <br /><br />"
"android.preference.Preference.isSelectable () "," Checks whether this Preference should be selectable in the list. <br /><br />"
"android.preference.Preference.getIcon () "," Returns the icon of this Preference. <br /><br />"
"android.preference.Preference.setSelectable (boolean selectable) "," Sets whether this Preference is selectable. <br /><br />"
"android.preference.Preference.CharSequence () "," Sets the title for this Preference with a CharSequence. <br /><br />"
"android.preference.Preference.Object () "," Sets the default value for this Preference, which will be set either if persistence is off or persistence is on and the preference is not found in the persistent storage. <br /><br />"
"android.preference.Preference.getKey () "," Gets the key for this Preference, which is also the key used for storing values into SharedPreferences. <br /><br />"
"android.preference.Preference.View () "," Gets the layout resource that will be shown as the View for this Preference. <br /><br />"
"android.preference.Preference.getDependency () "," Returns the key of the dependency on this Preference. <br /><br />"
"android.preference.Preference.getExtras () "," Return the extras Bundle object associated with this preference, creating a new Bundle if there currently isn't one. <br /><br />"
"android.preference.Preference.PreferenceManager () "," Gets the PreferenceManager that manages this Preference object's tree. <br /><br />"
"android.preference.Preference.Preference.OnPreferenceClickListener () "," Sets the callback to be invoked when this Preference is clicked. <br /><br />"
"android.preference.Preference.View (int layoutResId) "," Sets the layout resource that is inflated as the View to be shown for this Preference. <br /><br />"
"android.preference.Preference.Context () "," Returns the Context of this Preference. <br /><br />"
"android.preference.Preference.getTitleRes () "," Returns the title resource ID of this Preference. <br /><br />"
"android.preference.Preference.isEnabled () "," Checks whether this Preference should be enabled in the list. <br /><br />"
"android.preference.Preference.setIcon (int iconResId) "," Sets the icon for this Preference with a resource ID. <br /><br />"
"android.preference.Preference.getOnPreferenceChangeListener () "," Returns the callback to be invoked when this Preference is changed by the user (but before the internal state has been updated). <br /><br />"
"android.preference.Preference.getSummary () "," Returns the summary of this Preference. <br /><br />"
"android.preference.Preference.Preference.OnPreferenceChangeListener () "," Sets the callback to be invoked when this Preference is changed by the user (but before the internal state has been updated). <br /><br />"
"android.preference.Preference.Bundle () "," Store this Preference hierarchy's frozen state into the given container. <br /><br />"
"android.preference.Preference.getOrder () "," Gets the order of this Preference with respect to other Preference objects on the same level. <br /><br />"
"android.preference.Preference.getShouldDisableView () "," Checks whether this Preference should disable its view when it's action is disabled. <br /><br />"
"android.preference.Preference.Intent () "," Return the Intent associated with this Preference. <br /><br />"
"android.preference.Preference.setTitle (int titleResId) "," Sets the title for this Preference with a resource ID. <br /><br />"
"android.preference.Preference.OnPreferenceChangeListener.Object () "," Called when a Preference has been changed by the user. <br /><br />"
"android.preference.Preference.OnPreferenceClickListener.Preference () "," Called when a Preference has been clicked. <br /><br />"
"android.preference.PreferenceActivity.Header.Resources () "," Return the currently set title. <br /><br />"
"android.preference.PreferenceActivity.Header.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.preference.PreferenceActivity.Header.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.preference.PreferenceActivity.onGetInitialHeader () "," Called to determine the initial header to be shown. <br /><br />"
"android.preference.PreferenceActivity.onIsMultiPane () "," Called to determine if the activity should run in multi-pane mode. <br /><br />"
"android.preference.PreferenceActivity.Preference () "," This method was deprecated in API level 11. This function is not relevant for a modern fragment-based PreferenceActivity. <br /><br />"
"android.preference.PreferenceActivity.Fragment () "," Start a new instance of this activity, showing only the given preference fragment. <br /><br />"
"android.preference.PreferenceActivity.hasHeaders () "," Returns true if this activity is currently showing the header list. <br /><br />"
"android.preference.PreferenceActivity.addPreferencesFromResource (int preferencesResId) "," This method was deprecated in API level 11. This function is not relevant for a modern fragment-based PreferenceActivity. <br /><br />"
"android.preference.PreferenceActivity.CharSequence () "," Change the base title of the bread crumbs for the current preferences. <br /><br />"
"android.preference.PreferenceActivity.startWithFragment (String, Bundle, Fragment, int, int, int) () "," Like startWithFragment(String, Bundle, Fragment, int, int, int) but uses a 0 titleRes. <br /><br />"
"android.preference.PreferenceActivity.View () "," Set a footer that should be shown at the bottom of the header list. <br /><br />"
"android.preference.PreferenceActivity.PreferenceActivity.Header () "," When in two-pane mode, switch to the fragment pane to show the given preference fragment. <br /><br />"
"android.preference.PreferenceActivity.onIsHidingHeaders () "," Called to determine whether the header list should be hidden. <br /><br />"
"android.preference.PreferenceActivity.View.OnClickListener () "," Should be called after onCreate to ensure that the breadcrumbs, if any, were created. <br /><br />"
"android.preference.PreferenceActivity.getPreferenceManager () "," This method was deprecated in API level 11. This function is not relevant for a modern fragment-based PreferenceActivity. <br /><br />"
"android.preference.PreferenceActivity.getPreferenceScreen () "," This method was deprecated in API level 11. This function is not relevant for a modern fragment-based PreferenceActivity. <br /><br />"
"android.preference.PreferenceActivity.onContentChanged () "," Updates the screen state (current list and other views) when the content changes. <br /><br />"
"android.preference.PreferenceActivity.PreferenceScreen () "," This method was deprecated in API level 11. This function is not relevant for a modern fragment-based PreferenceActivity. <br /><br />"
"android.preference.PreferenceActivity.invalidateHeaders () "," Call when you need to change the headers being displayed. <br /><br />"
"android.preference.PreferenceActivity.Bundle () "," When in two-pane mode, switch the fragment pane to show the given preference fragment. <br /><br />"
"android.preference.PreferenceActivity.isMultiPane () "," Returns true if this activity is showing multiple panes -- the headers and a preference fragment. <br /><br />"
"android.preference.PreferenceActivity.invalidateHeaders () () "," Called after the header list has been updated ( onBuildHeaders(List  )  has been called and returned due to invalidateHeaders()) to specify the header that should now be selected. <br /><br />"
"android.preference.PreferenceActivity.Intent () "," Called by a preference panel fragment to finish itself. <br /><br />"
"android.preference.PreferenceCategory.isEnabled () "," Checks whether this Preference should be enabled in the list. <br /><br />"
"android.preference.PreferenceCategory.shouldDisableDependents () "," Checks whether this preference's dependents should currently be disabled. <br /><br />"
"android.preference.PreferenceFragment.startActivityForResult (Intent, int) () "," Receive the result from a previous call to startActivityForResult(Intent, int). <br /><br />"
"android.preference.PreferenceFragment.PreferenceManager () "," Returns the PreferenceManager used by this fragment. <br /><br />"
"android.preference.PreferenceFragment.onStop () "," Called when the Fragment is no longer started. <br /><br />"
"android.preference.PreferenceFragment.Preference () ","  <br /><br />"
"android.preference.PreferenceFragment.getPreferenceScreen () "," Gets the root of the preference hierarchy that this fragment is showing. <br /><br />"
"android.preference.PreferenceFragment.onDestroy () "," Called when the fragment is no longer in use. <br /><br />"
"android.preference.PreferenceFragment.PreferenceScreen () "," Sets the root of the preference hierarchy that this fragment is showing. <br /><br />"
"android.preference.PreferenceFragment.addPreferencesFromResource (int preferencesResId) "," Inflates the given XML resource and adds the preference hierarchy to the current preference hierarchy. <br /><br />"
"android.preference.PreferenceFragment.onCreateView (LayoutInflater, ViewGroup, Bundle) () "," Called when the view previously created by onCreateView(LayoutInflater, ViewGroup, Bundle) has been detached from the fragment. <br /><br />"
"android.preference.PreferenceFragment.Bundle () "," Called to ask the fragment to save its current dynamic state, so it can later be reconstructed in a new instance of its process is restarted. <br /><br />"
"android.preference.PreferenceFragment.onStart () "," Called when the Fragment is visible to the user. <br /><br />"
"android.preference.PreferenceFragment.Intent () "," Adds preferences from activities that match the given Intent. <br /><br />"
"android.preference.PreferenceFragment.OnPreferenceStartFragmentCallback.Preference () "," Called when the user has clicked on a Preference that has a fragment class name associated with it. <br /><br />"
"android.preference.PreferenceGroup.Preference (boolean orderingAsAdded) "," Whether to order the Preference children of this group as they are added. <br /><br />"
"android.preference.PreferenceGroup.Preference () "," Removes a Preference from this group. <br /><br />"
"android.preference.PreferenceGroup.Preferences () "," Removes all Preferences from this group. <br /><br />"
"android.preference.PreferenceGroup.Preference (int index) "," Returns the Preference at a particular index. <br /><br />"
"android.preference.PreferenceGroup.notifyDependencyChange (boolean disableDependents) "," Notifies any listening dependents of a change that affects the dependency. <br /><br />"
"android.preference.PreferenceGroup.isOrderingAsAdded () "," Whether this group is ordering preferences in the order they are added. <br /><br />"
"android.preference.PreferenceManager.setDefaultValues (Context, int, boolean) () "," Similar to setDefaultValues(Context, int, boolean) but allows the client to provide the filename and mode of the shared preferences file. <br /><br />"
"android.preference.PreferenceManager.String () "," Sets the name of the SharedPreferences file that preferences managed by this will use. <br /><br />"
"android.preference.PreferenceManager.Context () "," Gets a SharedPreferences instance that points to the default file that is used by the preference framework in the given context. <br /><br />"
"android.preference.PreferenceManager.Preference () "," Sets the default values from an XML preference file by reading the values defined by each Preference item's android:defaultValue attribute. <br /><br />"
"android.preference.PreferenceManager.getSharedPreferences () "," Gets a SharedPreferences instance that preferences managed by this will use. <br /><br />"
"android.preference.PreferenceManager.getSharedPreferencesMode () "," Returns the current mode of the SharedPreferences file that preferences managed by this will use. <br /><br />"
"android.preference.PreferenceManager.setSharedPreferencesMode (int sharedPreferencesMode) "," Sets the mode of the SharedPreferences file that preferences managed by this will use. <br /><br />"
"android.preference.PreferenceManager.getSharedPreferencesName () "," Returns the current name of the SharedPreferences file that preferences managed by this will use. <br /><br />"
"android.preference.PreferenceManager.OnActivityDestroyListener.onActivityDestroy () "," See Activity's onDestroy. <br /><br />"
"android.preference.PreferenceManager.OnActivityResultListener.Intent () "," See Activity's onActivityResult. <br /><br />"
"android.preference.PreferenceManager.OnActivityStopListener.onActivityStop () "," See Activity's onStop. <br /><br />"
"android.preference.PreferenceScreen.getDialog () "," Used to get a handle to the dialog. <br /><br />"
"android.preference.PreferenceScreen.getRootAdapter () () "," Binds a ListView to the preferences contained in this PreferenceScreen via getRootAdapter(). <br /><br />"
"android.preference.PreferenceScreen.PreferenceScreen () "," Returns an adapter that can be attached to a PreferenceActivity or PreferenceFragment to show the preferences contained in this PreferenceScreen. <br /><br />"
"android.preference.PreferenceScreen.DialogInterface () "," This method will be invoked when the dialog is dismissed. <br /><br />"
"android.preference.PreferenceScreen.View () "," no description <br /><br />"
"android.preference.RingtonePreference.getShowDefault () "," Returns whether to a show an item for the default sound/ringtone. <br /><br />"
"android.preference.RingtonePreference.getRingtoneType () "," Returns the sound type(s) that are shown in the picker. <br /><br />"
"android.preference.RingtonePreference.setShowSilent (boolean showSilent) "," Sets whether to show an item for 'Silent'. <br /><br />"
"android.preference.RingtonePreference.setShowDefault (boolean showDefault) "," Sets whether to show an item for the default sound/ringtone. <br /><br />"
"android.preference.RingtonePreference.getShowSilent () "," Returns whether to a show an item for 'Silent'. <br /><br />"
"android.preference.RingtonePreference.setRingtoneType (int type) "," Sets the sound type(s) that are shown in the picker. <br /><br />"
"android.preference.RingtonePreference.Intent () "," See Activity's onActivityResult. <br /><br />"
"android.preference.SwitchPreference.setSwitchTextOn (int resId) "," Set the text displayed on the switch widget in the on state. <br /><br />"
"android.preference.SwitchPreference.setSwitchTextOff (int resId) "," Set the text displayed on the switch widget in the off state. <br /><br />"
"android.preference.SwitchPreference.getSwitchTextOff () "," no description <br /><br />"
"android.preference.SwitchPreference.CharSequence () "," Set the text displayed on the switch widget in the on state. <br /><br />"
"android.preference.SwitchPreference.getSwitchTextOn () "," no description <br /><br />"
"android.preference.TwoStatePreference.setSummaryOn (int summaryResId) "," no description <br /><br />"
"android.preference.TwoStatePreference.getSummaryOn () "," Returns the summary to be shown when checked. <br /><br />"
"android.preference.TwoStatePreference.setSummaryOff (int summaryResId) "," no description <br /><br />"
"android.preference.TwoStatePreference.SharedPreferences (boolean checked) "," Sets the checked state and saves it to the SharedPreferences. <br /><br />"
"android.preference.TwoStatePreference.setDisableDependentsState (boolean disableDependentsState) "," Sets whether dependents are disabled when this preference is on ( true) or when this preference is off ( false). <br /><br />"
"android.preference.TwoStatePreference.CharSequence () "," Sets the summary to be shown when checked. <br /><br />"
"android.preference.TwoStatePreference.getSummaryOff () "," Returns the summary to be shown when unchecked. <br /><br />"
"android.preference.TwoStatePreference.isChecked () "," Returns the checked state. <br /><br />"
"android.preference.TwoStatePreference.getDisableDependentsState () "," Returns whether dependents are disabled when this preference is on ( true) or when this preference is off ( false). <br /><br />"
"android.preference.TwoStatePreference.shouldDisableDependents () "," Checks whether this preference's dependents should currently be disabled. <br /><br />"
"android.print.PageRange.getEnd () "," Gets the end page index (zero based and inclusive). <br /><br />"
"android.print.PageRange.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.print.PageRange.getStart () "," Gets the start page index (zero based and inclusive). <br /><br />"
"android.print.PageRange.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.print.PageRange.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.print.PageRange.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.print.PageRange.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.print.pdf.PrintedPdfDocument.startPage (int pageNumber) "," Starts a new page. <br /><br />"
"android.print.pdf.PrintedPdfDocument.getPageContentRect () "," Gets the content rectangle. <br /><br />"
"android.print.pdf.PrintedPdfDocument.getPageWidth () "," Gets the page width. <br /><br />"
"android.print.pdf.PrintedPdfDocument.getPageHeight () "," Gets the page height. <br /><br />"
"android.print.PrintAttributes.Builder.PrintAttributes.Margins () "," Sets the minimal margins. <br /><br />"
"android.print.PrintAttributes.Builder.PrintAttributes () "," Creates a new PrintAttributes instance. <br /><br />"
"android.print.PrintAttributes.Builder.PrintAttributes.Resolution () "," Sets the resolution. <br /><br />"
"android.print.PrintAttributes.Builder.PrintAttributes.MediaSize () "," Sets the media size. <br /><br />"
"android.print.PrintAttributes.Builder.setColorMode (int colorMode) "," Sets the color mode. <br /><br />"
"android.print.PrintAttributes.getMediaSize () "," Gets the media size. <br /><br />"
"android.print.PrintAttributes.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.print.PrintAttributes.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.print.PrintAttributes.getMinMargins () "," Gets the minimal margins. <br /><br />"
"android.print.PrintAttributes.getColorMode () "," Gets the color mode. <br /><br />"
"android.print.PrintAttributes.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.print.PrintAttributes.getResolution () "," Gets the resolution. <br /><br />"
"android.print.PrintAttributes.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.print.PrintAttributes.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.print.PrintAttributes.Margins.getLeftMils () "," Gets the left margin in mils (thousands of an inch). <br /><br />"
"android.print.PrintAttributes.Margins.getTopMils () "," Gets the top margin in mils (thousands of an inch). <br /><br />"
"android.print.PrintAttributes.Margins.getRightMils () "," Gets the right margin in mils (thousands of an inch). <br /><br />"
"android.print.PrintAttributes.Margins.getBottomMils () "," Gets the bottom margin in mils (thousands of an inch). <br /><br />"
"android.print.PrintAttributes.Margins.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.print.PrintAttributes.Margins.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.print.PrintAttributes.Margins.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.print.PrintAttributes.MediaSize.getWidthMils () "," Gets the media width in mils (thousands of an inch). <br /><br />"
"android.print.PrintAttributes.MediaSize.PackageManager () "," Gets the human readable media size label. <br /><br />"
"android.print.PrintAttributes.MediaSize.isPortrait () "," Gets whether this media size is in portrait which is the height is greater or equal to the width. <br /><br />"
"android.print.PrintAttributes.MediaSize.getId () "," Gets the unique media size id. <br /><br />"
"android.print.PrintAttributes.MediaSize.getHeightMils () "," Gets the media height in mils (thousands of an inch). <br /><br />"
"android.print.PrintAttributes.MediaSize.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.print.PrintAttributes.MediaSize.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.print.PrintAttributes.MediaSize.asPortrait () "," Returns a new media size instance in a portrait orientation, which is the height is the greater dimension. <br /><br />"
"android.print.PrintAttributes.MediaSize.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.print.PrintAttributes.MediaSize.asLandscape () "," Returns a new media size instance in a landscape orientation, which is the height is the lesser dimension. <br /><br />"
"android.print.PrintAttributes.Resolution.getVerticalDpi () "," Gets the vertical resolution in DPI (dots per inch). <br /><br />"
"android.print.PrintAttributes.Resolution.getHorizontalDpi () "," Gets the horizontal resolution in DPI (dots per inch). <br /><br />"
"android.print.PrintAttributes.Resolution.getId () "," Gets the unique resolution id. <br /><br />"
"android.print.PrintAttributes.Resolution.getLabel () "," Gets the resolution human readable label. <br /><br />"
"android.print.PrintAttributes.Resolution.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.print.PrintAttributes.Resolution.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.print.PrintAttributes.Resolution.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.print.PrintDocumentAdapter.PrintDocumentAdapter.WriteResultCallback () "," Called when specific pages of the content should be written in the form of a PDF file to the given file descriptor. <br /><br />"
"android.print.PrintDocumentAdapter.onFinish () "," Called when printing finishes. <br /><br />"
"android.print.PrintDocumentAdapter.Bundle () "," Called when the print attributes (page size, density, etc) changed giving you a chance to layout the content such that it matches the new constraints. <br /><br />"
"android.print.PrintDocumentAdapter.onStart () "," Called when printing starts. <br /><br />"
"android.print.PrintDocumentAdapter.LayoutResultCallback.PrintDocumentInfo () "," Notifies that the layout finished and whether the content changed. <br /><br />"
"android.print.PrintDocumentAdapter.LayoutResultCallback.CharSequence () "," Notifies that an error occurred while laying out the document. <br /><br />"
"android.print.PrintDocumentAdapter.LayoutResultCallback.onLayoutCancelled () "," Notifies that layout was cancelled as a result of a cancellation request. <br /><br />"
"android.print.PrintDocumentAdapter.WriteResultCallback.onWriteCancelled () "," Notifies that write was cancelled as a result of a cancellation request. <br /><br />"
"android.print.PrintDocumentAdapter.WriteResultCallback.CharSequence () "," Notifies that an error occurred while writing the data. <br /><br />"
"android.print.PrintDocumentAdapter.WriteResultCallback.PageRange[] () "," Notifies that all the data was written. <br /><br />"
"android.print.PrintDocumentInfo.Builder.setContentType (int type) "," Sets the content type. <br /><br />"
"android.print.PrintDocumentInfo.Builder.setPageCount (int pageCount) "," Sets the total number of pages. <br /><br />"
"android.print.PrintDocumentInfo.Builder.PrintDocumentInfo () "," Creates a new PrintDocumentInfo instance. <br /><br />"
"android.print.PrintDocumentInfo.getName () "," Gets the document name. <br /><br />"
"android.print.PrintDocumentInfo.getPageCount () "," Gets the total number of pages. <br /><br />"
"android.print.PrintDocumentInfo.getContentType () "," Gets the content type. <br /><br />"
"android.print.PrintDocumentInfo.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.print.PrintDocumentInfo.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.print.PrintDocumentInfo.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.print.PrintDocumentInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.print.PrintDocumentInfo.getDataSize () "," Gets the document data size in bytes. <br /><br />"
"android.print.PrintDocumentInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.print.PrinterCapabilitiesInfo.Builder.PrintAttributes.Margins () "," Sets the minimal margins. <br /><br />"
"android.print.PrinterCapabilitiesInfo.Builder.PrinterCapabilitiesInfo () "," Crates a new PrinterCapabilitiesInfo enforcing that all required properties have been specified. <br /><br />"
"android.print.PrinterCapabilitiesInfo.Builder.setColorModes (int colorModes, int defaultColorMode) "," Sets the color modes. <br /><br />"
"android.print.PrinterCapabilitiesInfo.Builder.PrintAttributes.Resolution () "," Adds a supported resolution. <br /><br />"
"android.print.PrinterCapabilitiesInfo.Builder.PrintAttributes.MediaSize () "," Adds a supported media size. <br /><br />"
"android.print.PrinterCapabilitiesInfo.getMediaSizes () "," Gets the supported media sizes. <br /><br />"
"android.print.PrinterCapabilitiesInfo.getResolutions () "," Gets the supported resolutions. <br /><br />"
"android.print.PrinterCapabilitiesInfo.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.print.PrinterCapabilitiesInfo.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.print.PrinterCapabilitiesInfo.getMinMargins () "," Gets the minimal margins. <br /><br />"
"android.print.PrinterCapabilitiesInfo.getDefaults () "," Gets the default print attributes. <br /><br />"
"android.print.PrinterCapabilitiesInfo.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.print.PrinterCapabilitiesInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.print.PrinterCapabilitiesInfo.getColorModes () "," Gets the bit mask of supported color modes. <br /><br />"
"android.print.PrinterCapabilitiesInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.print.PrinterId.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.print.PrinterId.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.print.PrinterId.getLocalId () "," Gets the id of this printer which is unique in the context of the print service that manages it. <br /><br />"
"android.print.PrinterId.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.print.PrinterId.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.print.PrinterId.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.print.PrinterInfo.Builder.String () "," Sets the localized printer name which is shown to the user <br /><br />"
"android.print.PrinterInfo.Builder.PrinterCapabilitiesInfo () "," Sets the printer capabilities. <br /><br />"
"android.print.PrinterInfo.Builder.PrinterInfo () "," Creates a new PrinterInfo. <br /><br />"
"android.print.PrinterInfo.Builder.setStatus (int status) "," Sets the printer status. <br /><br />"
"android.print.PrinterInfo.getName () "," Get the printer name. <br /><br />"
"android.print.PrinterInfo.getDescription () "," Gets the printer description. <br /><br />"
"android.print.PrinterInfo.getId () "," Get the globally unique printer id. <br /><br />"
"android.print.PrinterInfo.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.print.PrinterInfo.getStatus () "," Gets the printer status. <br /><br />"
"android.print.PrinterInfo.getCapabilities () "," Gets the printer capabilities. <br /><br />"
"android.print.PrinterInfo.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.print.PrinterInfo.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.print.PrinterInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.print.PrinterInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.print.PrintJob.isStarted () "," Gets whether this print job is started. <br /><br />"
"android.print.PrintJob.isQueued () "," Gets whether this print job is queued. <br /><br />"
"android.print.PrintJob.PrintJobInfo () "," Gets the PrintJobInfo that describes this job. <br /><br />"
"android.print.PrintJob.getId () "," Gets the unique print job id. <br /><br />"
"android.print.PrintJob.isCompleted () "," Gets whether this print job is completed. <br /><br />"
"android.print.PrintJob.isFailed () "," Gets whether this print job is failed. <br /><br />"
"android.print.PrintJob.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.print.PrintJob.restart () "," Restarts this print job. <br /><br />"
"android.print.PrintJob.cancel () "," Cancels this print job. <br /><br />"
"android.print.PrintJob.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.print.PrintJob.isCancelled () "," Gets whether this print job is cancelled. <br /><br />"
"android.print.PrintJob.isBlocked () "," Gets whether this print job is blocked. <br /><br />"
"android.print.PrintJobId.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.print.PrintJobId.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.print.PrintJobId.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.print.PrintJobId.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.print.PrintJobInfo.Builder.String () "," Puts an advanced (printer specific) option. <br /><br />"
"android.print.PrintJobInfo.Builder.PrintJobInfo () "," Creates a new PrintJobInfo instance. <br /><br />"
"android.print.PrintJobInfo.Builder.setCopies (int copies) "," Sets the number of copies. <br /><br />"
"android.print.PrintJobInfo.Builder.PrintAttributes () "," Sets the print job attributes. <br /><br />"
"android.print.PrintJobInfo.Builder.PageRange[] () "," Sets the included pages. <br /><br />"
"android.print.PrintJobInfo.getAttributes () "," Gets the print job attributes. <br /><br />"
"android.print.PrintJobInfo.getState () "," Gets the current job state. <br /><br />"
"android.print.PrintJobInfo.getId () "," Gets the unique print job id. <br /><br />"
"android.print.PrintJobInfo.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.print.PrintJobInfo.getLabel () "," Gets the human readable job label. <br /><br />"
"android.print.PrintJobInfo.getCreationTime () "," Gets the wall time in millisecond when this print job was created. <br /><br />"
"android.print.PrintJobInfo.getPages () "," Gets the included pages. <br /><br />"
"android.print.PrintJobInfo.getPrinterId () "," Gets the unique target printer id. <br /><br />"
"android.print.PrintJobInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.print.PrintJobInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.print.PrintJobInfo.getCopies () "," Gets the number of copies. <br /><br />"
"android.print.PrintManager.PrintDocumentAdapter () "," Creates a print job for printing a PrintDocumentAdapter with default print attributes. <br /><br />"
"android.print.PrintManager.getPrintJobs () "," Gets the print jobs for this application. <br /><br />"
"android.printservice.PrintDocument.getData () "," Gets the data associated with this document. <br /><br />"
"android.printservice.PrintDocument.PrintDocumentInfo () "," Gets the PrintDocumentInfo that describes this document. <br /><br />"
"android.printservice.PrinterDiscoverySession.isPrinterDiscoveryStarted () "," Gets whether printer discovery is started. <br /><br />"
"android.printservice.PrinterDiscoverySession.onStopPrinterDiscovery () "," Callback notifying you that you should stop printer discovery. <br /><br />"
"android.printservice.PrinterDiscoverySession.onDestroy () "," Notifies you that the session is destroyed. <br /><br />"
"android.printservice.PrinterDiscoverySession.isDestroyed () "," Gets whether the session is destroyed. <br /><br />"
"android.printservice.PrinterDiscoverySession.getTrackedPrinters () "," Gets the printers that should be tracked. <br /><br />"
"android.printservice.PrinterDiscoverySession.getPrinters () "," Gets the printers reported in this session. <br /><br />"
"android.printservice.PrinterDiscoverySession.PrinterInfo () "," Adds discovered printers. <br /><br />"
"android.printservice.PrinterDiscoverySession.PrinterId () "," Removes added printers. <br /><br />"
"android.printservice.PrintJob.isStarted () "," Gets whether this print job is started. <br /><br />"
"android.printservice.PrintJob.String () "," Gets whether this job has a given advanced (printer specific) print option. <br /><br />"
"android.printservice.PrintJob.isQueued () "," Gets whether this print job is queued. <br /><br />"
"android.printservice.PrintJob.getTag () "," Gets the print job tag. <br /><br />"
"android.printservice.PrintJob.start () "," Starts the print job. <br /><br />"
"android.printservice.PrintJob.isCompleted () "," Gets whether this print job is completed. <br /><br />"
"android.printservice.PrintJob.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.printservice.PrintJob.isBlocked () "," Gets whether this print job is blocked. <br /><br />"
"android.printservice.PrintJob.isCancelled () "," Gets whether this print job is cancelled. <br /><br />"
"android.printservice.PrintJob.getDocument () "," Gets the printed document. <br /><br />"
"android.printservice.PrintJob.getId () "," Gets the unique print job id. <br /><br />"
"android.printservice.PrintJob.PrintJobInfo () "," Gets the PrintJobInfo that describes this job. <br /><br />"
"android.printservice.PrintJob.PrintService () "," Sets a tag that is valid in the context of a PrintService and is not interpreted by the system. <br /><br />"
"android.printservice.PrintJob.isFailed () "," Gets whether this print job is failed. <br /><br />"
"android.printservice.PrintJob.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.printservice.PrintJob.cancel () "," Cancels the print job. <br /><br />"
"android.printservice.PrintJob.complete () "," Completes the print job. <br /><br />"
"android.printservice.PrintService.String () "," Generates a global printer id given the printer's locally unique one. <br /><br />"
"android.printservice.PrintService.getActivePrintJobs () "," Gets the active print jobs for the printers managed by this service. <br /><br />"
"android.printservice.PrintService.Intent () "," Return the communication channel to the service. <br /><br />"
"android.provider.Browser.String () "," Update the visited history to acknowledge that a site has been visited. <br /><br />"
"android.provider.Browser.ContentResolver () "," If there are more than MAX_HISTORY_COUNT non-bookmark history items in the bookmark/history table, delete TRUNCATE_N_OLDEST of them. <br /><br />"
"android.provider.Browser.ACTION_SEND () "," Sends the given string using an Intent with ACTION_SEND and a mime type of text/plain. <br /><br />"
"android.provider.Browser.WebIconDatabase.IconListener () "," Request all icons from the database. <br /><br />"
"android.provider.CalendarContract.Attendees.String[] () "," Queries all attendees associated with the given event. <br /><br />"
"android.provider.CalendarContract.CalendarEntity.Cursor () "," Creates an entity iterator for the given cursor. <br /><br />"
"android.provider.CalendarContract.EventDays.String[] () "," Retrieves the days with events for the Julian days starting at 'startDay' for 'numDays'. <br /><br />"
"android.provider.CalendarContract.EventsEntity.ContentResolver () "," Creates a new iterator for events <br /><br />"
"android.provider.CalendarContract.EventsEntity.ContentProviderClient () "," Creates a new iterator for events <br /><br />"
"android.provider.CalendarContract.Instances.String () "," Performs a query to return all visible instances in the given range that match the given query. <br /><br />"
"android.provider.CalendarContract.Instances.String[] () "," Performs a query to return all visible instances in the given range. <br /><br />"
"android.provider.CalendarContract.Reminders.String[] () "," Queries all reminders associated with the given event. <br /><br />"
"android.provider.CallLog.Calls.Context () "," Query the call log database for the last dialed number. <br /><br />"
"android.provider.Contacts.ContactMethods.ContactsContract (int protocol) "," This method was deprecated in API level 5. see ContactsContract <br /><br />"
"android.provider.Contacts.ContactMethods.ContactsContract () "," This method was deprecated in API level 5. see ContactsContract <br /><br />"
"android.provider.Contacts.Organizations.ContactsContract () "," This method was deprecated in API level 5. see ContactsContract <br /><br />"
"android.provider.Contacts.People.ContactsContract () "," This method was deprecated in API level 5. see ContactsContract <br /><br />"
"android.provider.Contacts.Phones.ContactsContract () "," This method was deprecated in API level 5. see ContactsContract <br /><br />"
"android.provider.Contacts.Settings.ContactsContract () "," This method was deprecated in API level 5. see ContactsContract <br /><br />"
"android.provider.ContactsContract.CommonDataKinds.Email.TYPE (int type) "," Return the string resource that best describes the given TYPE. <br /><br />"
"android.provider.ContactsContract.CommonDataKinds.Email.TYPE_CUSTOM () "," Return a CharSequence that best describes the given type, possibly substituting the given LABEL value for TYPE_CUSTOM. <br /><br />"
"android.provider.ContactsContract.CommonDataKinds.Event.TYPE_CUSTOM () "," Return a CharSequence that best describes the given type, possibly substituting the given LABEL value for TYPE_CUSTOM. <br /><br />"
"android.provider.ContactsContract.CommonDataKinds.Event.TYPE () "," Return the string resource that best describes the given TYPE. <br /><br />"
"android.provider.ContactsContract.CommonDataKinds.Im.TYPE (int type) "," Return the string resource that best describes the given TYPE. <br /><br />"
"android.provider.ContactsContract.CommonDataKinds.Im.PROTOCOL_CUSTOM () "," Return a CharSequence that best describes the given protocol, possibly substituting the given CUSTOM_PROTOCOL value for PROTOCOL_CUSTOM. <br /><br />"
"android.provider.ContactsContract.CommonDataKinds.Im.TYPE_CUSTOM () "," Return a CharSequence that best describes the given type, possibly substituting the given LABEL value for TYPE_CUSTOM. <br /><br />"
"android.provider.ContactsContract.CommonDataKinds.Im.PROTOCOL (int type) "," Return the string resource that best describes the given PROTOCOL. <br /><br />"
"android.provider.ContactsContract.CommonDataKinds.Organization.TYPE (int type) "," Return the string resource that best describes the given TYPE. <br /><br />"
"android.provider.ContactsContract.CommonDataKinds.Organization.TYPE_CUSTOM () "," Return a CharSequence that best describes the given type, possibly substituting the given LABEL value for TYPE_CUSTOM. <br /><br />"
"android.provider.ContactsContract.CommonDataKinds.Phone.TYPE (int type) "," Return the string resource that best describes the given TYPE. <br /><br />"
"android.provider.ContactsContract.CommonDataKinds.Phone.TYPE_CUSTOM () "," Return a CharSequence that best describes the given type, possibly substituting the given LABEL value for TYPE_CUSTOM. <br /><br />"
"android.provider.ContactsContract.CommonDataKinds.Relation.TYPE (int type) "," Return the string resource that best describes the given TYPE. <br /><br />"
"android.provider.ContactsContract.CommonDataKinds.Relation.TYPE_CUSTOM () "," Return a CharSequence that best describes the given type, possibly substituting the given LABEL value for TYPE_CUSTOM. <br /><br />"
"android.provider.ContactsContract.CommonDataKinds.SipAddress.TYPE (int type) "," Return the string resource that best describes the given TYPE. <br /><br />"
"android.provider.ContactsContract.CommonDataKinds.SipAddress.TYPE_CUSTOM () "," Return a CharSequence that best describes the given type, possibly substituting the given LABEL value for TYPE_CUSTOM. <br /><br />"
"android.provider.ContactsContract.CommonDataKinds.StructuredPostal.TYPE (int type) "," Return the string resource that best describes the given TYPE. <br /><br />"
"android.provider.ContactsContract.CommonDataKinds.StructuredPostal.TYPE_CUSTOM () "," Return a CharSequence that best describes the given type, possibly substituting the given LABEL value for TYPE_CUSTOM. <br /><br />"
"android.provider.ContactsContract.Contacts.Uri () "," Opens an InputStream for the contacts's thumbnail photo and returns the photo as a byte stream. <br /><br />"
"android.provider.ContactsContract.Contacts.CONTENT_URI () "," Computes a content URI (see CONTENT_URI) given a lookup URI. <br /><br />"
"android.provider.ContactsContract.Contacts.ContentResolver () "," This method was deprecated in API level 16. The class DataUsageStatUpdater of the Android support library should be used instead. <br /><br />"
"android.provider.ContactsContract.Contacts.isEnterpriseContactId (long contactId) "," Return TRUE if a contact ID is from the contacts provider on the enterprise profile. <br /><br />"
"android.provider.ContactsContract.Contacts.Contacts () "," Builds a CONTENT_LOOKUP_URI style Uri describing the requested Contacts entry. <br /><br />"
"android.provider.ContactsContract.Contacts.LOOKUP_KEY () "," Build a CONTENT_LOOKUP_URI lookup Uri using the given _ID and LOOKUP_KEY. <br /><br />"
"android.provider.ContactsContract.Data.ContactsContract.Data () "," Build a CONTENT_LOOKUP_URI style Uri for the parent ContactsContract.Contacts entry of the given ContactsContract.Data entry. <br /><br />"
"android.provider.ContactsContract.Directory.ContentResolver () "," Notifies the system of a change in the list of directories handled by a particular directory provider. <br /><br />"
"android.provider.ContactsContract.Groups.Cursor () "," no description <br /><br />"
"android.provider.ContactsContract.isProfileId (long id) "," This method can be used to identify whether the given ID is associated with profile data. <br /><br />"
"android.provider.ContactsContract.PinnedPositions.ContentResolver () "," Undemotes a formerly demoted contact. <br /><br />"
"android.provider.ContactsContract.ProfileSyncState.Account () "," no description <br /><br />"
"android.provider.ContactsContract.QuickContact.Contacts () "," Trigger a dialog that lists the various methods of interacting with the requested Contacts entry. <br /><br />"
"android.provider.ContactsContract.RawContacts.Cursor () "," TODO: javadoc <br /><br />"
"android.provider.ContactsContract.RawContacts.ContactsContract.RawContacts () "," Build a CONTENT_LOOKUP_URI style Uri for the parent ContactsContract.Contacts entry of the given ContactsContract.RawContacts entry. <br /><br />"
"android.provider.ContactsContract.StatusUpdates.getPresenceIconResourceId (int status) "," Gets the resource ID for the proper presence icon. <br /><br />"
"android.provider.ContactsContract.StatusUpdates.getPresencePrecedence (int status) "," Returns the precedence of the status code the higher number being the higher precedence. <br /><br />"
"android.provider.ContactsContract.SyncState.Account () "," no description <br /><br />"
"android.provider.DocumentsContract.DocumentsProvider () "," Test if the given URI represents a DocumentsContract.Document backed by a DocumentsProvider. <br /><br />"
"android.provider.DocumentsContract.Uri () "," Delete the given document. <br /><br />"
"android.provider.DocumentsContract.String () "," Change the display name of an existing document. <br /><br />"
"android.provider.DocumentsContract.buildSearchDocumentsUri (String, String, String) () "," Extract the search query from a URI built by buildSearchDocumentsUri(String, String, String). <br /><br />"
"android.provider.DocumentsContract.CancellationSignal () "," Return thumbnail representing the document at the given URI. <br /><br />"
"android.provider.DocumentsContract.COLUMN_ROOT_ID () "," Extract the COLUMN_ROOT_ID from the given URI. <br /><br />"
"android.provider.DocumentsContract.COLUMN_DOCUMENT_ID () "," Extract the via COLUMN_DOCUMENT_ID from the given URI. <br /><br />"
"android.provider.DocumentsProvider.Uri () "," Implementation is provided by the parent class. <br /><br />"
"android.provider.DocumentsProvider.ProviderInfo () "," Implementation is provided by the parent class. <br /><br />"
"android.provider.DocumentsProvider.String () "," Rename an existing document. <br /><br />"
"android.provider.DocumentsProvider.CancellationSignal () "," Implementation is provided by the parent class. <br /><br />"
"android.provider.DocumentsProvider.String[] () "," Implementation is provided by the parent class. <br /><br />"
"android.provider.DocumentsProvider.Bundle () "," Implementation is provided by the parent class. <br /><br />"
"android.provider.DocumentsProvider.COLUMN_DOCUMENT_ID () "," Revoke any active permission grants for the given COLUMN_DOCUMENT_ID, usually called when a document becomes invalid. <br /><br />"
"android.provider.DocumentsProvider.ContentValues () "," Implementation is provided by the parent class. <br /><br />"
"android.provider.MediaStore.Audio.Albums.String () "," Get the content:// style URI for the albums table on the given volume. <br /><br />"
"android.provider.MediaStore.Audio.Artists.Albums.String () "," no description <br /><br />"
"android.provider.MediaStore.Audio.Artists.String () "," Get the content:// style URI for the artists table on the given volume. <br /><br />"
"android.provider.MediaStore.Audio.Genres.String () "," Get the content:// style URI for querying the genres of an audio file. <br /><br />"
"android.provider.MediaStore.Audio.Genres.Members.String () "," no description <br /><br />"
"android.provider.MediaStore.Audio.String () "," Converts a name to a 'key' that can be used for grouping, sorting and searching. <br /><br />"
"android.provider.MediaStore.Audio.Media.String () "," no description <br /><br />"
"android.provider.MediaStore.Audio.Playlists.String () "," Get the content:// style URI for the audio playlists table on the given volume. <br /><br />"
"android.provider.MediaStore.Audio.Playlists.Members.String () "," no description <br /><br />"
"android.provider.MediaStore.Audio.Playlists.Members.ContentResolver () "," Convenience method to move a playlist item to a new location <br /><br />"
"android.provider.MediaStore.Files.String () "," Get the content:// style URI for the files table on the given volume. <br /><br />"
"android.provider.MediaStore.Context () "," Get the media provider's version. <br /><br />"
"android.provider.MediaStore.getMediaScannerUri () "," Uri for querying the state of the media scanner. <br /><br />"
"android.provider.MediaStore.Images.Media.String () "," no description <br /><br />"
"android.provider.MediaStore.Images.Media.String[] () "," no description <br /><br />"
"android.provider.MediaStore.Images.Media.Bitmap () "," Retrieves an image for the given url as a Bitmap. <br /><br />"
"android.provider.MediaStore.Images.Thumbnails.String () "," Get the content:// style URI for the image media table on the given volume. <br /><br />"
"android.provider.MediaStore.Images.Thumbnails.BitmapFactory.Options () "," This method checks if the thumbnails of the specified image (origId) has been created. <br /><br />"
"android.provider.MediaStore.Images.Thumbnails.ContentResolver () "," This method cancels the thumbnail request so clients waiting for getThumbnail will be interrupted and return immediately. <br /><br />"
"android.provider.MediaStore.Images.Thumbnails.String[] () "," no description <br /><br />"
"android.provider.MediaStore.Video.String[] () "," no description <br /><br />"
"android.provider.MediaStore.Video.Media.String () "," Get the content:// style URI for the video media table on the given volume. <br /><br />"
"android.provider.MediaStore.Video.Thumbnails.String () "," Get the content:// style URI for the image media table on the given volume. <br /><br />"
"android.provider.MediaStore.Video.Thumbnails.BitmapFactory.Options () "," This method checks if the thumbnails of the specified image (origId) has been created. <br /><br />"
"android.provider.MediaStore.Video.Thumbnails.ContentResolver () "," This method cancels the thumbnail request so clients waiting for getThumbnail will be interrupted and return immediately. <br /><br />"
"android.provider.SearchRecentSuggestions.String () "," Add a query to the recent queries list. <br /><br />"
"android.provider.SearchRecentSuggestions.clearHistory () "," Completely delete the history. <br /><br />"
"android.provider.Settings.Global.String () "," Store a name/value pair into the database. <br /><br />"
"android.provider.Settings.NameValueTable.String () "," no description <br /><br />"
"android.provider.Settings.Secure.String () "," Store a name/value pair into the database. <br /><br />"
"android.provider.Settings.Secure.LOCATION_MODE () "," This method was deprecated in API level 19. use putInt(ContentResolver, String, int) and LOCATION_MODE <br /><br />"
"android.provider.Settings.Secure.isProviderEnabled (String) () "," This method was deprecated in API level 19. use LOCATION_MODE or isProviderEnabled(String) <br /><br />"
"android.provider.Settings.System.String () "," Store a name/value pair into the database. <br /><br />"
"android.provider.Settings.System.ContentResolver () "," This method was deprecated in API level 17. - Do not use <br /><br />"
"android.provider.Settings.System.Configuration () "," Convenience function to write a batch of configuration-related settings from a Configuration object. <br /><br />"
"android.provider.SyncStateContract.Helpers.Uri () "," no description <br /><br />"
"android.provider.SyncStateContract.Helpers.Account () "," Assigns the data array as the sync state for the given account. <br /><br />"
"android.provider.Telephony.Sms.Context () "," Used to determine the currently configured default SMS package. <br /><br />"
"android.provider.Telephony.Sms.Intents.DATA_SMS_RECEIVED_ACTION () "," Read the PDUs out of an SMS_RECEIVED_ACTION or a DATA_SMS_RECEIVED_ACTION intent. <br /><br />"
"android.provider.UserDictionary.Words.addWord (Context, String, int, String, Locale) () "," This method was deprecated in API level 16. Please use addWord(Context, String, int, String, Locale) instead. <br /><br />"
"android.provider.UserDictionary.Words.Locale () "," Adds a word to the dictionary, with the given frequency and the specified locale type. <br /><br />"
"android.provider.VoicemailContract.Status.PARAM_KEY_SOURCE_PACKAGE () "," A convenience method to build status URI specific to a source package by appending PARAM_KEY_SOURCE_PACKAGE param to the base URI. <br /><br />"
"android.provider.VoicemailContract.Voicemails.PARAM_KEY_SOURCE_PACKAGE () "," A convenience method to build voicemail URI specific to a source package by appending PARAM_KEY_SOURCE_PACKAGE param to the base URI. <br /><br />"
"android.renderscript.Allocation.copy2DRangeFrom (int xoff, int yoff, int w, int h, short[] data) "," Copy from an array into a rectangular region in this Allocation. <br /><br />"
"android.renderscript.Allocation.copy1DRangeFrom (int off, int count, float[] d) "," Copy an array into part of this Allocation. <br /><br />"
"android.renderscript.Allocation.Element () "," Creates an Allocation with a specified number of given elements <br /><br />"
"android.renderscript.Allocation.copyFromUnchecked (byte[] d) "," Copy into this Allocation from an array. <br /><br />"
"android.renderscript.Allocation.copyFromUnchecked (int[] d) "," Copy into this Allocation from an array. <br /><br />"
"android.renderscript.Allocation.copy1DRangeFrom (int off, int count, int[] d) "," Copy an array into part of this Allocation. <br /><br />"
"android.renderscript.Allocation.copyFrom (short[] d) "," Copy into this Allocation from an array. <br /><br />"
"android.renderscript.Allocation.resize (int dimX) "," This method was deprecated in API level 18. RenderScript objects should be immutable once created. The replacement is to create a new allocation and copy the contents. This function will throw an exception if API 21 or higher is used. <br /><br />"
"android.renderscript.Allocation.copy1DRangeFromUnchecked (int off, int count, int[] d) "," Copy an array into part of this Allocation. <br /><br />"
"android.renderscript.Allocation.copy2DRangeFrom (int xoff, int yoff, int w, int h, float[] data) "," Copy from an array into a rectangular region in this Allocation. <br /><br />"
"android.renderscript.Allocation.copyFromUnchecked (float[] d) "," Copy into this Allocation from an array. <br /><br />"
"android.renderscript.Allocation.copyTo (int[] d) "," Copy from the Allocation into a int array. <br /><br />"
"android.renderscript.Allocation.copy1DRangeFrom (int off, int count, short[] d) "," Copy an array into part of this Allocation. <br /><br />"
"android.renderscript.Allocation.Allocation () "," Copy an Allocation from an Allocation. <br /><br />"
"android.renderscript.Allocation.copyTo (float[] d) "," Copy from the Allocation into a float array. <br /><br />"
"android.renderscript.Allocation.Allocation.MipmapControl () "," Creates an Allocation from the Bitmap referenced by resource ID. <br /><br />"
"android.renderscript.Allocation.copyTo (short[] d) "," Copy from the Allocation into a short array. <br /><br />"
"android.renderscript.Allocation.String () "," Creates an Allocation containing string data encoded in UTF-8 format. <br /><br />"
"android.renderscript.Allocation.copyTo (byte[] d) "," Copy from the Allocation into a byte array. <br /><br />"
"android.renderscript.Allocation.BaseObj[] () "," Copy an array of RS objects to the Allocation. <br /><br />"
"android.renderscript.Allocation.copyFrom (byte[] d) "," Copy into this Allocation from an array. <br /><br />"
"android.renderscript.Allocation.copyFromUnchecked (short[] d) "," Copy into this Allocation from an array. <br /><br />"
"android.renderscript.Allocation.copy1DRangeFromUnchecked (int off, int count, float[] d) "," Copy an array into part of this Allocation. <br /><br />"
"android.renderscript.Allocation.getBytesSize () "," Get the size of the Allocation in bytes. <br /><br />"
"android.renderscript.Allocation.Surface () "," Associate a Surface with this Allocation. <br /><br />"
"android.renderscript.Allocation.ioSend () "," Send a buffer to the output stream. <br /><br />"
"android.renderscript.Allocation.copyFrom (int[] d) "," Copy into this Allocation from an array. <br /><br />"
"android.renderscript.Allocation.Type () "," Get the Type of the Allocation. <br /><br />"
"android.renderscript.Allocation.USAGE_IO_INPUT () "," Set a notification handler for USAGE_IO_INPUT. <br /><br />"
"android.renderscript.Allocation.generateMipmaps () "," Generate a mipmap chain. <br /><br />"
"android.renderscript.Allocation.Object () "," Copy from the Allocation into an array. <br /><br />"
"android.renderscript.Allocation.copy1DRangeFrom (int off, int count, byte[] d) "," Copy an array into part of this Allocation. <br /><br />"
"android.renderscript.Allocation.syncAll (int srcLocation) "," Propagate changes from one usage of the Allocation to the other usages of the Allocation. <br /><br />"
"android.renderscript.Allocation.getSurface () "," Returns the handle to a raw buffer that is being managed by the screen compositor. <br /><br />"
"android.renderscript.Allocation.copyFrom (float[] d) "," Copy into this Allocation from an array. <br /><br />"
"android.renderscript.Allocation.FieldPacker () "," This is only intended to be used by auto-generated code reflected from the RenderScript script files. <br /><br />"
"android.renderscript.Allocation.copy2DRangeFrom (int xoff, int yoff, int w, int h, byte[] data) "," Copy from an array into a rectangular region in this Allocation. <br /><br />"
"android.renderscript.Allocation.copy1DRangeFromUnchecked (int off, int count, byte[] d) "," Copy an array into part of this Allocation. <br /><br />"
"android.renderscript.Allocation.copy2DRangeFrom (int xoff, int yoff, int w, int h, int[] data) "," Copy from an array into a rectangular region in this Allocation. <br /><br />"
"android.renderscript.Allocation.copy1DRangeFromUnchecked (int off, int count, short[] d) "," Copy an array into part of this Allocation. <br /><br />"
"android.renderscript.Allocation.ioReceive () "," Receive the latest input into the Allocation. <br /><br />"
"android.renderscript.Allocation.getUsage () "," Get the usage flags of the Allocation. <br /><br />"
"android.renderscript.Allocation.Bitmap () "," Creates a non-mipmapped Allocation to use as a graphics texture from the Bitmap referenced by resource ID. <br /><br />"
"android.renderscript.Allocation.OnBufferAvailableListener.Allocation () "," no description <br /><br />"
"android.renderscript.AllocationAdapter.Type.CubemapFace () "," Set the active Face. <br /><br />"
"android.renderscript.AllocationAdapter.setLOD (int lod) "," Set the active LOD. <br /><br />"
"android.renderscript.AllocationAdapter.setY (int y) "," Set the active Y. <br /><br />"
"android.renderscript.AllocationAdapter.resize (int dimX) "," This method is deprecated. RenderScript objects should be immutable once created. The replacement is to create a new allocation and copy the contents. This function will throw an exception if API 21 or higher is used. <br /><br />"
"android.renderscript.AllocationAdapter.Allocation () "," no description <br /><br />"
"android.renderscript.AllocationAdapter.setZ (int z) "," Set the active Z. <br /><br />"
"android.renderscript.BaseObj.getName () "," no description <br /><br />"
"android.renderscript.BaseObj.destroy () "," Frees any native resources associated with this object. <br /><br />"
"android.renderscript.BaseObj.String () "," setName assigns a name to an object. <br /><br />"
"android.renderscript.BaseObj.hashCode () "," Calculates the hash code value for a BaseObj. <br /><br />"
"android.renderscript.BaseObj.Object () "," Compare the current BaseObj with another BaseObj for equality. <br /><br />"
"android.renderscript.Element.Builder.String () "," Add an array of elements to this element. <br /><br />"
"android.renderscript.Element.Builder.create () "," Create the element from this builder. <br /><br />"
"android.renderscript.FieldPacker.Int4 () "," no description <br /><br />"
"android.renderscript.FieldPacker.addU64 (long v) "," no description <br /><br />"
"android.renderscript.FieldPacker.subalign (int v) "," no description <br /><br />"
"android.renderscript.FieldPacker.subMatrix2f () "," no description <br /><br />"
"android.renderscript.FieldPacker.subI16 () "," no description <br /><br />"
"android.renderscript.FieldPacker.Float3 () "," no description <br /><br />"
"android.renderscript.FieldPacker.subInt4 () "," no description <br /><br />"
"android.renderscript.FieldPacker.Long4 () "," no description <br /><br />"
"android.renderscript.FieldPacker.Float4 () "," no description <br /><br />"
"android.renderscript.FieldPacker.addF64 (double v) "," no description <br /><br />"
"android.renderscript.FieldPacker.Long3 () "," no description <br /><br />"
"android.renderscript.FieldPacker.Long2 () "," no description <br /><br />"
"android.renderscript.FieldPacker.Float2 () "," no description <br /><br />"
"android.renderscript.FieldPacker.subMatrix3f () "," no description <br /><br />"
"android.renderscript.FieldPacker.subShort2 () "," no description <br /><br />"
"android.renderscript.FieldPacker.Byte3 () "," no description <br /><br />"
"android.renderscript.FieldPacker.Double3 () "," no description <br /><br />"
"android.renderscript.FieldPacker.Byte2 () "," no description <br /><br />"
"android.renderscript.FieldPacker.addU8 (short v) "," no description <br /><br />"
"android.renderscript.FieldPacker.Double2 () "," no description <br /><br />"
"android.renderscript.FieldPacker.Double4 () "," no description <br /><br />"
"android.renderscript.FieldPacker.align (int v) "," no description <br /><br />"
"android.renderscript.FieldPacker.subF64 () "," no description <br /><br />"
"android.renderscript.FieldPacker.subByte2 () "," no description <br /><br />"
"android.renderscript.FieldPacker.subLong3 () "," no description <br /><br />"
"android.renderscript.FieldPacker.addI32 (int v) "," no description <br /><br />"
"android.renderscript.FieldPacker.Matrix3f () "," no description <br /><br />"
"android.renderscript.FieldPacker.addI8 (byte v) "," no description <br /><br />"
"android.renderscript.FieldPacker.subLong4 () "," no description <br /><br />"
"android.renderscript.FieldPacker.subLong2 () "," no description <br /><br />"
"android.renderscript.FieldPacker.subByte3 () "," no description <br /><br />"
"android.renderscript.FieldPacker.Short2 () "," no description <br /><br />"
"android.renderscript.FieldPacker.subInt2 () "," no description <br /><br />"
"android.renderscript.FieldPacker.subI8 () "," no description <br /><br />"
"android.renderscript.FieldPacker.subInt3 () "," no description <br /><br />"
"android.renderscript.FieldPacker.addBoolean (boolean v) "," no description <br /><br />"
"android.renderscript.FieldPacker.Matrix2f () "," no description <br /><br />"
"android.renderscript.FieldPacker.BaseObj () "," no description <br /><br />"
"android.renderscript.FieldPacker.Byte4 () "," no description <br /><br />"
"android.renderscript.FieldPacker.subI32 () "," no description <br /><br />"
"android.renderscript.FieldPacker.skip (int i) "," no description <br /><br />"
"android.renderscript.FieldPacker.subDouble2 () "," no description <br /><br />"
"android.renderscript.FieldPacker.addU32 (long v) "," no description <br /><br />"
"android.renderscript.FieldPacker.Short3 () "," no description <br /><br />"
"android.renderscript.FieldPacker.Matrix4f () "," no description <br /><br />"
"android.renderscript.FieldPacker.subDouble3 () "," no description <br /><br />"
"android.renderscript.FieldPacker.Short4 () "," no description <br /><br />"
"android.renderscript.FieldPacker.subByte4 () "," no description <br /><br />"
"android.renderscript.FieldPacker.reset (int i) "," no description <br /><br />"
"android.renderscript.FieldPacker.addU16 (int v) "," no description <br /><br />"
"android.renderscript.FieldPacker.subShort3 () "," no description <br /><br />"
"android.renderscript.FieldPacker.subDouble4 () "," no description <br /><br />"
"android.renderscript.FieldPacker.subShort4 () "," no description <br /><br />"
"android.renderscript.FieldPacker.subBoolean () "," no description <br /><br />"
"android.renderscript.FieldPacker.subFloat2 () "," no description <br /><br />"
"android.renderscript.FieldPacker.subMatrix4f () "," no description <br /><br />"
"android.renderscript.FieldPacker.subFloat4 () "," no description <br /><br />"
"android.renderscript.FieldPacker.addI64 (long v) "," no description <br /><br />"
"android.renderscript.FieldPacker.subI64 () "," no description <br /><br />"
"android.renderscript.FieldPacker.getData () "," no description <br /><br />"
"android.renderscript.FieldPacker.addF32 (float v) "," no description <br /><br />"
"android.renderscript.FieldPacker.Int3 () "," no description <br /><br />"
"android.renderscript.FieldPacker.subFloat3 () "," no description <br /><br />"
"android.renderscript.FieldPacker.addI16 (short v) "," no description <br /><br />"
"android.renderscript.FieldPacker.reset () "," no description <br /><br />"
"android.renderscript.FieldPacker.Int2 () "," no description <br /><br />"
"android.renderscript.FieldPacker.subF32 () "," no description <br /><br />"
"android.renderscript.Matrix2f.set (int x, int y, float v) "," Sets the value for a given row and column <br /><br />"
"android.renderscript.Matrix2f.loadRotate (float rot) "," Sets current values to be a rotation matrix of given angle <br /><br />"
"android.renderscript.Matrix2f.getArray () "," Return a reference to the internal array representing matrix values. <br /><br />"
"android.renderscript.Matrix2f.loadScale (float x, float y) "," Sets current values to be a scale matrix of given dimensions <br /><br />"
"android.renderscript.Matrix2f.loadIdentity () "," Sets the matrix values to identity <br /><br />"
"android.renderscript.Matrix2f.transpose () "," Sets the current matrix to its transpose <br /><br />"
"android.renderscript.Matrix2f.scale (float x, float y) "," Modifies the current matrix by post-multiplying it with a scale matrix of given dimensions <br /><br />"
"android.renderscript.Matrix2f.rotate (float rot) "," Modifies the current matrix by post-multiplying it with a rotation matrix of given angle <br /><br />"
"android.renderscript.Matrix2f.Matrix2f () "," Post-multiplies the current matrix by a given parameter <br /><br />"
"android.renderscript.Matrix2f.get (int x, int y) "," Returns the value for a given row and column <br /><br />"
"android.renderscript.Matrix3f.scale (float x, float y, float z) "," Modifies the current matrix by post-multiplying it with a scale matrix of given dimensions <br /><br />"
"android.renderscript.Matrix3f.loadScale (float x, float y) "," Makes the upper 2x2 a scale matrix of given dimensions <br /><br />"
"android.renderscript.Matrix3f.loadIdentity () "," Sets the matrix values to identity <br /><br />"
"android.renderscript.Matrix3f.loadRotate (float rot, float x, float y, float z) "," Sets current values to be a rotation matrix of certain angle about a given axis <br /><br />"
"android.renderscript.Matrix3f.loadScale (float x, float y, float z) "," Sets current values to be a scale matrix of given dimensions <br /><br />"
"android.renderscript.Matrix3f.loadTranslate (float x, float y) "," Sets current values to be a translation matrix of given dimensions <br /><br />"
"android.renderscript.Matrix3f.transpose () "," Sets the current matrix to its transpose <br /><br />"
"android.renderscript.Matrix3f.translate (float x, float y) "," Modifies the current matrix by post-multiplying it with a translation matrix of given dimensions <br /><br />"
"android.renderscript.Matrix3f.get (int x, int y) "," Returns the value for a given row and column <br /><br />"
"android.renderscript.Matrix3f.Matrix3f () "," Post-multiplies the current matrix by a given parameter <br /><br />"
"android.renderscript.Matrix3f.set (int x, int y, float v) "," Sets the value for a given row and column <br /><br />"
"android.renderscript.Matrix3f.loadRotate (float rot) "," Makes the upper 2x2 a rotation matrix of the given angle <br /><br />"
"android.renderscript.Matrix3f.getArray () "," Return a reference to the internal array representing matrix values. <br /><br />"
"android.renderscript.Matrix3f.scale (float x, float y) "," Modifies the upper 2x2 of the current matrix by post-multiplying it with a scale matrix of given dimensions <br /><br />"
"android.renderscript.Matrix3f.rotate (float rot) "," Modifies the upper 2x2 of the current matrix by post-multiplying it with a rotation matrix of given angle <br /><br />"
"android.renderscript.Matrix3f.rotate (float rot, float x, float y, float z) "," Modifies the current matrix by post-multiplying it with a rotation matrix of certain angle about a given axis <br /><br />"
"android.renderscript.Matrix4f.translate (float x, float y, float z) "," Modifies the current matrix by post-multiplying it with a translation matrix of given dimensions <br /><br />"
"android.renderscript.Matrix4f.scale (float x, float y, float z) "," Modifies the current matrix by post-multiplying it with a scale matrix of given dimensions <br /><br />"
"android.renderscript.Matrix4f.loadIdentity () "," Sets the matrix values to identity <br /><br />"
"android.renderscript.Matrix4f.Matrix4f () "," Post-multiplies the current matrix by a given parameter <br /><br />"
"android.renderscript.Matrix4f.loadScale (float x, float y, float z) "," Sets current values to be a scale matrix of given dimensions <br /><br />"
"android.renderscript.Matrix4f.loadRotate (float rot, float x, float y, float z) "," Sets current values to be a rotation matrix of certain angle about a given axis <br /><br />"
"android.renderscript.Matrix4f.transpose () "," Sets the current matrix to its transpose <br /><br />"
"android.renderscript.Matrix4f.loadTranslate (float x, float y, float z) "," Sets current values to be a translation matrix of given dimensions <br /><br />"
"android.renderscript.Matrix4f.get (int x, int y) "," Returns the value for a given row and column <br /><br />"
"android.renderscript.Matrix4f.loadOrtho (float l, float r, float b, float t, float n, float f) "," Set current values to be an orthographic projection matrix <br /><br />"
"android.renderscript.Matrix4f.set (int x, int y, float v) "," Sets the value for a given row and column <br /><br />"
"android.renderscript.Matrix4f.inverse () "," Sets the current matrix to its inverse <br /><br />"
"android.renderscript.Matrix4f.getArray () "," Return a reference to the internal array representing matrix values. <br /><br />"
"android.renderscript.Matrix4f.inverseTranspose () "," Sets the current matrix to its inverse transpose <br /><br />"
"android.renderscript.Matrix4f.loadPerspective (float fovy, float aspect, float near, float far) "," Sets current values to be a perspective projection matrix <br /><br />"
"android.renderscript.Matrix4f.loadFrustum (float l, float r, float b, float t, float n, float f) "," Sets current values to be a perspective projection matrix <br /><br />"
"android.renderscript.Matrix4f.loadOrthoWindow (int w, int h) "," Set current values to be an orthographic projection matrix with the right and bottom clipping planes set to the given values. <br /><br />"
"android.renderscript.Matrix4f.loadProjectionNormalized (int w, int h) "," Helper function to set the current values to a perspective projection matrix with aspect ratio defined by the parameters and (near, far), (bottom, top) mapping to (-1, 1) at z = 0 <br /><br />"
"android.renderscript.Matrix4f.rotate (float rot, float x, float y, float z) "," Modifies the current matrix by post-multiplying it with a rotation matrix of certain angle about a given axis <br /><br />"
"android.renderscript.RenderScript.getMessageHandler () "," no description <br /><br />"
"android.renderscript.RenderScript.finish () "," Wait for any pending asynchronous opeations (such as copies to a RS allocation or RS script executions) to complete. <br /><br />"
"android.renderscript.RenderScript.destroy () "," Destroys this RenderScript context. <br /><br />"
"android.renderscript.RenderScript.Context () "," Create a RenderScript context. <br /><br />"
"android.renderscript.RenderScript.contextDump () "," Print the currently available debugging information about the state of the RS context to the log. <br /><br />"
"android.renderscript.RenderScript.getErrorHandler () "," no description <br /><br />"
"android.renderscript.RenderScript.RenderScript.RSMessageHandler () "," no description <br /><br />"
"android.renderscript.RenderScript.RenderScript.Priority () "," Change the priority of the worker threads for this context. <br /><br />"
"android.renderscript.RenderScript.sendMessage (int id, int[] data) "," Place a message into the message queue to be sent back to the message handler once all previous commands have been executed. <br /><br />"
"android.renderscript.RenderScript.getApplicationContext () "," Gets the application context associated with the RenderScript context. <br /><br />"
"android.renderscript.RenderScript.RenderScript.RSErrorHandler () "," no description <br /><br />"
"android.renderscript.RenderScript.RenderScript.ContextType () "," Create a RenderScript context. <br /><br />"
"android.renderscript.RenderScript.RSErrorHandler.run () "," Starts executing the active part of the class' code. <br /><br />"
"android.renderscript.RenderScript.RSMessageHandler.run () "," Starts executing the active part of the class' code. <br /><br />"
"android.renderscript.Sampler.Builder.Sampler.Value () "," no description <br /><br />"
"android.renderscript.Sampler.Builder.create () "," no description <br /><br />"
"android.renderscript.Sampler.Builder.setAnisotropy (float v) "," no description <br /><br />"
"android.renderscript.Script.FieldBase.getAllocation () "," no description <br /><br />"
"android.renderscript.Script.FieldBase.getType () "," no description <br /><br />"
"android.renderscript.Script.FieldBase.getElement () "," no description <br /><br />"
"android.renderscript.Script.FieldBase.updateAllocation () "," no description <br /><br />"
"android.renderscript.Script.LaunchOptions.setZ (int zstartArg, int zendArg) "," Set the Z range. <br /><br />"
"android.renderscript.Script.LaunchOptions.getYEnd () "," Returns the current Y end <br /><br />"
"android.renderscript.Script.LaunchOptions.setX (int xstartArg, int xendArg) "," Set the X range. <br /><br />"
"android.renderscript.Script.LaunchOptions.getZEnd () "," Returns the current Z end <br /><br />"
"android.renderscript.Script.LaunchOptions.setY (int ystartArg, int yendArg) "," Set the Y range. <br /><br />"
"android.renderscript.Script.LaunchOptions.getYStart () "," Returns the current Y start <br /><br />"
"android.renderscript.Script.LaunchOptions.getXEnd () "," Returns the current X end <br /><br />"
"android.renderscript.Script.LaunchOptions.getZStart () "," Returns the current Z start <br /><br />"
"android.renderscript.Script.LaunchOptions.getXStart () "," Returns the current X start <br /><br />"
"android.renderscript.ScriptGroup.Builder.create () "," Creates the Script group. <br /><br />"
"android.renderscript.ScriptGroup.Builder.Script.KernelID () "," Adds a Kernel to the group. <br /><br />"
"android.renderscript.ScriptGroup.Builder.Script.FieldID () "," Adds a connection to the group. <br /><br />"
"android.renderscript.ScriptIntrinsic3DLUT.U8_4 (RenderScript) () "," Supported elements types are U8_4(RenderScript) The defaults tables are identity. <br /><br />"
"android.renderscript.ScriptIntrinsic3DLUT.getKernelID () "," Get a KernelID for this intrinsic kernel. <br /><br />"
"android.renderscript.ScriptIntrinsic3DLUT.Allocation () "," Sets the Allocation to be used as the lookup table. <br /><br />"
"android.renderscript.ScriptIntrinsic3DLUT.Script.LaunchOptions () "," Invoke the kernel and apply the lookup to each cell of ain and copy to aout. <br /><br />"
"android.renderscript.ScriptIntrinsicBlend.getKernelIDAdd () "," Get a KernelID for the Add kernel. <br /><br />"
"android.renderscript.ScriptIntrinsicBlend.getKernelIDClear () "," Get a KernelID for the Clear kernel. <br /><br />"
"android.renderscript.ScriptIntrinsicBlend.getKernelIDSrcAtop () "," Get a KernelID for the SrcAtop kernel. <br /><br />"
"android.renderscript.ScriptIntrinsicBlend.getKernelIDMultiply () "," Get a KernelID for the Multiply kernel. <br /><br />"
"android.renderscript.ScriptIntrinsicBlend.getKernelIDDstOut () "," Get a KernelID for the DstOut kernel. <br /><br />"
"android.renderscript.ScriptIntrinsicBlend.getKernelIDSrcOut () "," Get a KernelID for the SrcOut kernel. <br /><br />"
"android.renderscript.ScriptIntrinsicBlend.getKernelIDSubtract () "," Get a KernelID for the Subtract kernel. <br /><br />"
"android.renderscript.ScriptIntrinsicBlend.getKernelIDDstOver () "," Get a KernelID for the DstOver kernel. <br /><br />"
"android.renderscript.ScriptIntrinsicBlend.getKernelIDSrcOver () "," Get a KernelID for the SrcOver kernel. <br /><br />"
"android.renderscript.ScriptIntrinsicBlend.U8_4 (RenderScript) () "," Supported elements types are U8_4(RenderScript) <br /><br />"
"android.renderscript.ScriptIntrinsicBlend.getKernelIDDst () "," Get a KernelID for the Dst kernel. <br /><br />"
"android.renderscript.ScriptIntrinsicBlend.getKernelIDSrcIn () "," Get a KernelID for the SrcIn kernel. <br /><br />"
"android.renderscript.ScriptIntrinsicBlend.Allocation () "," Sets dst = {src.r ^ dst.r, src.g ^ dst.g, src.b ^ dst.b, src.a ^ dst.a} <br /><br />"
"android.renderscript.ScriptIntrinsicBlend.getKernelIDSrc () "," Get a KernelID for the Src kernel. <br /><br />"
"android.renderscript.ScriptIntrinsicBlend.getKernelIDXor () "," Get a KernelID for the Xor kernel. <br /><br />"
"android.renderscript.ScriptIntrinsicBlend.Script.LaunchOptions () "," Sets dst = {src.r ^ dst.r, src.g ^ dst.g, src.b ^ dst.b, src.a ^ dst.a} <br /><br />"
"android.renderscript.ScriptIntrinsicBlend.getKernelIDDstAtop () "," Get a KernelID for the DstAtop kernel. <br /><br />"
"android.renderscript.ScriptIntrinsicBlend.getKernelIDDstIn () "," Get a KernelID for the DstIn kernel. <br /><br />"
"android.renderscript.ScriptIntrinsicBlur.setRadius (float radius) "," Set the radius of the Blur. <br /><br />"
"android.renderscript.ScriptIntrinsicBlur.Element () "," Create an intrinsic for applying a blur to an allocation. <br /><br />"
"android.renderscript.ScriptIntrinsicBlur.getFieldID_Input () "," Get a FieldID for the input field of this intrinsic. <br /><br />"
"android.renderscript.ScriptIntrinsicBlur.getKernelID () "," Get a KernelID for this intrinsic kernel. <br /><br />"
"android.renderscript.ScriptIntrinsicBlur.Allocation () "," Set the input of the blur. <br /><br />"
"android.renderscript.ScriptIntrinsicBlur.Script.LaunchOptions () "," Apply the filter to the input and save to the specified allocation. <br /><br />"
"android.renderscript.ScriptIntrinsicColorMatrix.Matrix3f () "," Set the color matrix which will be applied to each cell of the image. <br /><br />"
"android.renderscript.ScriptIntrinsicColorMatrix.setGreyscale () "," Set a color matrix to convert from RGB to luminance. <br /><br />"
"android.renderscript.ScriptIntrinsicColorMatrix.Element () "," This method was deprecated in API level 19. Use the single argument version as Element is now ignored. <br /><br />"
"android.renderscript.ScriptIntrinsicColorMatrix.RenderScript () "," Create an intrinsic for applying a color matrix to an allocation. <br /><br />"
"android.renderscript.ScriptIntrinsicColorMatrix.getKernelID () "," Get a KernelID for this intrinsic kernel. <br /><br />"
"android.renderscript.ScriptIntrinsicColorMatrix.setYUVtoRGB () "," Set the matrix to convert from YUV to RGB with a direct copy of the 4th channel. <br /><br />"
"android.renderscript.ScriptIntrinsicColorMatrix.setRGBtoYUV () "," Set the matrix to convert from RGB to YUV with a direct copy of the 4th channel. <br /><br />"
"android.renderscript.ScriptIntrinsicColorMatrix.Matrix4f () "," Set the color matrix which will be applied to each cell of the image. <br /><br />"
"android.renderscript.ScriptIntrinsicColorMatrix.Allocation () "," Invoke the kernel and apply the matrix to each cell of input Allocation and copy to the output Allocation. <br /><br />"
"android.renderscript.ScriptIntrinsicColorMatrix.Float4 () "," Set the value to be added after the color matrix has been applied. <br /><br />"
"android.renderscript.ScriptIntrinsicColorMatrix.setAdd (float r, float g, float b, float a) "," Set the value to be added after the color matrix has been applied. <br /><br />"
"android.renderscript.ScriptIntrinsicConvolve3x3.setCoefficients (float[] v) "," Set the coefficients for the convolve. <br /><br />"
"android.renderscript.ScriptIntrinsicConvolve3x3.F32_4 (RenderScript) () "," Supported elements types are U8(RenderScript), U8_2(RenderScript), U8_3(RenderScript), U8_4(RenderScript), F32(RenderScript), F32_2(RenderScript), F32_3(RenderScript), and F32_4(RenderScript) The default coefficients are. <br /><br />"
"android.renderscript.ScriptIntrinsicConvolve3x3.getFieldID_Input () "," Get a FieldID for the input field of this intrinsic. <br /><br />"
"android.renderscript.ScriptIntrinsicConvolve3x3.getKernelID () "," Get a KernelID for this intrinsic kernel. <br /><br />"
"android.renderscript.ScriptIntrinsicConvolve3x3.Allocation () "," Set the input of the blur. <br /><br />"
"android.renderscript.ScriptIntrinsicConvolve3x3.Script.LaunchOptions () "," Apply the filter to the input and save to the specified allocation. <br /><br />"
"android.renderscript.ScriptIntrinsicConvolve5x5.setCoefficients (float[] v) "," Set the coefficients for the convolve. <br /><br />"
"android.renderscript.ScriptIntrinsicConvolve5x5.F32_4 (RenderScript) () "," Supported elements types are U8(RenderScript), U8_2(RenderScript), U8_3(RenderScript), U8_4(RenderScript), F32(RenderScript), F32_2(RenderScript), F32_3(RenderScript), and F32_4(RenderScript) The default coefficients are. <br /><br />"
"android.renderscript.ScriptIntrinsicConvolve5x5.getFieldID_Input () "," Get a FieldID for the input field of this intrinsic. <br /><br />"
"android.renderscript.ScriptIntrinsicConvolve5x5.getKernelID () "," Get a KernelID for this intrinsic kernel. <br /><br />"
"android.renderscript.ScriptIntrinsicConvolve5x5.Allocation () "," Set the input of the blur. <br /><br />"
"android.renderscript.ScriptIntrinsicConvolve5x5.Script.LaunchOptions () "," Apply the filter to the input and save to the specified allocation. <br /><br />"
"android.renderscript.ScriptIntrinsicHistogram.getKernelID_Separate () "," Get a KernelID for this intrinsic kernel. <br /><br />"
"android.renderscript.ScriptIntrinsicHistogram.Element () "," Create an intrinsic for calculating the histogram of an uchar or uchar4 image. <br /><br />"
"android.renderscript.ScriptIntrinsicHistogram.getFieldID_Input () "," Get a FieldID for the input field of this intrinsic. <br /><br />"
"android.renderscript.ScriptIntrinsicHistogram.Allocation () "," Set the output of the histogram. <br /><br />"
"android.renderscript.ScriptIntrinsicHistogram.setDotCoefficients (float r, float g, float b, float a) "," Set the coefficients used for the RGBA to Luminocity calculation. <br /><br />"
"android.renderscript.ScriptIntrinsicHistogram.Script.LaunchOptions () "," Process an input buffer and place the histogram into the output allocation. <br /><br />"
"android.renderscript.ScriptIntrinsicLUT.setAlpha (int index, int value) "," Set an entry in the alpha channel lookup table <br /><br />"
"android.renderscript.ScriptIntrinsicLUT.setBlue (int index, int value) "," Set an entry in the blue channel lookup table <br /><br />"
"android.renderscript.ScriptIntrinsicLUT.setGreen (int index, int value) "," Set an entry in the green channel lookup table <br /><br />"
"android.renderscript.ScriptIntrinsicLUT.U8_4 (RenderScript) () "," Supported elements types are U8_4(RenderScript) The defaults tables are identity. <br /><br />"
"android.renderscript.ScriptIntrinsicLUT.setRed (int index, int value) "," Set an entry in the red channel lookup table <br /><br />"
"android.renderscript.ScriptIntrinsicLUT.getKernelID () "," Get a KernelID for this intrinsic kernel. <br /><br />"
"android.renderscript.ScriptIntrinsicLUT.Allocation () "," Invoke the kernel and apply the lookup to each cell of ain and copy to aout. <br /><br />"
"android.renderscript.ScriptIntrinsicLUT.Script.LaunchOptions () "," Invoke the kernel and apply the lookup to each cell of ain and copy to aout. <br /><br />"
"android.renderscript.ScriptIntrinsicResize.getFieldID_Input () "," Get a FieldID for the input field of this intrinsic. <br /><br />"
"android.renderscript.ScriptIntrinsicResize.U8_4 (RenderScript) () "," Supported elements types are U8(RenderScript), U8_2(RenderScript), U8_3(RenderScript), U8_4(RenderScript) <br /><br />"
"android.renderscript.ScriptIntrinsicResize.Allocation () "," Set the input of the resize. <br /><br />"
"android.renderscript.ScriptIntrinsicResize.getKernelID_bicubic () "," Get a KernelID for this intrinsic kernel. <br /><br />"
"android.renderscript.ScriptIntrinsicResize.Script.LaunchOptions () "," Resize copy the input allocation to the output specified. <br /><br />"
"android.renderscript.ScriptIntrinsicYuvToRGB.Element () "," Create an intrinsic for converting YUV to RGB. <br /><br />"
"android.renderscript.ScriptIntrinsicYuvToRGB.getFieldID_Input () "," Get a FieldID for the input field of this intrinsic. <br /><br />"
"android.renderscript.ScriptIntrinsicYuvToRGB.getKernelID () "," Get a KernelID for this intrinsic kernel. <br /><br />"
"android.renderscript.ScriptIntrinsicYuvToRGB.Allocation () "," Convert the image to RGB. <br /><br />"
"android.renderscript.ScriptIntrinsicYuvToRGB.U8 (RenderScript) () "," Set the input yuv allocation, must be U8(RenderScript). <br /><br />"
"android.renderscript.Type.Builder.setFaces (boolean value) "," no description <br /><br />"
"android.renderscript.Type.Builder.create () "," Validate structure and create a new Type. <br /><br />"
"android.renderscript.Type.Builder.setZ (int value) "," no description <br /><br />"
"android.renderscript.Type.Builder.setMipmaps (boolean value) "," no description <br /><br />"
"android.renderscript.Type.Builder.setY (int value) "," no description <br /><br />"
"android.renderscript.Type.Builder.setX (int value) "," Add a dimension to the Type. <br /><br />"
"android.renderscript.Type.Builder.setYuvFormat (int yuvFormat) "," Set the YUV layout for a Type. <br /><br />"
"android.sax.Element.String () "," Gets the child element with the given name. <br /><br />"
"android.sax.Element.TextElementListener () "," Sets start and end text element listeners at the same time. <br /><br />"
"android.sax.Element.EndElementListener () "," Sets a listener for the end of this element. <br /><br />"
"android.sax.Element.EndTextElementListener () "," Sets a listener for the end of this text element. <br /><br />"
"android.sax.Element.StartElementListener () "," Sets a listener for the start of this element. <br /><br />"
"android.sax.Element.ElementListener () "," Sets start and end element listeners at the same time. <br /><br />"
"android.sax.Element.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.sax.EndElementListener.end () "," Invoked at the end of an element. <br /><br />"
"android.sax.EndTextElementListener.String () "," Invoked at the end of a text element with the body of the element. <br /><br />"
"android.sax.RootElement.getContentHandler () "," Gets the SAX ContentHandler. <br /><br />"
"android.sax.StartElementListener.Attributes () "," Invoked at the beginning of an element. <br /><br />"
"android.security.KeyChain.String () "," Returns true if the current device's KeyChain supports a specific PrivateKey type indicated by algorithm (e.g., 'RSA'). <br /><br />"
"android.security.KeyChain.createInstallIntent () "," Returns an Intent that can be used for credential installation. <br /><br />"
"android.security.KeyChainAliasCallback.String () "," Called with the alias of the certificate chosen by the user, or null if no value was chosen. <br /><br />"
"android.security.KeyPairGeneratorSpec.Builder.Date () "," Sets the start of the validity period for the self-signed certificate of the generated key pair. <br /><br />"
"android.security.KeyPairGeneratorSpec.Builder.String () "," Sets the key type (e.g., RSA, DSA, EC) of the keypair to be created. <br /><br />"
"android.security.KeyPairGeneratorSpec.Builder.AlgorithmParameterSpec () "," Sets the underlying key type's parameters. <br /><br />"
"android.security.KeyPairGeneratorSpec.Builder.setEncryptionRequired () "," Indicates that this key must be encrypted at rest on storage. <br /><br />"
"android.security.KeyPairGeneratorSpec.Builder.BigInteger () "," Sets the serial number used for the self-signed certificate of the generated key pair. <br /><br />"
"android.security.KeyPairGeneratorSpec.Builder.setKeySize (int keySize) "," Sets the key size for the keypair to be created. <br /><br />"
"android.security.KeyPairGeneratorSpec.Builder.KeyStore () "," Sets the alias to be used to retrieve the key later from a KeyStore instance using the AndroidKeyStore provider. <br /><br />"
"android.security.KeyPairGeneratorSpec.Builder.build () "," Builds the instance of the KeyPairGeneratorSpec. <br /><br />"
"android.security.KeyPairGeneratorSpec.Builder.X500Principal () "," Sets the subject used for the self-signed certificate of the generated key pair. <br /><br />"
"android.security.KeyStoreParameter.Builder.setEncryptionRequired (boolean required) "," Indicates that this key must be encrypted at rest on storage. <br /><br />"
"android.security.KeyStoreParameter.Builder.build () "," Builds the instance of the KeyPairGeneratorSpec. <br /><br />"
"android.service.carrier.CarrierMessagingService.Integer () "," Override this method to download MMSs received. <br /><br />"
"android.service.carrier.CarrierMessagingService.CarrierMessagingService.SendMmsResult () "," Override this method to intercept MMSs sent from the device. <br /><br />"
"android.service.carrier.CarrierMessagingService.CarrierMessagingService.SendMultipartSmsResult () "," Override this method to intercept long SMSs sent from the device. <br /><br />"
"android.service.carrier.CarrierMessagingService.CarrierMessagingService.SendSmsResult () "," Override this method to intercept text SMSs sent from the device. <br /><br />"
"android.service.carrier.CarrierMessagingService.Boolean () "," Override this method to filter inbound SMS messages. <br /><br />"
"android.service.carrier.CarrierMessagingService.Intent () "," Return the communication channel to the service. <br /><br />"
"android.service.carrier.CarrierMessagingService.ResultCallback&lt;T&gt;.onReceiveResult (T result) "," Invoked when the result is available. <br /><br />"
"android.service.carrier.CarrierMessagingService.SendMmsResult.getSendStatus () "," Returns the send status of the just-sent MMS. <br /><br />"
"android.service.carrier.CarrierMessagingService.SendMmsResult.getSendConfPdu () "," Returns the SendConf PDU, which confirms that the message was sent. <br /><br />"
"android.service.carrier.CarrierMessagingService.SendMultipartSmsResult.getSendStatus () "," Returns the send status of the just-sent SMS. <br /><br />"
"android.service.carrier.CarrierMessagingService.SendMultipartSmsResult.getMessageRefs () "," Returns the message references of the just-sent multipart SMS. <br /><br />"
"android.service.carrier.CarrierMessagingService.SendSmsResult.getSendStatus () "," Returns the send status of the just-sent SMS. <br /><br />"
"android.service.carrier.CarrierMessagingService.SendSmsResult.getMessageRef () "," Returns the message reference of the just-sent SMS. <br /><br />"
"android.service.carrier.MessagePdu.getPdus () "," Returns the contents of a possibly multi-part SMS. <br /><br />"
"android.service.carrier.MessagePdu.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.service.carrier.MessagePdu.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.service.dreams.DreamService.WindowManager () "," Retrieves the current WindowManager for the dream. <br /><br />"
"android.service.dreams.DreamService.wakeUp () "," Wakes the dream up gently. <br /><br />"
"android.service.dreams.DreamService.MotionEvent () "," Called to process trackball events. <br /><br />"
"android.service.dreams.DreamService.onCreate () "," Called when this Dream is constructed. <br /><br />"
"android.service.dreams.DreamService.ActionMode () "," Called when an action mode has been started. <br /><br />"
"android.service.dreams.DreamService.isScreenBright () "," Returns whether or not this dream keeps the screen bright while dreaming. <br /><br />"
"android.service.dreams.DreamService.MenuItem () "," Called when a panel's menu item has been selected by the user. <br /><br />"
"android.service.dreams.DreamService.isFullscreen () "," Returns whether or not this dream is in fullscreen mode. <br /><br />"
"android.service.dreams.DreamService.onWindowFocusChanged (boolean hasFocus) "," This hook is called whenever the window focus changes. <br /><br />"
"android.service.dreams.DreamService.onAttachedToWindow () "," Called when the window has been attached to the window manager. <br /><br />"
"android.service.dreams.DreamService.onDestroy () "," Called by the system to notify a Service that it is no longer used and is being removed. <br /><br />"
"android.service.dreams.DreamService.setInteractive (boolean interactive) "," Marks this dream as interactive to receive input events. <br /><br />"
"android.service.dreams.DreamService.Window () "," Retrieves the current Window for the dream. <br /><br />"
"android.service.dreams.DreamService.ActionMode.Callback () "," Called when an action mode is being started for this window. <br /><br />"
"android.service.dreams.DreamService.onSearchRequested () "," Called when the user signals the desire to start a search. <br /><br />"
"android.service.dreams.DreamService.FLAG_FULLSCREEN (boolean fullscreen) "," Controls FLAG_FULLSCREEN on the dream's window. <br /><br />"
"android.service.dreams.DreamService.onCreate () (int id) "," Finds a view that was identified by the id attribute from the XML that was processed in onCreate(). <br /><br />"
"android.service.dreams.DreamService.View () "," Sets a view to be the content view for this Dream. <br /><br />"
"android.service.dreams.DreamService.onWakeUp () "," Called when the dream is being asked to stop itself and wake. <br /><br />"
"android.service.dreams.DreamService.WindowManager.LayoutParams () "," This is called whenever the current window attributes change. <br /><br />"
"android.service.dreams.DreamService.finish () "," Stops the dream and detaches from the window. <br /><br />"
"android.service.dreams.DreamService.ViewGroup.LayoutParams () "," Sets a view to be the content view for this Dream. <br /><br />"
"android.service.dreams.DreamService.onDetachedFromWindow () "," Called when the window has been attached to the window manager. <br /><br />"
"android.service.dreams.DreamService.onDreamingStarted () "," Called when the dream's window has been created and is visible and animation may now begin. <br /><br />"
"android.service.dreams.DreamService.onDreamingStopped () "," Called when this Dream is stopped, either by external request or by calling finish(), before the window has been removed. <br /><br />"
"android.service.dreams.DreamService.setContentView (int layoutResID) "," Inflates a layout resource and set it to be the content view for this Dream. <br /><br />"
"android.service.dreams.DreamService.KeyEvent () "," Called to process a key shortcut event. <br /><br />"
"android.service.dreams.DreamService.onCreatePanelView (int featureId) "," Instantiate the view to display in the panel for 'featureId'. <br /><br />"
"android.service.dreams.DreamService.isInteractive () "," Returns whether or not this dream is interactive. <br /><br />"
"android.service.dreams.DreamService.AccessibilityEvent () "," Called to process population of AccessibilityEvents. <br /><br />"
"android.service.dreams.DreamService.Menu () "," Prepare a panel to be displayed. <br /><br />"
"android.service.dreams.DreamService.setScreenBright (boolean screenBright) "," Marks this dream as keeping the screen bright while dreaming. <br /><br />"
"android.service.dreams.DreamService.Window.addContentView () "," This hook is called whenever the content view of the screen changes (due to a call to Window.setContentView or Window.addContentView). <br /><br />"
"android.service.dreams.DreamService.Intent () "," Return the communication channel to the service. <br /><br />"
"android.service.media.MediaBrowserService.BrowserRoot.getExtras () "," Gets any extras about the brwoser service. <br /><br />"
"android.service.media.MediaBrowserService.BrowserRoot.getRootId () "," Gets the root id for browsing. <br /><br />"
"android.service.media.MediaBrowserService.String () "," Notifies all connected media browsers that the children of the specified parent id have changed in some way. <br /><br />"
"android.service.media.MediaBrowserService.getSessionToken () "," Gets the session token, or null if it has not yet been created or if it has been destroyed. <br /><br />"
"android.service.media.MediaBrowserService.onCreate () "," Called by the system when the service is first created. <br /><br />"
"android.service.media.MediaBrowserService.String[] () "," Print the Service's state into the given stream. <br /><br />"
"android.service.media.MediaBrowserService.Bundle () "," Called to get the root information for browsing by a particular client. <br /><br />"
"android.service.media.MediaBrowserService.MediaSession.Token () "," Call to set the media session. <br /><br />"
"android.service.media.MediaBrowserService.MediaBrowser.MediaItem () "," Called to get information about the children of a media item. <br /><br />"
"android.service.media.MediaBrowserService.Intent () "," Return the communication channel to the service. <br /><br />"
"android.service.media.MediaBrowserService.Result&lt;T&gt;.sendResult (T result) "," Send the result back to the caller. <br /><br />"
"android.service.media.MediaBrowserService.Result&lt;T&gt;.sendResult (T) () "," Detach this message from the current thread and allow the sendResult(T) call to happen later. <br /><br />"
"android.service.notification.NotificationListenerService.cancelAllNotifications () "," Inform the notification manager about dismissal of all notifications. <br /><br />"
"android.service.notification.NotificationListenerService.String () "," Inform the notification manager about dismissal of a single notification. <br /><br />"
"android.service.notification.NotificationListenerService.StatusBarNotification () "," Implement this method to learn when notifications are removed. <br /><br />"
"android.service.notification.NotificationListenerService.LOLLIPOP () "," This method was deprecated in API level 21. Use cancelNotification(String) instead. Beginning with LOLLIPOP this method will no longer cancel the notification. It will continue to cancel the notification for applications whose targetSdkVersion is earlier than LOLLIPOP. <br /><br />"
"android.service.notification.NotificationListenerService.getCurrentListenerHints () "," Gets the set of hints representing current state. <br /><br />"
"android.service.notification.NotificationListenerService.listener hints (int hints) "," Sets the desired listener hints. <br /><br />"
"android.service.notification.NotificationListenerService.getCurrentRanking () "," Returns current ranking information. <br /><br />"
"android.service.notification.NotificationListenerService.NotificationListenerService.RankingMap () "," Implement this method to learn when notifications are removed. <br /><br />"
"android.service.notification.NotificationListenerService.getCurrentInterruptionFilter () "," Gets the current notification interruption filter active on the host. <br /><br />"
"android.service.notification.NotificationListenerService.onListenerConnected () "," Implement this method to learn about when the listener is enabled and connected to the notification manager. <br /><br />"
"android.service.notification.NotificationListenerService.Listener hints (int hints) "," Implement this method to be notified when the Listener hints change. <br /><br />"
"android.service.notification.NotificationListenerService.getActiveNotifications () "," Request the list of outstanding notifications (that is, those that are visible to the current user). <br /><br />"
"android.service.notification.NotificationListenerService.String[] () "," Request one or more notifications by key. <br /><br />"
"android.service.notification.NotificationListenerService.Intent () "," Return the communication channel to the service. <br /><br />"
"android.service.notification.NotificationListenerService.interruption filter (int interruptionFilter) "," Sets the desired interruption filter. <br /><br />"
"android.service.notification.NotificationListenerService.Ranking.matchesInterruptionFilter () "," Returns whether the notification matches the user's interruption filter. <br /><br />"
"android.service.notification.NotificationListenerService.Ranking.getRank () "," Returns the rank of the notification. <br /><br />"
"android.service.notification.NotificationListenerService.Ranking.getKey () "," Returns the key of the notification this Ranking applies to. <br /><br />"
"android.service.notification.NotificationListenerService.Ranking.isAmbient () "," Returns whether the notification is an ambient notification, that is a notification that doesn't require the user's immediate attention. <br /><br />"
"android.service.notification.NotificationListenerService.RankingMap.NotificationListenerService.Ranking () "," Populates outRanking with ranking information for the notification with the given key. <br /><br />"
"android.service.notification.NotificationListenerService.RankingMap.getOrderedKeys () "," Request the list of notification keys in their current ranking order. <br /><br />"
"android.service.notification.NotificationListenerService.RankingMap.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.service.notification.NotificationListenerService.RankingMap.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.service.notification.StatusBarNotification.getPackageName () "," The package of the app that posted the notification. <br /><br />"
"android.service.notification.StatusBarNotification.UserHandle () "," The UserHandle for whom this notification is intended. <br /><br />"
"android.service.notification.StatusBarNotification.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.service.notification.StatusBarNotification.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.service.notification.StatusBarNotification.FLAG_NO_CLEAR () "," Convenience method to check the notification's flags for either FLAG_ONGOING_EVENT or FLAG_NO_CLEAR. <br /><br />"
"android.service.notification.StatusBarNotification.getKey () "," A unique instance key for this notification record. <br /><br />"
"android.service.notification.StatusBarNotification.when () "," The time (in currentTimeMillis() time) the notification was posted, which may be different than when. <br /><br />"
"android.service.notification.StatusBarNotification.notify (int, Notification) () "," The tag supplied to notify(int, Notification), or null if no tag was specified. <br /><br />"
"android.service.notification.StatusBarNotification.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.service.notification.StatusBarNotification.getUser () () "," This method was deprecated in API level 21. Use getUser() instead. <br /><br />"
"android.service.notification.StatusBarNotification.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.service.notification.StatusBarNotification.FLAG_ONGOING_EVENT () "," Convenience method to check the notification's flags for FLAG_ONGOING_EVENT. <br /><br />"
"android.service.notification.StatusBarNotification.getGroupKey () "," A key that indicates the group with which this message ranks. <br /><br />"
"android.service.restrictions.RestrictionsReceiver.PersistableBundle () "," An asynchronous permission request made by an application for an operation that requires authorization by a local or remote administrator other than the user. <br /><br />"
"android.service.restrictions.RestrictionsReceiver.Intent () "," Intercept standard Restrictions Provider broadcasts. <br /><br />"
"android.service.textservice.SpellCheckerService.createSession () "," Factory method to create a spell checker session impl <br /><br />"
"android.service.textservice.SpellCheckerService.Intent () "," Implement to return the implementation of the internal spell checker service interface. <br /><br />"
"android.service.textservice.SpellCheckerService.Session.TextInfo[] () "," A batch process of onGetSuggestions. <br /><br />"
"android.service.textservice.SpellCheckerService.Session.onClose () "," Request to close this session. <br /><br />"
"android.service.textservice.SpellCheckerService.Session.getLocale () "," no description <br /><br />"
"android.service.textservice.SpellCheckerService.Session.TextInfo () "," Get suggestions for specified text in TextInfo. <br /><br />"
"android.service.textservice.SpellCheckerService.Session.getBundle () "," no description <br /><br />"
"android.service.textservice.SpellCheckerService.Session.onCreate () "," This is called after the class is initialized, at which point it knows it can call getLocale() etc... <br /><br />"
"android.service.textservice.SpellCheckerService.Session.onCancel () "," Request to abort all tasks executed in SpellChecker. <br /><br />"
"android.service.voice.AlwaysOnHotwordDetector.Callback.onRecognitionResumed () "," Called when the recognition is resumed after it was temporarily paused. <br /><br />"
"android.service.voice.AlwaysOnHotwordDetector.Callback.AlwaysOnHotwordDetector.EventPayload () "," Called when the keyphrase is spoken. <br /><br />"
"android.service.voice.AlwaysOnHotwordDetector.Callback.onRecognitionPaused () "," Called when the recognition is paused temporarily for some reason. <br /><br />"
"android.service.voice.AlwaysOnHotwordDetector.Callback.onAvailabilityChanged (int status) "," Called when the hotword availability changes. <br /><br />"
"android.service.voice.AlwaysOnHotwordDetector.Callback.onError () "," Called when the detection fails due to an error. <br /><br />"
"android.service.voice.AlwaysOnHotwordDetector.EventPayload.getTriggerAudio () () "," Gets the format of the audio obtained using getTriggerAudio(). <br /><br />"
"android.service.voice.AlwaysOnHotwordDetector.EventPayload.getTriggerAudio () "," Gets the raw audio that triggered the keyphrase. <br /><br />"
"android.service.voice.AlwaysOnHotwordDetector.getSupportedRecognitionModes () "," Gets the recognition modes supported by the associated keyphrase. <br /><br />"
"android.service.voice.AlwaysOnHotwordDetector.createUnEnrollIntent () "," Creates an intent to start the un-enrollment for the associated keyphrase. <br /><br />"
"android.service.voice.AlwaysOnHotwordDetector.startRecognition (int recognitionFlags) "," Starts recognition for the associated keyphrase. <br /><br />"
"android.service.voice.AlwaysOnHotwordDetector.createEnrollIntent () "," Creates an intent to start the enrollment for the associated keyphrase. <br /><br />"
"android.service.voice.AlwaysOnHotwordDetector.createReEnrollIntent () "," Creates an intent to start the re-enrollment for the associated keyphrase. <br /><br />"
"android.service.voice.AlwaysOnHotwordDetector.stopRecognition () "," Stops recognition for the associated keyphrase. <br /><br />"
"android.service.voice.VoiceInteractionService.onCreate () "," Called by the system when the service is first created. <br /><br />"
"android.service.voice.VoiceInteractionService.AlwaysOnHotwordDetector () "," Creates an AlwaysOnHotwordDetector for the given keyphrase and locale. <br /><br />"
"android.service.voice.VoiceInteractionService.ComponentName () "," Check whether the given service component is the currently active VoiceInteractionService. <br /><br />"
"android.service.voice.VoiceInteractionService.onReady () "," Called during service initialization to tell you when the system is ready to receive interaction from it. <br /><br />"
"android.service.voice.VoiceInteractionService.Intent () "," Return the communication channel to the service. <br /><br />"
"android.service.voice.VoiceInteractionService.VoiceInteractionSession () "," Initiate the execution of a new VoiceInteractionSession. <br /><br />"
"android.service.voice.VoiceInteractionService.onShutdown () "," Called during service de-initialization to tell you when the system is shutting the service down. <br /><br />"
"android.service.voice.VoiceInteractionSession.finish () "," Finish the session. <br /><br />"
"android.service.voice.VoiceInteractionSession.onDestroy () "," Last callback to the session as it is being finished. <br /><br />"
"android.service.voice.VoiceInteractionSession.Bundle () "," Initiatize a new session. <br /><br />"
"android.service.voice.VoiceInteractionSession.View () "," no description <br /><br />"
"android.service.voice.VoiceInteractionSession.onCloseSystemDialogs () "," Sessions automatically watch for requests that all system UI be closed (such as when the user presses HOME), which will appear here. <br /><br />"
"android.service.voice.VoiceInteractionSessionService.onCreate () "," Called by the system when the service is first created. <br /><br />"
"android.service.voice.VoiceInteractionSessionService.Bundle () "," no description <br /><br />"
"android.service.voice.VoiceInteractionSessionService.Intent () "," Return the communication channel to the service. <br /><br />"
"android.service.wallpaper.WallpaperService.Engine.SurfaceHolder.Callback.surfaceDestroyed () () "," Convenience for SurfaceHolder.Callback.surfaceDestroyed(). <br /><br />"
"android.service.wallpaper.WallpaperService.Engine.onDesiredSizeChanged (int desiredWidth, int desiredHeight) "," Called when an application has changed the desired virtual size of the wallpaper. <br /><br />"
"android.service.wallpaper.WallpaperService.Engine.WallpaperManager.setWallpaperOffsets () (float xOffset, float yOffset, float xOffsetStep, float yOffsetStep, int xPixelOffset, int yPixelOffset) "," Called to inform you of the wallpaper's offsets changing within its contain, corresponding to the container's call to WallpaperManager.setWallpaperOffsets(). <br /><br />"
"android.service.wallpaper.WallpaperService.Engine.MotionEvent () "," Called as the user performs touch-screen interaction with the window that is currently showing this wallpaper. <br /><br />"
"android.service.wallpaper.WallpaperService.Engine.WallpaperManager.getDesiredMinimumHeight () () "," Convenience for WallpaperManager.getDesiredMinimumHeight(), returning the height that the system would like this wallpaper to run in. <br /><br />"
"android.service.wallpaper.WallpaperService.Engine.SurfaceHolder.Callback.surfaceCreated () () "," Convenience for SurfaceHolder.Callback.surfaceCreated(). <br /><br />"
"android.service.wallpaper.WallpaperService.Engine.WallpaperManager.getDesiredMinimumWidth () () "," Convenience for WallpaperManager.getDesiredMinimumWidth(), returning the width that the system would like this wallpaper to run in. <br /><br />"
"android.service.wallpaper.WallpaperService.Engine.setOffsetNotificationsEnabled (boolean enabled) "," Control whether this wallpaper will receive notifications when the wallpaper has been scrolled. <br /><br />"
"android.service.wallpaper.WallpaperService.Engine.getSurfaceHolder () "," Provides access to the surface in which this wallpaper is drawn. <br /><br />"
"android.service.wallpaper.WallpaperService.Engine.isPreview () "," Returns true if this engine is running in preview mode -- that is, it is being shown to the user before they select it as the actual wallpaper. <br /><br />"
"android.service.wallpaper.WallpaperService.Engine.sendWallpaperCommand (IBinder, String, int, int, int, Bundle) () "," Process a command that was sent to the wallpaper with sendWallpaperCommand(IBinder, String, int, int, int, Bundle). <br /><br />"
"android.service.wallpaper.WallpaperService.Engine.SurfaceHolder.Callback.surfaceChanged () () "," Convenience for SurfaceHolder.Callback.surfaceChanged(). <br /><br />"
"android.service.wallpaper.WallpaperService.Engine.onVisibilityChanged (boolean) () "," Return whether the wallpaper is currently visible to the user, this is the last value supplied to onVisibilityChanged(boolean). <br /><br />"
"android.service.wallpaper.WallpaperService.Engine.onDestroy () "," Called right before the engine is going away. <br /><br />"
"android.service.wallpaper.WallpaperService.Engine.setTouchEventsEnabled (boolean enabled) "," Control whether this wallpaper will receive raw touch events from the window manager as the user interacts with the window that is currently displaying the wallpaper. <br /><br />"
"android.service.wallpaper.WallpaperService.Engine.onVisibilityChanged (boolean visible) "," Called to inform you of the wallpaper becoming visible or hidden. <br /><br />"
"android.service.wallpaper.WallpaperService.Engine.WindowInsets () "," Called with the current insets that are in effect for the wallpaper. <br /><br />"
"android.service.wallpaper.WallpaperService.Engine.SurfaceHolder.Callback.surfaceRedrawNeeded () () "," Convenience for SurfaceHolder.Callback.surfaceRedrawNeeded(). <br /><br />"
"android.service.wallpaper.WallpaperService.Engine.SurfaceHolder () "," Called once to initialize the engine. <br /><br />"
"android.service.wallpaper.WallpaperService.onCreate () "," Called by the system when the service is first created. <br /><br />"
"android.service.wallpaper.WallpaperService.onCreateEngine () "," Must be implemented to return a new instance of the wallpaper's engine. <br /><br />"
"android.service.wallpaper.WallpaperService.onDestroy () "," Called by the system to notify a Service that it is no longer used and is being removed. <br /><br />"
"android.service.wallpaper.WallpaperService.Intent () "," Implement to return the implementation of the internal accessibility service interface. <br /><br />"
"android.speech.RecognitionListener.onBufferReceived (byte[] buffer) "," More sound has been received. <br /><br />"
"android.speech.RecognitionListener.Bundle () "," Called when recognition results are ready. <br /><br />"
"android.speech.RecognitionListener.onRmsChanged (float rmsdB) "," The sound level in the audio stream has changed. <br /><br />"
"android.speech.RecognitionListener.onError (int error) "," A network or recognition error occurred. <br /><br />"
"android.speech.RecognitionListener.onEndOfSpeech () "," Called after the user stops speaking. <br /><br />"
"android.speech.RecognitionListener.onBeginningOfSpeech () "," The user has started to speak. <br /><br />"
"android.speech.RecognitionService.Callback.error (int error) "," The service should call this method when a network or recognition error occurred. <br /><br />"
"android.speech.RecognitionService.Callback.endOfSpeech () "," The service should call this method after the user stops speaking. <br /><br />"
"android.speech.RecognitionService.Callback.bufferReceived (byte[] buffer) "," The service should call this method when sound has been received. <br /><br />"
"android.speech.RecognitionService.Callback.beginningOfSpeech () "," The service should call this method when the user has started to speak. <br /><br />"
"android.speech.RecognitionService.Callback.rmsChanged (float rmsdB) "," The service should call this method when the sound level in the audio stream has changed. <br /><br />"
"android.speech.RecognitionService.Callback.Bundle () "," The service should call this method when recognition results are ready. <br /><br />"
"android.speech.RecognitionService.onDestroy () "," Called by the system to notify a Service that it is no longer used and is being removed. <br /><br />"
"android.speech.RecognitionService.Intent () "," Return the communication channel to the service. <br /><br />"
"android.speech.RecognizerIntent.sendOrderedBroadcast (Intent, String, BroadcastReceiver, android.os.Handler, int, String, Bundle) () "," Returns the broadcast intent to fire with sendOrderedBroadcast(Intent, String, BroadcastReceiver, android.os.Handler, int, String, Bundle) to receive details from the package that implements voice search. <br /><br />"
"android.speech.SpeechRecognizer.destroy () "," Destroys the SpeechRecognizer object. <br /><br />"
"android.speech.SpeechRecognizer.Context () "," Checks whether a speech recognition service is available on the system. <br /><br />"
"android.speech.SpeechRecognizer.ComponentName () "," Factory method to create a new SpeechRecognizer. <br /><br />"
"android.speech.SpeechRecognizer.cancel () "," Cancels the speech recognition. <br /><br />"
"android.speech.SpeechRecognizer.RecognitionListener () "," Sets the listener that will receive all the callbacks. <br /><br />"
"android.speech.SpeechRecognizer.stopListening () "," Stops listening for speech. <br /><br />"
"android.speech.SpeechRecognizer.Intent () "," Starts listening for speech. <br /><br />"
"android.speech.tts.SynthesisCallback.start (int, int, int) () "," Check if start(int, int, int) was called or not. <br /><br />"
"android.speech.tts.SynthesisCallback.start (int sampleRateInHz, int audioFormat, int channelCount) "," The service should call this when it starts to synthesize audio for this request. <br /><br />"
"android.speech.tts.SynthesisCallback.audioAvailable (byte[] buffer, int offset, int length) "," The service should call this method when synthesized audio is ready for consumption. <br /><br />"
"android.speech.tts.SynthesisCallback.error () "," The service should call this method if the speech synthesis fails. <br /><br />"
"android.speech.tts.SynthesisCallback.error (int errorCode) "," The service should call this method if the speech synthesis fails. <br /><br />"
"android.speech.tts.SynthesisCallback.audioAvailable (byte[], int, int) () "," The service should call this method when all the synthesized audio for a request has been passed to audioAvailable(byte[], int, int). <br /><br />"
"android.speech.tts.SynthesisCallback.done () () "," Check if done() was called or not. <br /><br />"
"android.speech.tts.SynthesisCallback.getMaxBufferSize () "," no description <br /><br />"
"android.speech.tts.SynthesisRequest.getVoiceName () "," Gets the name of the voice to use. <br /><br />"
"android.speech.tts.SynthesisRequest.getCharSequenceText () "," Gets the text which should be synthesized. <br /><br />"
"android.speech.tts.SynthesisRequest.getSpeechRate () "," Gets the speech rate to use. <br /><br />"
"android.speech.tts.SynthesisRequest.getCountry () "," Gets the ISO 3-letter country code for the language to use. <br /><br />"
"android.speech.tts.SynthesisRequest.getCharSequenceText () () "," This method was deprecated in API level 21. As of API level 21, replaced by getCharSequenceText(). <br /><br />"
"android.speech.tts.SynthesisRequest.getPitch () "," Gets the pitch to use. <br /><br />"
"android.speech.tts.SynthesisRequest.getVariant () "," Gets the language variant to use. <br /><br />"
"android.speech.tts.SynthesisRequest.getCallerUid () "," Gets the request caller Uid. <br /><br />"
"android.speech.tts.SynthesisRequest.getLanguage () "," Gets the ISO 3-letter language code for the language to use. <br /><br />"
"android.speech.tts.SynthesisRequest.getParams () "," Gets the additional params, if any. <br /><br />"
"android.speech.tts.TextToSpeech.EngineInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.speech.tts.TextToSpeech.getEngines () "," Gets a list of all installed TTS engines. <br /><br />"
"android.speech.tts.TextToSpeech.playEarcon (String, int, Bundle, String) () "," This method was deprecated in API level 21. As of API level 21, replaced by playEarcon(String, int, Bundle, String). <br /><br />"
"android.speech.tts.TextToSpeech.shutdown () "," Releases the resources used by the TextToSpeech engine. <br /><br />"
"android.speech.tts.TextToSpeech.getFeatures () () "," This method was deprecated in API level 21. As of API level 21, please use voices. In order to query features of the voice, call getVoices() to retrieve the list of available voices and getFeatures() to retrieve the set of features. <br /><br />"
"android.speech.tts.TextToSpeech.speak (CharSequence, int, Bundle, String) () "," This method was deprecated in API level 21. As of API level 21, replaced by speak(CharSequence, int, Bundle, String). <br /><br />"
"android.speech.tts.TextToSpeech.synthesizeToFile (CharSequence, Bundle, File, String) () "," This method was deprecated in API level 21. As of API level 21, replaced by synthesizeToFile(CharSequence, Bundle, File, String). <br /><br />"
"android.speech.tts.TextToSpeech.stop () "," Interrupts the current utterance (whether played or rendered to file) and discards other utterances in the queue. <br /><br />"
"android.speech.tts.TextToSpeech.AudioAttributes () "," Sets the audio attributes to be used when speaking text or playing back a file. <br /><br />"
"android.speech.tts.TextToSpeech.String () "," Synthesizes the given text to a file using the specified parameters. <br /><br />"
"android.speech.tts.TextToSpeech.setPitch (float pitch) "," Sets the speech pitch for the TextToSpeech engine. <br /><br />"
"android.speech.tts.TextToSpeech.getDefaultVoice () () "," This method was deprecated in API level 21. As of API level 21, use getDefaultVoice().getLocale() (getDefaultVoice()) <br /><br />"
"android.speech.tts.TextToSpeech.getVoice () "," Returns a Voice instance describing the voice currently being used for synthesis requests sent to the TextToSpeech engine. <br /><br />"
"android.speech.tts.TextToSpeech.getMaxSpeechInputLength () "," Limit of length of input string passed to speak and synthesizeToFile. <br /><br />"
"android.speech.tts.TextToSpeech.Locale () "," Sets the text-to-speech language. <br /><br />"
"android.speech.tts.TextToSpeech.getVoice () () "," This method was deprecated in API level 21. As of API level 21, please use getVoice().getLocale() (getVoice()). <br /><br />"
"android.speech.tts.TextToSpeech.getDefaultVoice () "," Returns a Voice instance that's the default voice for the default Text-to-speech language. <br /><br />"
"android.speech.tts.TextToSpeech.isSpeaking () "," Checks whether the TTS engine is busy speaking. <br /><br />"
"android.speech.tts.TextToSpeech.TextToSpeech (Context, OnInitListener, String) () "," This method was deprecated in API level 14. This doesn't inform callers when the TTS engine has been initialized. TextToSpeech(Context, OnInitListener, String) can be used with the appropriate engine name. Also, there is no guarantee that the engine specified will be loaded. If it isn't installed or disabled, the user / system wide defaults will apply. <br /><br />"
"android.speech.tts.TextToSpeech.UtteranceProgressListener () "," Sets the listener that will be notified of various events related to the synthesis of a given utterance. <br /><br />"
"android.speech.tts.TextToSpeech.playSilentUtterance (long, int, String) () "," This method was deprecated in API level 21. As of API level 21, replaced by playSilentUtterance(long, int, String). <br /><br />"
"android.speech.tts.TextToSpeech.Voice () "," Sets the text-to-speech voice. <br /><br />"
"android.speech.tts.TextToSpeech.getVoices () "," Query the engine about the set of available voices. <br /><br />"
"android.speech.tts.TextToSpeech.addEarcon (String, File) () "," This method was deprecated in API level 21. As of API level 21, replaced by addEarcon(String, File). <br /><br />"
"android.speech.tts.TextToSpeech.setSpeechRate (float speechRate) "," Sets the speech rate. <br /><br />"
"android.speech.tts.TextToSpeech.File () "," Adds a mapping between a CharSequence (may be spanned with TtsSpans and a sound file. <br /><br />"
"android.speech.tts.TextToSpeech.getDefaultEngine () "," Gets the package name of the default speech synthesis engine. <br /><br />"
"android.speech.tts.TextToSpeech.setOnUtteranceProgressListener (UtteranceProgressListener) () "," This method was deprecated in API level 15. Use setOnUtteranceProgressListener(UtteranceProgressListener) instead. <br /><br />"
"android.speech.tts.TextToSpeech.getAvailableLanguages () "," Query the engine about the set of available languages. <br /><br />"
"android.speech.tts.TextToSpeech.areDefaultsEnforced () "," Checks whether the user's settings should override settings requested by the calling application. <br /><br />"
"android.speech.tts.TextToSpeech.OnInitListener.onInit (int status) "," Called to signal the completion of the TextToSpeech engine initialization. <br /><br />"
"android.speech.tts.TextToSpeech.OnUtteranceCompletedListener.String () "," Called when an utterance has been synthesized. <br /><br />"
"android.speech.tts.TextToSpeechService.String () "," Notifies the engine that it should load a speech synthesis voice. <br /><br />"
"android.speech.tts.TextToSpeechService.onCreate () "," Called by the system when the service is first created. <br /><br />"
"android.speech.tts.TextToSpeechService.onDestroy () "," Called by the system to notify a Service that it is no longer used and is being removed. <br /><br />"
"android.speech.tts.TextToSpeechService.onGetVoices () "," Queries the service for a set of supported voices. <br /><br />"
"android.speech.tts.TextToSpeechService.Intent () "," Return the communication channel to the service. <br /><br />"
"android.speech.tts.UtteranceProgressListener.String () "," Called when an utterance 'starts' as perceived by the caller. <br /><br />"
"android.speech.tts.UtteranceProgressListener.onError (String, int) () "," This method was deprecated in API level 21. Use onError(String, int) instead <br /><br />"
"android.speech.tts.Voice.getName () "," no description <br /><br />"
"android.speech.tts.Voice.isNetworkConnectionRequired () "," no description <br /><br />"
"android.speech.tts.Voice.getLocale () "," no description <br /><br />"
"android.speech.tts.Voice.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.speech.tts.Voice.getFeatures () "," Returns the set of features it supports for a given voice. <br /><br />"
"android.speech.tts.Voice.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.speech.tts.Voice.getQuality () "," no description <br /><br />"
"android.speech.tts.Voice.getLatency () "," no description <br /><br />"
"android.speech.tts.Voice.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.speech.tts.Voice.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.speech.tts.Voice.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.support.multidex.MultiDex.Context () "," Patches the application context class loader by appending extra dex files loaded from the application apk. <br /><br />"
"android.support.v13.app.FragmentCompat.Fragment.setMenuVisibility (boolean) () "," Call Fragment.setMenuVisibility(boolean) if running on an appropriate version of the platform. <br /><br />"
"android.support.v13.app.FragmentCompat.setUserVisibleHint (boolean) () "," Call setUserVisibleHint(boolean) if running on an appropriate version of the platform. <br /><br />"
"android.support.v13.app.FragmentPagerAdapter.getItem (int position) "," Return the Fragment associated with a specified position. <br /><br />"
"android.support.v13.app.FragmentPagerAdapter.saveState () "," Save any instance state associated with this adapter and its pages that should be restored if the current UI state needs to be reconstructed. <br /><br />"
"android.support.v13.app.FragmentPagerAdapter.saveState () () "," Restore any instance state associated with this adapter and its pages that was previously saved by saveState(). <br /><br />"
"android.support.v13.app.FragmentPagerAdapter.instantiateItem (ViewGroup, int) () "," Determines whether a page View is associated with a specific key object as returned by instantiateItem(ViewGroup, int). <br /><br />"
"android.support.v13.app.FragmentPagerAdapter.ViewGroup () "," Called when a change in the shown pages is going to start being made. <br /><br />"
"android.support.v13.app.FragmentPagerAdapter.Object () "," Called to inform the adapter of which item is currently considered to be the 'primary', that is the one show to the user as the current page. <br /><br />"
"android.support.v13.app.FragmentPagerAdapter.getItemId (int position) "," Return a unique identifier for the item at the given position. <br /><br />"
"android.support.v13.app.FragmentStatePagerAdapter.getItem (int position) "," Return the Fragment associated with a specified position. <br /><br />"
"android.support.v13.app.FragmentStatePagerAdapter.saveState () "," Save any instance state associated with this adapter and its pages that should be restored if the current UI state needs to be reconstructed. <br /><br />"
"android.support.v13.app.FragmentStatePagerAdapter.saveState () () "," Restore any instance state associated with this adapter and its pages that was previously saved by saveState(). <br /><br />"
"android.support.v13.app.FragmentStatePagerAdapter.instantiateItem (ViewGroup, int) () "," Determines whether a page View is associated with a specific key object as returned by instantiateItem(ViewGroup, int). <br /><br />"
"android.support.v13.app.FragmentStatePagerAdapter.ViewGroup () "," Called when a change in the shown pages is going to start being made. <br /><br />"
"android.support.v13.app.FragmentStatePagerAdapter.Object () "," Called to inform the adapter of which item is currently considered to be the 'primary', that is the one show to the user as the current page. <br /><br />"
"android.support.v13.app.FragmentTabHost.String () "," no description <br /><br />"
"android.support.v13.app.FragmentTabHost.TabHost.OnTabChangeListener () "," Register a callback to be invoked when the selected state of any of the items in this list changes <br /><br />"
"android.support.v13.app.FragmentTabHost.setup (Context, FragmentManager, int) () "," This method is deprecated. Don't call the original TabHost setup, you must instead call setup(Context, FragmentManager) or setup(Context, FragmentManager, int). <br /><br />"
"android.support.v13.app.FragmentTabHost.Bundle () "," no description <br /><br />"
"android.support.v13.app.FragmentTabHost.FragmentManager () "," no description <br /><br />"
"android.support.v17.leanback.app.BackgroundManager.isAttached () "," Returns true if the background manager is currently attached; false otherwise. <br /><br />"
"android.support.v17.leanback.app.BackgroundManager.getDefaultDimLayer () "," Returns the default drawable used as a dim layer. <br /><br />"
"android.support.v17.leanback.app.BackgroundManager.Drawable () "," Set the given drawable into the background. <br /><br />"
"android.support.v17.leanback.app.BackgroundManager.getColor () "," Returns the current background color. <br /><br />"
"android.support.v17.leanback.app.BackgroundManager.setColor (int color) "," Set the background to the given color. <br /><br />"
"android.support.v17.leanback.app.BackgroundManager.Window () "," Make the background visible on the given Window. <br /><br />"
"android.support.v17.leanback.app.BackgroundManager.release () "," Release references to Drawables. <br /><br />"
"android.support.v17.leanback.app.BackgroundManager.Activity () "," Get the BackgroundManager associated with the Activity. <br /><br />"
"android.support.v17.leanback.app.BackgroundManager.getDimLayer () "," Returns the drawable used as a dim layer. <br /><br />"
"android.support.v17.leanback.app.BackgroundManager.Bitmap () "," Set the given bitmap into the background. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.BrowseTransitionListener.onHeadersTransitionStart (boolean withHeaders) "," Callback when headers transition starts. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.BrowseTransitionListener.onHeadersTransitionStop (boolean withHeaders) "," Callback when headers transition stops. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.startEntranceTransition () "," When fragment finishes loading data, it should call startEntranceTransition() to execute the entrance transition. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.isShowingHeaders () "," Returns true if headers are shown. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.getHeadersState () "," Returns the state of the headers column in the browse fragment. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.onPause () "," Called when the Fragment is no longer resumed. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.prepareEntranceTransition () "," Enables entrance transition. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.getOnItemViewClickedListener () () "," This method is deprecated. Use getOnItemViewClickedListener() <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.getOnItemViewSelectedListener () "," Returns an item selection listener. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.getOnItemViewClickedListener () "," Returns the item Clicked listener. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.onCreateView (LayoutInflater, ViewGroup, Bundle) () "," Called immediately after onCreateView(LayoutInflater, ViewGroup, Bundle) has returned, but before any saved state has been restored in to the view. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.setSelectedPosition (int position, boolean smooth) "," Sets the selected row position. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.setOnItemViewSelectedListener (OnItemViewSelectedListener) () "," This method is deprecated. Use setOnItemViewSelectedListener(OnItemViewSelectedListener) <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.Drawable () "," Sets the drawable displayed in the browse fragment title. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.View.OnClickListener () "," Sets a click listener for the search affordance. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.onDestroy () "," Called when the fragment is no longer in use. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.setSelectedPosition (int position) "," Sets the selected row position with smooth animation. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.startHeadersTransition (boolean withHeaders) "," Start a headers transition. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.setHeadersState (int headersState) "," Sets the state for the headers column in the browse fragment. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.getTitle () "," Returns the title for the browse fragment. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.enableRowScaling (boolean enable) "," Enables scaling of rows when headers are present. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.OnItemViewSelectedListener () "," Sets an item selection listener. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.onResume () "," Called when the fragment is visible to the user and actively running. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.String () "," Sets a title for the browse fragment. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.OnItemViewClickedListener () "," Sets an item clicked listener on the fragment. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.BrowseFragment.BrowseTransitionListener () "," Set a listener for browse fragment transitions. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.getBrandColor () "," Returns the brand color for the browse fragment. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.PresenterSelector () "," Sets the PresenterSelector used to render the row headers. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.getBadgeDrawable () "," Returns the badge drawable used in the fragment title. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.setOnItemViewClickedListener (OnItemViewClickedListener) () "," This method is deprecated. Use setOnItemViewClickedListener(OnItemViewClickedListener) <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.setSearchAffordanceColor (int color) "," Sets the color used to draw the search affordance. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.onStart () "," Called when the Fragment is visible to the user. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.getSearchAffordanceColor () "," Returns the color used to draw the search affordance. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.setBrandColor (int color) "," Sets the brand color for the browse fragment. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.getAdapter () "," Returns the adapter containing the rows for the fragment. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.ObjectAdapter () "," Sets the adapter containing the rows for the fragment. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.setHeadersTransitionOnBackEnabled (boolean headersBackStackEnabled) "," Enable/disable headers transition on back key support. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.isInHeadersTransition () "," Returns true if the headers transition is currently running. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.Bundle () "," Called to ask the fragment to save its current dynamic state, so it can later be reconstructed in a new instance of its process is restarted. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.SearchOrbView.Colors () "," Sets the SearchOrbView.Colors used to draw the search affordance. <br /><br />"
"android.support.v17.leanback.app.BrowseFragment.isHeadersTransitionOnBackEnabled () "," Returns true if headers transition on back key support is enabled. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.BrowseTransitionListener.onHeadersTransitionStart (boolean withHeaders) "," Callback when headers transition starts. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.BrowseTransitionListener.onHeadersTransitionStop (boolean withHeaders) "," Callback when headers transition stops. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.startEntranceTransition () "," When fragment finishes loading data, it should call startEntranceTransition() to execute the entrance transition. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.isShowingHeaders () "," Returns true if headers are shown. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.getHeadersState () "," Returns the state of the headers column in the browse fragment. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.onPause () "," Called when the Fragment is no longer resumed. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.BrowseSupportFragment.BrowseTransitionListener () "," Set a listener for browse fragment transitions. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.prepareEntranceTransition () "," Enables entrance transition. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.getOnItemViewClickedListener () () "," This method is deprecated. Use getOnItemViewClickedListener() <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.getOnItemViewSelectedListener () "," Returns an item selection listener. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.getOnItemViewClickedListener () "," Returns the item Clicked listener. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.onCreateView (LayoutInflater, ViewGroup, Bundle) () "," Called immediately after onCreateView(LayoutInflater, ViewGroup, Bundle) has returned, but before any saved state has been restored in to the view. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.setSelectedPosition (int position, boolean smooth) "," Sets the selected row position. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.setOnItemViewSelectedListener (OnItemViewSelectedListener) () "," This method is deprecated. Use setOnItemViewSelectedListener(OnItemViewSelectedListener) <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.Drawable () "," Sets the drawable displayed in the browse fragment title. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.View.OnClickListener () "," Sets a click listener for the search affordance. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.onDestroy () "," Called when the fragment is no longer in use. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.setSelectedPosition (int position) "," Sets the selected row position with smooth animation. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.startHeadersTransition (boolean withHeaders) "," Start a headers transition. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.setHeadersState (int headersState) "," Sets the state for the headers column in the browse fragment. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.getTitle () "," Returns the title for the browse fragment. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.enableRowScaling (boolean enable) "," Enables scaling of rows when headers are present. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.OnItemViewSelectedListener () "," Sets an item selection listener. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.onResume () "," Called when the fragment is visible to the user and actively running. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.String () "," Sets a title for the browse fragment. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.OnItemViewClickedListener () "," Sets an item clicked listener on the fragment. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.getBrandColor () "," Returns the brand color for the browse fragment. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.PresenterSelector () "," Sets the PresenterSelector used to render the row headers. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.getBadgeDrawable () "," Returns the badge drawable used in the fragment title. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.setOnItemViewClickedListener (OnItemViewClickedListener) () "," This method is deprecated. Use setOnItemViewClickedListener(OnItemViewClickedListener) <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.setSearchAffordanceColor (int color) "," Sets the color used to draw the search affordance. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.onStart () "," Called when the Fragment is visible to the user. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.getSearchAffordanceColor () "," Returns the color used to draw the search affordance. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.setBrandColor (int color) "," Sets the brand color for the browse fragment. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.getAdapter () "," Returns the adapter containing the rows for the fragment. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.ObjectAdapter () "," Sets the adapter containing the rows for the fragment. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.setHeadersTransitionOnBackEnabled (boolean headersBackStackEnabled) "," Enable/disable headers transition on back key support. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.isInHeadersTransition () "," Returns true if the headers transition is currently running. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.Bundle () "," Called to ask the fragment to save its current dynamic state, so it can later be reconstructed in a new instance of its process is restarted. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.SearchOrbView.Colors () "," Sets the SearchOrbView.Colors used to draw the search affordance. <br /><br />"
"android.support.v17.leanback.app.BrowseSupportFragment.isHeadersTransitionOnBackEnabled () "," Returns true if headers transition on back key support is enabled. <br /><br />"
"android.support.v17.leanback.app.DetailsFragment.startEntranceTransition () "," When fragment finishes loading data, it should call startEntranceTransition() to execute the entrance transition. <br /><br />"
"android.support.v17.leanback.app.DetailsFragment.OnItemViewClickedListener () "," Sets an item Clicked listener. <br /><br />"
"android.support.v17.leanback.app.DetailsFragment.prepareEntranceTransition () "," Enables entrance transition. <br /><br />"
"android.support.v17.leanback.app.DetailsFragment.getOnItemViewClickedListener () () "," This method is deprecated. Use getOnItemViewClickedListener() <br /><br />"
"android.support.v17.leanback.app.DetailsFragment.getOnItemViewClickedListener () "," Returns the item Clicked listener. <br /><br />"
"android.support.v17.leanback.app.DetailsFragment.onCreateView (LayoutInflater, ViewGroup, Bundle) () "," Called immediately after onCreateView(LayoutInflater, ViewGroup, Bundle) has returned, but before any saved state has been restored in to the view. <br /><br />"
"android.support.v17.leanback.app.DetailsFragment.setOnItemViewClickedListener (OnItemViewClickedListener) () "," This method is deprecated. Use setOnItemViewClickedListener(OnItemViewClickedListener) <br /><br />"
"android.support.v17.leanback.app.DetailsFragment.onStart () "," Called when the Fragment is visible to the user. <br /><br />"
"android.support.v17.leanback.app.DetailsFragment.setSelectedPosition (int position, boolean smooth) "," Sets the selected row position. <br /><br />"
"android.support.v17.leanback.app.DetailsFragment.setOnItemViewSelectedListener (OnItemViewSelectedListener) () "," This method is deprecated. Use setOnItemViewSelectedListener(OnItemViewSelectedListener) <br /><br />"
"android.support.v17.leanback.app.DetailsFragment.getAdapter () "," Returns the list of rows. <br /><br />"
"android.support.v17.leanback.app.DetailsFragment.ObjectAdapter () "," Sets the list of rows for the fragment. <br /><br />"
"android.support.v17.leanback.app.DetailsFragment.setSelectedPosition (int position) "," Sets the selected row position with smooth animation. <br /><br />"
"android.support.v17.leanback.app.DetailsFragment.Bundle () "," Called to have the fragment instantiate its user interface view. <br /><br />"
"android.support.v17.leanback.app.DetailsFragment.OnItemViewSelectedListener () "," Sets an item selection listener. <br /><br />"
"android.support.v17.leanback.app.DetailsSupportFragment.startEntranceTransition () "," When fragment finishes loading data, it should call startEntranceTransition() to execute the entrance transition. <br /><br />"
"android.support.v17.leanback.app.DetailsSupportFragment.OnItemViewClickedListener () "," Sets an item Clicked listener. <br /><br />"
"android.support.v17.leanback.app.DetailsSupportFragment.prepareEntranceTransition () "," Enables entrance transition. <br /><br />"
"android.support.v17.leanback.app.DetailsSupportFragment.getOnItemViewClickedListener () () "," This method is deprecated. Use getOnItemViewClickedListener() <br /><br />"
"android.support.v17.leanback.app.DetailsSupportFragment.getOnItemViewClickedListener () "," Returns the item Clicked listener. <br /><br />"
"android.support.v17.leanback.app.DetailsSupportFragment.onCreateView (LayoutInflater, ViewGroup, Bundle) () "," Called immediately after onCreateView(LayoutInflater, ViewGroup, Bundle) has returned, but before any saved state has been restored in to the view. <br /><br />"
"android.support.v17.leanback.app.DetailsSupportFragment.setOnItemViewClickedListener (OnItemViewClickedListener) () "," This method is deprecated. Use setOnItemViewClickedListener(OnItemViewClickedListener) <br /><br />"
"android.support.v17.leanback.app.DetailsSupportFragment.onStart () "," Called when the Fragment is visible to the user. <br /><br />"
"android.support.v17.leanback.app.DetailsSupportFragment.setSelectedPosition (int position, boolean smooth) "," Sets the selected row position. <br /><br />"
"android.support.v17.leanback.app.DetailsSupportFragment.setOnItemViewSelectedListener (OnItemViewSelectedListener) () "," This method is deprecated. Use setOnItemViewSelectedListener(OnItemViewSelectedListener) <br /><br />"
"android.support.v17.leanback.app.DetailsSupportFragment.getAdapter () "," Returns the list of rows. <br /><br />"
"android.support.v17.leanback.app.DetailsSupportFragment.ObjectAdapter () "," Sets the list of rows for the fragment. <br /><br />"
"android.support.v17.leanback.app.DetailsSupportFragment.setSelectedPosition (int position) "," Sets the selected row position with smooth animation. <br /><br />"
"android.support.v17.leanback.app.DetailsSupportFragment.Bundle () "," Called to have the fragment instantiate its user interface view. <br /><br />"
"android.support.v17.leanback.app.DetailsSupportFragment.OnItemViewSelectedListener () "," Sets an item selection listener. <br /><br />"
"android.support.v17.leanback.app.ErrorFragment.String () "," Sets a title for the browse fragment. <br /><br />"
"android.support.v17.leanback.app.ErrorFragment.setDefaultBackground (boolean translucent) "," Sets the default background. <br /><br />"
"android.support.v17.leanback.app.ErrorFragment.getImageDrawable () "," Returns the drawable used for the error image. <br /><br />"
"android.support.v17.leanback.app.ErrorFragment.CharSequence () "," Sets the error message. <br /><br />"
"android.support.v17.leanback.app.ErrorFragment.getBadgeDrawable () "," Returns the badge drawable used in the fragment title. <br /><br />"
"android.support.v17.leanback.app.ErrorFragment.onStart () "," Called when the Fragment is visible to the user. <br /><br />"
"android.support.v17.leanback.app.ErrorFragment.getButtonClickListener () "," Returns the button click listener. <br /><br />"
"android.support.v17.leanback.app.ErrorFragment.Drawable () "," Sets the drawable to be used for the error image. <br /><br />"
"android.support.v17.leanback.app.ErrorFragment.View.OnClickListener () "," Set the button click listener. <br /><br />"
"android.support.v17.leanback.app.ErrorFragment.getButtonText () "," Returns the button text. <br /><br />"
"android.support.v17.leanback.app.ErrorFragment.getTitle () "," Returns the title for the browse fragment. <br /><br />"
"android.support.v17.leanback.app.ErrorFragment.Bundle () "," Called to have the fragment instantiate its user interface view. <br /><br />"
"android.support.v17.leanback.app.ErrorFragment.isBackgroundTranslucent () "," Returns true if the background is translucent. <br /><br />"
"android.support.v17.leanback.app.ErrorFragment.getMessage () "," Returns the error message. <br /><br />"
"android.support.v17.leanback.app.ErrorFragment.getBackgroundDrawable () "," Returns the background drawable. <br /><br />"
"android.support.v17.leanback.app.ErrorSupportFragment.String () "," Sets a title for the browse fragment. <br /><br />"
"android.support.v17.leanback.app.ErrorSupportFragment.setDefaultBackground (boolean translucent) "," Sets the default background. <br /><br />"
"android.support.v17.leanback.app.ErrorSupportFragment.getImageDrawable () "," Returns the drawable used for the error image. <br /><br />"
"android.support.v17.leanback.app.ErrorSupportFragment.CharSequence () "," Sets the error message. <br /><br />"
"android.support.v17.leanback.app.ErrorSupportFragment.getBadgeDrawable () "," Returns the badge drawable used in the fragment title. <br /><br />"
"android.support.v17.leanback.app.ErrorSupportFragment.onStart () "," Called when the Fragment is visible to the user. <br /><br />"
"android.support.v17.leanback.app.ErrorSupportFragment.getButtonClickListener () "," Returns the button click listener. <br /><br />"
"android.support.v17.leanback.app.ErrorSupportFragment.Drawable () "," Sets the drawable to be used for the error image. <br /><br />"
"android.support.v17.leanback.app.ErrorSupportFragment.View.OnClickListener () "," Set the button click listener. <br /><br />"
"android.support.v17.leanback.app.ErrorSupportFragment.getButtonText () "," Returns the button text. <br /><br />"
"android.support.v17.leanback.app.ErrorSupportFragment.getTitle () "," Returns the title for the browse fragment. <br /><br />"
"android.support.v17.leanback.app.ErrorSupportFragment.Bundle () "," Called to have the fragment instantiate its user interface view. <br /><br />"
"android.support.v17.leanback.app.ErrorSupportFragment.isBackgroundTranslucent () "," Returns true if the background is translucent. <br /><br />"
"android.support.v17.leanback.app.ErrorSupportFragment.getMessage () "," Returns the error message. <br /><br />"
"android.support.v17.leanback.app.ErrorSupportFragment.getBackgroundDrawable () "," Returns the background drawable. <br /><br />"
"android.support.v17.leanback.app.HeadersFragment.OnItemSelectedListener () "," no description <br /><br />"
"android.support.v17.leanback.app.HeadersFragment.setOnHeaderClickedListener (HeadersFragment.OnHeaderClickedListener listener) "," no description <br /><br />"
"android.support.v17.leanback.app.HeadersFragment.getAdapter () "," Returns the list of rows. <br /><br />"
"android.support.v17.leanback.app.HeadersFragment.ObjectAdapter () "," Sets the adapter for the fragment. <br /><br />"
"android.support.v17.leanback.app.HeadersFragment.setSelectedPosition (int position) "," Sets the selected row position with smooth animation. <br /><br />"
"android.support.v17.leanback.app.HeadersFragment.getPresenterSelector () "," Get the presenter selector used to create and bind views. <br /><br />"
"android.support.v17.leanback.app.HeadersFragment.PresenterSelector () "," Set the presenter selector used to create and bind views. <br /><br />"
"android.support.v17.leanback.app.HeadersFragment.onCreateView (LayoutInflater, ViewGroup, Bundle) () "," Called immediately after onCreateView(LayoutInflater, ViewGroup, Bundle) has returned, but before any saved state has been restored in to the view. <br /><br />"
"android.support.v17.leanback.app.HeadersFragment.Bundle () "," Called to have the fragment instantiate its user interface view. <br /><br />"
"android.support.v17.leanback.app.HeadersFragment.setSelectedPosition (int position, boolean smooth) "," Sets the selected row position. <br /><br />"
"android.support.v17.leanback.app.HeadersSupportFragment.OnItemSelectedListener () "," no description <br /><br />"
"android.support.v17.leanback.app.HeadersSupportFragment.getAdapter () "," Returns the list of rows. <br /><br />"
"android.support.v17.leanback.app.HeadersSupportFragment.ObjectAdapter () "," Sets the adapter for the fragment. <br /><br />"
"android.support.v17.leanback.app.HeadersSupportFragment.setSelectedPosition (int position) "," Sets the selected row position with smooth animation. <br /><br />"
"android.support.v17.leanback.app.HeadersSupportFragment.getPresenterSelector () "," Get the presenter selector used to create and bind views. <br /><br />"
"android.support.v17.leanback.app.HeadersSupportFragment.PresenterSelector () "," Set the presenter selector used to create and bind views. <br /><br />"
"android.support.v17.leanback.app.HeadersSupportFragment.setOnHeaderClickedListener (HeadersSupportFragment.OnHeaderClickedListener listener) "," no description <br /><br />"
"android.support.v17.leanback.app.HeadersSupportFragment.onCreateView (LayoutInflater, ViewGroup, Bundle) () "," Called immediately after onCreateView(LayoutInflater, ViewGroup, Bundle) has returned, but before any saved state has been restored in to the view. <br /><br />"
"android.support.v17.leanback.app.HeadersSupportFragment.Bundle () "," Called to have the fragment instantiate its user interface view. <br /><br />"
"android.support.v17.leanback.app.HeadersSupportFragment.setSelectedPosition (int position, boolean smooth) "," Sets the selected row position. <br /><br />"
"android.support.v17.leanback.app.MediaControllerGlue.detach () "," Detaches from the media controller. <br /><br />"
"android.support.v17.leanback.app.MediaControllerGlue.getMediaDuration () "," Returns the duration of the media item in milliseconds. <br /><br />"
"android.support.v17.leanback.app.MediaControllerGlue.getCurrentSpeedId () "," Returns the current playback speed. <br /><br />"
"android.support.v17.leanback.app.MediaControllerGlue.hasValidMedia () "," Returns true if there is a valid media item. <br /><br />"
"android.support.v17.leanback.app.MediaControllerGlue.getSupportedActions () "," Returns a bitmask of actions supported by the media player. <br /><br />"
"android.support.v17.leanback.app.MediaControllerGlue.getMediaSubtitle () "," Returns the subtitle of the media item. <br /><br />"
"android.support.v17.leanback.app.MediaControllerGlue.getMediaArt () "," Returns a bitmap of the art for the media item. <br /><br />"
"android.support.v17.leanback.app.MediaControllerGlue.getMediaTitle () "," Returns the title of the media item. <br /><br />"
"android.support.v17.leanback.app.MediaControllerGlue.MediaControllerCompat () "," Attaches to the given media controller. <br /><br />"
"android.support.v17.leanback.app.MediaControllerGlue.getCurrentPosition () "," Returns the current position of the media item in milliseconds. <br /><br />"
"android.support.v17.leanback.app.MediaControllerGlue.isMediaPlaying () "," Returns true if media is currently playing. <br /><br />"
"android.support.v17.leanback.app.MediaControllerGlue.getMediaController () "," Returns the media controller currently attached. <br /><br />"
"android.support.v17.leanback.app.PlaybackControlGlue.getMediaDuration () "," Returns the duration of the media item in milliseconds. <br /><br />"
"android.support.v17.leanback.app.PlaybackControlGlue.hasValidMedia () "," Returns true if there is a valid media item. <br /><br />"
"android.support.v17.leanback.app.PlaybackControlGlue.PlaybackControlsRow () "," Sets the controls row to be managed by the glue layer. <br /><br />"
"android.support.v17.leanback.app.PlaybackControlGlue.getMediaSubtitle () "," Returns the subtitle of the media item. <br /><br />"
"android.support.v17.leanback.app.PlaybackControlGlue.updateProgress () "," Updates the progress bar based on the current media playback position. <br /><br />"
"android.support.v17.leanback.app.PlaybackControlGlue.isFadingEnabled () "," Returns true if controls are set to fade when media is playing. <br /><br />"
"android.support.v17.leanback.app.PlaybackControlGlue.getUpdatePeriod () "," Returns the time period in milliseconds that should be used to update the progress. <br /><br />"
"android.support.v17.leanback.app.PlaybackControlGlue.OnItemViewClickedListener () "," Set the OnItemViewClickedListener to be called if the click event is not handled internally. <br /><br />"
"android.support.v17.leanback.app.PlaybackControlGlue.setFadingEnabled (boolean enable) "," Sets the controls to fade after a timeout when media is playing. <br /><br />"
"android.support.v17.leanback.app.PlaybackControlGlue.getMediaTitle () "," Returns the title of the media item. <br /><br />"
"android.support.v17.leanback.app.PlaybackControlGlue.getFastForwardSpeeds () "," Returns the fast forward speeds. <br /><br />"
"android.support.v17.leanback.app.PlaybackControlGlue.PlaybackControlsRowPresenter () "," Helper method for instantiating a PlaybackControlsRow and corresponding PlaybackControlsRowPresenter. <br /><br />"
"android.support.v17.leanback.app.PlaybackControlGlue.getCurrentSpeedId () "," Returns the current playback speed. <br /><br />"
"android.support.v17.leanback.app.PlaybackControlGlue.getFragment () "," Returns the fragment. <br /><br />"
"android.support.v17.leanback.app.PlaybackControlGlue.getSupportedActions () "," Returns a bitmask of actions supported by the media player. <br /><br />"
"android.support.v17.leanback.app.PlaybackControlGlue.getMediaArt () "," Returns a bitmap of the art for the media item. <br /><br />"
"android.support.v17.leanback.app.PlaybackControlGlue.getCurrentPosition () "," Returns the current position of the media item in milliseconds. <br /><br />"
"android.support.v17.leanback.app.PlaybackControlGlue.getRewindSpeeds () "," Returns the rewind speeds. <br /><br />"
"android.support.v17.leanback.app.PlaybackControlGlue.getUpdatePeriod () (boolean enable) "," Override this to start/stop a runnable to call updateProgress() at an interval such as getUpdatePeriod(). <br /><br />"
"android.support.v17.leanback.app.PlaybackControlGlue.isMediaPlaying () "," Returns true if media is currently playing. <br /><br />"
"android.support.v17.leanback.app.PlaybackControlGlue.getContext () "," Returns the context. <br /><br />"
"android.support.v17.leanback.app.PlaybackControlGlue.getControlsRow () "," Returns the playback controls row managed by the glue layer. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlayFragment.setFadingEnabled (boolean enabled) "," Enables or disables view fading. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlayFragment.isFadingEnabled () "," Returns true if view fading is enabled. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlayFragment.getBackgroundType () "," Returns the background type. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlayFragment.getInputEventHandler () "," Returns the input event handler. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlayFragment.onCreateView (LayoutInflater, ViewGroup, Bundle) () "," Called when the view previously created by onCreateView(LayoutInflater, ViewGroup, Bundle) has been detached from the fragment. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlayFragment.setBackgroundType (int type) "," Sets the background type. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlayFragment.PlaybackOverlayFragment.OnFadeCompleteListener () "," Sets the listener to be called when fade in or out has completed. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlayFragment.tickle () "," Tickles the playback controls. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlayFragment.PlaybackOverlayFragment.InputEventHandler () "," Sets the input event handler. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlayFragment.getFadeCompleteListener () "," Returns the listener to be called when fade in or out has completed. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlayFragment.ObjectAdapter () "," Sets the list of rows for the fragment. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlayFragment.Bundle () "," Called to have the fragment instantiate its user interface view. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlayFragment.onResume () "," Called when the fragment is visible to the user and actively running. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlayFragment.InputEventHandler.InputEvent () "," Called when an InputEvent is received. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlayFragment.OnFadeCompleteListener.onFadeOutComplete () "," no description <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlayFragment.OnFadeCompleteListener.onFadeInComplete () "," no description <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlaySupportFragment.setFadingEnabled (boolean enabled) "," Enables or disables view fading. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlaySupportFragment.PlaybackOverlaySupportFragment.InputEventHandler () "," Sets the input event handler. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlaySupportFragment.PlaybackOverlaySupportFragment.OnFadeCompleteListener () "," Sets the listener to be called when fade in or out has completed. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlaySupportFragment.isFadingEnabled () "," Returns true if view fading is enabled. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlaySupportFragment.getBackgroundType () "," Returns the background type. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlaySupportFragment.getInputEventHandler () "," Returns the input event handler. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlaySupportFragment.onCreateView (LayoutInflater, ViewGroup, Bundle) () "," Called when the view previously created by onCreateView(LayoutInflater, ViewGroup, Bundle) has been detached from the fragment. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlaySupportFragment.setBackgroundType (int type) "," Sets the background type. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlaySupportFragment.tickle () "," Tickles the playback controls. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlaySupportFragment.getFadeCompleteListener () "," Returns the listener to be called when fade in or out has completed. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlaySupportFragment.ObjectAdapter () "," Sets the list of rows for the fragment. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlaySupportFragment.Bundle () "," Called to have the fragment instantiate its user interface view. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlaySupportFragment.onResume () "," Called when the fragment is visible to the user and actively running. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlaySupportFragment.InputEventHandler.InputEvent () "," Called when an InputEvent is received. <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlaySupportFragment.OnFadeCompleteListener.onFadeOutComplete () "," no description <br /><br />"
"android.support.v17.leanback.app.PlaybackOverlaySupportFragment.OnFadeCompleteListener.onFadeInComplete () "," no description <br /><br />"
"android.support.v17.leanback.app.RowsFragment.getOnItemClickedListener () () "," This method is deprecated. Use getOnItemClickedListener() <br /><br />"
"android.support.v17.leanback.app.RowsFragment.OnItemViewClickedListener () "," Sets an item clicked listener on the fragment. <br /><br />"
"android.support.v17.leanback.app.RowsFragment.getPresenterSelector () "," Get the presenter selector used to create and bind views. <br /><br />"
"android.support.v17.leanback.app.RowsFragment.PresenterSelector () "," Set the presenter selector used to create and bind views. <br /><br />"
"android.support.v17.leanback.app.RowsFragment.getOnItemViewClickedListener () "," Returns the item clicked listener. <br /><br />"
"android.support.v17.leanback.app.RowsFragment.getOnItemViewSelectedListener () "," Returns an item selection listener. <br /><br />"
"android.support.v17.leanback.app.RowsFragment.onCreateView (LayoutInflater, ViewGroup, Bundle) () "," Called immediately after onCreateView(LayoutInflater, ViewGroup, Bundle) has returned, but before any saved state has been restored in to the view. <br /><br />"
"android.support.v17.leanback.app.RowsFragment.setOnItemViewClickedListener (OnItemViewClickedListener) () "," This method is deprecated. Use setOnItemViewClickedListener(OnItemViewClickedListener) <br /><br />"
"android.support.v17.leanback.app.RowsFragment.setSelectedPosition (int position, boolean smooth) "," Sets the selected row position. <br /><br />"
"android.support.v17.leanback.app.RowsFragment.setOnItemViewSelectedListener (OnItemViewSelectedListener) () "," This method is deprecated. Use setOnItemViewSelectedListener(OnItemViewSelectedListener) <br /><br />"
"android.support.v17.leanback.app.RowsFragment.getAdapter () "," Returns the list of rows. <br /><br />"
"android.support.v17.leanback.app.RowsFragment.ObjectAdapter () "," Sets the adapter for the fragment. <br /><br />"
"android.support.v17.leanback.app.RowsFragment.setSelectedPosition (int position) "," Sets the selected row position with smooth animation. <br /><br />"
"android.support.v17.leanback.app.RowsFragment.enableRowScaling (boolean enable) "," Enables scaling of rows. <br /><br />"
"android.support.v17.leanback.app.RowsFragment.Bundle () "," Called to have the fragment instantiate its user interface view. <br /><br />"
"android.support.v17.leanback.app.RowsFragment.OnItemViewSelectedListener () "," Sets an item selection listener. <br /><br />"
"android.support.v17.leanback.app.RowsFragment.setExpand (boolean expand) "," Set the visibility of titles/hovercard of browse rows. <br /><br />"
"android.support.v17.leanback.app.RowsSupportFragment.getOnItemClickedListener () () "," This method is deprecated. Use getOnItemClickedListener() <br /><br />"
"android.support.v17.leanback.app.RowsSupportFragment.OnItemViewClickedListener () "," Sets an item clicked listener on the fragment. <br /><br />"
"android.support.v17.leanback.app.RowsSupportFragment.getPresenterSelector () "," Get the presenter selector used to create and bind views. <br /><br />"
"android.support.v17.leanback.app.RowsSupportFragment.PresenterSelector () "," Set the presenter selector used to create and bind views. <br /><br />"
"android.support.v17.leanback.app.RowsSupportFragment.getOnItemViewClickedListener () "," Returns the item clicked listener. <br /><br />"
"android.support.v17.leanback.app.RowsSupportFragment.getOnItemViewSelectedListener () "," Returns an item selection listener. <br /><br />"
"android.support.v17.leanback.app.RowsSupportFragment.onCreateView (LayoutInflater, ViewGroup, Bundle) () "," Called immediately after onCreateView(LayoutInflater, ViewGroup, Bundle) has returned, but before any saved state has been restored in to the view. <br /><br />"
"android.support.v17.leanback.app.RowsSupportFragment.setOnItemViewClickedListener (OnItemViewClickedListener) () "," This method is deprecated. Use setOnItemViewClickedListener(OnItemViewClickedListener) <br /><br />"
"android.support.v17.leanback.app.RowsSupportFragment.setSelectedPosition (int position, boolean smooth) "," Sets the selected row position. <br /><br />"
"android.support.v17.leanback.app.RowsSupportFragment.setOnItemViewSelectedListener (OnItemViewSelectedListener) () "," This method is deprecated. Use setOnItemViewSelectedListener(OnItemViewSelectedListener) <br /><br />"
"android.support.v17.leanback.app.RowsSupportFragment.getAdapter () "," Returns the list of rows. <br /><br />"
"android.support.v17.leanback.app.RowsSupportFragment.ObjectAdapter () "," Sets the adapter for the fragment. <br /><br />"
"android.support.v17.leanback.app.RowsSupportFragment.setSelectedPosition (int position) "," Sets the selected row position with smooth animation. <br /><br />"
"android.support.v17.leanback.app.RowsSupportFragment.enableRowScaling (boolean enable) "," Enables scaling of rows. <br /><br />"
"android.support.v17.leanback.app.RowsSupportFragment.Bundle () "," Called to have the fragment instantiate its user interface view. <br /><br />"
"android.support.v17.leanback.app.RowsSupportFragment.OnItemViewSelectedListener () "," Sets an item selection listener. <br /><br />"
"android.support.v17.leanback.app.RowsSupportFragment.setExpand (boolean expand) "," Set the visibility of titles/hovercard of browse rows. <br /><br />"
"android.support.v17.leanback.app.SearchFragment.String () "," Sets the title string to be be shown in an empty search bar. <br /><br />"
"android.support.v17.leanback.app.SearchFragment.getRecognizerIntent () "," Returns an intent that can be used to request speech recognition. <br /><br />"
"android.support.v17.leanback.app.SearchFragment.onPause () "," Called when the Fragment is no longer resumed. <br /><br />"
"android.support.v17.leanback.app.SearchFragment.OnItemViewClickedListener () "," Sets an item clicked listener for the results. <br /><br />"
"android.support.v17.leanback.app.SearchFragment.getBadgeDrawable () "," Returns the badge drawable in the search bar. <br /><br />"
"android.support.v17.leanback.app.SearchFragment.EXTRA_RESULTS () "," Sets the text of the search query based on the EXTRA_RESULTS in the given intent, and optionally submit the query. <br /><br />"
"android.support.v17.leanback.app.SearchFragment.setOnItemViewClickedListener (OnItemViewClickedListener) () "," This method is deprecated. Use setOnItemViewClickedListener(OnItemViewClickedListener) <br /><br />"
"android.support.v17.leanback.app.SearchFragment.onStart () "," Called when the Fragment is visible to the user. <br /><br />"
"android.support.v17.leanback.app.SearchFragment.SpeechRecognitionCallback () "," Set this callback to have the fragment pass speech recognition requests to the activity rather than using an internal recognizer. <br /><br />"
"android.support.v17.leanback.app.SearchFragment.Drawable () "," Sets the badge drawable that will be shown inside the search bar next to the title. <br /><br />"
"android.support.v17.leanback.app.SearchFragment.setOnItemViewSelectedListener (OnItemViewSelectedListener) () "," This method is deprecated. Use setOnItemViewSelectedListener(OnItemViewSelectedListener) <br /><br />"
"android.support.v17.leanback.app.SearchFragment.SearchFragment.SearchResultProvider () "," Set the search provider that is responsible for returning results for the search query. <br /><br />"
"android.support.v17.leanback.app.SearchFragment.onDestroy () "," Called when the fragment is no longer in use. <br /><br />"
"android.support.v17.leanback.app.SearchFragment.getTitle () "," Returns the title set in the search bar. <br /><br />"
"android.support.v17.leanback.app.SearchFragment.Bundle () "," Called to have the fragment instantiate its user interface view. <br /><br />"
"android.support.v17.leanback.app.SearchFragment.startRecognition () "," Starts speech recognition. <br /><br />"
"android.support.v17.leanback.app.SearchFragment.OnItemViewSelectedListener () "," Sets an item selection listener for the results. <br /><br />"
"android.support.v17.leanback.app.SearchFragment.onResume () "," Called when the fragment is visible to the user and actively running. <br /><br />"
"android.support.v17.leanback.app.SearchFragment.SearchResultProvider.String () "," Method invoked when the search query is submitted, either by dismissing the keyboard, pressing search or next on the keyboard or when voice has detected the end of the query. <br /><br />"
"android.support.v17.leanback.app.SearchFragment.SearchResultProvider.getResultsAdapter () "," Method invoked some time prior to the first call to onQueryTextChange to retrieve an ObjectAdapter that will contain the results to future updates of the search query. <br /><br />"
"android.support.v17.leanback.app.SearchSupportFragment.SearchSupportFragment.SearchResultProvider () "," Set the search provider that is responsible for returning results for the search query. <br /><br />"
"android.support.v17.leanback.app.SearchSupportFragment.String () "," Sets the title string to be be shown in an empty search bar. <br /><br />"
"android.support.v17.leanback.app.SearchSupportFragment.getRecognizerIntent () "," Returns an intent that can be used to request speech recognition. <br /><br />"
"android.support.v17.leanback.app.SearchSupportFragment.onPause () "," Called when the Fragment is no longer resumed. <br /><br />"
"android.support.v17.leanback.app.SearchSupportFragment.OnItemViewClickedListener () "," Sets an item clicked listener for the results. <br /><br />"
"android.support.v17.leanback.app.SearchSupportFragment.getBadgeDrawable () "," Returns the badge drawable in the search bar. <br /><br />"
"android.support.v17.leanback.app.SearchSupportFragment.EXTRA_RESULTS () "," Sets the text of the search query based on the EXTRA_RESULTS in the given intent, and optionally submit the query. <br /><br />"
"android.support.v17.leanback.app.SearchSupportFragment.setOnItemViewClickedListener (OnItemViewClickedListener) () "," This method is deprecated. Use setOnItemViewClickedListener(OnItemViewClickedListener) <br /><br />"
"android.support.v17.leanback.app.SearchSupportFragment.onStart () "," Called when the Fragment is visible to the user. <br /><br />"
"android.support.v17.leanback.app.SearchSupportFragment.SpeechRecognitionCallback () "," Set this callback to have the fragment pass speech recognition requests to the activity rather than using an internal recognizer. <br /><br />"
"android.support.v17.leanback.app.SearchSupportFragment.Drawable () "," Sets the badge drawable that will be shown inside the search bar next to the title. <br /><br />"
"android.support.v17.leanback.app.SearchSupportFragment.setOnItemViewSelectedListener (OnItemViewSelectedListener) () "," This method is deprecated. Use setOnItemViewSelectedListener(OnItemViewSelectedListener) <br /><br />"
"android.support.v17.leanback.app.SearchSupportFragment.onDestroy () "," Called when the fragment is no longer in use. <br /><br />"
"android.support.v17.leanback.app.SearchSupportFragment.getTitle () "," Returns the title set in the search bar. <br /><br />"
"android.support.v17.leanback.app.SearchSupportFragment.Bundle () "," Called to have the fragment instantiate its user interface view. <br /><br />"
"android.support.v17.leanback.app.SearchSupportFragment.startRecognition () "," Starts speech recognition. <br /><br />"
"android.support.v17.leanback.app.SearchSupportFragment.OnItemViewSelectedListener () "," Sets an item selection listener for the results. <br /><br />"
"android.support.v17.leanback.app.SearchSupportFragment.onResume () "," Called when the fragment is visible to the user and actively running. <br /><br />"
"android.support.v17.leanback.app.SearchSupportFragment.SearchResultProvider.String () "," Method invoked when the search query is submitted, either by dismissing the keyboard, pressing search or next on the keyboard or when voice has detected the end of the query. <br /><br />"
"android.support.v17.leanback.app.SearchSupportFragment.SearchResultProvider.getResultsAdapter () "," Method invoked some time prior to the first call to onQueryTextChange to retrieve an ObjectAdapter that will contain the results to future updates of the search query. <br /><br />"
"android.support.v17.leanback.app.VerticalGridFragment.String () "," Sets a title for the fragment. <br /><br />"
"android.support.v17.leanback.app.VerticalGridFragment.onPause () "," Called when the Fragment is no longer resumed. <br /><br />"
"android.support.v17.leanback.app.VerticalGridFragment.OnItemViewClickedListener () "," Sets an item clicked listener. <br /><br />"
"android.support.v17.leanback.app.VerticalGridFragment.getOnItemViewClickedListener () () "," This method is deprecated. Use getOnItemViewClickedListener() <br /><br />"
"android.support.v17.leanback.app.VerticalGridFragment.getBadgeDrawable () "," Returns the badge drawable. <br /><br />"
"android.support.v17.leanback.app.VerticalGridFragment.setOnItemViewClickedListener (OnItemViewClickedListener) () "," This method is deprecated. Use setOnItemViewClickedListener(OnItemViewClickedListener) <br /><br />"
"android.support.v17.leanback.app.VerticalGridFragment.getOnItemViewClickedListener () "," Returns the item clicked listener. <br /><br />"
"android.support.v17.leanback.app.VerticalGridFragment.onCreateView (LayoutInflater, ViewGroup, Bundle) () "," Called immediately after onCreateView(LayoutInflater, ViewGroup, Bundle) has returned, but before any saved state has been restored in to the view. <br /><br />"
"android.support.v17.leanback.app.VerticalGridFragment.setSearchAffordanceColor (int color) "," Sets the color used to draw the search affordance. <br /><br />"
"android.support.v17.leanback.app.VerticalGridFragment.onStart () "," Called when the Fragment is visible to the user. <br /><br />"
"android.support.v17.leanback.app.VerticalGridFragment.getSearchAffordanceColor () "," Returns the color used to draw the search affordance. <br /><br />"
"android.support.v17.leanback.app.VerticalGridFragment.setOnItemViewSelectedListener (OnItemViewSelectedListener) () "," This method is deprecated. Use setOnItemViewSelectedListener(OnItemViewSelectedListener) <br /><br />"
"android.support.v17.leanback.app.VerticalGridFragment.Drawable () "," Sets the badge drawable displayed in the title area. <br /><br />"
"android.support.v17.leanback.app.VerticalGridFragment.View.OnClickListener () "," Sets a click listener for the search affordance. <br /><br />"
"android.support.v17.leanback.app.VerticalGridFragment.getAdapter () "," Returns the object adapter. <br /><br />"
"android.support.v17.leanback.app.VerticalGridFragment.ObjectAdapter () "," Sets the object adapter for the fragment. <br /><br />"
"android.support.v17.leanback.app.VerticalGridFragment.setSelectedPosition (int position) "," Sets the selected item position. <br /><br />"
"android.support.v17.leanback.app.VerticalGridFragment.getGridPresenter () "," Returns the grid presenter. <br /><br />"
"android.support.v17.leanback.app.VerticalGridFragment.getTitle () "," Returns the title for the fragment. <br /><br />"
"android.support.v17.leanback.app.VerticalGridFragment.Bundle () "," Called to have the fragment instantiate its user interface view. <br /><br />"
"android.support.v17.leanback.app.VerticalGridFragment.OnItemViewSelectedListener () "," Sets an item selection listener. <br /><br />"
"android.support.v17.leanback.app.VerticalGridFragment.SearchOrbView.Colors () "," Sets the SearchOrbView.Colors used to draw the search affordance. <br /><br />"
"android.support.v17.leanback.app.VerticalGridFragment.onResume () "," Called when the fragment is visible to the user and actively running. <br /><br />"
"android.support.v17.leanback.app.VerticalGridFragment.VerticalGridPresenter () "," Sets the grid presenter. <br /><br />"
"android.support.v17.leanback.app.VerticalGridSupportFragment.String () "," Sets a title for the fragment. <br /><br />"
"android.support.v17.leanback.app.VerticalGridSupportFragment.onPause () "," Called when the Fragment is no longer resumed. <br /><br />"
"android.support.v17.leanback.app.VerticalGridSupportFragment.OnItemViewClickedListener () "," Sets an item clicked listener. <br /><br />"
"android.support.v17.leanback.app.VerticalGridSupportFragment.getOnItemViewClickedListener () () "," This method is deprecated. Use getOnItemViewClickedListener() <br /><br />"
"android.support.v17.leanback.app.VerticalGridSupportFragment.getBadgeDrawable () "," Returns the badge drawable. <br /><br />"
"android.support.v17.leanback.app.VerticalGridSupportFragment.setOnItemViewClickedListener (OnItemViewClickedListener) () "," This method is deprecated. Use setOnItemViewClickedListener(OnItemViewClickedListener) <br /><br />"
"android.support.v17.leanback.app.VerticalGridSupportFragment.getOnItemViewClickedListener () "," Returns the item clicked listener. <br /><br />"
"android.support.v17.leanback.app.VerticalGridSupportFragment.onCreateView (LayoutInflater, ViewGroup, Bundle) () "," Called immediately after onCreateView(LayoutInflater, ViewGroup, Bundle) has returned, but before any saved state has been restored in to the view. <br /><br />"
"android.support.v17.leanback.app.VerticalGridSupportFragment.setSearchAffordanceColor (int color) "," Sets the color used to draw the search affordance. <br /><br />"
"android.support.v17.leanback.app.VerticalGridSupportFragment.onStart () "," Called when the Fragment is visible to the user. <br /><br />"
"android.support.v17.leanback.app.VerticalGridSupportFragment.getSearchAffordanceColor () "," Returns the color used to draw the search affordance. <br /><br />"
"android.support.v17.leanback.app.VerticalGridSupportFragment.setOnItemViewSelectedListener (OnItemViewSelectedListener) () "," This method is deprecated. Use setOnItemViewSelectedListener(OnItemViewSelectedListener) <br /><br />"
"android.support.v17.leanback.app.VerticalGridSupportFragment.Drawable () "," Sets the badge drawable displayed in the title area. <br /><br />"
"android.support.v17.leanback.app.VerticalGridSupportFragment.View.OnClickListener () "," Sets a click listener for the search affordance. <br /><br />"
"android.support.v17.leanback.app.VerticalGridSupportFragment.getAdapter () "," Returns the object adapter. <br /><br />"
"android.support.v17.leanback.app.VerticalGridSupportFragment.ObjectAdapter () "," Sets the object adapter for the fragment. <br /><br />"
"android.support.v17.leanback.app.VerticalGridSupportFragment.setSelectedPosition (int position) "," Sets the selected item position. <br /><br />"
"android.support.v17.leanback.app.VerticalGridSupportFragment.getGridPresenter () "," Returns the grid presenter. <br /><br />"
"android.support.v17.leanback.app.VerticalGridSupportFragment.getTitle () "," Returns the title for the fragment. <br /><br />"
"android.support.v17.leanback.app.VerticalGridSupportFragment.Bundle () "," Called to have the fragment instantiate its user interface view. <br /><br />"
"android.support.v17.leanback.app.VerticalGridSupportFragment.OnItemViewSelectedListener () "," Sets an item selection listener. <br /><br />"
"android.support.v17.leanback.app.VerticalGridSupportFragment.SearchOrbView.Colors () "," Sets the SearchOrbView.Colors used to draw the search affordance. <br /><br />"
"android.support.v17.leanback.app.VerticalGridSupportFragment.onResume () "," Called when the fragment is visible to the user and actively running. <br /><br />"
"android.support.v17.leanback.app.VerticalGridSupportFragment.VerticalGridPresenter () "," Sets the grid presenter. <br /><br />"
"android.support.v17.leanback.database.CursorMapper.Cursor () "," Convert a Cursor at its current position to an Object. <br /><br />"
"android.support.v17.leanback.graphics.ColorFilterCache.getFilterForLevel (float level) "," Returns a ColorFilter for a given alpha level between 0 and 1.0. <br /><br />"
"android.support.v17.leanback.graphics.ColorFilterCache.getColorFilterCache (int color) "," Get a ColorDimmer for a given color. <br /><br />"
"android.support.v17.leanback.graphics.ColorFilterDimmer.setActiveLevel (float level) "," Sets the active level of the dimmer. <br /><br />"
"android.support.v17.leanback.graphics.ColorFilterDimmer.Context () "," Creates a default ColorFilterDimmer. <br /><br />"
"android.support.v17.leanback.graphics.ColorFilterDimmer.ColorFilterCache () "," Creates a ColorFilterDimmer for the given color and levels.. <br /><br />"
"android.support.v17.leanback.graphics.ColorFilterDimmer.getColorFilter () "," Gets the ColorFilter set to the current dim level. <br /><br />"
"android.support.v17.leanback.graphics.ColorFilterDimmer.View () "," Apply current the ColorFilter to a View. <br /><br />"
"android.support.v17.leanback.graphics.ColorFilterDimmer.getPaint () "," Gets the Paint object set to the current dim level. <br /><br />"
"android.support.v17.leanback.graphics.ColorOverlayDimmer.setActiveLevel (float level) "," Sets the active level of the dimmer. <br /><br />"
"android.support.v17.leanback.graphics.ColorOverlayDimmer.Context () "," Creates a default ColorOverlayDimmer. <br /><br />"
"android.support.v17.leanback.graphics.ColorOverlayDimmer.createColorOverlayDimmer (int dimColor, float activeLevel, float dimmedLevel) "," Creates a ColorOverlayDimmer for the given color and levels. <br /><br />"
"android.support.v17.leanback.graphics.ColorOverlayDimmer.applyToColor (int color) "," Change the RGB of the color according to current dim level. <br /><br />"
"android.support.v17.leanback.graphics.ColorOverlayDimmer.getAlphaFloat () "," Returns the float value between 0 and 1 corresponding to alpha between 0 and 255. <br /><br />"
"android.support.v17.leanback.graphics.ColorOverlayDimmer.needsDraw () "," Returns whether the dimmer needs to draw. <br /><br />"
"android.support.v17.leanback.graphics.ColorOverlayDimmer.getAlpha () "," Returns the alpha value for the dimmer. <br /><br />"
"android.support.v17.leanback.graphics.ColorOverlayDimmer.View () "," Draw a dim color overlay on top of a child View inside the canvas of the parent View. <br /><br />"
"android.support.v17.leanback.graphics.ColorOverlayDimmer.getPaint () "," Returns the Paint object set to the current alpha value. <br /><br />"
"android.support.v17.leanback.transition.SlideNoPropagation.setSlideEdge (int slideEdge) "," Change the edge that Views appear and disappear from. <br /><br />"
"android.support.v17.leanback.widget.AbstractDetailsDescriptionPresenter.Presenter.ViewHolder () "," Called when a view created by this presenter has been detached from its window. <br /><br />"
"android.support.v17.leanback.widget.AbstractDetailsDescriptionPresenter.View () "," Unbinds a View from an item. <br /><br />"
"android.support.v17.leanback.widget.AbstractDetailsDescriptionPresenter.ViewHolder.getBody () "," no description <br /><br />"
"android.support.v17.leanback.widget.AbstractDetailsDescriptionPresenter.ViewHolder.getTitle () "," no description <br /><br />"
"android.support.v17.leanback.widget.AbstractDetailsDescriptionPresenter.ViewHolder.getSubtitle () "," no description <br /><br />"
"android.support.v17.leanback.widget.Action.Drawable () "," Set the icon drawable for this Action. <br /><br />"
"android.support.v17.leanback.widget.Action.getIcon () "," Returns the icon drawable for this Action. <br /><br />"
"android.support.v17.leanback.widget.Action.getLabel2 () "," Returns the second line label for this Action. <br /><br />"
"android.support.v17.leanback.widget.Action.getId () "," Returns the id for this Action. <br /><br />"
"android.support.v17.leanback.widget.Action.getLabel1 () "," Returns the first line label for this Action. <br /><br />"
"android.support.v17.leanback.widget.Action.CharSequence () "," Set the second line label for this Action. <br /><br />"
"android.support.v17.leanback.widget.Action.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.support.v17.leanback.widget.Action.setId (long id) "," Set id for this Action. <br /><br />"
"android.support.v17.leanback.widget.ArrayObjectAdapter.clear () "," Removes all items from this adapter, leaving it empty. <br /><br />"
"android.support.v17.leanback.widget.ArrayObjectAdapter.get (int index) "," Returns the item for the given position. <br /><br />"
"android.support.v17.leanback.widget.ArrayObjectAdapter.Collection () "," Adds the objects in the given collection to the adapter, starting at the given index. <br /><br />"
"android.support.v17.leanback.widget.ArrayObjectAdapter.unmodifiableList () "," Gets a read-only view of the list of object of this ArrayObjectAdapter. <br /><br />"
"android.support.v17.leanback.widget.ArrayObjectAdapter.size () "," Returns the number of items in the adapter. <br /><br />"
"android.support.v17.leanback.widget.ArrayObjectAdapter.Object () "," Replaces item at position with a new item and calls notifyItemRangeChanged() at the given position. <br /><br />"
"android.support.v17.leanback.widget.ArrayObjectAdapter.removeItems (int position, int count) "," Removes a range of items from the adapter. <br /><br />"
"android.support.v17.leanback.widget.ArrayObjectAdapter.notifyArrayItemRangeChanged (int positionStart, int itemCount) "," Notify that the content of a range of items changed. <br /><br />"
"android.support.v17.leanback.widget.BaseCardView.AttributeSet () "," Returns a new set of layout parameters based on the supplied attributes set. <br /><br />"
"android.support.v17.leanback.widget.BaseCardView.getCardType () "," Returns the type of this Card. <br /><br />"
"android.support.v17.leanback.widget.BaseCardView.setInfoVisibility (int visibility) "," Sets the visibility of the info region of the card. <br /><br />"
"android.support.v17.leanback.widget.BaseCardView.setSelectedAnimationDelayed (boolean delay) "," Sets a flag indicating if the Selected animation (if the selected card type implements one) should run immediately after the card is selected, or if it should be delayed. <br /><br />"
"android.support.v17.leanback.widget.BaseCardView.shouldDelayChildPressedState () "," Return true if the pressed state should be delayed for children or descendants of this ViewGroup. <br /><br />"
"android.support.v17.leanback.widget.BaseCardView.setExtraVisibility (int visibility) "," Sets the visibility of the extra region of the card. <br /><br />"
"android.support.v17.leanback.widget.BaseCardView.isSelectedAnimationDelayed () "," Returns a boolean indicating if the selected animation will run immediately or be delayed the next time the card is Selected. <br /><br />"
"android.support.v17.leanback.widget.BaseCardView.setSelected (boolean selected) "," Sets the Selected state of this Card. <br /><br />"
"android.support.v17.leanback.widget.BaseCardView.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.support.v17.leanback.widget.BaseCardView.getExtraVisibility () "," Returns the visibility of the extra region of the card. <br /><br />"
"android.support.v17.leanback.widget.BaseCardView.setActivated (boolean activated) "," Sets the Activated state of this Card. <br /><br />"
"android.support.v17.leanback.widget.BaseCardView.getInfoVisibility () "," Returns the visibility of the info region of the card. <br /><br />"
"android.support.v17.leanback.widget.BaseCardView.setCardType (int type) "," Sets the type of this Card. <br /><br />"
"android.support.v17.leanback.widget.ClassPresenterSelector.Presenter () "," no description <br /><br />"
"android.support.v17.leanback.widget.ClassPresenterSelector.Object () "," Returns a presenter for the given item. <br /><br />"
"android.support.v17.leanback.widget.ControlButtonPresenterSelector.getSecondaryPresenter () "," Returns the presenter for secondary controls. <br /><br />"
"android.support.v17.leanback.widget.ControlButtonPresenterSelector.getPrimaryPresenter () "," Returns the presenter for primary controls. <br /><br />"
"android.support.v17.leanback.widget.ControlButtonPresenterSelector.Object () "," Always returns the presenter for primary controls. <br /><br />"
"android.support.v17.leanback.widget.CursorObjectAdapter.Cursor () "," Swap in a new Cursor, returning the old Cursor. <br /><br />"
"android.support.v17.leanback.widget.CursorObjectAdapter.get (int index) "," Returns the item for the given position. <br /><br />"
"android.support.v17.leanback.widget.CursorObjectAdapter.size () "," Returns the number of items in the adapter. <br /><br />"
"android.support.v17.leanback.widget.DetailsOverviewRow.isImageScaleUpAllowed () "," Returns true if the image may be scaled up; false otherwise. <br /><br />"
"android.support.v17.leanback.widget.DetailsOverviewRow.Drawable () "," Sets a drawable as the image of this details overview. <br /><br />"
"android.support.v17.leanback.widget.DetailsOverviewRow.getItem () "," Gets the main item for the details page. <br /><br />"
"android.support.v17.leanback.widget.DetailsOverviewRow.getActionsAdapter () () "," This method is deprecated. Use setActionsAdapter(ObjectAdapter) and getActionsAdapter() <br /><br />"
"android.support.v17.leanback.widget.DetailsOverviewRow.ObjectAdapter () "," Sets ObjectAdapter for actions. <br /><br />"
"android.support.v17.leanback.widget.DetailsOverviewRow.getImageDrawable () "," Gets the image drawable of this details overview. <br /><br />"
"android.support.v17.leanback.widget.DetailsOverviewRow.Object () "," Sets the main item for the details page. <br /><br />"
"android.support.v17.leanback.widget.DetailsOverviewRow.setImageScaleUpAllowed (boolean allowed) "," Allows or disallows scaling up of images. <br /><br />"
"android.support.v17.leanback.widget.DetailsOverviewRow.Bitmap () "," Sets a Bitmap as the image of this details overview. <br /><br />"
"android.support.v17.leanback.widget.DetailsOverviewRowPresenter.String () "," Set enter transition of target activity (typically a DetailActivity) to be transiting into overview row created by this presenter. <br /><br />"
"android.support.v17.leanback.widget.DetailsOverviewRowPresenter.setBackgroundColor (int color) "," Sets the background color. <br /><br />"
"android.support.v17.leanback.widget.DetailsOverviewRowPresenter.isStyleLarge () "," Returns true if the layout style is large. <br /><br />"
"android.support.v17.leanback.widget.DetailsOverviewRowPresenter.getOnActionClickedListener () "," Gets the listener for Action click events. <br /><br />"
"android.support.v17.leanback.widget.DetailsOverviewRowPresenter.OnActionClickedListener () "," Sets the listener for Action click events. <br /><br />"
"android.support.v17.leanback.widget.DetailsOverviewRowPresenter.isUsingDefaultSelectEffect () "," Return whether this RowPresenter is using the default dimming effect provided by the library. <br /><br />"
"android.support.v17.leanback.widget.DetailsOverviewRowPresenter.getBackgroundColor () "," Returns the background color. <br /><br />"
"android.support.v17.leanback.widget.DetailsOverviewRowPresenter.setStyleLarge (boolean large) "," Sets the layout style to be large or small. <br /><br />"
"android.support.v17.leanback.widget.FocusHighlightHelper.VerticalGridView () "," Setup the focus highlight behavior of a focused item in header list. <br /><br />"
"android.support.v17.leanback.widget.FocusHighlightHelper.ItemBridgeAdapter () "," Setup the focus highlight behavior of a focused item in browse list row. <br /><br />"
"android.support.v17.leanback.widget.HeaderItem.getName () "," Returns the name of this header item. <br /><br />"
"android.support.v17.leanback.widget.HeaderItem.getId () "," Returns a unique identifier for this item. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.getSaveChildrenPolicy () "," no description <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.onRtlPropertiesChanged (int layoutDirection) "," Notify layout manager that layout directionality has been updated <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.requestFocus () () "," Look for a descendant to call requestFocus() on. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setItemAlignmentOffset (int offset) "," Set the absolute offset in pixels for item alignment. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.getFadingRightEdgeOffset () "," Set distance in pixels between fading start position and right padding edge. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.RecyclerView.RecyclerListener () "," Register a listener that will be notified whenever a child view is recycled. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setFadingRightEdgeLength (int fadeLength) "," Set right edge fading length in pixels. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setFocusDrawingOrderEnabled (boolean enabled) "," Enable or disable the default 'focus draw at last' order rule. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.getItemAlignmentOffset () "," Get the absolute offset in pixels for item alignment. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.getFadingLeftEdge () "," Return true if fading left edge. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setAnimateChildLayout (boolean animateChildLayout) "," Set if an animation should run when a child changes size or when adding or removing a child. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.getSaveChildrenLimitNumber () "," no description <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setOnMotionInterceptListener (BaseGridView.OnMotionInterceptListener listener) "," Sets the generic motion intercept listener. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setFadingLeftEdgeOffset (int fadeOffset) "," Set distance in pixels between fading start position and left padding edge. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setVerticalMargin (int margin) "," Set the margin in pixels between two child items vertically. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.OnChildSelectedListener () "," Register a callback to be invoked when an item in BaseGridView has been selected. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setSelectedPositionSmooth (int position) "," Change the selected item and run an animation to scroll to the target position. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setWindowAlignment (int windowAlignment) "," Set how the focused item gets aligned in the view. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setSaveChildrenPolicy (int savePolicy) "," Set policy for saving children. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.getFadingLeftEdgeOffset () "," Get distance in pixels between fading start position and left padding edge. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setNumRows (int numRows) "," Set the number of rows. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.getFadingRightEdgeLength () "," Get right edge fading length in pixels. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setOnTouchInterceptListener (BaseGridView.OnTouchInterceptListener listener) "," Sets the touch intercept listener. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setItemAlignmentOffsetWithPadding (boolean withPadding) "," Set to true if include padding in calculating item align offset. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.getItemAlignmentOffset () () "," Get offset percent for item alignment in addition to getItemAlignmentOffset(). <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.SAVE_LIMITED_CHILD (int limitNumber) "," Set limit number when getSaveChildrenPolicy() is SAVE_LIMITED_CHILD. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setHasOverlappingRendering (boolean hasOverlapping) "," no description <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.isItemAlignmentOffsetWithPadding () "," Returns true if include padding in calculating item align offset. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.isFocusDrawingOrderEnabled () "," Returns true if default 'focus draw at last' order rule is enabled. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.getItemAlignmentOffset () (float offsetPercent) "," Set offset percent for item alignment in addition to getItemAlignmentOffset(). <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.hasOverlappingRendering () "," Returns whether this View has content which overlaps. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setFadingLeftEdge (boolean fading) "," Set fade out left edge to transparent. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.getWindowAlignment () "," Get how the focused item gets aligned in the view. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.getFadingRightEdge () "," Return true if fading right edge. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.getWindowAlignmentOffset () () "," Get offset percent for window alignment in addition to getWindowAlignmentOffset(). <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.isChildLayoutAnimated () "," Return true if an animation will run when a child changes size or when adding or removing a child. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.getWindowAlignmentOffset () (float offsetPercent) "," Set offset percent for window alignment in addition to getWindowAlignmentOffset(). <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.MotionEvent () "," Pass the touch screen motion event down to the target view, or this view if it is the target. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.getSelectedPosition () "," Get the selected item position. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setFocusSearchDisabled (boolean disabled) "," Disable or enable focus search. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setHorizontalMargin (int margin) "," Set the margin in pixels between two child items horizontally. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.getItemAlignmentViewId () "," Get the id of the view to align with, or zero for the item view itself. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setGravity (int gravity) "," Describes how the child views are positioned. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.getChildDrawingOrder (int childCount, int i) "," Returns the index of the child to draw for this iteration. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setFadingRightEdgeOffset (int fadeOffset) "," Get distance in pixels between fading start position and right padding edge. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setWindowAlignmentOffset (int offset) "," Set the offset in pixels for window alignment. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setLayoutEnabled (boolean layoutEnabled) "," Enable or disable layout. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setSelectedPosition (int position) "," Change the selected item immediately without animation. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.isScrollEnabled () "," Returns true if scrolling is enabled. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setFadingRightEdge (boolean fading) "," Set fade out right edge to transparent. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.OnChildLaidOutListener () "," Register a callback to be invoked when an item in BaseGridView has been laid out. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.getFocusScrollStrategy () "," Returns the strategy used to scroll in response to item focus changing. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setRowHeight (int height) "," Set the row height. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setPruneChild (boolean pruneChild) "," Enable or disable pruning child. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setItemAlignmentViewId (int viewId) "," Set the id of the view to align with. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.getVerticalMargin () "," Get the margin in pixels between two child items vertically. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.hasPreviousViewInSameRow (int position) "," Returns true if the view at the given position has a same row sibling in front of it. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setFadingLeftEdgeLength (int fadeLength) "," Set left edge fading length in pixels. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setChildrenVisibility (int visibility) "," Change and override children's visibility. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setOnKeyInterceptListener (BaseGridView.OnKeyInterceptListener listener) "," Sets the key intercept listener. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.Canvas () "," Manually render this view (and all of its children) to the given Canvas. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.View () "," Get the x/y offsets to final position from current position if the view is selected. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.getFadingLeftEdgeLength () "," Get left edge fading length in pixels. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.getHorizontalMargin () "," Get the margin in pixels between two child items horizontally. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.KeyEvent () "," Dispatch a key event to the next view on the focus path. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.FOCUS_SCROLL_PAGE (int scrollStrategy) "," Set the strategy used to scroll in response to item focus changing:  FOCUS_SCROLL_ALIGNED (default)  FOCUS_SCROLL_ITEM FOCUS_SCROLL_PAGE <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.getWindowAlignmentOffset () "," Get the offset in pixels for window alignment. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setScrollEnabled (boolean scrollEnabled) "," Enable or disable scrolling. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.setItemMargin (int margin) "," Set the margin in pixels between two child items. <br /><br />"
"android.support.v17.leanback.widget.HorizontalGridView.isFocusSearchDisabled () "," Return true if focus search is disabled. <br /><br />"
"android.support.v17.leanback.widget.HorizontalHoverCardSwitcher.Object () "," Select a childView inside a grid view and create/bind a corresponding hover card view for the object. <br /><br />"
"android.support.v17.leanback.widget.ImageCardView.setMainImageAdjustViewBounds (boolean adjustViewBounds) "," no description <br /><br />"
"android.support.v17.leanback.widget.ImageCardView.getTitleText () "," no description <br /><br />"
"android.support.v17.leanback.widget.ImageCardView.getMainImage () "," no description <br /><br />"
"android.support.v17.leanback.widget.ImageCardView.getBadgeImage () "," no description <br /><br />"
"android.support.v17.leanback.widget.ImageCardView.CharSequence () "," no description <br /><br />"
"android.support.v17.leanback.widget.ImageCardView.hasOverlappingRendering () "," Returns whether this View has content which overlaps. <br /><br />"
"android.support.v17.leanback.widget.ImageCardView.setMainImageDimensions (int width, int height) "," no description <br /><br />"
"android.support.v17.leanback.widget.ImageCardView.getContentText () "," no description <br /><br />"
"android.support.v17.leanback.widget.ImageCardView.Drawable () "," Set drawable with fade-in animation. <br /><br />"
"android.support.v17.leanback.widget.ImageCardView.ImageView.ScaleType () "," no description <br /><br />"
"android.support.v17.leanback.widget.ImageCardView.getMainImageView () "," no description <br /><br />"
"android.support.v17.leanback.widget.ImageCardView.setInfoAreaBackgroundColor (int color) "," no description <br /><br />"
"android.support.v17.leanback.widget.ImageCardView.getInfoAreaBackground () "," no description <br /><br />"
"android.support.v17.leanback.widget.ItemBridgeAdapter.AdapterListener.ItemBridgeAdapter.ViewHolder () "," no description <br /><br />"
"android.support.v17.leanback.widget.ItemBridgeAdapter.AdapterListener.Presenter () "," no description <br /><br />"
"android.support.v17.leanback.widget.ItemBridgeAdapter.ItemBridgeAdapter.Wrapper () "," no description <br /><br />"
"android.support.v17.leanback.widget.ItemBridgeAdapter.ItemBridgeAdapter.AdapterListener () "," no description <br /><br />"
"android.support.v17.leanback.widget.ItemBridgeAdapter.getWrapper () "," no description <br /><br />"
"android.support.v17.leanback.widget.ItemBridgeAdapter.clear () "," no description <br /><br />"
"android.support.v17.leanback.widget.ItemBridgeAdapter.getPresenterMapper () "," no description <br /><br />"
"android.support.v17.leanback.widget.ItemBridgeAdapter.ObjectAdapter () "," no description <br /><br />"
"android.support.v17.leanback.widget.ItemBridgeAdapter.View.OnFocusChangeListener () "," View.OnFocusChangeListener that assigned in onCreateViewHolder(ViewGroup) may be chained, user should never change View.OnFocusChangeListener after that. <br /><br />"
"android.support.v17.leanback.widget.ItemBridgeAdapter.getItemViewType (int position) "," Return the view type of the item at position for the purposes of view recycling. <br /><br />"
"android.support.v17.leanback.widget.ItemBridgeAdapter.RecyclerView.ViewHolder () "," Called when a view created by this adapter has been recycled. <br /><br />"
"android.support.v17.leanback.widget.ItemBridgeAdapter.Presenter () "," no description <br /><br />"
"android.support.v17.leanback.widget.ItemBridgeAdapter.getItemCount () "," Returns the total number of items in the data set hold by the adapter. <br /><br />"
"android.support.v17.leanback.widget.ItemBridgeAdapter.getItemId (int position) "," Return the stable ID for the item at position. <br /><br />"
"android.support.v17.leanback.widget.ItemBridgeAdapter.ViewHolder.Presenter.ViewHolder () "," Get Presenter.ViewHolder. <br /><br />"
"android.support.v17.leanback.widget.ItemBridgeAdapter.ViewHolder.getItem () "," Get currently bound object. <br /><br />"
"android.support.v17.leanback.widget.ItemBridgeAdapter.ViewHolder.getExtraObject () "," Get extra object associated with the view. <br /><br />"
"android.support.v17.leanback.widget.ItemBridgeAdapter.ViewHolder.Presenter () "," Get Presenter. <br /><br />"
"android.support.v17.leanback.widget.ItemBridgeAdapter.ViewHolder.Object () "," Set extra object associated with the view. <br /><br />"
"android.support.v17.leanback.widget.ItemBridgeAdapter.Wrapper.View () "," no description <br /><br />"
"android.support.v17.leanback.widget.ListRow.ObjectAdapter () "," Get the ObjectAdapter that represents a list of objects. <br /><br />"
"android.support.v17.leanback.widget.ListRowHoverCardView.getDescription () "," no description <br /><br />"
"android.support.v17.leanback.widget.ListRowHoverCardView.CharSequence () "," no description <br /><br />"
"android.support.v17.leanback.widget.ListRowHoverCardView.getTitle () "," no description <br /><br />"
"android.support.v17.leanback.widget.ListRowPresenter.isUsingZOrder () "," Returns true if SDK &gt;= L, where Z shadow is enabled so that Z order is enabled on each child of horizontal list. <br /><br />"
"android.support.v17.leanback.widget.ListRowPresenter.RowPresenter () "," ListRowPresenter overrides the default select effect of RowPresenter and return false. <br /><br />"
"android.support.v17.leanback.widget.ListRowPresenter.PresenterSelector () "," Set PresenterSelector used for showing a select object in a hover card. <br /><br />"
"android.support.v17.leanback.widget.ListRowPresenter.getZoomFactor () "," Returns the zoom factor used for focus highlighting. <br /><br />"
"android.support.v17.leanback.widget.ListRowPresenter.setRowHeight (int rowHeight) "," Sets the row height for rows created by this Presenter. <br /><br />"
"android.support.v17.leanback.widget.ListRowPresenter.HorizontalGridView () "," Returns true if SDK &gt;= 18, where default shadow is applied to each individual child of HorizontalGridView. <br /><br />"
"android.support.v17.leanback.widget.ListRowPresenter.getRowHeight () "," Returns the row height for list rows created by this Presenter. <br /><br />"
"android.support.v17.leanback.widget.ListRowPresenter.enableChildRoundedCorners (boolean enable) "," Enables or disabled rounded corners on children of this row. <br /><br />"
"android.support.v17.leanback.widget.ListRowPresenter.Presenter () "," Sets the recycled pool size for the given presenter. <br /><br />"
"android.support.v17.leanback.widget.ListRowPresenter.setExpandedRowHeight (int rowHeight) "," Sets the expanded row height for rows created by this Presenter. <br /><br />"
"android.support.v17.leanback.widget.ListRowPresenter.canDrawOutOfBounds () "," Return true if the Row view can draw outside its bounds. <br /><br />"
"android.support.v17.leanback.widget.ListRowPresenter.getShadowEnabled () "," Returns true if child shadow is enabled. <br /><br />"
"android.support.v17.leanback.widget.ListRowPresenter.RowPresenter.ViewHolder () "," Change visibility of views, entrance transition will be run against the views that change visibilities. <br /><br />"
"android.support.v17.leanback.widget.ListRowPresenter.getExpandedRowHeight () "," Returns the expanded row height for rows created by this Presenter. <br /><br />"
"android.support.v17.leanback.widget.ListRowPresenter.setShadowEnabled (boolean enabled) "," Enable or disable child shadow. <br /><br />"
"android.support.v17.leanback.widget.ListRowPresenter.areChildRoundedCornersEnabled () "," Returns true if rounded corners are enabled for children of this row. <br /><br />"
"android.support.v17.leanback.widget.ListRowPresenter.ViewHolder.getBridgeAdapter () "," no description <br /><br />"
"android.support.v17.leanback.widget.ListRowPresenter.ViewHolder.getGridView () "," no description <br /><br />"
"android.support.v17.leanback.widget.ListRowPresenter.ViewHolder.getListRowPresenter () "," no description <br /><br />"
"android.support.v17.leanback.widget.ListRowView.getGridView () "," no description <br /><br />"
"android.support.v17.leanback.widget.ObjectAdapter.DataObserver.onItemRangeRemoved (int positionStart, int itemCount) "," Called when a range of items is removed from the ObjectAdapter. <br /><br />"
"android.support.v17.leanback.widget.ObjectAdapter.DataObserver.onChanged () "," Called whenever the ObjectAdapter's data has changed in some manner outside of the set of changes covered by the other range-based change notification methods. <br /><br />"
"android.support.v17.leanback.widget.ObjectAdapter.DataObserver.onItemRangeChanged (int positionStart, int itemCount) "," Called when a range of items in the ObjectAdapter has changed. <br /><br />"
"android.support.v17.leanback.widget.ObjectAdapter.DataObserver.onItemRangeInserted (int positionStart, int itemCount) "," Called when a range of items is inserted into the ObjectAdapter. <br /><br />"
"android.support.v17.leanback.widget.ObjectAdapter.getPresenterSelector () "," Returns the presenter selector for this ObjectAdapter. <br /><br />"
"android.support.v17.leanback.widget.ObjectAdapter.getId (int position) "," Returns id for the given position. <br /><br />"
"android.support.v17.leanback.widget.ObjectAdapter.PresenterSelector () "," Set the presenter selector. <br /><br />"
"android.support.v17.leanback.widget.ObjectAdapter.Presenter () "," Returns the Presenter for the given item from the adapter. <br /><br />"
"android.support.v17.leanback.widget.ObjectAdapter.get (int position) "," Returns the item for the given position. <br /><br />"
"android.support.v17.leanback.widget.ObjectAdapter.setHasStableIds (boolean hasStableIds) "," Sets whether the item ids are stable across changes to the underlying data. <br /><br />"
"android.support.v17.leanback.widget.ObjectAdapter.hasStableIds () "," Indicates whether the item ids are stable across changes to the underlying data. <br /><br />"
"android.support.v17.leanback.widget.ObjectAdapter.size () "," Returns the number of items in the adapter. <br /><br />"
"android.support.v17.leanback.widget.ObjectAdapter.ObjectAdapter.DataObserver () "," Unregister a DataObserver for data change notifications. <br /><br />"
"android.support.v17.leanback.widget.ObjectAdapter.unregisterAllObservers () "," Unregister all DataObservers for this ObjectAdapter. <br /><br />"
"android.support.v17.leanback.widget.OnActionClickedListener.Action () "," no description <br /><br />"
"android.support.v17.leanback.widget.OnChildLaidOutListener.View () "," Callback method to be invoked when a child of this ViewGroup has been added to view hierarchy laid out. <br /><br />"
"android.support.v17.leanback.widget.OnChildSelectedListener.View () "," Callback method to be invoked when a child of this viewgroup has been selected. <br /><br />"
"android.support.v17.leanback.widget.OnItemClickedListener.Row () "," no description <br /><br />"
"android.support.v17.leanback.widget.OnItemSelectedListener.Row () "," Called when the a row or a new item becomes selected. <br /><br />"
"android.support.v17.leanback.widget.OnItemViewClickedListener.Row () "," no description <br /><br />"
"android.support.v17.leanback.widget.OnItemViewSelectedListener.Row () "," Called when the a row or a new item becomes selected. <br /><br />"
"android.support.v17.leanback.widget.PlaybackControlsRow.getBufferedProgress () "," Returns the buffered progress for the playback controls row. <br /><br />"
"android.support.v17.leanback.widget.PlaybackControlsRow.setCurrentTime (int ms) "," Sets the current time in milliseconds for the playback controls row. <br /><br />"
"android.support.v17.leanback.widget.PlaybackControlsRow.setTotalTime (int ms) "," Sets the total time in milliseconds for the playback controls row. <br /><br />"
"android.support.v17.leanback.widget.PlaybackControlsRow.Drawable () "," Sets a {link @Drawable} image for this row. <br /><br />"
"android.support.v17.leanback.widget.PlaybackControlsRow.getItem () "," Gets the main item for the details page. <br /><br />"
"android.support.v17.leanback.widget.PlaybackControlsRow.getCurrentTime () "," Returns the current time in milliseconds for the playback controls row. <br /><br />"
"android.support.v17.leanback.widget.PlaybackControlsRow.ObjectAdapter () "," Sets the secondary actions ObjectAdapter. <br /><br />"
"android.support.v17.leanback.widget.PlaybackControlsRow.getTotalTime () "," Returns the total time in milliseconds for the playback controls row. <br /><br />"
"android.support.v17.leanback.widget.PlaybackControlsRow.setBufferedProgress (int ms) "," Sets the buffered progress for the playback controls row. <br /><br />"
"android.support.v17.leanback.widget.PlaybackControlsRow.Bitmap () "," Sets a Bitmap for this row. <br /><br />"
"android.support.v17.leanback.widget.PlaybackControlsRow.MultiAction.getDrawable (int index) "," Returns the drawable at the given index. <br /><br />"
"android.support.v17.leanback.widget.PlaybackControlsRow.MultiAction.setIndex (int index) "," Sets the current index. <br /><br />"
"android.support.v17.leanback.widget.PlaybackControlsRow.MultiAction.getLabel (int index) "," Returns the label at the given index. <br /><br />"
"android.support.v17.leanback.widget.PlaybackControlsRow.MultiAction.getActionCount () "," Returns the number of actions. <br /><br />"
"android.support.v17.leanback.widget.PlaybackControlsRow.MultiAction.getSecondaryLabel (int index) "," Returns the secondary label at the given index. <br /><br />"
"android.support.v17.leanback.widget.PlaybackControlsRow.MultiAction.Drawable[] () "," Sets the array of drawables. <br /><br />"
"android.support.v17.leanback.widget.PlaybackControlsRow.MultiAction.nextIndex () "," Increments the index, wrapping to zero once the end is reached. <br /><br />"
"android.support.v17.leanback.widget.PlaybackControlsRow.MultiAction.getIndex () "," Gets the current index. <br /><br />"
"android.support.v17.leanback.widget.PlaybackControlsRow.MultiAction.String[] () "," Sets the array of strings used as secondary labels. <br /><br />"
"android.support.v17.leanback.widget.PlaybackControlsRowPresenter.setBackgroundColor (int color) "," Sets the background color. <br /><br />"
"android.support.v17.leanback.widget.PlaybackControlsRowPresenter.setSecondaryActionsHidden (boolean hidden) "," Sets the secondary actions to be hidden behind a 'more actions' button. <br /><br />"
"android.support.v17.leanback.widget.PlaybackControlsRowPresenter.setProgressColor (int color) "," Sets the primary color for the progress bar. <br /><br />"
"android.support.v17.leanback.widget.PlaybackControlsRowPresenter.areSecondaryActionsHidden () "," Returns true if secondary actions are hidden. <br /><br />"
"android.support.v17.leanback.widget.PlaybackControlsRowPresenter.PlaybackControlsRowPresenter.ViewHolder () "," Display the primary actions. <br /><br />"
"android.support.v17.leanback.widget.PlaybackControlsRowPresenter.Action () "," Sets the listener for Action click events. <br /><br />"
"android.support.v17.leanback.widget.PlaybackControlsRowPresenter.getProgressColor () "," Returns the primary color for the progress bar. <br /><br />"
"android.support.v17.leanback.widget.PlaybackControlsRowPresenter.getBackgroundColor () "," Returns the background color. <br /><br />"
"android.support.v17.leanback.widget.Presenter.Presenter.ViewHolder () "," Called when a view created by this presenter has been detached from its window. <br /><br />"
"android.support.v17.leanback.widget.Presenter.View.OnClickListener () "," Called to set a click listener for the given view holder. <br /><br />"
"android.support.v17.leanback.widget.Presenter.View () "," Unbinds a View from an item. <br /><br />"
"android.support.v17.leanback.widget.PresenterSelector.Object () "," Returns a presenter for the given item. <br /><br />"
"android.support.v17.leanback.widget.PresenterSwitcher.unselect () "," no description <br /><br />"
"android.support.v17.leanback.widget.PresenterSwitcher.getParentViewGroup () "," no description <br /><br />"
"android.support.v17.leanback.widget.PresenterSwitcher.clear () "," Destroy created views. <br /><br />"
"android.support.v17.leanback.widget.PresenterSwitcher.Presenter () "," Initialize switcher with a parent view to insert view into and a PresenterSelector for choose Presenter for object. <br /><br />"
"android.support.v17.leanback.widget.PresenterSwitcher.Object () "," no description <br /><br />"
"android.support.v17.leanback.widget.Row.getId () "," Returns a unique identifier for this row. <br /><br />"
"android.support.v17.leanback.widget.Row.HeaderItem () "," Set the HeaderItem that represents metadata for the row. <br /><br />"
"android.support.v17.leanback.widget.Row.setId (long id) "," Set the id for this row. <br /><br />"
"android.support.v17.leanback.widget.RowHeaderPresenter.RowHeaderPresenter.ViewHolder () "," no description <br /><br />"
"android.support.v17.leanback.widget.RowHeaderPresenter.GONE (boolean nullItemVisibilityGone) "," Optionally sets the view visibility to GONE when bound to null. <br /><br />"
"android.support.v17.leanback.widget.RowHeaderPresenter.GONE () "," Returns true if the view visibility is set to GONE when bound to null. <br /><br />"
"android.support.v17.leanback.widget.RowHeaderPresenter.View () "," Unbinds a View from an item. <br /><br />"
"android.support.v17.leanback.widget.RowHeaderPresenter.ViewHolder.getSelectLevel () "," no description <br /><br />"
"android.support.v17.leanback.widget.RowPresenter.OnItemSelectedListener () "," Set the listener for item or row selection. <br /><br />"
"android.support.v17.leanback.widget.RowPresenter.setSyncActivatePolicy (int syncActivatePolicy) "," Sets policy of updating row view activated status. <br /><br />"
"android.support.v17.leanback.widget.RowPresenter.getOnItemSelectedListener () "," Get the listener for item or row selection. <br /><br />"
"android.support.v17.leanback.widget.RowPresenter.RowHeaderPresenter () "," Set the Presenter used for rendering the header. <br /><br />"
"android.support.v17.leanback.widget.RowPresenter.OnItemViewClickedListener () "," Set listener for item click event. <br /><br />"
"android.support.v17.leanback.widget.RowPresenter.getOnItemClickedListener () "," Get the listener for item click events. <br /><br />"
"android.support.v17.leanback.widget.RowPresenter.isUsingDefaultSelectEffect () "," Return whether this RowPresenter is using the default dimming effect provided by the library. <br /><br />"
"android.support.v17.leanback.widget.RowPresenter.getOnItemViewClickedListener () "," Set listener for item click event. <br /><br />"
"android.support.v17.leanback.widget.RowPresenter.getOnItemViewSelectedListener () "," Get listener for item or row selection. <br /><br />"
"android.support.v17.leanback.widget.RowPresenter.setSelectEffectEnabled (boolean applyDimOnSelect) "," Enables or disables the row selection effect. <br /><br />"
"android.support.v17.leanback.widget.RowPresenter.View () "," Unbinds a View from an item. <br /><br />"
"android.support.v17.leanback.widget.RowPresenter.Presenter.ViewHolder () "," Set the current select level to a value between 0 (unselected) and 1 (selected). <br /><br />"
"android.support.v17.leanback.widget.RowPresenter.getSyncActivatePolicy () "," Returns policy of updating row view activated status. <br /><br />"
"android.support.v17.leanback.widget.RowPresenter.getHeaderPresenter () "," Get the Presenter used for rendering the header, or null if none has been set. <br /><br />"
"android.support.v17.leanback.widget.RowPresenter.OnItemClickedListener () "," Set the listener for item click events. <br /><br />"
"android.support.v17.leanback.widget.RowPresenter.getSelectEffectEnabled () "," Returns true if the row selection effect is enabled. <br /><br />"
"android.support.v17.leanback.widget.RowPresenter.canDrawOutOfBounds () "," Return true if the Row view can draw outside its bounds. <br /><br />"
"android.support.v17.leanback.widget.RowPresenter.OnItemViewSelectedListener () "," Set listener for item or row selection. <br /><br />"
"android.support.v17.leanback.widget.RowPresenter.RowPresenter.ViewHolder () "," Change visibility of views, entrance transition will be run against the views that change visibilities. <br /><br />"
"android.support.v17.leanback.widget.RowPresenter.ViewHolder.setActivated (boolean activated) "," Sets the row view's activated status. <br /><br />"
"android.support.v17.leanback.widget.RowPresenter.ViewHolder.setActivated (boolean) () "," Synchronizes the activated status of view to the last value passed through setActivated(boolean). <br /><br />"
"android.support.v17.leanback.widget.RowPresenter.ViewHolder.getHeaderViewHolder () "," Returns the view holder for the Row header for this Row. <br /><br />"
"android.support.v17.leanback.widget.RowPresenter.ViewHolder.getRow () "," Returns the Row bound to the View in this ViewHolder. <br /><br />"
"android.support.v17.leanback.widget.RowPresenter.ViewHolder.getSelectLevel () "," Returns the current selection level of the Row. <br /><br />"
"android.support.v17.leanback.widget.RowPresenter.ViewHolder.isSelected () "," Returns whether the Row is selected. <br /><br />"
"android.support.v17.leanback.widget.RowPresenter.ViewHolder.isExpanded () "," Returns whether the Row is in its expanded state. <br /><br />"
"android.support.v17.leanback.widget.SearchBar.getHint () "," Returns the current search bar hint text. <br /><br />"
"android.support.v17.leanback.widget.SearchBar.String () "," Set the title text used in the hint shown in the search bar. <br /><br />"
"android.support.v17.leanback.widget.SearchBar.SpeechRecognitionCallback () "," no description <br /><br />"
"android.support.v17.leanback.widget.SearchBar.FOCUS_DOWN (int viewId) "," Sets the id of the view to use when the next focus is FOCUS_DOWN. <br /><br />"
"android.support.v17.leanback.widget.SearchBar.Drawable () "," Set the badge drawable showing inside the search bar. <br /><br />"
"android.support.v17.leanback.widget.SearchBar.SearchBar.SearchBarListener () "," Set a listener for when the term search changes <br /><br />"
"android.support.v17.leanback.widget.SearchBar.getBadgeDrawable () "," Returns the badge drawable <br /><br />"
"android.support.v17.leanback.widget.SearchBar.getTitle () "," Returns the current title <br /><br />"
"android.support.v17.leanback.widget.SearchBar.startRecognition () "," Start the voice recognition <br /><br />"
"android.support.v17.leanback.widget.SearchBar.SpeechRecognizer () "," Set the speech recognizer to be used when doing voice search. <br /><br />"
"android.support.v17.leanback.widget.SearchBar.stopRecognition () "," Stop the recognition if already started <br /><br />"
"android.support.v17.leanback.widget.SearchBar.SearchBarListener.String () "," Method invoked when the search query is submitted. <br /><br />"
"android.support.v17.leanback.widget.SearchEditText.String () "," no description <br /><br />"
"android.support.v17.leanback.widget.SearchEditText.AccessibilityNodeInfo () "," This is required to make the View findable by uiautomator <br /><br />"
"android.support.v17.leanback.widget.SearchEditText.Float () "," no description <br /><br />"
"android.support.v17.leanback.widget.SearchEditText.KeyEvent () "," Handle a key event before it is processed by any input method associated with the view hierarchy. <br /><br />"
"android.support.v17.leanback.widget.SearchEditText.SearchEditText.OnKeyboardDismissListener () "," Set a keyboard dismissed listener. <br /><br />"
"android.support.v17.leanback.widget.SearchEditText.CharSequence () "," Sets the final, non changing, full text result. <br /><br />"
"android.support.v17.leanback.widget.SearchEditText.reset () "," no description <br /><br />"
"android.support.v17.leanback.widget.SearchEditText.View () "," no description <br /><br />"
"android.support.v17.leanback.widget.SearchEditText.OnKeyboardDismissListener.onKeyboardDismiss () "," no description <br /><br />"
"android.support.v17.leanback.widget.SearchOrbView.Colors.getBrightColor (int color) "," Computes a default brighter version of the given color. <br /><br />"
"android.support.v17.leanback.widget.SearchOrbView.setOrbColor (int color) "," Sets the background color of the search orb. <br /><br />"
"android.support.v17.leanback.widget.SearchOrbView.Drawable () "," Set the orb icon <br /><br />"
"android.support.v17.leanback.widget.SearchOrbView.View.OnClickListener () "," Set the on click listener for the orb <br /><br />"
"android.support.v17.leanback.widget.SearchOrbView.getOrbIcon () "," Returns the orb icon <br /><br />"
"android.support.v17.leanback.widget.SearchOrbView.getOrbColor () "," Returns the orb color <br /><br />"
"android.support.v17.leanback.widget.SearchOrbView.setOrbColors (Colors) (int color, int brightColor) "," This method is deprecated. Use setOrbColors(Colors) instead. <br /><br />"
"android.support.v17.leanback.widget.SearchOrbView.enableOrbColorAnimation (boolean enable) "," Enables or disables the orb color animation. <br /><br />"
"android.support.v17.leanback.widget.SearchOrbView.View () "," Called when a view has been clicked. <br /><br />"
"android.support.v17.leanback.widget.SearchOrbView.SearchOrbView.Colors () "," Set the SearchOrbView.Colors used to display the search orb. <br /><br />"
"android.support.v17.leanback.widget.ShadowOverlayContainer.prepareParentForShadow (ViewGroup) () "," prepareParentForShadow(ViewGroup) must be called on parent of container before using shadow. <br /><br />"
"android.support.v17.leanback.widget.ShadowOverlayContainer.initialize (boolean, boolean, boolean) (boolean hasShadow, boolean hasColorDimOverlay) "," This method is deprecated. use initialize(boolean, boolean, boolean) instead. <br /><br />"
"android.support.v17.leanback.widget.ShadowOverlayContainer.initialize (boolean hasShadow, boolean hasColorDimOverlay, boolean roundedCorners) "," Initialize shadows, color overlay, and rounded corners. <br /><br />"
"android.support.v17.leanback.widget.ShadowOverlayContainer.setOverlayColor (int overlayColor) "," Set color (with alpha) of the overlay. <br /><br />"
"android.support.v17.leanback.widget.ShadowOverlayContainer.setShadowFocusLevel (float level) "," Set shadow focus level (0 to 1). <br /><br />"
"android.support.v17.leanback.widget.ShadowOverlayContainer.View () "," Inserts view into the wrapper. <br /><br />"
"android.support.v17.leanback.widget.ShadowOverlayContainer.supportsShadow () "," Return true if the platform sdk supports shadow. <br /><br />"
"android.support.v17.leanback.widget.SinglePresenterSelector.Object () "," Returns a presenter for the given item. <br /><br />"
"android.support.v17.leanback.widget.SparseArrayObjectAdapter.clear (int key) "," Clears the given key and associated item from the adapter. <br /><br />"
"android.support.v17.leanback.widget.SparseArrayObjectAdapter.clear () "," Removes all items from this adapter, leaving it empty. <br /><br />"
"android.support.v17.leanback.widget.SparseArrayObjectAdapter.lookup (int key) "," Returns the object for the given key, or null if no mapping for that key exists. <br /><br />"
"android.support.v17.leanback.widget.SparseArrayObjectAdapter.indexOf (int key) "," Returns the index for the given key in the adapter. <br /><br />"
"android.support.v17.leanback.widget.SparseArrayObjectAdapter.get (int position) "," Returns the item for the given position. <br /><br />"
"android.support.v17.leanback.widget.SparseArrayObjectAdapter.size () "," Returns the number of items in the adapter. <br /><br />"
"android.support.v17.leanback.widget.SparseArrayObjectAdapter.Object () "," Sets the item for the given key. <br /><br />"
"android.support.v17.leanback.widget.SparseArrayObjectAdapter.notifyArrayItemRangeChanged (int positionStart, int itemCount) "," Notify that the content of a range of items changed. <br /><br />"
"android.support.v17.leanback.widget.SpeechOrbView.setSoundLevel (int level) "," no description <br /><br />"
"android.support.v17.leanback.widget.SpeechOrbView.showNotListening () "," no description <br /><br />"
"android.support.v17.leanback.widget.SpeechOrbView.showListening () "," no description <br /><br />"
"android.support.v17.leanback.widget.SpeechRecognitionCallback.recognizeSpeech () "," Called by the fragment when the user has requested speech recognition. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridPresenter.isUsingZOrder () "," Returns true if SDK &gt;= L, where Z shadow is enabled so that Z order is enabled on each child of vertical grid. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridPresenter.getNumberOfColumns () "," Returns the number of columns in the vertical grid. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridPresenter.OnItemViewClickedListener () "," Sets the item clicked listener. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridPresenter.getOnItemViewClickedListener () () "," This method is deprecated. Use getOnItemViewClickedListener() <br /><br />"
"android.support.v17.leanback.widget.VerticalGridPresenter.VerticalGridView () "," Returns true if opticalBounds is supported (SDK &gt;= 18) so that default shadow is applied to each individual child of VerticalGridView. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridPresenter.setOnItemViewClickedListener (OnItemViewClickedListener) () "," This method is deprecated. Use setOnItemViewClickedListener(OnItemViewClickedListener) <br /><br />"
"android.support.v17.leanback.widget.VerticalGridPresenter.getOnItemViewClickedListener () "," Returns the item clicked listener. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridPresenter.getOnItemViewSelectedListener () "," Returns the item selected listener. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridPresenter.setNumberOfColumns (int numColumns) "," Sets the number of columns in the vertical grid. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridPresenter.View () "," Unbinds a View from an item. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridPresenter.setOnItemViewSelectedListener (OnItemViewSelectedListener) () "," This method is deprecated. Use setOnItemViewSelectedListener(OnItemViewSelectedListener) <br /><br />"
"android.support.v17.leanback.widget.VerticalGridPresenter.enableChildRoundedCorners (boolean enable) "," Enables or disabled rounded corners on children of this row. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridPresenter.getOnItemViewSelectedListener () () "," This method is deprecated. Use getOnItemViewSelectedListener() <br /><br />"
"android.support.v17.leanback.widget.VerticalGridPresenter.getShadowEnabled () "," Returns true if child shadow is enabled. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridPresenter.OnItemViewSelectedListener () "," Sets the item selected listener. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridPresenter.setShadowEnabled (boolean enabled) "," Enable or disable child shadow. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridPresenter.areChildRoundedCornersEnabled () "," Returns true if rounded corners are enabled for children of this row. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridPresenter.ViewHolder.getGridView () "," no description <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.getSaveChildrenPolicy () "," no description <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.onRtlPropertiesChanged (int layoutDirection) "," Notify layout manager that layout directionality has been updated <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.requestFocus () () "," Look for a descendant to call requestFocus() on. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.setItemAlignmentOffset (int offset) "," Set the absolute offset in pixels for item alignment. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.setFocusDrawingOrderEnabled (boolean enabled) "," Enable or disable the default 'focus draw at last' order rule. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.RecyclerView.RecyclerListener () "," Register a listener that will be notified whenever a child view is recycled. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.getItemAlignmentOffset () "," Get the absolute offset in pixels for item alignment. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.setAnimateChildLayout (boolean animateChildLayout) "," Set if an animation should run when a child changes size or when adding or removing a child. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.getSaveChildrenLimitNumber () "," no description <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.setOnMotionInterceptListener (BaseGridView.OnMotionInterceptListener listener) "," Sets the generic motion intercept listener. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.setVerticalMargin (int margin) "," Set the margin in pixels between two child items vertically. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.OnChildSelectedListener () "," Register a callback to be invoked when an item in BaseGridView has been selected. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.setSelectedPositionSmooth (int position) "," Change the selected item and run an animation to scroll to the target position. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.setWindowAlignment (int windowAlignment) "," Set how the focused item gets aligned in the view. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.setSaveChildrenPolicy (int savePolicy) "," Set policy for saving children. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.setOnTouchInterceptListener (BaseGridView.OnTouchInterceptListener listener) "," Sets the touch intercept listener. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.setItemAlignmentOffsetWithPadding (boolean withPadding) "," Set to true if include padding in calculating item align offset. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.getItemAlignmentOffset () () "," Get offset percent for item alignment in addition to getItemAlignmentOffset(). <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.SAVE_LIMITED_CHILD (int limitNumber) "," Set limit number when getSaveChildrenPolicy() is SAVE_LIMITED_CHILD. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.setHasOverlappingRendering (boolean hasOverlapping) "," no description <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.isItemAlignmentOffsetWithPadding () "," Returns true if include padding in calculating item align offset. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.isFocusDrawingOrderEnabled () "," Returns true if default 'focus draw at last' order rule is enabled. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.getItemAlignmentOffset () (float offsetPercent) "," Set offset percent for item alignment in addition to getItemAlignmentOffset(). <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.hasOverlappingRendering () "," Returns whether this View has content which overlaps. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.getWindowAlignment () "," Get how the focused item gets aligned in the view. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.getWindowAlignmentOffset () () "," Get offset percent for window alignment in addition to getWindowAlignmentOffset(). <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.isChildLayoutAnimated () "," Return true if an animation will run when a child changes size or when adding or removing a child. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.getWindowAlignmentOffset () (float offsetPercent) "," Set offset percent for window alignment in addition to getWindowAlignmentOffset(). <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.MotionEvent () "," Pass the touch screen motion event down to the target view, or this view if it is the target. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.getSelectedPosition () "," Get the selected item position. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.setFocusSearchDisabled (boolean disabled) "," Disable or enable focus search. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.setHorizontalMargin (int margin) "," Set the margin in pixels between two child items horizontally. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.getItemAlignmentViewId () "," Get the id of the view to align with, or zero for the item view itself. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.setGravity (int gravity) "," Describes how the child views are positioned. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.getChildDrawingOrder (int childCount, int i) "," Returns the index of the child to draw for this iteration. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.setNumColumns (int numColumns) "," Set the number of columns. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.setWindowAlignmentOffset (int offset) "," Set the offset in pixels for window alignment. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.setLayoutEnabled (boolean layoutEnabled) "," Enable or disable layout. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.setSelectedPosition (int position) "," Change the selected item immediately without animation. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.isScrollEnabled () "," Returns true if scrolling is enabled. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.OnChildLaidOutListener () "," Register a callback to be invoked when an item in BaseGridView has been laid out. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.getFocusScrollStrategy () "," Returns the strategy used to scroll in response to item focus changing. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.getVerticalMargin () "," Get the margin in pixels between two child items vertically. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.setItemAlignmentViewId (int viewId) "," Set the id of the view to align with. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.setPruneChild (boolean pruneChild) "," Enable or disable pruning child. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.hasPreviousViewInSameRow (int position) "," Returns true if the view at the given position has a same row sibling in front of it. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.setChildrenVisibility (int visibility) "," Change and override children's visibility. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.setOnKeyInterceptListener (BaseGridView.OnKeyInterceptListener listener) "," Sets the key intercept listener. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.View () "," Get the x/y offsets to final position from current position if the view is selected. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.getHorizontalMargin () "," Get the margin in pixels between two child items horizontally. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.KeyEvent () "," Dispatch a key event to the next view on the focus path. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.FOCUS_SCROLL_PAGE (int scrollStrategy) "," Set the strategy used to scroll in response to item focus changing:  FOCUS_SCROLL_ALIGNED (default)  FOCUS_SCROLL_ITEM FOCUS_SCROLL_PAGE <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.getWindowAlignmentOffset () "," Get the offset in pixels for window alignment. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.setScrollEnabled (boolean scrollEnabled) "," Enable or disable scrolling. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.setColumnWidth (int width) "," Set the column width. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.isFocusSearchDisabled () "," Return true if focus search is disabled. <br /><br />"
"android.support.v17.leanback.widget.VerticalGridView.setItemMargin (int margin) "," Set the margin in pixels between two child items. <br /><br />"
"android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.feedbackTypeToString (int feedbackType) "," Returns the string representation of a feedback type. <br /><br />"
"android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.ResolveInfo () "," The service ResolveInfo. <br /><br />"
"android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.flagToString (int flag) "," Returns the string representation of a flag. <br /><br />"
"android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.capabilityToString (int capability) "," Returns the string representation of a capability. <br /><br />"
"android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat.AccessibilityServiceInfo () "," The settings activity name. <br /><br />"
"android.support.v4.app.ActionBarDrawerToggle.Delegate.Drawable () "," Set the Action Bar's up indicator drawable and content description. <br /><br />"
"android.support.v4.app.ActionBarDrawerToggle.Delegate.setActionBarDescription (int contentDescRes) "," Set the Action Bar's up indicator content description. <br /><br />"
"android.support.v4.app.ActionBarDrawerToggle.Delegate.getThemeUpIndicator () "," no description <br /><br />"
"android.support.v4.app.ActionBarDrawerToggle.DelegateProvider.getDrawerToggleDelegate () "," no description <br /><br />"
"android.support.v4.app.ActionBarDrawerToggle.Drawable () "," Set the up indicator to display when the drawer indicator is not enabled. <br /><br />"
"android.support.v4.app.ActionBarDrawerToggle.DrawerLayout.DrawerListener () "," DrawerLayout.DrawerListener callback method. <br /><br />"
"android.support.v4.app.ActionBarDrawerToggle.onConfigurationChanged () "," This method should always be called by your Activity's onConfigurationChanged method. <br /><br />"
"android.support.v4.app.ActionBarDrawerToggle.onOptionsItemSelected () "," This method should be called by your Activity's onOptionsItemSelected method. <br /><br />"
"android.support.v4.app.ActionBarDrawerToggle.setHomeAsUpIndicator (int resId) "," Set the up indicator to display when the drawer indicator is not enabled. <br /><br />"
"android.support.v4.app.ActionBarDrawerToggle.setDrawerIndicatorEnabled (boolean enable) "," Enable or disable the drawer indicator. <br /><br />"
"android.support.v4.app.ActionBarDrawerToggle.DrawerLayout.DrawerListener (int newState) "," DrawerLayout.DrawerListener callback method. <br /><br />"
"android.support.v4.app.ActionBarDrawerToggle.isDrawerIndicatorEnabled () "," no description <br /><br />"
"android.support.v4.app.ActionBarDrawerToggle.syncState () "," Synchronize the state of the drawer indicator/affordance with the linked DrawerLayout. <br /><br />"
"android.support.v4.app.ActivityCompat.makeSceneTransitionAnimation (Activity, android.view.View, String) () "," When makeSceneTransitionAnimation(Activity, android.view.View, String) was used to start an Activity, callback will be called to handle shared elements on the launching Activity. <br /><br />"
"android.support.v4.app.ActivityCompat.Bundle () "," Start new activity with options, if able, for which you would like a result when it finished. <br /><br />"
"android.support.v4.app.ActivityCompat.Activity () "," no description <br /><br />"
"android.support.v4.app.ActivityManagerCompat.ActivityManager () "," Returns true if this is a low-RAM device. <br /><br />"
"android.support.v4.app.ActivityOptionsCompat.ActivityOptionsCompat () "," Update the current values in this ActivityOptions from those supplied in otherOptions. <br /><br />"
"android.support.v4.app.ActivityOptionsCompat.String () "," Create an ActivityOptions to transition between Activities using cross-Activity scene animations. <br /><br />"
"android.support.v4.app.ActivityOptionsCompat.Context () "," Create an ActivityOptions specifying a custom animation to run when the activity is displayed. <br /><br />"
"android.support.v4.app.ActivityOptionsCompat.startActivity (android.app.Activity, android.content.Intent, android.os.Bundle) () "," Returns the created options as a Bundle, which can be passed to startActivity(android.app.Activity, android.content.Intent, android.os.Bundle). <br /><br />"
"android.support.v4.app.ActivityOptionsCompat.View () "," Create an ActivityOptions specifying an animation where the new activity is scaled from a small originating area of the screen to its final full representation. <br /><br />"
"android.support.v4.app.ActivityOptionsCompat.Bitmap () "," Create an ActivityOptions specifying an animation where a thumbnail is scaled from a given position to the new activity window that is being started. <br /><br />"
"android.support.v4.app.DialogFragment.String () "," Display the dialog, adding the fragment using an existing transaction and then committing the transaction. <br /><br />"
"android.support.v4.app.DialogFragment.onDetach () "," Called when the fragment is no longer attached to its activity. <br /><br />"
"android.support.v4.app.DialogFragment.onDestroyView () "," Remove dialog. <br /><br />"
"android.support.v4.app.DialogFragment.FragmentTransaction.commitAllowingStateLoss () () "," Version of dismiss() that uses FragmentTransaction.commitAllowingStateLoss(). <br /><br />"
"android.support.v4.app.DialogFragment.Activity () "," Called when a fragment is first attached to its activity. <br /><br />"
"android.support.v4.app.DialogFragment.onStart () "," Called when the Fragment is visible to the user. <br /><br />"
"android.support.v4.app.DialogFragment.setShowsDialog (boolean) () "," Return the current value of setShowsDialog(boolean). <br /><br />"
"android.support.v4.app.DialogFragment.setCancelable (boolean) () "," Return the current value of setCancelable(boolean). <br /><br />"
"android.support.v4.app.DialogFragment.setShowsDialog (boolean showsDialog) "," Controls whether this fragment should be shown in a dialog. <br /><br />"
"android.support.v4.app.DialogFragment.onStop () "," Called when the Fragment is no longer started. <br /><br />"
"android.support.v4.app.DialogFragment.dismiss () "," Dismiss the fragment and its dialog. <br /><br />"
"android.support.v4.app.DialogFragment.getTheme () "," no description <br /><br />"
"android.support.v4.app.DialogFragment.setCancelable (boolean cancelable) "," Control whether the shown Dialog is cancelable. <br /><br />"
"android.support.v4.app.DialogFragment.getDialog () "," no description <br /><br />"
"android.support.v4.app.DialogFragment.Bundle () "," Called to ask the fragment to save its current dynamic state, so it can later be reconstructed in a new instance of its process is restarted. <br /><br />"
"android.support.v4.app.DialogFragment.DialogInterface () "," This method will be invoked when the dialog is dismissed. <br /><br />"
"android.support.v4.app.DialogFragment.setStyle (int style, int theme) "," Call to customize the basic appearance and behavior of the fragment's dialog. <br /><br />"
"android.support.v4.app.Fragment.getResources () "," Return getActivity().getResources(). <br /><br />"
"android.support.v4.app.Fragment.getExitTransition () "," Returns the Transition that will be used to move Views out of the scene when the fragment is removed, hidden, or detached when not popping the back stack. <br /><br />"
"android.support.v4.app.Fragment.getTag () "," Get the tag name of the fragment, if specified. <br /><br />"
"android.support.v4.app.Fragment.getSharedElementEnterTransition () "," Returns the Transition that will be used for shared elements transferred into the content Scene. <br /><br />"
"android.support.v4.app.Fragment.onPause () "," Called when the Fragment is no longer resumed. <br /><br />"
"android.support.v4.app.Fragment.getFragmentManager () "," Return the FragmentManager for interacting with fragments associated with this fragment's activity. <br /><br />"
"android.support.v4.app.Fragment.isHidden () (boolean hidden) "," Called when the hidden state (as returned by isHidden() of the fragment has changed. <br /><br />"
"android.support.v4.app.Fragment.setTargetFragment (Fragment, int) () "," Return the target request code set by setTargetFragment(Fragment, int). <br /><br />"
"android.support.v4.app.Fragment.MenuItem () "," This hook is called whenever an item in your options menu is selected. <br /><br />"
"android.support.v4.app.Fragment.MenuInflater () "," Initialize the contents of the Activity's standard options menu. <br /><br />"
"android.support.v4.app.Fragment.onStop () "," Called when the Fragment is no longer started. <br /><br />"
"android.support.v4.app.Fragment.getRetainInstance () "," no description <br /><br />"
"android.support.v4.app.Fragment.onDestroy () "," Called when the fragment is no longer in use. <br /><br />"
"android.support.v4.app.Fragment.format (String, Object...) () "," Return a localized formatted string from the application's package's default string table, substituting the format arguments as defined in Formatter and format(String, Object...). <br /><br />"
"android.support.v4.app.Fragment.getUserVisibleHint () "," no description <br /><br />"
"android.support.v4.app.Fragment.isRemoving () "," Return true if this fragment is currently being removed from its activity. <br /><br />"
"android.support.v4.app.Fragment.String[] () "," Print the Fragments's state into the given stream. <br /><br />"
"android.support.v4.app.Fragment.onResume () "," Called when the fragment is visible to the user and actively running. <br /><br />"
"android.support.v4.app.Fragment.startActivityForResult (Intent, int) () "," Call startActivityForResult(Intent, int) on the fragment's containing Activity. <br /><br />"
"android.support.v4.app.Fragment.setAllowEnterTransitionOverlap (boolean allow) "," Sets whether the the exit transition and enter transition overlap or not. <br /><br />"
"android.support.v4.app.Fragment.ContextMenu.ContextMenuInfo () "," Called when a context menu for the view is about to be shown. <br /><br />"
"android.support.v4.app.Fragment.getAllowEnterTransitionOverlap () "," Returns whether the the exit transition and enter transition overlap or not. <br /><br />"
"android.support.v4.app.Fragment.Object () "," Sets the Transition that will be used for shared elements transferred back during a pop of the back stack. <br /><br />"
"android.support.v4.app.Fragment.onStart () "," Called when the Fragment is visible to the user. <br /><br />"
"android.support.v4.app.Fragment.getText (int resId) "," Return a localized, styled CharSequence from the application's package's default string table. <br /><br />"
"android.support.v4.app.Fragment.onDestroyOptionsMenu () "," Called when this fragment's option menu items are no longer being included in the overall options menu. <br /><br />"
"android.support.v4.app.Fragment.onLowMemory () "," This is called when the overall system is running low on memory, and actively running processes should trim their memory usage. <br /><br />"
"android.support.v4.app.Fragment.getParentFragment () "," Returns the parent Fragment containing this Fragment. <br /><br />"
"android.support.v4.app.Fragment.getId () "," Return the identifier this fragment is known by. <br /><br />"
"android.support.v4.app.Fragment.getEnterTransition () "," Returns the Transition that will be used to move Views into the initial scene. <br /><br />"
"android.support.v4.app.Fragment.instantiate (Context, String, Bundle) () "," Like instantiate(Context, String, Bundle) but with a null argument Bundle. <br /><br />"
"android.support.v4.app.Fragment.Menu () "," Prepare the Screen's standard options menu to be displayed. <br /><br />"
"android.support.v4.app.Fragment.getReturnTransition () "," Returns the Transition that will be used to move Views out of the scene when the Fragment is preparing to be removed, hidden, or detached because of popping the back stack. <br /><br />"
"android.support.v4.app.Fragment.setUserVisibleHint (boolean isVisibleToUser) "," Set a hint to the system about whether this fragment's UI is currently visible to the user. <br /><br />"
"android.support.v4.app.Fragment.isVisible () "," Return true if the fragment is currently visible to the user. <br /><br />"
"android.support.v4.app.Fragment.onDetach () "," Called when the fragment is no longer attached to its activity. <br /><br />"
"android.support.v4.app.Fragment.onCreateView (LayoutInflater, ViewGroup, Bundle) () "," Called immediately after onCreateView(LayoutInflater, ViewGroup, Bundle) has returned, but before any saved state has been restored in to the view. <br /><br />"
"android.support.v4.app.Fragment.setAllowReturnTransitionOverlap (boolean allow) "," Sets whether the the return transition and reenter transition overlap or not. <br /><br />"
"android.support.v4.app.Fragment.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.support.v4.app.Fragment.setRetainInstance (boolean retain) "," Control whether a fragment instance is retained across Activity re-creation (such as from a configuration change). <br /><br />"
"android.support.v4.app.Fragment.onCreateOptionsMenu (Menu, MenuInflater) (boolean hasMenu) "," Report that this fragment would like to participate in populating the options menu by receiving a call to onCreateOptionsMenu(Menu, MenuInflater) and related methods. <br /><br />"
"android.support.v4.app.Fragment.getAllowReturnTransitionOverlap () "," Returns whether the the return transition and reenter transition overlap or not. <br /><br />"
"android.support.v4.app.Fragment.getReenterTransition () "," Returns the Transition that will be used to move Views in to the scene when returning due to popping a back stack. <br /><br />"
"android.support.v4.app.Fragment.getString (int resId) "," Return a localized string from the application's package's default string table. <br /><br />"
"android.support.v4.app.Fragment.Configuration () "," Called by the system when the device configuration changes while your component is running. <br /><br />"
"android.support.v4.app.Fragment.startActivity (Intent) () "," Call startActivity(Intent) on the fragment's containing Activity. <br /><br />"
"android.support.v4.app.Fragment.getLoaderManager () "," Return the LoaderManager for this fragment, creating it if needed. <br /><br />"
"android.support.v4.app.Fragment.isResumed () "," Return true if the fragment is in the resumed state. <br /><br />"
"android.support.v4.app.Fragment.getChildFragmentManager () "," Return a private FragmentManager for placing and managing Fragments inside of this Fragment. <br /><br />"
"android.support.v4.app.Fragment.Fragment () "," Optional target for this fragment. <br /><br />"
"android.support.v4.app.Fragment.getActivity () "," Return the Activity this fragment is currently associated with. <br /><br />"
"android.support.v4.app.Fragment.isInLayout () "," Return true if the layout is included as part of an activity view hierarchy via the &lt;fragment&gt; tag. <br /><br />"
"android.support.v4.app.Fragment.Activity () "," Called when a fragment is first attached to its activity. <br /><br />"
"android.support.v4.app.Fragment.isAdded () "," Return true if the fragment is currently added to its activity. <br /><br />"
"android.support.v4.app.Fragment.View () "," Prevents a context menu to be shown for the given view. <br /><br />"
"android.support.v4.app.Fragment.onCreateAnimation (int transit, boolean enter, int nextAnim) "," Called when a fragment loads an animation. <br /><br />"
"android.support.v4.app.Fragment.isDetached () "," Return true if the fragment has been explicitly detached from the UI. <br /><br />"
"android.support.v4.app.Fragment.SharedElementCallback () "," When custom transitions are used with Fragments, the exit transition callback is called when this Fragment is attached or detached when popping the back stack. <br /><br />"
"android.support.v4.app.Fragment.setMenuVisibility (boolean menuVisible) "," Set a hint for whether this fragment's menu should be visible. <br /><br />"
"android.support.v4.app.Fragment.getSharedElementReturnTransition () "," Return the Transition that will be used for shared elements transferred back during a pop of the back stack. <br /><br />"
"android.support.v4.app.Fragment.getArguments () "," Return the arguments supplied when the fragment was instantiated, if any. <br /><br />"
"android.support.v4.app.Fragment.hashCode () "," Subclasses can not override hashCode(). <br /><br />"
"android.support.v4.app.Fragment.isHidden () "," Return true if the fragment has been hidden. <br /><br />"
"android.support.v4.app.Fragment.Bundle () "," Supply the construction arguments for this fragment. <br /><br />"
"android.support.v4.app.Fragment.FragmentManager.saveFragmentInstanceState () "," Set the initial saved state that this Fragment should restore itself from when first being constructed, as returned by FragmentManager.saveFragmentInstanceState. <br /><br />"
"android.support.v4.app.Fragment.SavedState.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.support.v4.app.Fragment.SavedState.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.support.v4.app.FragmentActivity.supportFinishAfterTransition () "," Reverses the Activity Scene entry Transition and triggers the calling Activity to reverse its exit Transition. <br /><br />"
"android.support.v4.app.FragmentActivity.AttributeSet () "," Add support for inflating the &lt;fragment&gt; tag. <br /><br />"
"android.support.v4.app.FragmentActivity.onBackPressed () "," Take care of popping the fragment back stack or finishing the activity as appropriate. <br /><br />"
"android.support.v4.app.FragmentActivity.Fragment () "," Called when a fragment is attached to the activity. <br /><br />"
"android.support.v4.app.FragmentActivity.setRetainInstance (boolean) () "," This method is deprecated. Use the new Fragment API setRetainInstance(boolean) instead; this is also available on older platforms through the Android compatibility package. <br /><br />"
"android.support.v4.app.FragmentActivity.MenuItem () "," Dispatch context and options menu to fragments. <br /><br />"
"android.support.v4.app.FragmentActivity.startPostponedEnterTransition () () "," Support library version of startPostponedEnterTransition() that only works with API 21 and later. <br /><br />"
"android.support.v4.app.FragmentActivity.getSupportLoaderManager () "," Return the LoaderManager for this fragment, creating it if needed. <br /><br />"
"android.support.v4.app.FragmentActivity.onLowMemory () "," Dispatch onLowMemory() to all fragments. <br /><br />"
"android.support.v4.app.FragmentActivity.KeyEvent () "," Take care of calling onBackPressed() for pre-Eclair platforms. <br /><br />"
"android.support.v4.app.FragmentActivity.postponeEnterTransition () () "," Support library version of postponeEnterTransition() that works only on API 21 and later. <br /><br />"
"android.support.v4.app.FragmentActivity.onRetainNonConfigurationInstance () () "," Use this instead of onRetainNonConfigurationInstance(). <br /><br />"
"android.support.v4.app.FragmentActivity.makeSceneTransitionAnimation (Activity, android.view.View, String) () "," When makeSceneTransitionAnimation(Activity, android.view.View, String) was used to start an Activity, listener will be called to handle shared elements on the launching Activity. <br /><br />"
"android.support.v4.app.FragmentActivity.Configuration () "," Dispatch configuration change to all fragments. <br /><br />"
"android.support.v4.app.FragmentActivity.String[] () "," Print the Activity's state into the given stream. <br /><br />"
"android.support.v4.app.FragmentActivity.onRetainCustomNonConfigurationInstance () () "," Return the value previously returned from onRetainCustomNonConfigurationInstance(). <br /><br />"
"android.support.v4.app.FragmentActivity.getSupportFragmentManager () "," Return the FragmentManager for interacting with fragments associated with this activity. <br /><br />"
"android.support.v4.app.FragmentActivity.Menu () "," Dispatch onPrepareOptionsMenu() to fragments. <br /><br />"
"android.support.v4.app.FragmentActivity.invalidateOptionsMenu () () "," Support library version of invalidateOptionsMenu(). <br /><br />"
"android.support.v4.app.FragmentActivity.Intent () "," Called by Fragment.startActivityForResult() to implement its behavior. <br /><br />"
"android.support.v4.app.FragmentManager.BackStackEntry.getBreadCrumbShortTitleRes () "," Return the short bread crumb title resource identifier for the entry, or 0 if it does not have one. <br /><br />"
"android.support.v4.app.FragmentManager.BackStackEntry.getId () "," Return the unique identifier for the entry. <br /><br />"
"android.support.v4.app.FragmentManager.BackStackEntry.getBreadCrumbTitle () "," Return the full bread crumb title for the entry, or null if it does not have one. <br /><br />"
"android.support.v4.app.FragmentManager.BackStackEntry.getBreadCrumbTitleRes () "," Return the full bread crumb title resource identifier for the entry, or 0 if it does not have one. <br /><br />"
"android.support.v4.app.FragmentManager.BackStackEntry.FragmentTransaction.addToBackStack (String) () "," Get the name that was supplied to FragmentTransaction.addToBackStack(String) when creating this entry. <br /><br />"
"android.support.v4.app.FragmentManager.BackStackEntry.getBreadCrumbShortTitle () "," Return the short bread crumb title for the entry, or null if it does not have one. <br /><br />"
"android.support.v4.app.FragmentManager.findFragmentById (int id) "," Finds a fragment that was identified by the given id either when inflated from XML or as the container ID when added in a transaction. <br /><br />"
"android.support.v4.app.FragmentManager.String () "," Pop the last fragment transition from the manager's fragment back stack. <br /><br />"
"android.support.v4.app.FragmentManager.getBackStackEntryCount () "," Return the number of entries currently in the back stack. <br /><br />"
"android.support.v4.app.FragmentManager.putFragment (Bundle, String, Fragment) () "," Retrieve the current Fragment instance for a reference previously placed with putFragment(Bundle, String, Fragment). <br /><br />"
"android.support.v4.app.FragmentManager.Fragment () "," Save the current instance state of the given Fragment. <br /><br />"
"android.support.v4.app.FragmentManager.popBackStack (int, int) (int id, int flags) "," Like popBackStack(int, int), but performs the operation immediately inside of the call. <br /><br />"
"android.support.v4.app.FragmentManager.beginTransaction () "," Start a series of edit operations on the Fragments associated with this FragmentManager. <br /><br />"
"android.support.v4.app.FragmentManager.popBackStack () "," Pop the top state off the back stack. <br /><br />"
"android.support.v4.app.FragmentManager.popBackStack (String, int) () "," Like popBackStack(String, int), but performs the operation immediately inside of the call. <br /><br />"
"android.support.v4.app.FragmentManager.popBackStack (int id, int flags) "," Pop all back stack states up to the one with the given identifier. <br /><br />"
"android.support.v4.app.FragmentManager.addOnBackStackChangedListener (OnBackStackChangedListener) () "," Remove a listener that was previously added with addOnBackStackChangedListener(OnBackStackChangedListener). <br /><br />"
"android.support.v4.app.FragmentManager.enableDebugLogging (boolean enabled) "," Control whether the framework's internal fragment manager debugging logs are turned on. <br /><br />"
"android.support.v4.app.FragmentManager.popBackStack () () "," Like popBackStack(), but performs the operation immediately inside of the call. <br /><br />"
"android.support.v4.app.FragmentManager.FragmentTransaction.commit () () "," After a FragmentTransaction is committed with FragmentTransaction.commit(), it is scheduled to be executed asynchronously on the process's main thread. <br /><br />"
"android.support.v4.app.FragmentManager.Activity.onDestroy () () "," Returns true if the final Activity.onDestroy() call has been made on the FragmentManager's Activity, so this instance is now dead. <br /><br />"
"android.support.v4.app.FragmentManager.FragmentManager.OnBackStackChangedListener () "," Add a new listener for changes to the fragment back stack. <br /><br />"
"android.support.v4.app.FragmentManager.String[] () "," Print the FragmentManager's state into the given stream. <br /><br />"
"android.support.v4.app.FragmentManager.getBackStackEntryAt (int index) "," Return the BackStackEntry at index index in the back stack; entries start index 0 being the bottom of the stack. <br /><br />"
"android.support.v4.app.FragmentManager.OnBackStackChangedListener.onBackStackChanged () "," Called whenever the contents of the back stack change. <br /><br />"
"android.support.v4.app.FragmentPagerAdapter.getItem (int position) "," Return the Fragment associated with a specified position. <br /><br />"
"android.support.v4.app.FragmentPagerAdapter.saveState () "," Save any instance state associated with this adapter and its pages that should be restored if the current UI state needs to be reconstructed. <br /><br />"
"android.support.v4.app.FragmentPagerAdapter.saveState () () "," Restore any instance state associated with this adapter and its pages that was previously saved by saveState(). <br /><br />"
"android.support.v4.app.FragmentPagerAdapter.instantiateItem (ViewGroup, int) () "," Determines whether a page View is associated with a specific key object as returned by instantiateItem(ViewGroup, int). <br /><br />"
"android.support.v4.app.FragmentPagerAdapter.ViewGroup () "," Called when a change in the shown pages is going to start being made. <br /><br />"
"android.support.v4.app.FragmentPagerAdapter.Object () "," Called to inform the adapter of which item is currently considered to be the 'primary', that is the one show to the user as the current page. <br /><br />"
"android.support.v4.app.FragmentPagerAdapter.getItemId (int position) "," Return a unique identifier for the item at the given position. <br /><br />"
"android.support.v4.app.FragmentStatePagerAdapter.getItem (int position) "," Return the Fragment associated with a specified position. <br /><br />"
"android.support.v4.app.FragmentStatePagerAdapter.saveState () "," Save any instance state associated with this adapter and its pages that should be restored if the current UI state needs to be reconstructed. <br /><br />"
"android.support.v4.app.FragmentStatePagerAdapter.saveState () () "," Restore any instance state associated with this adapter and its pages that was previously saved by saveState(). <br /><br />"
"android.support.v4.app.FragmentStatePagerAdapter.instantiateItem (ViewGroup, int) () "," Determines whether a page View is associated with a specific key object as returned by instantiateItem(ViewGroup, int). <br /><br />"
"android.support.v4.app.FragmentStatePagerAdapter.ViewGroup () "," Called when a change in the shown pages is going to start being made. <br /><br />"
"android.support.v4.app.FragmentStatePagerAdapter.Object () "," Called to inform the adapter of which item is currently considered to be the 'primary', that is the one show to the user as the current page. <br /><br />"
"android.support.v4.app.FragmentTabHost.String () "," no description <br /><br />"
"android.support.v4.app.FragmentTabHost.TabHost.OnTabChangeListener () "," Register a callback to be invoked when the selected state of any of the items in this list changes <br /><br />"
"android.support.v4.app.FragmentTabHost.setup (Context, FragmentManager, int) () "," This method is deprecated. Don't call the original TabHost setup, you must instead call setup(Context, FragmentManager) or setup(Context, FragmentManager, int). <br /><br />"
"android.support.v4.app.FragmentTabHost.Bundle () "," no description <br /><br />"
"android.support.v4.app.FragmentTabHost.FragmentManager () "," no description <br /><br />"
"android.support.v4.app.FragmentTransaction.commit () "," Schedules a commit of this transaction. <br /><br />"
"android.support.v4.app.FragmentTransaction.String () "," Replace an existing fragment that was added to a container. <br /><br />"
"android.support.v4.app.FragmentTransaction.setBreadCrumbShortTitle (int res) "," Set the short title to show as a bread crumb when this transaction is on the back stack. <br /><br />"
"android.support.v4.app.FragmentTransaction.setCustomAnimations (int enter, int exit) "," Set specific animation resources to run for the fragments that are entering and exiting in this transaction. <br /><br />"
"android.support.v4.app.FragmentTransaction.addToBackStack (String) () "," Disallow calls to addToBackStack(String). <br /><br />"
"android.support.v4.app.FragmentTransaction.Fragment () "," Shows a previously hidden fragment. <br /><br />"
"android.support.v4.app.FragmentTransaction.setCustomAnimations (int enter, int exit, int popEnter, int popExit) "," Set specific animation resources to run for the fragments that are entering and exiting in this transaction. <br /><br />"
"android.support.v4.app.FragmentTransaction.detach (Fragment) () "," Re-attach a fragment after it had previously been deatched from the UI with detach(Fragment). <br /><br />"
"android.support.v4.app.FragmentTransaction.setBreadCrumbTitle (int res) "," Set the full title to show as a bread crumb when this transaction is on the back stack. <br /><br />"
"android.support.v4.app.FragmentTransaction.setBreadCrumbShortTitle (int) () "," Like setBreadCrumbShortTitle(int) but taking a raw string; this method is not recommended, as the string can not be changed later if the locale changes. <br /><br />"
"android.support.v4.app.FragmentTransaction.setBreadCrumbTitle (int) () "," Like setBreadCrumbTitle(int) but taking a raw string; this method is not recommended, as the string can not be changed later if the locale changes. <br /><br />"
"android.support.v4.app.FragmentTransaction.add (int, Fragment, String) () "," Calls add(int, Fragment, String) with a null tag. <br /><br />"
"android.support.v4.app.FragmentTransaction.isEmpty () "," no description <br /><br />"
"android.support.v4.app.FragmentTransaction.isAddToBackStackAllowed () "," Returns true if this FragmentTransaction is allowed to be added to the back stack. <br /><br />"
"android.support.v4.app.FragmentTransaction.replace (int, Fragment, String) () "," Calls replace(int, Fragment, String) with a null tag. <br /><br />"
"android.support.v4.app.FragmentTransaction.commit () () "," Like commit() but allows the commit to be executed after an activity's state is saved. <br /><br />"
"android.support.v4.app.FragmentTransaction.setTransitionStyle (int styleRes) "," Set a custom style resource that will be used for resolving transit animations. <br /><br />"
"android.support.v4.app.FragmentTransaction.setTransition (int transit) "," Select a standard transition animation for this transaction. <br /><br />"
"android.support.v4.app.ListFragment.ListAdapter () "," Provide the cursor for the list view. <br /><br />"
"android.support.v4.app.ListFragment.getListView () "," Get the activity's list view widget. <br /><br />"
"android.support.v4.app.ListFragment.getSelectedItemPosition () "," Get the position of the currently selected list item. <br /><br />"
"android.support.v4.app.ListFragment.getListAdapter () "," Get the ListAdapter associated with this activity's ListView. <br /><br />"
"android.support.v4.app.ListFragment.setListShown (boolean) (boolean shown) "," Like setListShown(boolean), but no animation is used when transitioning from the previous state. <br /><br />"
"android.support.v4.app.ListFragment.onDestroyView () "," Detach from list view. <br /><br />"
"android.support.v4.app.ListFragment.setListShown (boolean shown) "," Control whether the list is being displayed. <br /><br />"
"android.support.v4.app.ListFragment.CharSequence () "," The default content for a ListFragment has a TextView that can be shown when the list is empty. <br /><br />"
"android.support.v4.app.ListFragment.Bundle () "," Attach to list view once the view hierarchy has been created. <br /><br />"
"android.support.v4.app.ListFragment.getSelectedItemId () "," Get the cursor row ID of the currently selected list item. <br /><br />"
"android.support.v4.app.ListFragment.setSelection (int position) "," Set the currently selected list item to the specified position with the adapter's data <br /><br />"
"android.support.v4.app.ListFragment.View () "," This method will be called when an item in the list is selected. <br /><br />"
"android.support.v4.app.LoaderManager.enableDebugLogging (boolean enabled) "," Control whether the framework's internal loader manager debugging logs are turned on. <br /><br />"
"android.support.v4.app.LoaderManager.Loader () "," Starts a new or restarts an existing Loader in this manager, registers the callbacks to it, and (if the activity/fragment is currently started) starts loading it. <br /><br />"
"android.support.v4.app.LoaderManager.LoaderCallbacks () "," Ensures a loader is initialized and active. <br /><br />"
"android.support.v4.app.LoaderManager.destroyLoader (int id) "," Stops and removes the loader with the given ID. <br /><br />"
"android.support.v4.app.LoaderManager.hasRunningLoaders () "," Returns true if any loaders managed are currently running and have not returned data to the application yet. <br /><br />"
"android.support.v4.app.LoaderManager.String[] () "," Print the LoaderManager's state into the given stream. <br /><br />"
"android.support.v4.app.LoaderManager.getLoader (int id) "," Return the Loader with the given id or null if no matching Loader is found. <br /><br />"
"android.support.v4.app.LoaderManager.LoaderCallbacks&lt;D&gt;.Loader () "," Called when a previously created loader is being reset, and thus making its data unavailable. <br /><br />"
"android.support.v4.app.LoaderManager.LoaderCallbacks&lt;D&gt;.Bundle () "," Instantiate and return a new Loader for the given ID. <br /><br />"
"android.support.v4.app.NavUtils.getParentActivityIntent () "," Convenience method that is equivalent to calling navigateUpTo(sourceActivity, getParentActivityIntent (sourceActivity)). <br /><br />"
"android.support.v4.app.NavUtils.PARENT_ACTIVITY () "," Return the fully qualified class name of a source activity's parent activity as specified by a PARENT_ACTIVITY &lt;meta-data&gt; element within the activity element in the application's manifest. <br /><br />"
"android.support.v4.app.NavUtils.Intent () "," Returns true if sourceActivity should recreate the task when navigating 'up' by using targetIntent. <br /><br />"
"android.support.v4.app.NotificationCompat.Action.Builder.getExtras () "," Get the metadata Bundle used by this Builder. <br /><br />"
"android.support.v4.app.NotificationCompat.Action.Builder.NotificationCompat.Action () "," Combine all of the options that have been set and return a new NotificationCompat.Action object. <br /><br />"
"android.support.v4.app.NotificationCompat.Action.Builder.RemoteInput () "," Add an input to be collected from the user when this action is sent. <br /><br />"
"android.support.v4.app.NotificationCompat.Action.Builder.Bundle () "," Merge additional metadata into this builder. <br /><br />"
"android.support.v4.app.NotificationCompat.Action.Builder.NotificationCompat.Action.Extender () "," Apply an extender to this action builder. <br /><br />"
"android.support.v4.app.NotificationCompat.Action.Extender.NotificationCompat.Action.Builder () "," Apply this extender to a notification action builder. <br /><br />"
"android.support.v4.app.NotificationCompat.Action.getExtras () "," Get additional metadata carried around with this Action. <br /><br />"
"android.support.v4.app.NotificationCompat.Action.getRemoteInputs () "," Get the list of inputs to be collected from the user when this action is sent. <br /><br />"
"android.support.v4.app.NotificationCompat.Action.WearableExtender.setAvailableOffline (boolean availableOffline) "," Set whether this action is available when the wearable device is not connected to a companion device. <br /><br />"
"android.support.v4.app.NotificationCompat.Action.WearableExtender.getInProgressLabel () "," Get the label to display while the wearable is preparing to automatically execute the action. <br /><br />"
"android.support.v4.app.NotificationCompat.Action.WearableExtender.getCancelLabel () "," Get the label to display to cancel the action. <br /><br />"
"android.support.v4.app.NotificationCompat.Action.WearableExtender.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.support.v4.app.NotificationCompat.Action.WearableExtender.getConfirmLabel () "," Get the label to display to confirm that the action should be executed. <br /><br />"
"android.support.v4.app.NotificationCompat.Action.WearableExtender.CharSequence () "," Set a label to display while the wearable is preparing to automatically execute the action. <br /><br />"
"android.support.v4.app.NotificationCompat.Action.WearableExtender.NotificationCompat.Action.Builder () "," Apply wearable extensions to a notification action that is being built. <br /><br />"
"android.support.v4.app.NotificationCompat.Action.WearableExtender.isAvailableOffline () "," Get whether this action is available when the wearable device is not connected to a companion device. <br /><br />"
"android.support.v4.app.NotificationCompat.BigPictureStyle.CharSequence () "," Set the first line of text after the detail section in the big form of the template. <br /><br />"
"android.support.v4.app.NotificationCompat.BigPictureStyle.Bitmap () "," Provide the bitmap to be used as the payload for the BigPicture notification. <br /><br />"
"android.support.v4.app.NotificationCompat.BigTextStyle.CharSequence () "," Set the first line of text after the detail section in the big form of the template. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.NotificationCompat.Action () "," Add an action to this notification. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.setVibrate (long[] pattern) "," Set the vibration pattern to use. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.setNumber (int number) "," Set the large number at the right-hand side of the notification. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.RemoteViews () "," Set the text that is displayed in the status bar when the notification first arrives, and also a RemoteViews object that may be displayed instead on some devices. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.color (int argb) "," Sets color. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.setOnlyAlertOnce (boolean onlyAlertOnce) "," Set this flag if you would only like the sound, vibrate and ticker to be played if the notification is not already showing. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.setDefaults (int defaults) "," Set the default notification options that will be used. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.setAutoCancel (boolean autoCancel) "," Setting this flag will make it so the notification is automatically canceled when the user clicks it in the panel. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.ProgressBar (int max, int progress, boolean indeterminate) "," Set the progress this notification represents, which may be represented as a ProgressBar. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.setWhen (long when) "," Set the time that the event occurred. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.setPriority (int pri) "," Set the relative priority for this notification. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.visibility (int visibility) "," Sets visibility. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.Uri () "," Set the sound to play. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.String () "," Set a sort key that orders this notification among other notifications from the same package. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.setLights (int argb, int onMs, int offMs) "," Set the argb value that you would like the LED on the device to blnk, as well as the rate. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.setLocalOnly (boolean b) "," Set whether or not this notification is only relevant to the current device. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.CharSequence () "," Set the text that is displayed in the status bar when the notification first arrives. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.setGroupSummary (boolean isGroupSummary) "," Set this notification to be the group summary for a group of notifications. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.setWhen (boolean show) "," Control whether the timestamp set with setWhen is shown in the content view. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.getExtras () "," Get the current metadata Bundle used by this notification Builder. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.Notification () "," Supply a replacement Notification whose contents should be shown in insecure contexts (i.e. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.when (boolean b) "," Show the when field as a stopwatch. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.build () () "," This method is deprecated. Use build() instead. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.LevelListDrawable (int icon, int level) "," A variant of setSmallIcon(int) that takes an additional level parameter for when the icon is a LevelListDrawable. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.setSmallIcon (int icon) "," Set the small icon to use in the notification layouts. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.NotificationCompat.Extender () "," Apply an extender to this notification builder. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.Bundle () "," Set metadata for this notification. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.NotificationCompat.Style () "," Add a rich notification style to be applied at build time. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.PendingIntent () "," An intent to launch instead of posting the notification to the status bar. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.Bitmap () "," Set the large icon that is shown in the ticker and notification. <br /><br />"
"android.support.v4.app.NotificationCompat.Builder.setOngoing (boolean ongoing) "," Set whether this is an ongoing notification. <br /><br />"
"android.support.v4.app.NotificationCompat.CarExtender.NotificationCompat.Builder () "," Apply car extensions to a notification that is being built. <br /><br />"
"android.support.v4.app.NotificationCompat.CarExtender.NotificationCompat.CarExtender.UnreadConversation () "," Sets the unread conversation in a message notification. <br /><br />"
"android.support.v4.app.NotificationCompat.CarExtender.getColor () "," Gets the accent color. <br /><br />"
"android.support.v4.app.NotificationCompat.CarExtender.setColor (int color) "," Sets the accent color to use when Android Auto presents the notification. <br /><br />"
"android.support.v4.app.NotificationCompat.CarExtender.getLargeIcon () "," Gets the large icon used in this car notification, or null if no icon has been set. <br /><br />"
"android.support.v4.app.NotificationCompat.CarExtender.getUnreadConversation () "," Returns the unread conversation conveyed by this notification. <br /><br />"
"android.support.v4.app.NotificationCompat.CarExtender.Bitmap () "," Sets the large icon of the car notification. <br /><br />"
"android.support.v4.app.NotificationCompat.CarExtender.UnreadConversation.Builder.RemoteInput () "," Sets the pending intent and remote input which will convey the reply to this notification. <br /><br />"
"android.support.v4.app.NotificationCompat.CarExtender.UnreadConversation.Builder.setLatestTimestamp (long timestamp) "," Sets the timestamp of the most recent message in an unread conversation. <br /><br />"
"android.support.v4.app.NotificationCompat.CarExtender.UnreadConversation.Builder.String () "," Appends a new unread message to the list of messages for this conversation. <br /><br />"
"android.support.v4.app.NotificationCompat.CarExtender.UnreadConversation.Builder.build () "," Builds a new unread conversation object. <br /><br />"
"android.support.v4.app.NotificationCompat.CarExtender.UnreadConversation.Builder.PendingIntent () "," Sets the pending intent that will be sent once the messages in this notification are read. <br /><br />"
"android.support.v4.app.NotificationCompat.Extender.NotificationCompat.Builder () "," Apply this extender to a notification builder. <br /><br />"
"android.support.v4.app.NotificationCompat.Notification () "," Get whether this notification to be the group summary for a group of notifications. <br /><br />"
"android.support.v4.app.NotificationCompat.extras () "," Gets the extras field from a notification in a backwards compatible manner. <br /><br />"
"android.support.v4.app.NotificationCompat.InboxStyle.CharSequence () "," Set the first line of text after the detail section in the big form of the template. <br /><br />"
"android.support.v4.app.NotificationCompat.Style.NotificationCompat.Builder () "," no description <br /><br />"
"android.support.v4.app.NotificationCompat.Style.build () "," no description <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.getContentIcon () "," Get an icon that goes with the content of this notification. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.NotificationCompat.Action () "," Adds wearable actions to this notification. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.setContentIconGravity (int contentIconGravity) "," Set the gravity that the content icon should have within the notification display. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.getStartScrollBottom () "," Get whether the scrolling position for the contents of this notification should start at the bottom of the contents instead of the top when the contents are too long to display within the screen. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.setContentAction (int actionIndex) "," Set an action from this notification's actions to be clickable with the content of this notification. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.setHintScreenTimeout (int timeout) "," Set a hint that the screen should remain on for at least this duration when this notification is displayed on the screen. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.getContentIntentAvailableOffline () "," Get whether the content intent is available when the wearable device is not connected to a companion device. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.setStartScrollBottom (boolean startScrollBottom) "," Set whether the scrolling position for the contents of this notification should start at the bottom of the contents instead of the top when the contents are too long to display within the screen. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.setCustomContentHeight (int height) "," Set the custom height in pixels for the display of this notification's content. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.setHintHideIcon (boolean hintHideIcon) "," Set a hint that this notification's icon should not be displayed. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.getHintShowBackgroundOnly () "," Get a visual hint that only the background image of this notification should be displayed, and other semantic content should be hidden. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.setGravity (int gravity) "," Set the gravity that this notification should have within the available viewport space. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.getCustomContentHeight () "," Get the custom height in pixels for the display of this notification's content. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.NotificationCompat.Builder () "," Apply wearable extensions to a notification that is being built. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.getHintAvoidBackgroundClipping () "," Get a hint that this notification's background should not be clipped if possible, and should instead be resized to fully display on the screen, retaining the aspect ratio of the image. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.getDisplayIntent () "," Get the intent to launch inside of an activity view when displaying this notification. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.getHintScreenTimeout () "," Get the duration, in milliseconds, that the screen should remain on for when this notification is displayed. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.setContentIntentAvailableOffline (boolean contentIntentAvailableOffline) "," Set whether the content intent is available when the wearable device is not connected to a companion device. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.clearPages () "," Clear all additional pages present on this builder. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.setContentIcon (int icon) "," Set an icon that goes with the content of this notification. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.getContentAction () "," Get the index of the notification action, if any, that was specified as being clickable with the content of this notification. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.NotificationCompat.WearableExtender (int sizePreset) "," Set the custom size preset for the display of this notification out of the available presets found in NotificationCompat.WearableExtender, e.g. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.getPages () "," Get the array of additional pages of content for displaying this notification. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.setHintShowBackgroundOnly (boolean hintShowBackgroundOnly) "," Set a visual hint that only the background image of this notification should be displayed, and other semantic content should be hidden. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.Notification () "," Add additional pages of content to display with this notification. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.setHintAvoidBackgroundClipping (boolean hintAvoidBackgroundClipping) "," Set a hint that this notification's background should not be clipped if possible, and should instead be resized to fully display on the screen, retaining the aspect ratio of the image. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.getContentIconGravity () "," Get the gravity that the content icon should have within the notification display. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.getGravity () "," Get the gravity that this notification should have within the available viewport space. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.NotificationCompat.WearableExtender () "," Get the custom size preset for the display of this notification out of the available presets found in NotificationCompat.WearableExtender, e.g. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.getActions () "," Get the wearable actions present on this notification. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.getHintHideIcon () "," Get a hint that this notification's icon should not be displayed. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.getBackground () "," Get a background image to be displayed behind the notification content. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.PendingIntent () "," Set an intent to launch inside of an activity view when displaying this notification. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.clearActions () "," Clear all wearable actions present on this builder. <br /><br />"
"android.support.v4.app.NotificationCompat.WearableExtender.Bitmap () "," Set a background image to be displayed behind the notification content. <br /><br />"
"android.support.v4.app.NotificationCompatSideChannelService.Notification () "," Handle a side-channeled notification being posted. <br /><br />"
"android.support.v4.app.NotificationCompatSideChannelService.String () "," Handle the side-channelled cancelling of all notifications for a package. <br /><br />"
"android.support.v4.app.NotificationCompatSideChannelService.Intent () "," Return the communication channel to the service. <br /><br />"
"android.support.v4.app.NotificationManagerCompat.Notification () "," Post a notification to be shown in the status bar, stream, etc. <br /><br />"
"android.support.v4.app.NotificationManagerCompat.Context () "," Get the set of packages that have an enabled notification listener component within them. <br /><br />"
"android.support.v4.app.NotificationManagerCompat.String () "," Cancel a previously shown notification. <br /><br />"
"android.support.v4.app.NotificationManagerCompat.NotificationManagerCompat () "," Get a NotificationManagerCompat instance for a provided context. <br /><br />"
"android.support.v4.app.NotificationManagerCompat.cancel (int id) "," Cancel a previously shown notification. <br /><br />"
"android.support.v4.app.NotificationManagerCompat.cancelAll () "," Cancel all previously shown notifications. <br /><br />"
"android.support.v4.app.RemoteInput.Builder.getExtras () "," Get the metadata Bundle used by this Builder. <br /><br />"
"android.support.v4.app.RemoteInput.Builder.RemoteInput () "," Combine all of the options that have been set and return a new RemoteInput object. <br /><br />"
"android.support.v4.app.RemoteInput.Builder.CharSequence[] () "," Specifies choices available to the user to satisfy this input. <br /><br />"
"android.support.v4.app.RemoteInput.Builder.CharSequence () "," Set a label to be displayed to the user when collecting this input. <br /><br />"
"android.support.v4.app.RemoteInput.Builder.Bundle () "," Merge additional metadata into this builder. <br /><br />"
"android.support.v4.app.RemoteInput.Builder.setAllowFreeFormInput (boolean allowFreeFormInput) "," Specifies whether the user can provide arbitrary values. <br /><br />"
"android.support.v4.app.RemoteInput.getExtras () "," Get additional metadata carried around with this remote input. <br /><br />"
"android.support.v4.app.RemoteInput.getLabel () "," Get the label to display to users when collecting this input. <br /><br />"
"android.support.v4.app.RemoteInput.getAllowFreeFormInput () "," Get whether or not users can provide an arbitrary value for input. <br /><br />"
"android.support.v4.app.RemoteInput.Bundle () "," Populate an intent object with the results gathered from remote input. <br /><br />"
"android.support.v4.app.RemoteInput.Intent () "," Get the remote input results bundle from an intent. <br /><br />"
"android.support.v4.app.RemoteInput.PendingIntent () "," Get the key that the result of this input will be set in from the Bundle returned by getResultsFromIntent(Intent) when the PendingIntent is sent. <br /><br />"
"android.support.v4.app.RemoteInput.getChoices () "," Get possible input choices. <br /><br />"
"android.support.v4.app.ShareCompat.ShareCompat.IntentBuilder () "," Configure a menu item to act as a sharing action. <br /><br />"
"android.support.v4.app.ShareCompat.Activity () "," Retrieve the name of the package that launched calledActivity from a share intent. <br /><br />"
"android.support.v4.app.ShareCompat.MenuItem () "," Configure a MenuItem to act as a sharing action. <br /><br />"
"android.support.v4.app.ShareCompat.IntentBuilder.Uri () "," Set a stream URI to the data that should be shared. <br /><br />"
"android.support.v4.app.ShareCompat.IntentBuilder.String () "," Set the type of data being shared <br /><br />"
"android.support.v4.app.ShareCompat.IntentBuilder.getIntent () "," Retrieve the Intent as configured so far by the IntentBuilder. <br /><br />"
"android.support.v4.app.ShareCompat.IntentBuilder.setChooserTitle (int resId) "," Set the title that will be used for the activity chooser for this share. <br /><br />"
"android.support.v4.app.ShareCompat.IntentBuilder.startChooser () "," Start a chooser activity for the current share intent. <br /><br />"
"android.support.v4.app.ShareCompat.IntentBuilder.CharSequence () "," Set the literal text data to be sent as part of the share. <br /><br />"
"android.support.v4.app.ShareCompat.IntentBuilder.String[] () "," Set an array of email addresses as recipients of this share. <br /><br />"
"android.support.v4.app.ShareCompat.IntentBuilder.Activity () "," Create a new IntentBuilder for launching a sharing action from launchingActivity. <br /><br />"
"android.support.v4.app.ShareCompat.IntentBuilder.createChooserIntent () "," Create an Intent that will launch the standard Android activity chooser, allowing the user to pick what activity/app on the system should handle the share. <br /><br />"
"android.support.v4.app.ShareCompat.IntentReader.getCallingApplicationIcon () "," Get the icon of the calling application as a Drawable if data about the calling package is available. <br /><br />"
"android.support.v4.app.ShareCompat.IntentReader.getEmailCc () "," Get an array of Strings, each an email address to CC on this share. <br /><br />"
"android.support.v4.app.ShareCompat.IntentReader.ACTION_SEND_MULTIPLE () "," Returns true if the activity this reader was obtained for was started with an ACTION_SEND or ACTION_SEND_MULTIPLE sharing Intent. <br /><br />"
"android.support.v4.app.ShareCompat.IntentReader.getType () "," Get the mimetype of the data shared to this activity. <br /><br />"
"android.support.v4.app.ShareCompat.IntentReader.ComponentName () "," Get the ComponentName of the Activity that invoked this sharing intent. <br /><br />"
"android.support.v4.app.ShareCompat.IntentReader.getStreamCount () "," Return the number of stream items shared. <br /><br />"
"android.support.v4.app.ShareCompat.IntentReader.getHtmlText () "," Get the styled HTML text shared with the target activity. <br /><br />"
"android.support.v4.app.ShareCompat.IntentReader.getStream () "," Get a URI referring to a data stream shared with the target activity. <br /><br />"
"android.support.v4.app.ShareCompat.IntentReader.Activity () "," Get an IntentReader for parsing and interpreting the sharing intent used to start the given activity. <br /><br />"
"android.support.v4.app.ShareCompat.IntentReader.getSubject () "," Get a subject heading for this share; useful when sharing via email. <br /><br />"
"android.support.v4.app.ShareCompat.IntentReader.getText () "," Get the literal text shared with the target activity. <br /><br />"
"android.support.v4.app.ShareCompat.IntentReader.getCallingPackage () "," Get the name of the package that invoked this sharing intent. <br /><br />"
"android.support.v4.app.ShareCompat.IntentReader.ACTION_SEND () "," Returns true if the activity this reader was obtained for was started with an ACTION_SEND intent and contains a single shared item. <br /><br />"
"android.support.v4.app.ShareCompat.IntentReader.getEmailBcc () "," Get an array of Strings, each an email address to BCC on this share. <br /><br />"
"android.support.v4.app.ShareCompat.IntentReader.getEmailTo () "," Get an array of Strings, each an email address to share to. <br /><br />"
"android.support.v4.app.ShareCompat.IntentReader.getStream (int index) "," Get the URI of a stream item shared with the target activity. <br /><br />"
"android.support.v4.app.ShareCompat.IntentReader.getCallingApplicationLabel () "," Get the human-readable label (title) of the calling application if data about the calling package is available. <br /><br />"
"android.support.v4.app.ShareCompat.IntentReader.getCallingActivityIcon () "," Get the icon of the calling activity as a Drawable if data about the calling activity is available. <br /><br />"
"android.support.v4.app.SharedElementCallback.onMapSharedElements (java.util.List, java.util.Map) () "," Called after onMapSharedElements(java.util.List, java.util.Map) when transferring shared elements in. <br /><br />"
"android.support.v4.app.SharedElementCallback.onSharedElementEnd (java.util.List, java.util.List, java.util.List) () "," Reconstitutes a snapshot View from a Parcelable returned in onCaptureSharedElementSnapshot(android.view.View, android.graphics.Matrix, android.graphics.RectF) to be used in onSharedElementStart(java.util.List, java.util.List, java.util.List) and onSharedElementEnd(java.util.List, java.util.List, java.util.List). <br /><br />"
"android.support.v4.app.SharedElementCallback.onCreateSnapshotView (android.content.Context, android.os.Parcelable) () "," Creates a snapshot of a shared element to be used by the remote Activity and reconstituted with onCreateSnapshotView(android.content.Context, android.os.Parcelable). <br /><br />"
"android.support.v4.app.SharedElementCallback.View () "," Called immediately after the start state is set for the shared element. <br /><br />"
"android.support.v4.app.TaskStackBuilder.SupportParentable.getSupportParentActivityIntent () "," no description <br /><br />"
"android.support.v4.content.AsyncTaskLoader&lt;D&gt;.cancelLoad () "," Attempt to cancel the current load task. <br /><br />"
"android.support.v4.content.AsyncTaskLoader&lt;D&gt;.setUpdateThrottle (long delayMS) "," Set amount to throttle updates by. <br /><br />"
"android.support.v4.content.AsyncTaskLoader&lt;D&gt;.onCanceled (D data) "," Called if the task was canceled before it was completed. <br /><br />"
"android.support.v4.content.AsyncTaskLoader&lt;D&gt;.String[] () "," Print the Loader's state into the given stream. <br /><br />"
"android.support.v4.content.AsyncTaskLoader&lt;D&gt;.loadInBackground () "," no description <br /><br />"
"android.support.v4.content.ContextCompat.String () "," Returns absolute paths to application-specific directories on all external storage devices where the application can place persistent files it owns. <br /><br />"
"android.support.v4.content.ContextCompat.Context () "," Returns absolute paths to application-specific directories on all external storage devices where the application's OBB files (if there are any) can be found. <br /><br />"
"android.support.v4.content.ContextCompat.Bundle () "," Start a set of activities as a synthesized task stack, if able. <br /><br />"
"android.support.v4.content.ContextCompat.getFilesDir () () "," Returns the absolute path to the directory on the filesystem similar to getFilesDir(). <br /><br />"
"android.support.v4.content.ContextCompat.Intent[] () "," Start a set of activities as a synthesized task stack, if able. <br /><br />"
"android.support.v4.content.CursorLoader.Uri () "," no description <br /><br />"
"android.support.v4.content.CursorLoader.String () "," no description <br /><br />"
"android.support.v4.content.CursorLoader.Cursor () "," Called if the task was canceled before it was completed. <br /><br />"
"android.support.v4.content.CursorLoader.getSelectionArgs () "," no description <br /><br />"
"android.support.v4.content.CursorLoader.getSelection () "," no description <br /><br />"
"android.support.v4.content.CursorLoader.String[] () "," no description <br /><br />"
"android.support.v4.content.CursorLoader.loadInBackground () "," no description <br /><br />"
"android.support.v4.content.CursorLoader.getProjection () "," no description <br /><br />"
"android.support.v4.content.CursorLoader.getUri () "," no description <br /><br />"
"android.support.v4.content.CursorLoader.getSortOrder () "," no description <br /><br />"
"android.support.v4.content.FileProvider.Uri () "," By default, FileProvider automatically returns the ParcelFileDescriptor for a file associated with a content:// Uri. <br /><br />"
"android.support.v4.content.FileProvider.ProviderInfo () "," After the FileProvider is instantiated, this method is called to provide the system with information about the provider. <br /><br />"
"android.support.v4.content.FileProvider.onCreate () "," The default FileProvider implementation does not need to be initialized. <br /><br />"
"android.support.v4.content.FileProvider.getUriForFile () () "," Use a content URI returned by getUriForFile() to get information about a file managed by the FileProvider. <br /><br />"
"android.support.v4.content.FileProvider.UnsupportedOperationException () "," By default, this method throws an UnsupportedOperationException. <br /><br />"
"android.support.v4.content.FileProvider.File () "," Return a content URI for a given File. <br /><br />"
"android.support.v4.content.IntentCompat.String () "," Make an Intent for the main activity of an application, without specifying a specific activity to run but giving a selector to find the activity. <br /><br />"
"android.support.v4.content.IntentCompat.ComponentName () "," Make an Intent that can be used to re-launch an application's task in its base state. <br /><br />"
"android.support.v4.content.Loader.ForceLoadContentObserver.deliverSelfNotifications () "," Returns true if this observer is interested receiving self-change notifications. <br /><br />"
"android.support.v4.content.Loader.ForceLoadContentObserver.onChange (boolean selfChange) "," This method is called when a content change occurs. <br /><br />"
"android.support.v4.content.Loader&lt;D&gt;.isStarted () "," Return whether this load has been started. <br /><br />"
"android.support.v4.content.Loader&lt;D&gt;.OnLoadCompleteListener () "," Remove a listener that was previously added with registerListener(int, Loader.OnLoadCompleteListener  ) . <br /><br />"
"android.support.v4.content.Loader&lt;D&gt;.deliverResult (D data) "," Sends the result of the load to the registered listener. <br /><br />"
"android.support.v4.content.Loader&lt;D&gt;.isAbandoned () "," Return whether this loader has been abandoned. <br /><br />"
"android.support.v4.content.Loader&lt;D&gt;.isReset () "," Return whether this load has been reset. <br /><br />"
"android.support.v4.content.Loader&lt;D&gt;.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.support.v4.content.Loader&lt;D&gt;.takeContentChanged () () "," Report that you have abandoned the processing of a content change that was returned by takeContentChanged() and would like to rollback to the state where there is again a pending content change. <br /><br />"
"android.support.v4.content.Loader&lt;D&gt;.dataToString (D data) "," For debugging, converts an instance of the Loader's data class to a string that can be printed. <br /><br />"
"android.support.v4.content.Loader&lt;D&gt;.takeContentChanged () "," Take the current flag indicating whether the loader's content had changed while it was stopped. <br /><br />"
"android.support.v4.content.Loader&lt;D&gt;.abandon () "," Tell the Loader that it is being abandoned. <br /><br />"
"android.support.v4.content.Loader&lt;D&gt;.getId () "," no description <br /><br />"
"android.support.v4.content.Loader&lt;D&gt;.forceLoad () "," Force an asynchronous load. <br /><br />"
"android.support.v4.content.Loader&lt;D&gt;.Loader.ForceLoadContentObserver () "," Called when Loader.ForceLoadContentObserver detects a change. <br /><br />"
"android.support.v4.content.Loader&lt;D&gt;.startLoading () () "," Stops delivery of updates until the next time startLoading() is called. <br /><br />"
"android.support.v4.content.Loader&lt;D&gt;.String[] () "," Print the Loader's state into the given stream. <br /><br />"
"android.support.v4.content.Loader&lt;D&gt;.reset () "," Resets the state of the Loader. <br /><br />"
"android.support.v4.content.Loader&lt;D&gt;.startLoading () "," Starts an asynchronous load of the Loader's data. <br /><br />"
"android.support.v4.content.Loader&lt;D&gt;.getContext () "," no description <br /><br />"
"android.support.v4.content.Loader.OnLoadCompleteListener&lt;D&gt;.Loader () "," Called on the thread that created the Loader when the load is complete. <br /><br />"
"android.support.v4.content.LocalBroadcastManager.Context () "," no description <br /><br />"
"android.support.v4.content.LocalBroadcastManager.sendBroadcast (Intent) () "," Like sendBroadcast(Intent), but if there are any receivers for the Intent this function will block and immediately dispatch them before returning. <br /><br />"
"android.support.v4.content.LocalBroadcastManager.IntentFilter () "," Register a receive for any local broadcasts that match the given IntentFilter. <br /><br />"
"android.support.v4.content.LocalBroadcastManager.BroadcastReceiver () "," Unregister a previously registered BroadcastReceiver. <br /><br />"
"android.support.v4.content.LocalBroadcastManager.Intent () "," Broadcast the given intent to all interested BroadcastReceivers. <br /><br />"
"android.support.v4.content.res.ResourcesCompat.Resources.Theme () "," Return a drawable object associated with a particular resource ID for the given screen density in DPI and styled for the specified theme. <br /><br />"
"android.support.v4.content.WakefulBroadcastReceiver.Context.startService () "," Do a Context.startService, but holding a wake lock while the service starts. <br /><br />"
"android.support.v4.content.WakefulBroadcastReceiver.startWakefulService (Context, Intent) () "," Finish the execution from a previous startWakefulService(Context, Intent). <br /><br />"
"android.support.v4.database.DatabaseUtilsCompat.String () "," Concatenates two SQL WHERE clauses, handling empty or null values. <br /><br />"
"android.support.v4.database.DatabaseUtilsCompat.String[] () "," Appends one set of selection args to another. <br /><br />"
"android.support.v4.graphics.BitmapCompat.Bitmap () "," no description <br /><br />"
"android.support.v4.graphics.ColorUtils.compositeColors (int foreground, int background) "," Composite two potentially translucent colors over each other and returns the result. <br /><br />"
"android.support.v4.graphics.ColorUtils.setAlphaComponent (int color, int alpha) "," Set the alpha component of color to be alpha. <br /><br />"
"android.support.v4.graphics.ColorUtils.HSLToColor (float[] hsl) "," Convert HSL (hue-saturation-lightness) components to a RGB color. <br /><br />"
"android.support.v4.graphics.ColorUtils.RGBToHSL (int r, int g, int b, float[] hsl) "," Convert RGB components to HSL (hue-saturation-lightness). <br /><br />"
"android.support.v4.graphics.ColorUtils.colorToHSL (int color, float[] hsl) "," Convert the ARGB color to its HSL (hue-saturation-lightness) components. <br /><br />"
"android.support.v4.graphics.ColorUtils.calculateMinimumAlpha (int foreground, int background, float minContrastRatio) "," Calculates the minimum alpha value which can be applied to foreground so that would have a contrast value of at least minContrastRatio when compared to background. <br /><br />"
"android.support.v4.graphics.ColorUtils.calculateLuminance (int color) "," Returns the luminance of a color. <br /><br />"
"android.support.v4.graphics.ColorUtils.calculateContrast (int foreground, int background) "," Returns the contrast ratio between foreground and background. <br /><br />"
"android.support.v4.graphics.drawable.DrawableCompat.ColorStateList () "," Specifies a tint for drawable as a color state list. <br /><br />"
"android.support.v4.graphics.drawable.DrawableCompat.PorterDuff.Mode () "," Specifies a tint blending mode for drawable. <br /><br />"
"android.support.v4.graphics.drawable.DrawableCompat.Drawable () "," Potentially wrap drawable so that it may be used for tinting across the different API levels, via the tinting methods in this class. <br /><br />"
"android.support.v4.graphics.drawable.DrawableCompat.wrap (Drawable) () "," Unwrap drawable if it is the result of a call to wrap(Drawable). <br /><br />"
"android.support.v4.graphics.drawable.DrawableCompat.Drawable.jumpToCurrentState () () "," Call Drawable.jumpToCurrentState(). <br /><br />"
"android.support.v4.graphics.drawable.RoundedBitmapDrawable.setAntiAlias (boolean aa) "," Enables or disables anti-aliasing for this drawable. <br /><br />"
"android.support.v4.graphics.drawable.RoundedBitmapDrawable.getOpacity () "," Return the opacity/transparency of this Drawable. <br /><br />"
"android.support.v4.graphics.drawable.RoundedBitmapDrawable.getIntrinsicWidth () "," Return the intrinsic width of the underlying drawable object. <br /><br />"
"android.support.v4.graphics.drawable.RoundedBitmapDrawable.setAlpha (int alpha) "," Specify an alpha value for the drawable. <br /><br />"
"android.support.v4.graphics.drawable.RoundedBitmapDrawable.setTargetDensity (int density) "," Set the density at which this drawable will be rendered. <br /><br />"
"android.support.v4.graphics.drawable.RoundedBitmapDrawable.Canvas () "," Set the density scale at which this drawable will be rendered. <br /><br />"
"android.support.v4.graphics.drawable.RoundedBitmapDrawable.setCornerRadius (float cornerRadius) "," Sets the corner radius to be applied when drawing the bitmap. <br /><br />"
"android.support.v4.graphics.drawable.RoundedBitmapDrawable.getIntrinsicHeight () "," Return the intrinsic height of the underlying drawable object. <br /><br />"
"android.support.v4.graphics.drawable.RoundedBitmapDrawable.hasMipMap () "," Indicates whether the mipmap hint is enabled on this drawable's bitmap. <br /><br />"
"android.support.v4.graphics.drawable.RoundedBitmapDrawable.getBitmap () "," Returns the bitmap used by this drawable to render. <br /><br />"
"android.support.v4.graphics.drawable.RoundedBitmapDrawable.getCornerRadius () "," no description <br /><br />"
"android.support.v4.graphics.drawable.RoundedBitmapDrawable.getPaint () "," Returns the paint used to render this drawable. <br /><br />"
"android.support.v4.graphics.drawable.RoundedBitmapDrawable.hasAntiAlias () "," Indicates whether anti-aliasing is enabled for this drawable. <br /><br />"
"android.support.v4.graphics.drawable.RoundedBitmapDrawable.setDither (boolean dither) "," Set to true to have the drawable dither its colors when drawn to a device with fewer than 8-bits per color component. <br /><br />"
"android.support.v4.graphics.drawable.RoundedBitmapDrawable.setGravity (int gravity) "," Set the gravity used to position/stretch the bitmap within its bounds. <br /><br />"
"android.support.v4.graphics.drawable.RoundedBitmapDrawable.setFilterBitmap (boolean filter) "," Set to true to have the drawable filter its bitmap when scaled or rotated (for drawables that use bitmaps). <br /><br />"
"android.support.v4.graphics.drawable.RoundedBitmapDrawable.setMipMap (boolean mipMap) "," Enables or disables the mipmap hint for this drawable's bitmap. <br /><br />"
"android.support.v4.graphics.drawable.RoundedBitmapDrawable.getGravity () "," Get the gravity used to position/stretch the bitmap within its bounds. <br /><br />"
"android.support.v4.graphics.drawable.RoundedBitmapDrawable.ColorFilter () "," Specify an optional color filter for the drawable. <br /><br />"
"android.support.v4.graphics.drawable.RoundedBitmapDrawable.getColorFilter () "," Returns the current color filter, or null if none set. <br /><br />"
"android.support.v4.graphics.drawable.RoundedBitmapDrawable.DisplayMetrics () "," Set the density scale at which this drawable will be rendered. <br /><br />"
"android.support.v4.graphics.drawable.RoundedBitmapDrawable.getAlpha () "," Gets the current alpha value for the drawable. <br /><br />"
"android.support.v4.graphics.drawable.RoundedBitmapDrawableFactory.String () "," Returns a new drawable, creating it by opening a given file path and decoding the bitmap. <br /><br />"
"android.support.v4.graphics.drawable.RoundedBitmapDrawableFactory.InputStream () "," Returns a new drawable, creating it by decoding a bitmap from the given input stream. <br /><br />"
"android.support.v4.graphics.drawable.RoundedBitmapDrawableFactory.Bitmap () "," Returns a new drawable by creating it from a bitmap, setting initial target density based on the display metrics of the resources. <br /><br />"
"android.support.v4.hardware.display.DisplayManagerCompat.getDisplays () "," Gets all currently valid logical displays. <br /><br />"
"android.support.v4.hardware.display.DisplayManagerCompat.Context () "," Gets an instance of the display manager given the context. <br /><br />"
"android.support.v4.hardware.display.DisplayManagerCompat.String () "," Gets all currently valid logical displays of the specified category. <br /><br />"
"android.support.v4.hardware.display.DisplayManagerCompat.getDisplay (int displayId) "," Gets information about a logical display. <br /><br />"
"android.support.v4.media.MediaDescriptionCompat.Builder.Uri () "," Sets the icon uri. <br /><br />"
"android.support.v4.media.MediaDescriptionCompat.Builder.String () "," Sets the media id. <br /><br />"
"android.support.v4.media.MediaDescriptionCompat.Builder.MediaDescriptionCompat () "," Creates a MediaDescriptionCompat instance with the specified fields. <br /><br />"
"android.support.v4.media.MediaDescriptionCompat.Builder.CharSequence () "," Sets the title. <br /><br />"
"android.support.v4.media.MediaDescriptionCompat.Builder.Bundle () "," Sets a bundle of extras. <br /><br />"
"android.support.v4.media.MediaDescriptionCompat.Builder.Bitmap () "," Sets the icon. <br /><br />"
"android.support.v4.media.MediaDescriptionCompat.getExtras () "," Returns any extras that were added to the description. <br /><br />"
"android.support.v4.media.MediaDescriptionCompat.getDescription () "," Returns a description suitable for display or null. <br /><br />"
"android.support.v4.media.MediaDescriptionCompat.getIconBitmap () "," Returns a bitmap icon suitable for display or null. <br /><br />"
"android.support.v4.media.MediaDescriptionCompat.MediaDescription () "," Gets the underlying framework MediaDescription object. <br /><br />"
"android.support.v4.media.MediaDescriptionCompat.getMediaId () "," Returns the media id or null. <br /><br />"
"android.support.v4.media.MediaDescriptionCompat.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.support.v4.media.MediaDescriptionCompat.getTitle () "," Returns a title suitable for display or null. <br /><br />"
"android.support.v4.media.MediaDescriptionCompat.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.support.v4.media.MediaDescriptionCompat.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.support.v4.media.MediaDescriptionCompat.getSubtitle () "," Returns a subtitle suitable for display or null. <br /><br />"
"android.support.v4.media.MediaDescriptionCompat.getIconUri () "," Returns a Uri for an icon suitable for display or null. <br /><br />"
"android.support.v4.media.MediaDescriptionCompatApi21.Builder.Uri () "," no description <br /><br />"
"android.support.v4.media.MediaDescriptionCompatApi21.Builder.String () "," no description <br /><br />"
"android.support.v4.media.MediaDescriptionCompatApi21.Builder.newInstance () "," no description <br /><br />"
"android.support.v4.media.MediaDescriptionCompatApi21.Builder.CharSequence () "," no description <br /><br />"
"android.support.v4.media.MediaDescriptionCompatApi21.Builder.Bundle () "," no description <br /><br />"
"android.support.v4.media.MediaDescriptionCompatApi21.Builder.Object () "," no description <br /><br />"
"android.support.v4.media.MediaDescriptionCompatApi21.Builder.Bitmap () "," no description <br /><br />"
"android.support.v4.media.MediaDescriptionCompatApi21.Parcel () "," no description <br /><br />"
"android.support.v4.media.MediaDescriptionCompatApi21.Object () "," no description <br /><br />"
"android.support.v4.media.MediaMetadataCompat.Builder.MediaMetadataCompat () "," Creates a MediaMetadataCompat instance with the specified fields. <br /><br />"
"android.support.v4.media.MediaMetadataCompat.Builder.String () "," Put a String value into the metadata. <br /><br />"
"android.support.v4.media.MediaMetadataCompat.Builder.RatingCompat () "," Put a RatingCompat into the metadata. <br /><br />"
"android.support.v4.media.MediaMetadataCompat.Builder.CharSequence () "," Put a CharSequence value into the metadata. <br /><br />"
"android.support.v4.media.MediaMetadataCompat.Builder.Bitmap () "," Put a Bitmap into the metadata. <br /><br />"
"android.support.v4.media.MediaMetadataCompat.getDescription () "," Returns a simple description of this metadata for display purposes. <br /><br />"
"android.support.v4.media.MediaMetadataCompat.MediaMetadata () "," Gets the underlying framework MediaMetadata object. <br /><br />"
"android.support.v4.media.MediaMetadataCompat.String () "," Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key. <br /><br />"
"android.support.v4.media.MediaMetadataCompat.getBundle () "," Gets the bundle backing the metadata object. <br /><br />"
"android.support.v4.media.MediaMetadataCompat.RatingCompat () "," Return a RatingCompat for the given key or null if no rating exists for the given key. <br /><br />"
"android.support.v4.media.MediaMetadataCompat.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.support.v4.media.MediaMetadataCompat.keySet () "," Returns a Set containing the Strings used as keys in this metadata. <br /><br />"
"android.support.v4.media.MediaMetadataCompat.size () "," Get the number of fields in this metadata. <br /><br />"
"android.support.v4.media.MediaMetadataCompat.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.support.v4.media.MediaMetadataCompat.Bitmap () "," Return a Bitmap for the given key or null if no bitmap exists for the given key. <br /><br />"
"android.support.v4.media.RatingCompat.hasHeart () "," Return whether the rating is 'heart selected'. <br /><br />"
"android.support.v4.media.RatingCompat.newHeartRating (boolean hasHeart) "," Return a Rating instance with a heart-based rating. <br /><br />"
"android.support.v4.media.RatingCompat.newStarRating (int starRatingStyle, float starRating) "," Return a Rating instance with a star-based rating. <br /><br />"
"android.support.v4.media.RatingCompat.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.support.v4.media.RatingCompat.isRated () "," Return whether there is a rating value available. <br /><br />"
"android.support.v4.media.RatingCompat.newPercentageRating (float percent) "," Return a Rating instance with a percentage-based rating. <br /><br />"
"android.support.v4.media.RatingCompat.newUnratedRating (int ratingStyle) "," Return a Rating instance with no rating. <br /><br />"
"android.support.v4.media.RatingCompat.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.support.v4.media.RatingCompat.Rating () "," Gets the underlying framework Rating object. <br /><br />"
"android.support.v4.media.RatingCompat.getRatingStyle () "," Return the rating style. <br /><br />"
"android.support.v4.media.RatingCompat.newThumbRating (boolean thumbIsUp) "," Return a Rating instance with a thumb-based rating. <br /><br />"
"android.support.v4.media.RatingCompat.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.support.v4.media.RatingCompat.getPercentRating () "," Return the percentage-based rating value. <br /><br />"
"android.support.v4.media.RatingCompat.getStarRating () "," Return the star-based rating value. <br /><br />"
"android.support.v4.media.RatingCompat.isThumbUp () "," Return whether the rating is 'thumb up'. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.Callback.MediaSessionCompat.QueueItem () "," Override to handle changes to items in the queue. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.Callback.MediaMetadataCompat () "," Override to handle changes to the current metadata. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.Callback.onSessionDestroyed () "," Override to handle the session being destroyed. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.Callback.binderDied () "," no description <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.Callback.PlaybackStateCompat () "," Override to handle changes in playback state. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.Callback.CharSequence () "," Override to handle changes to the queue title. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.Callback.Bundle () "," Override to handle custom events sent by the session owner without a specified interface. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.Callback.MediaSessionCompat () "," Override to handle chagnes to the MediaSessionCompat extras. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.Callback.MediaControllerCompat.PlaybackInfo () "," Override to handle changes to the audio info. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.getSessionToken () "," Get the token for the session this controller is connected to. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.getPackageName () "," Get the session owner's package name. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.getSessionActivity () "," Get an intent for launching UI associated with this session if one exists. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.MediaController () "," Gets the underlying framework MediaController object. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.getFlags () "," Get the flags for this session. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.MediaControllerCompat.Callback () "," Stop receiving updates on the specified callback. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.getExtras () "," Get the extras for this session. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.Handler () "," Adds a callback to receive updates from the session. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.getMetadata () "," Get the current metadata for this session. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.KeyEvent () "," Send the specified media button event to the session. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.getQueue () "," Get the current play queue for this session if one is set. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.getRatingType () "," Get the rating type supported by the session. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.setVolumeTo (int value, int flags) "," Set the volume of the output this session is playing on. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.ResultReceiver () "," Sends a generic command to the session. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.MediaControllerCompat.TransportControls () "," Get a MediaControllerCompat.TransportControls instance for this session. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.getPlaybackState () "," Get the current playback state for this session. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.getQueueTitle () "," Get the queue title for this session. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.adjustVolume (int direction, int flags) "," Adjust the volume of the output this session is playing on. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.getPlaybackInfo () "," Get the current playback info for this session. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.PlaybackInfo.getAudioStream () "," Get the stream this is currently controlling volume on. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.PlaybackInfo.getVolumeControl () "," Get the type of volume control that can be used. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.PlaybackInfo.getPlaybackType () "," Get the type of volume handling, either local or remote. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.PlaybackInfo.getMaxVolume () "," Get the maximum volume that may be set for this session. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.PlaybackInfo.getCurrentVolume () "," Get the current volume for this session. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.TransportControls.skipToPrevious () "," Skip to the previous item. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.TransportControls.Uri () "," Request that the player start playback for a specific Uri. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.TransportControls.rewind () "," Start rewinding. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.TransportControls.stop () "," Request that the player stop its playback; it may clear its state in whatever way is appropriate. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.TransportControls.RatingCompat () "," Rate the current content. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.TransportControls.seekTo (long pos) "," Move to a new location in the media stream. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.TransportControls.fastForward () "," Start fast forwarding. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.TransportControls.skipToNext () "," Skip to the next item. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.TransportControls.Bundle () "," Request that the player start playback for a specific search query. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.TransportControls.pause () "," Request that the player pause its playback and stay at its current position. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.TransportControls.skipToQueueItem (long id) "," Play an item with a specific id in the play queue. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.TransportControls.MediaSessionCompat () "," Send a custom action for the MediaSessionCompat to perform. <br /><br />"
"android.support.v4.media.session.MediaControllerCompat.TransportControls.play () "," Request that the player start its playback at its current position. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.Callback.onSkipToNext () "," Override to handle requests to skip to the next media item. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.Callback.PlaybackStateCompat.CustomAction () "," Called when a MediaControllerCompat wants a PlaybackStateCompat.CustomAction to be performed. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.Callback.onPause () "," Override to handle requests to pause playback. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.Callback.onPlay () "," Override to handle requests to begin playback. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.Callback.onFastForward () "," Override to handle requests to fast forward. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.Callback.onRewind () "," Override to handle requests to rewind. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.Callback.onStop () "," Override to handle requests to stop playback. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.Callback.onSeekTo (long pos) "," Override to handle requests to seek to a specific position in ms. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.Callback.RatingCompat () "," Override to handle the item being rated. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.Callback.onSkipToQueueItem (long id) "," Override to handle requests to play an item with a given id from the play queue. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.Callback.Bundle () "," Override to handle requests to begin playback from a search query. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.Callback.ResultReceiver () "," Called when a controller has sent a custom command to this session. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.Callback.onSkipToPrevious () "," Override to handle requests to skip to the previous media item. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.Callback.Intent () "," Override to handle media button events. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.MediaSessionCompat.QueueItem () "," Update the list of items in the play queue. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.getController () "," Get a controller for this session. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.CharSequence () "," Set the title of the play queue. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.VolumeProviderCompat () "," Configure this session to use remote volume handling. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.RemoteControlClient () "," Gets the underlying framework RemoteControlClient object. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.Object () "," Obtain a compat wrapper for an existing MediaSession. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.release () "," This must be called when an app has finished performing playback. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.MediaSessionCompat () "," Set some extras that can be associated with the MediaSessionCompat. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.MediaMetadataCompat () "," Update the current metadata. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.MediaSessionCompat.OnActiveChangeListener () "," Stops the listener from being notified when the active status of this session changes. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.Handler () "," Set the callback to receive updates for the MediaSession. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.setFlags (int flags) "," Set any flags for the session. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.setRatingType (int type) "," Set the style of rating used by this session. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.isActive () "," Get the current active state of this session. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.setActive (boolean active) "," Set if this session is currently active and ready to receive commands. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.MediaControllerCompat () "," Retrieve a token object that can be used by apps to create a MediaControllerCompat for interacting with this session. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.PlaybackStateCompat () "," Update the current playback state. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.setPlaybackToLocal (int stream) "," Set the stream this session is playing on. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.MediaSession () "," Gets the underlying framework MediaSession object. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.Bundle () "," Send a proprietary event to all MediaControllers listening to this Session. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.PendingIntent () "," Set an intent for launching UI for this Session. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.MediaSessionCompat.Callback () "," Add a callback to receive updates on for the MediaSession. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.OnActiveChangeListener.onActiveChanged () "," no description <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.QueueItem.getDescription () "," Get the description for this item. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.QueueItem.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.QueueItem.Object () "," Obtain a compat wrapper for an existing QueueItem. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.QueueItem.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.QueueItem.MediaSession.QueueItem () "," Get the underlying MediaSession.QueueItem. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.QueueItem.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.QueueItem.getQueueId () "," Get the queue id for this item. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.Token.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.Token.MediaSession.Token () "," Gets the underlying framework MediaSession.Token object. <br /><br />"
"android.support.v4.media.session.MediaSessionCompat.Token.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.support.v4.media.session.MediaSessionCompatApi14.Callback.onStop () "," no description <br /><br />"
"android.support.v4.media.session.MediaSessionCompatApi14.Callback.onSeekTo (long pos) "," no description <br /><br />"
"android.support.v4.media.session.MediaSessionCompatApi14.Callback.onSkipToNext () "," no description <br /><br />"
"android.support.v4.media.session.MediaSessionCompatApi14.Callback.onPause () "," no description <br /><br />"
"android.support.v4.media.session.MediaSessionCompatApi14.Callback.onPlay () "," no description <br /><br />"
"android.support.v4.media.session.MediaSessionCompatApi14.Callback.onFastForward () "," no description <br /><br />"
"android.support.v4.media.session.MediaSessionCompatApi14.Callback.onRewind () "," no description <br /><br />"
"android.support.v4.media.session.MediaSessionCompatApi14.Callback.Object () "," no description <br /><br />"
"android.support.v4.media.session.MediaSessionCompatApi14.Callback.ResultReceiver () "," no description <br /><br />"
"android.support.v4.media.session.MediaSessionCompatApi14.Callback.onSkipToPrevious () "," no description <br /><br />"
"android.support.v4.media.session.MediaSessionCompatApi14.Callback.Intent () "," no description <br /><br />"
"android.support.v4.media.session.MediaSessionCompatApi14.Bundle () "," no description <br /><br />"
"android.support.v4.media.session.MediaSessionCompatApi14.Object () "," no description <br /><br />"
"android.support.v4.media.session.MediaSessionCompatApi14.PendingIntent () "," no description <br /><br />"
"android.support.v4.media.session.MediaSessionCompatApi18.Object () "," no description <br /><br />"
"android.support.v4.media.session.MediaSessionCompatApi18.PendingIntent () "," no description <br /><br />"
"android.support.v4.media.session.MediaSessionCompatApi18.MediaSessionCompatApi14.Callback () "," no description <br /><br />"
"android.support.v4.media.session.MediaSessionCompatApi19.Object () "," no description <br /><br />"
"android.support.v4.media.session.MediaSessionCompatApi19.Bundle () "," no description <br /><br />"
"android.support.v4.media.session.MediaSessionCompatApi19.MediaSessionCompatApi14.Callback () "," no description <br /><br />"
"android.support.v4.media.session.MediaSessionCompatApi8.ComponentName () "," no description <br /><br />"
"android.support.v4.media.session.ParcelableVolumeInfo.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.support.v4.media.session.ParcelableVolumeInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.support.v4.media.session.PlaybackStateCompat.Builder.setState (int state, long position, float playbackSpeed, long updateTime) "," Set the current state of playback. <br /><br />"
"android.support.v4.media.session.PlaybackStateCompat.Builder.setActions (long capabilities) "," Set the current capabilities available on this session. <br /><br />"
"android.support.v4.media.session.PlaybackStateCompat.Builder.setState (int state, long position, float playbackSpeed) "," Set the current state of playback. <br /><br />"
"android.support.v4.media.session.PlaybackStateCompat.Builder.CharSequence () "," Set a user readable error message. <br /><br />"
"android.support.v4.media.session.PlaybackStateCompat.Builder.build () "," Creates the playback state object. <br /><br />"
"android.support.v4.media.session.PlaybackStateCompat.Builder.setBufferedPosition (long bufferPosition) "," Set the current buffered position in ms. <br /><br />"
"android.support.v4.media.session.PlaybackStateCompat.CustomAction.Builder.PlaybackStateCompat.CustomAction () "," Set optional extras for the PlaybackStateCompat.CustomAction. <br /><br />"
"android.support.v4.media.session.PlaybackStateCompat.CustomAction.getName () "," Returns the display name of this action. <br /><br />"
"android.support.v4.media.session.PlaybackStateCompat.CustomAction.getExtras () "," Returns extras which provide additional application-specific information about the action, or null if none. <br /><br />"
"android.support.v4.media.session.PlaybackStateCompat.CustomAction.Session's () "," Returns the resource id of the icon in the Session's package. <br /><br />"
"android.support.v4.media.session.PlaybackStateCompat.CustomAction.PlaybackStateCompat.CustomAction () "," Returns the action of the PlaybackStateCompat.CustomAction. <br /><br />"
"android.support.v4.media.session.PlaybackStateCompat.CustomAction.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.support.v4.media.session.PlaybackStateCompat.CustomAction.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.support.v4.media.session.PlaybackStateCompat.CustomAction.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.support.v4.media.session.PlaybackStateCompat.getLastPositionUpdateTime () "," Get the elapsed real time at which position was last updated. <br /><br />"
"android.support.v4.media.session.PlaybackStateCompat.getState () "," Get the current state of playback. <br /><br />"
"android.support.v4.media.session.PlaybackStateCompat.getErrorMessage () "," Get a user readable error message. <br /><br />"
"android.support.v4.media.session.PlaybackStateCompat.getActions () "," Get the current actions available on this session. <br /><br />"
"android.support.v4.media.session.PlaybackStateCompat.getPlaybackSpeed () "," Get the current playback speed as a multiple of normal playback. <br /><br />"
"android.support.v4.media.session.PlaybackStateCompat.getBufferedPosition () "," Get the current buffered position in ms. <br /><br />"
"android.support.v4.media.session.PlaybackStateCompat.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.support.v4.media.session.PlaybackStateCompat.getPosition () "," Get the current playback position in ms. <br /><br />"
"android.support.v4.media.session.PlaybackStateCompat.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.support.v4.media.session.PlaybackStateCompat.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.support.v4.media.session.PlaybackStateCompat.PlaybackState () "," Gets the underlying framework PlaybackState object. <br /><br />"
"android.support.v4.media.TransportController.isPlaying () "," Return whether the player is currently playing its stream. <br /><br />"
"android.support.v4.media.TransportController.getBufferPercentage () "," Retrieve amount, in percentage (0-100), that the media stream has been buffered on to the local device. <br /><br />"
"android.support.v4.media.TransportController.seekTo (long pos) "," Move to a new location in the media stream. <br /><br />"
"android.support.v4.media.TransportController.pausePlaying () "," Request that the player pause its playback and stay at its current position. <br /><br />"
"android.support.v4.media.TransportController.startPlaying () "," Request that the player start its playback at its current position. <br /><br />"
"android.support.v4.media.TransportController.getCurrentPosition () "," Retrieve the current playback location in the media stream, in milliseconds. <br /><br />"
"android.support.v4.media.TransportController.getTransportControlFlags () "," Retrieve the flags for the media transport control buttons that this transport supports. <br /><br />"
"android.support.v4.media.TransportController.stopPlaying () "," Request that the player stop its playback; it may clear its state in whatever way is appropriate. <br /><br />"
"android.support.v4.media.TransportController.TransportStateListener () "," Stop listening to changes in playback state. <br /><br />"
"android.support.v4.media.TransportController.getDuration () "," Retrieve the total duration of the media stream, in milliseconds. <br /><br />"
"android.support.v4.media.TransportMediator.destroy () "," Optionally call when no longer using the TransportController. <br /><br />"
"android.support.v4.media.TransportMediator.getBufferPercentage () "," Retrieve amount, in percentage (0-100), that the media stream has been buffered on to the local device. <br /><br />"
"android.support.v4.media.TransportMediator.Activity.dispatchKeyEvent () "," Must call from Activity.dispatchKeyEvent to give the transport an opportunity to intercept media keys. <br /><br />"
"android.support.v4.media.TransportMediator.getTransportControlFlags () "," Retrieves the flags for the media transport control buttons that this transport supports. <br /><br />"
"android.support.v4.media.TransportMediator.RemoteControlClient () "," Return the RemoteControlClient associated with this transport. <br /><br />"
"android.support.v4.media.TransportMediator.stopPlaying () "," Move the controller into the stopped state. <br /><br />"
"android.support.v4.media.TransportMediator.isPlaying () "," Return whether the player is currently playing its stream. <br /><br />"
"android.support.v4.media.TransportMediator.refreshState () "," no description <br /><br />"
"android.support.v4.media.TransportMediator.pausePlaying () "," Move the controller into the paused state. <br /><br />"
"android.support.v4.media.TransportMediator.seekTo (long pos) "," Move to a new location in the media stream. <br /><br />"
"android.support.v4.media.TransportMediator.startPlaying () "," Move the controller into the playing state. <br /><br />"
"android.support.v4.media.TransportMediator.getCurrentPosition () "," Retrieve the current playback location in the media stream, in milliseconds. <br /><br />"
"android.support.v4.media.TransportMediator.getDuration () "," Retrieve the total duration of the media stream, in milliseconds. <br /><br />"
"android.support.v4.media.TransportMediator.TransportStateListener () "," Stop listening to changes in playback state. <br /><br />"
"android.support.v4.media.TransportPerformer.onGetDuration () "," Request to return the duration of the current media, in milliseconds. <br /><br />"
"android.support.v4.media.TransportPerformer.onStop () "," Request to completely stop playback of the media, clearing whatever state the player thinks is appropriate. <br /><br />"
"android.support.v4.media.TransportPerformer.onSeekTo (long pos) "," Request to move the current playback position. <br /><br />"
"android.support.v4.media.TransportPerformer.onGetBufferPercentage () "," Request to find out how much of the media has been buffered on the local device. <br /><br />"
"android.support.v4.media.TransportPerformer.onAudioFocusChange (int focusChange) "," Report that audio focus has changed on the app. <br /><br />"
"android.support.v4.media.TransportPerformer.onGetCurrentPosition () "," Request to return the current playback position, in milliseconds. <br /><br />"
"android.support.v4.media.TransportPerformer.KeyEvent () "," Report that a media button has been released. <br /><br />"
"android.support.v4.media.TransportPerformer.onIsPlaying () "," Request to find out whether the player is currently playing its media. <br /><br />"
"android.support.v4.media.TransportPerformer.onStart () () "," Request to pause playback of the media, staying at the current playback position and other state so a later call to onStart() will resume at the same place. <br /><br />"
"android.support.v4.media.TransportPerformer.onGetTransportControlFlags () "," Retrieves the flags for the media transport control buttons that this transport supports. <br /><br />"
"android.support.v4.media.TransportPerformer.onStart () "," Request to start playback on the media, resuming from whatever current state (position etc) it is in. <br /><br />"
"android.support.v4.media.TransportStateListener.TransportController () "," The available controls of the transport changed. <br /><br />"
"android.support.v4.media.VolumeProviderCompat.Callback.VolumeProviderCompat () "," no description <br /><br />"
"android.support.v4.media.VolumeProviderCompat.onAdjustVolume (int direction) "," Override to handle requests to adjust the volume of the current output. <br /><br />"
"android.support.v4.media.VolumeProviderCompat.VolumeProvider () "," Gets the underlying framework VolumeProvider object. <br /><br />"
"android.support.v4.media.VolumeProviderCompat.getVolumeControl () "," Get the volume control type that this volume provider uses. <br /><br />"
"android.support.v4.media.VolumeProviderCompat.getMaxVolume () "," Get the maximum volume this provider allows. <br /><br />"
"android.support.v4.media.VolumeProviderCompat.setCurrentVolume (int currentVolume) "," Set the current volume and notify the system that the volume has been changed. <br /><br />"
"android.support.v4.media.VolumeProviderCompat.onSetVolumeTo (int volume) "," Override to handle requests to set the volume of the current output. <br /><br />"
"android.support.v4.media.VolumeProviderCompat.getCurrentVolume () "," Get the current volume of the provider. <br /><br />"
"android.support.v4.media.VolumeProviderCompat.VolumeProviderCompat.Callback () "," Sets a callback to receive volume changes. <br /><br />"
"android.support.v4.net.ConnectivityManagerCompat.CONNECTIVITY_ACTION () "," Return the NetworkInfo that caused the given CONNECTIVITY_ACTION broadcast. <br /><br />"
"android.support.v4.net.ConnectivityManagerCompat.ConnectivityManager () "," Returns if the currently active data network is metered. <br /><br />"
"android.support.v4.net.TrafficStatsCompat.incrementOperationCount (int operationCount) "," Increment count of network operations performed under the accounting tag currently active on the calling thread. <br /><br />"
"android.support.v4.net.TrafficStatsCompat.incrementOperationCount (int tag, int operationCount) "," Increment count of network operations performed under the given accounting tag. <br /><br />"
"android.support.v4.net.TrafficStatsCompat.Socket () "," Remove any statistics parameters from the given Socket. <br /><br />"
"android.support.v4.net.TrafficStatsCompat.Socket (int tag) "," Set active tag to use when accounting Socket traffic originating from the current thread. <br /><br />"
"android.support.v4.os.AsyncTaskCompat.AsyncTask () "," Executes the task with the specified parameters, allowing multiple tasks to run in parallel on a pool of threads managed by AsyncTask. <br /><br />"
"android.support.v4.os.EnvironmentCompat.File () "," Returns the current state of the storage device that provides the given path. <br /><br />"
"android.support.v4.os.ParcelableCompat.Parcelable.Creator () "," Factory method for Parcelable.Creator. <br /><br />"
"android.support.v4.os.ParcelableCompatCreatorCallbacks&lt;T&gt;.Parcelable.writeToParcel () () "," Create a new instance of the Parcelable class, instantiating it from the given Parcel whose data had previously been written by Parcelable.writeToParcel() and using the given ClassLoader. <br /><br />"
"android.support.v4.os.ParcelableCompatCreatorCallbacks&lt;T&gt;.newArray (int size) "," Create a new array of the Parcelable class. <br /><br />"
"android.support.v4.print.PrintHelper.Uri () "," Prints an image located at the Uri. <br /><br />"
"android.support.v4.print.PrintHelper.PrintHelper.OnPrintFinishCallback () "," Prints a bitmap. <br /><br />"
"android.support.v4.print.PrintHelper.getOrientation () "," Gets whether the image will be printed in landscape or portrait. <br /><br />"
"android.support.v4.print.PrintHelper.ORIENTATION_PORTRAIT (int orientation) "," Sets whether the image will be printed in landscape ORIENTATION_LANDSCAPE (default) or portrait ORIENTATION_PORTRAIT. <br /><br />"
"android.support.v4.print.PrintHelper.SCALE_MODE_FILL (int scaleMode) "," Selects whether the image will fill the paper and be cropped SCALE_MODE_FIT or whether the image will be scaled but leave white space SCALE_MODE_FILL. <br /><br />"
"android.support.v4.print.PrintHelper.COLOR_MODE_MONOCHROME (int colorMode) "," Sets whether the image will be printed in color (default) COLOR_MODE_COLOR or in back and white COLOR_MODE_MONOCHROME. <br /><br />"
"android.support.v4.print.PrintHelper.systemSupportsPrint () "," Gets whether the system supports printing. <br /><br />"
"android.support.v4.print.PrintHelper.getColorMode () "," Gets the color mode with which the image will be printed. <br /><br />"
"android.support.v4.print.PrintHelper.getScaleMode () "," Returns the scale mode with which the image will fill the paper. <br /><br />"
"android.support.v4.print.PrintHelper.Bitmap () "," Prints a bitmap. <br /><br />"
"android.support.v4.print.PrintHelper.OnPrintFinishCallback.onFinish () "," Called when a print operation is finished. <br /><br />"
"android.support.v4.provider.DocumentFile.Uri () "," Create a DocumentFile representing the document tree rooted at the given Uri. <br /><br />"
"android.support.v4.provider.DocumentFile.length () "," Returns the length of this file in bytes. <br /><br />"
"android.support.v4.provider.DocumentFile.String () "," Renames this file to displayName. <br /><br />"
"android.support.v4.provider.DocumentFile.delete () "," Deletes this file. <br /><br />"
"android.support.v4.provider.DocumentFile.canWrite () "," Indicates whether the current context is allowed to write to this file. <br /><br />"
"android.support.v4.provider.DocumentFile.canRead () "," Indicates whether the current context is allowed to read from this file. <br /><br />"
"android.support.v4.provider.DocumentFile.getType () "," Return the MIME type of this document. <br /><br />"
"android.support.v4.provider.DocumentFile.isDirectory () "," Indicates if this file represents a directory. <br /><br />"
"android.support.v4.provider.DocumentFile.getParentFile () "," Return the parent file of this document. <br /><br />"
"android.support.v4.provider.DocumentFile.isFile () "," Indicates if this file represents a file. <br /><br />"
"android.support.v4.provider.DocumentFile.exists () "," Returns a boolean indicating whether this file can be found. <br /><br />"
"android.support.v4.provider.DocumentFile.DocumentsProvider () "," Test if given Uri is backed by a DocumentsProvider. <br /><br />"
"android.support.v4.provider.DocumentFile.getName () "," Return the display name of this document. <br /><br />"
"android.support.v4.provider.DocumentFile.listFiles () "," Returns an array of files contained in the directory represented by this file. <br /><br />"
"android.support.v4.provider.DocumentFile.lastModified () "," Returns the time when this file was last modified, measured in milliseconds since January 1st, 1970, midnight. <br /><br />"
"android.support.v4.provider.DocumentFile.listFiles () () "," Search through listFiles() for the first document matching the given display name. <br /><br />"
"android.support.v4.provider.DocumentFile.getUri () "," Return a Uri for the underlying document represented by this file. <br /><br />"
"android.support.v4.text.BidiFormatter.Builder.TextDirectionHeuristicCompat () "," Specifies the default directionality estimation algorithm to be used by the BidiFormatter. <br /><br />"
"android.support.v4.text.BidiFormatter.Builder.build () "," no description <br /><br />"
"android.support.v4.text.BidiFormatter.Builder.stereoReset (boolean stereoReset) "," Specifies whether the BidiFormatter to be built should also 'reset' directionality before a string being bidi-wrapped, not just after it. <br /><br />"
"android.support.v4.text.ICUCompat.String () "," Returns the script (language code) of a script. <br /><br />"
"android.support.v4.text.TextDirectionHeuristicCompat.isRtl (char[] array, int start, int count) "," Guess if a chars array is in the RTL direction or not. <br /><br />"
"android.support.v4.text.TextDirectionHeuristicCompat.CharSequence () "," Guess if a CharSequence is in the RTL direction or not. <br /><br />"
"android.support.v4.text.TextUtilsCompat.String () "," Html-encode the string. <br /><br />"
"android.support.v4.text.TextUtilsCompat.Locale () "," Return the layout direction for a given Locale <br /><br />"
"android.support.v4.util.ArrayMap&lt;K,&nbsp;V&gt;.put (Object, Object) () "," Perform a put(Object, Object) of all key/value pairs in map <br /><br />"
"android.support.v4.util.ArrayMap&lt;K,&nbsp;V&gt;.Collection () "," Return a Collection for iterating over and interacting with all values in the array map. <br /><br />"
"android.support.v4.util.ArrayMap&lt;K,&nbsp;V&gt;.Set () "," Return a Set for iterating over and interacting with all keys in the array map. <br /><br />"
"android.support.v4.util.AtomicFile.delete () "," Delete the atomic file. <br /><br />"
"android.support.v4.util.AtomicFile.startWrite () () "," Call when you have successfully finished writing to the stream returned by startWrite(). <br /><br />"
"android.support.v4.util.AtomicFile.startWrite () "," Start a new write operation on the file. <br /><br />"
"android.support.v4.util.AtomicFile.openRead () () "," A convenience for openRead() that also reads all of the file contents into a byte array which is returned. <br /><br />"
"android.support.v4.util.AtomicFile.openRead () "," Open the atomic file for reading. <br /><br />"
"android.support.v4.util.AtomicFile.getBaseFile () "," Return the path to the base file. <br /><br />"
"android.support.v4.util.CircularArray&lt;E&gt;.clear () "," Remove all elements from the CircularArray. <br /><br />"
"android.support.v4.util.CircularArray&lt;E&gt;.isEmpty () "," Return true if size() is 0. <br /><br />"
"android.support.v4.util.CircularArray&lt;E&gt;.removeFromStart (int numOfElements) "," Remove multiple elements from front of the CircularArray, ignore when numOfElements is less than or equals to 0. <br /><br />"
"android.support.v4.util.CircularArray&lt;E&gt;.removeFromEnd (int numOfElements) "," Remove multiple elements from end of the CircularArray, ignore when numOfElements is less than or equals to 0. <br /><br />"
"android.support.v4.util.CircularArray&lt;E&gt;.size () "," Get number of elements in the CircularArray. <br /><br />"
"android.support.v4.util.CircularArray&lt;E&gt;.getLast () "," Get last element of the CircularArray. <br /><br />"
"android.support.v4.util.CircularArray&lt;E&gt;.get (int n) "," Get nth (0 &lt;= n &lt;= size()-1) element of the CircularArray. <br /><br />"
"android.support.v4.util.CircularArray&lt;E&gt;.popLast () "," Remove last element from end of the CircularArray and return it. <br /><br />"
"android.support.v4.util.CircularArray&lt;E&gt;.getFirst () "," Get first element of the CircularArray. <br /><br />"
"android.support.v4.util.CircularArray&lt;E&gt;.addLast (E e) "," Add an element at end of the CircularArray. <br /><br />"
"android.support.v4.util.CircularArray&lt;E&gt;.addFirst (E e) "," Add an element in front of the CircularArray. <br /><br />"
"android.support.v4.util.CircularArray&lt;E&gt;.popFirst () "," Remove first element from front of the CircularArray and return it. <br /><br />"
"android.support.v4.util.CircularIntArray.addLast (int e) "," Add an integer at end of the CircularIntArray. <br /><br />"
"android.support.v4.util.CircularIntArray.addFirst (int e) "," Add an integer in front of the CircularIntArray. <br /><br />"
"android.support.v4.util.CircularIntArray.clear () "," Remove all integers from the CircularIntArray. <br /><br />"
"android.support.v4.util.CircularIntArray.isEmpty () "," Return true if size() is 0. <br /><br />"
"android.support.v4.util.CircularIntArray.removeFromStart (int numOfElements) "," Remove multiple integers from front of the CircularIntArray, ignore when numOfElements is less than or equals to 0. <br /><br />"
"android.support.v4.util.CircularIntArray.removeFromEnd (int numOfElements) "," Remove multiple elements from end of the CircularIntArray, ignore when numOfElements is less than or equals to 0. <br /><br />"
"android.support.v4.util.CircularIntArray.size () "," Get number of integers in the CircularIntArray. <br /><br />"
"android.support.v4.util.CircularIntArray.getLast () "," Get last integer of the CircularIntArray. <br /><br />"
"android.support.v4.util.CircularIntArray.get (int n) "," Get nth (0 &lt;= n &lt;= size()-1) integer of the CircularIntArray. <br /><br />"
"android.support.v4.util.CircularIntArray.popLast () "," Remove last integer from end of the CircularIntArray and return it. <br /><br />"
"android.support.v4.util.CircularIntArray.getFirst () "," Get first integer of the CircularIntArray. <br /><br />"
"android.support.v4.util.CircularIntArray.popFirst () "," Remove first integer from front of the CircularIntArray and return it. <br /><br />"
"android.support.v4.util.LongSparseArray&lt;E&gt;.get (long key) "," Gets the Object mapped from the specified key, or null if no such mapping has been made. <br /><br />"
"android.support.v4.util.LongSparseArray&lt;E&gt;.keyAt (int index) "," Given an index in the range 0...size()-1, returns the key from the indexth key-value mapping that this LongSparseArray stores. <br /><br />"
"android.support.v4.util.LongSparseArray&lt;E&gt;.keyAt (int) (long key) "," Returns the index for which keyAt(int) would return the specified key, or a negative number if the specified key is not mapped. <br /><br />"
"android.support.v4.util.LongSparseArray&lt;E&gt;.valueAt (int) (E value) "," Returns an index for which valueAt(int) would return the specified key, or a negative number if no keys map to the specified value. <br /><br />"
"android.support.v4.util.LongSparseArray&lt;E&gt;.removeAt (int index) "," Removes the mapping at the specified index. <br /><br />"
"android.support.v4.util.LongSparseArray&lt;E&gt;.size () "," Returns the number of key-value mappings that this LongSparseArray currently stores. <br /><br />"
"android.support.v4.util.LongSparseArray&lt;E&gt;.delete (long key) "," Removes the mapping from the specified key, if there was any. <br /><br />"
"android.support.v4.util.LongSparseArray&lt;E&gt;.get (long key, E valueIfKeyNotFound) "," Gets the Object mapped from the specified key, or the specified Object if no such mapping has been made. <br /><br />"
"android.support.v4.util.LongSparseArray&lt;E&gt;.toString () "," Returns a string containing a concise, human-readable description of this object. This implementation composes a string by iterating over its mappings. <br /><br />"
"android.support.v4.util.LongSparseArray&lt;E&gt;.delete (long) (long key) "," Alias for delete(long). <br /><br />"
"android.support.v4.util.LongSparseArray&lt;E&gt;.clear () "," Removes all key-value mappings from this LongSparseArray. <br /><br />"
"android.support.v4.util.LongSparseArray&lt;E&gt;.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.support.v4.util.LongSparseArray&lt;E&gt;.valueAt (int index) "," Given an index in the range 0...size()-1, returns the value from the indexth key-value mapping that this LongSparseArray stores. <br /><br />"
"android.support.v4.util.LongSparseArray&lt;E&gt;.append (long key, E value) "," Puts a key/value pair into the array, optimizing for the case where the key is greater than all existing keys in the array. <br /><br />"
"android.support.v4.util.LongSparseArray&lt;E&gt;.setValueAt (int index, E value) "," Given an index in the range 0...size()-1, sets a new value for the indexth key-value mapping that this LongSparseArray stores. <br /><br />"
"android.support.v4.util.LongSparseArray&lt;E&gt;.put (long key, E value) "," Adds a mapping from the specified key to the specified value, replacing the previous mapping from the specified key if there was one. <br /><br />"
"android.support.v4.util.LruCache&lt;K,&nbsp;V&gt;.create (Object) () "," Returns the number of times create(Object) returned a value. <br /><br />"
"android.support.v4.util.LruCache&lt;K,&nbsp;V&gt;.evictionCount () "," Returns the number of values that have been evicted. <br /><br />"
"android.support.v4.util.LruCache&lt;K,&nbsp;V&gt;.remove (K key) "," Removes the entry for key if it exists. <br /><br />"
"android.support.v4.util.LruCache&lt;K,&nbsp;V&gt;.get (K key) "," Returns the value for key if it exists in the cache or can be created by #create. <br /><br />"
"android.support.v4.util.LruCache&lt;K,&nbsp;V&gt;.entryRemoved (boolean, K, V, V) () "," Clear the cache, calling entryRemoved(boolean, K, V, V) on each removed entry. <br /><br />"
"android.support.v4.util.LruCache&lt;K,&nbsp;V&gt;.trimToSize (int maxSize) "," Remove the eldest entries until the total of remaining entries is at or below the requested size. <br /><br />"
"android.support.v4.util.LruCache&lt;K,&nbsp;V&gt;.get (K) () "," Returns the number of times get(K) returned null or required a new value to be created. <br /><br />"
"android.support.v4.util.LruCache&lt;K,&nbsp;V&gt;.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.support.v4.util.LruCache&lt;K,&nbsp;V&gt;.snapshot () "," Returns a copy of the current contents of the cache, ordered from least recently accessed to most recently accessed. <br /><br />"
"android.support.v4.util.LruCache&lt;K,&nbsp;V&gt;.resize (int maxSize) "," Sets the size of the cache. <br /><br />"
"android.support.v4.util.LruCache&lt;K,&nbsp;V&gt;.put (K key, V value) "," Caches value for key. <br /><br />"
"android.support.v4.util.LruCache&lt;K,&nbsp;V&gt;.put (K, V) () "," Returns the number of times put(K, V) was called. <br /><br />"
"android.support.v4.util.LruCache&lt;K,&nbsp;V&gt;.sizeOf (K, V) () "," For caches that do not override sizeOf(K, V), this returns the number of entries in the cache. <br /><br />"
"android.support.v4.util.Pair&lt;F,&nbsp;S&gt;.create (A a, B b) "," Convenience method for creating an appropriately typed pair. <br /><br />"
"android.support.v4.util.Pair&lt;F,&nbsp;S&gt;.hashCode () "," Compute a hash code using the hash codes of the underlying objects <br /><br />"
"android.support.v4.util.Pair&lt;F,&nbsp;S&gt;.equals (Object) () "," Checks the two objects for equality by delegating to their respective equals(Object) methods. <br /><br />"
"android.support.v4.util.Pools.Pool&lt;T&gt;.acquire () "," no description <br /><br />"
"android.support.v4.util.Pools.Pool&lt;T&gt;.release (T instance) "," Release an instance to the pool. <br /><br />"
"android.support.v4.util.Pools.SimplePool&lt;T&gt;.acquire () "," no description <br /><br />"
"android.support.v4.util.Pools.SimplePool&lt;T&gt;.release (T instance) "," Release an instance to the pool. <br /><br />"
"android.support.v4.util.Pools.SynchronizedPool&lt;T&gt;.acquire () "," no description <br /><br />"
"android.support.v4.util.Pools.SynchronizedPool&lt;T&gt;.release (T element) "," Release an instance to the pool. <br /><br />"
"android.support.v4.util.SimpleArrayMap&lt;K,&nbsp;V&gt;.put (Object, Object) () "," Perform a put(Object, Object) of all key/value pairs in array <br /><br />"
"android.support.v4.util.SimpleArrayMap&lt;K,&nbsp;V&gt;.clear () "," Make the array map empty. <br /><br />"
"android.support.v4.util.SimpleArrayMap&lt;K,&nbsp;V&gt;.keyAt (int index) "," Return the key at the given index in the array. <br /><br />"
"android.support.v4.util.SimpleArrayMap&lt;K,&nbsp;V&gt;.valueAt (int index) "," Return the value at the given index in the array. <br /><br />"
"android.support.v4.util.SimpleArrayMap&lt;K,&nbsp;V&gt;.put (K key, V value) "," Add a new value to the array map. <br /><br />"
"android.support.v4.util.SimpleArrayMap&lt;K,&nbsp;V&gt;.isEmpty () "," Return true if the array map contains no items. <br /><br />"
"android.support.v4.util.SimpleArrayMap&lt;K,&nbsp;V&gt;.removeAt (int index) "," Remove the key/value mapping at the given index. <br /><br />"
"android.support.v4.util.SimpleArrayMap&lt;K,&nbsp;V&gt;.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.support.v4.util.SimpleArrayMap&lt;K,&nbsp;V&gt;.size () "," Return the number of items in this array map. <br /><br />"
"android.support.v4.util.SimpleArrayMap&lt;K,&nbsp;V&gt;.ensureCapacity (int minimumCapacity) "," Ensure the array map can hold at least minimumCapacity items. <br /><br />"
"android.support.v4.util.SimpleArrayMap&lt;K,&nbsp;V&gt;.Object () "," Remove an existing key from the array map. <br /><br />"
"android.support.v4.util.SimpleArrayMap&lt;K,&nbsp;V&gt;.setValueAt (int index, V value) "," Set the value at a given index in the array. <br /><br />"
"android.support.v4.util.SimpleArrayMap&lt;K,&nbsp;V&gt;.toString () "," Returns a string containing a concise, human-readable description of this object. This implementation composes a string by iterating over its mappings. <br /><br />"
"android.support.v4.util.SparseArrayCompat&lt;E&gt;.delete (int) (int key) "," Alias for delete(int). <br /><br />"
"android.support.v4.util.SparseArrayCompat&lt;E&gt;.keyAt (int index) "," Given an index in the range 0...size()-1, returns the key from the indexth key-value mapping that this SparseArray stores. <br /><br />"
"android.support.v4.util.SparseArrayCompat&lt;E&gt;.valueAt (int) (E value) "," Returns an index for which valueAt(int) would return the specified key, or a negative number if no keys map to the specified value. <br /><br />"
"android.support.v4.util.SparseArrayCompat&lt;E&gt;.keyAt (int) (int key) "," Returns the index for which keyAt(int) would return the specified key, or a negative number if the specified key is not mapped. <br /><br />"
"android.support.v4.util.SparseArrayCompat&lt;E&gt;.delete (int key) "," Removes the mapping from the specified key, if there was any. <br /><br />"
"android.support.v4.util.SparseArrayCompat&lt;E&gt;.removeAt (int index) "," Removes the mapping at the specified index. <br /><br />"
"android.support.v4.util.SparseArrayCompat&lt;E&gt;.size () "," Returns the number of key-value mappings that this SparseArray currently stores. <br /><br />"
"android.support.v4.util.SparseArrayCompat&lt;E&gt;.append (int key, E value) "," Puts a key/value pair into the array, optimizing for the case where the key is greater than all existing keys in the array. <br /><br />"
"android.support.v4.util.SparseArrayCompat&lt;E&gt;.toString () "," Returns a string containing a concise, human-readable description of this object. This implementation composes a string by iterating over its mappings. <br /><br />"
"android.support.v4.util.SparseArrayCompat&lt;E&gt;.get (int key, E valueIfKeyNotFound) "," Gets the Object mapped from the specified key, or the specified Object if no such mapping has been made. <br /><br />"
"android.support.v4.util.SparseArrayCompat&lt;E&gt;.clear () "," Removes all key-value mappings from this SparseArray. <br /><br />"
"android.support.v4.util.SparseArrayCompat&lt;E&gt;.get (int key) "," Gets the Object mapped from the specified key, or null if no such mapping has been made. <br /><br />"
"android.support.v4.util.SparseArrayCompat&lt;E&gt;.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.support.v4.util.SparseArrayCompat&lt;E&gt;.valueAt (int index) "," Given an index in the range 0...size()-1, returns the value from the indexth key-value mapping that this SparseArray stores. <br /><br />"
"android.support.v4.util.SparseArrayCompat&lt;E&gt;.setValueAt (int index, E value) "," Given an index in the range 0...size()-1, sets a new value for the indexth key-value mapping that this SparseArray stores. <br /><br />"
"android.support.v4.util.SparseArrayCompat&lt;E&gt;.removeAtRange (int index, int size) "," Remove a range of mappings as a batch. <br /><br />"
"android.support.v4.util.SparseArrayCompat&lt;E&gt;.put (int key, E value) "," Adds a mapping from the specified key to the specified value, replacing the previous mapping from the specified key if there was one. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityEventCompat.AccessibilityRecord () "," Creates an AccessibilityRecordCompat from an AccessibilityEvent that can be used to manipulate the event properties defined in AccessibilityRecord. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityEventCompat.AccessibilityEvent () "," Gets the number of records contained in the event. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityManagerCompat.AccessibilityStateChangeListenerCompat.onAccessibilityStateChanged (boolean enabled) "," Called back on change in the accessibility state. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityManagerCompat.AccessibilityManager.AccessibilityStateChangeListener () "," Unregisters an AccessibilityManager.AccessibilityStateChangeListener. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityManagerCompat.AccessibilityManager () "," Returns if the touch exploration in the system is enabled. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityManagerCompat.AccessibilityServiceInfo () "," Returns the AccessibilityServiceInfos of the installed accessibility services. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.getId () "," Gets the id for this action. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.getLabel () "," Gets the label for this action. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.obtain (int rowCount, int columnCount, boolean hierarchical, int selectionMode) "," Returns a cached instance if such is available otherwise a new one. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.getColumnCount () "," no description <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.getRowCount () "," no description <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.isHierarchical () "," no description <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.getRowSpan () "," no description <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.obtain (int rowIndex, int rowSpan, int columnIndex, int columnSpan, boolean heading, boolean selected) "," Returns a cached instance if such is available otherwise a new one. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.getColumnSpan () "," no description <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.isSelected () "," no description <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.isHeading () "," no description <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.getRowIndex () "," no description <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.getColumnIndex () "," no description <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.isVisibleToUser () "," Sets whether this node is visible to the user. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setClickable (boolean clickable) "," Sets whether this node is clickable. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getInfo () "," no description <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.isFocused () "," Gets whether this node is focused. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setChecked (boolean checked) "," Sets whether this node is checked. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setScrollable (boolean scrollable) "," Sets if the node is scrollable. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.addAction (int action) "," Adds an action that can be performed on the node. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setMovementGranularities (int granularities) "," Sets the movement granularities for traversing the text of this node. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setLongClickable (boolean longClickable) "," Sets whether this node is long clickable. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.focusSearch (int direction) "," Searches for the nearest view in the specified direction that can take input focus. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.isAccessibilityFocused () "," Gets whether this node is accessibility focused. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityNodeInfoCompat.AccessibilityActionCompat () "," Adds an action that can be performed on the node. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setEnabled (boolean enabled) "," Sets whether this node is enabled. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.isFocusable () "," Gets whether this node is focusable. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setVisibleToUser (boolean visibleToUser) "," Sets whether this node is visible to the user. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.isLongClickable () "," Gets whether this node is long clickable. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setLiveRegion (int mode) "," Sets the node's live region mode. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getChild (int index) "," Get the child at given index. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getRangeInfo () "," Gets the range info if this node is a range. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getLiveRegion () "," Gets the node's live region mode. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.Object () "," no description <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.isScrollable () "," Gets if the node is scrollable. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getActionList () "," Gets the actions that can be performed on the node. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getActions () "," Gets the actions that can be performed on the node. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.obtain () "," Returns a cached instance if such is available otherwise a new one. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.isPassword () "," Gets whether this node is a password. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getContentDescription () "," Gets the content description of this node. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.isSelected () "," Gets whether this node is selected. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setCheckable (boolean checkable) "," Sets whether this node is checkable. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getClassName () "," Gets the class this node comes from. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getPackageName () "," Gets the package this node comes from. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setFocused (boolean focused) "," Sets whether this node is focused. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getCollectionInfo () "," Gets the collection info if the node is a collection. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setSelected (boolean selected) "," Sets whether this node is selected. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.Rect () "," Sets the node bounds in screen coordinates. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getViewIdResourceName () "," Gets the fully qualified resource name of the source view's id. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityNodeInfo () "," Finds AccessibilityNodeInfos by text. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setAccessibilityFocused (boolean focused) "," Sets whether this node is accessibility focused. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.isChecked () "," Gets whether this node is checked. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.String () "," Sets the fully qualified resource name of the source view's id. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.CharSequence () "," Sets the text of this node. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getText () "," Gets the text of this node. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.View () "," Sets the source. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.isClickable () "," Gets whether this node is clickable. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityNodeInfoCompat () "," Returns a cached instance if such is available or a new one is create. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.isEnabled () "," Gets whether this node is enabled. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getChildCount () "," Gets the number of children. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.recycle () "," Return an instance back to be reused. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setFocusable (boolean focusable) "," Sets whether this node is focusable. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getParent () "," Gets the parent. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getCollectionItemInfo () "," Gets the collection item info if the node is a collection item. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getWindowId () "," Gets the id of the window from which the info comes from. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.Bundle () "," Performs an action on the node. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.performAction (int action) "," Performs an action on the node. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.setPassword (boolean password) "," Sets whether this node is a password. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.getMovementGranularities () "," Gets the movement granularities for traversing the text of this node. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.findFocus (int focus) "," Find the view that has the specified focus type. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.isCheckable () "," Gets whether this node is checkable. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.RangeInfoCompat.getCurrent () "," no description <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.RangeInfoCompat.getType () "," no description <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.RangeInfoCompat.getMin () "," no description <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.RangeInfoCompat.getMax () "," no description <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeProviderCompat.getProvider () "," no description <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeProviderCompat.AccessibilityNodeInfoCompat (int virtualViewId) "," Returns an AccessibilityNodeInfoCompat representing a virtual view, i.e. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeProviderCompat.Bundle () "," Performs an accessibility action on a virtual view, i.e. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeProviderCompat.findFocus (int focus) "," Find the virtual view, i.e. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityNodeProviderCompat.AccessibilityNodeInfoCompat () "," Finds AccessibilityNodeInfoCompats by text. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.setToIndex (int toIndex) "," Sets the index of text selection end or the index of the last visible item when scrolling. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.getClassName () "," Gets the class name of the source. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.setItemCount (int itemCount) "," Sets the number of items that can be visited. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.setScrollY (int scrollY) "," Sets the scroll offset of the source top edge in pixels. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.setAddedCount (int addedCount) "," Sets the number of added characters. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.getScrollY () "," Gets the scroll offset of the source top edge in pixels. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.setScrollable (boolean scrollable) "," Sets if the source is scrollable. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.getScrollX () "," Gets the scroll offset of the source left edge in pixels. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.AccessibilityNodeInfo () "," Gets the AccessibilityNodeInfo of the event source. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.setCurrentItemIndex (int currentItemIndex) "," Sets the index of the source in the list of items that can be visited. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.setRemovedCount (int removedCount) "," Sets the number of removed characters. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.Parcelable () "," Sets the Parcelable data of the event. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.setMaxScrollY (int maxScrollY) "," Sets the max scroll offset of the source top edge in pixels. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.isChecked () "," Gets if the source is checked. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.getBeforeText () "," Sets the text before a change. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.setPassword (boolean isPassword) "," Sets if the source is a password field. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.getFromIndex () "," Gets the index of the first character of the changed sequence, or the beginning of a text selection or the index of the first visible item when scrolling. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.setChecked (boolean isChecked) "," Sets if the source is checked. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.setScrollX (int scrollX) "," Sets the scroll offset of the source left edge in pixels. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.setMaxScrollX (int maxScrollX) "," Sets the max scroll offset of the source left edge in pixels. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.CharSequence () "," Sets the description of the source. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.getMaxScrollY () "," Gets the max scroll offset of the source top edge in pixels. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.setFromIndex (int fromIndex) "," Sets the index of the first character of the changed sequence or the beginning of a text selection or the index of the first visible item when scrolling. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.AccessibilityRecordCompat () "," Returns a cached instance if such is available or a new one is instantiated. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.View () "," Sets the event source. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.getItemCount () "," Gets the number of items that can be visited. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.getText () "," Gets the text of the event. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.getToIndex () "," Gets the index of text selection end or the index of the last visible item when scrolling. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.isScrollable () "," Gets if the source is scrollable. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.getCurrentItemIndex () "," Gets the index of the source in the list of items the can be visited. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.getAddedCount () "," Gets the number of added characters. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.setEnabled (boolean isEnabled) "," Sets if the source is enabled. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.getRemovedCount () "," Gets the number of removed characters. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.isEnabled () "," Gets if the source is enabled. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.recycle () "," Return an instance back to be reused. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.obtain () "," Returns a cached instance if such is available or a new one is instantiated. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.isFullScreen () "," Gets if the source is taking the entire screen. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.getMaxScrollX () "," Gets the max scroll offset of the source left edge in pixels. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.getImpl () "," This method is deprecated. This method will be removed in a subsequent release of the support library. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.isPassword () "," Gets if the source is a password field. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.getContentDescription () "," Gets the description of the source. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.getWindowId () "," Gets the id of the window from which the event comes from. <br /><br />"
"android.support.v4.view.accessibility.AccessibilityRecordCompat.setFullScreen (boolean isFullScreen) "," Sets if the source is taking the entire screen. <br /><br />"
"android.support.v4.view.AccessibilityDelegateCompat.AccessibilityService () "," Gets the provider for managing a virtual view hierarchy rooted at this View and reported to AccessibilityServices that explore the window content. <br /><br />"
"android.support.v4.view.AccessibilityDelegateCompat.AccessibilityEvent () "," Sends an accessibility event. <br /><br />"
"android.support.v4.view.AccessibilityDelegateCompat.Bundle () "," Performs the specified accessibility action on the view. <br /><br />"
"android.support.v4.view.AccessibilityDelegateCompat.View () "," Sends an accessibility event of the given type. <br /><br />"
"android.support.v4.view.AccessibilityDelegateCompat.AccessibilityNodeInfoCompat () "," Initializes an AccessibilityNodeInfoCompat with information about the host view. <br /><br />"
"android.support.v4.view.ActionProvider.onPerformDefaultAction () "," Performs an optional default action. <br /><br />"
"android.support.v4.view.ActionProvider.isVisible () () "," If this ActionProvider is associated with an item in a menu, refresh the visibility of the item based on overridesItemVisibility() and isVisible(). <br /><br />"
"android.support.v4.view.ActionProvider.onCreateActionView () "," Factory method for creating new action views. <br /><br />"
"android.support.v4.view.ActionProvider.hasSubMenu () "," Determines if this ActionProvider has a submenu associated with it. <br /><br />"
"android.support.v4.view.ActionProvider.ActionProvider.VisibilityListener () "," Set a listener to be notified when this ActionProvider's overridden visibility changes. <br /><br />"
"android.support.v4.view.ActionProvider.SubMenu () "," Called to prepare an associated submenu for the menu item backed by this ActionProvider. <br /><br />"
"android.support.v4.view.ActionProvider.MenuItem () "," The result of this method determines whether or not isVisible() will be used by the MenuItem this ActionProvider is bound to help determine its visibility. <br /><br />"
"android.support.v4.view.ActionProvider.getContext () "," Gets the context associated with this action provider. <br /><br />"
"android.support.v4.view.ActionProvider.VisibilityListener.onActionProviderVisibilityChanged (boolean isVisible) "," no description <br /><br />"
"android.support.v4.view.animation.FastOutLinearInInterpolator.getInterpolation (float input) "," Maps a value representing the elapsed fraction of an animation to a value that represents the interpolated fraction. <br /><br />"
"android.support.v4.view.animation.FastOutSlowInInterpolator.getInterpolation (float input) "," Maps a value representing the elapsed fraction of an animation to a value that represents the interpolated fraction. <br /><br />"
"android.support.v4.view.animation.LinearOutSlowInInterpolator.getInterpolation (float input) "," Maps a value representing the elapsed fraction of an animation to a value that represents the interpolated fraction. <br /><br />"
"android.support.v4.view.GestureDetectorCompat.GestureDetector.OnDoubleTapListener () "," Sets the listener which will be called for double-tap and related gestures. <br /><br />"
"android.support.v4.view.GestureDetectorCompat.GestureDetector.OnGestureListener () "," Analyzes the given motion event and if applicable triggers the appropriate callbacks on the GestureDetector.OnGestureListener supplied. <br /><br />"
"android.support.v4.view.GestureDetectorCompat.setIsLongpressEnabled (boolean enabled) "," Set whether longpress is enabled, if this is enabled when a user presses and holds down you get a longpress event and nothing further. <br /><br />"
"android.support.v4.view.GestureDetectorCompat.isLongpressEnabled () "," no description <br /><br />"
"android.support.v4.view.GravityCompat.Rect () "," Apply additional gravity behavior based on the overall 'display' that an object exists in. <br /><br />"
"android.support.v4.view.GravityCompat.getAbsoluteGravity (int gravity, int layoutDirection) "," Convert script specific gravity to absolute horizontal value. <br /><br />"
"android.support.v4.view.KeyEventCompat.normalizeMetaState (int metaState) "," no description <br /><br />"
"android.support.v4.view.KeyEventCompat.KeyEvent () "," no description <br /><br />"
"android.support.v4.view.KeyEventCompat.metaStateHasNoModifiers (int metaState) "," no description <br /><br />"
"android.support.v4.view.KeyEventCompat.metaStateHasModifiers (int metaState, int modifiers) "," no description <br /><br />"
"android.support.v4.view.KeyEventCompat.Object () "," no description <br /><br />"
"android.support.v4.view.KeyEventCompat.View () "," no description <br /><br />"
"android.support.v4.view.LayoutInflaterCompat.LayoutInflaterFactory () "," Attach a custom Factory interface for creating views while using this LayoutInflater. <br /><br />"
"android.support.v4.view.LayoutInflaterFactory.AttributeSet () "," Hook you can supply that is called when inflating from a LayoutInflater. <br /><br />"
"android.support.v4.view.MarginLayoutParamsCompat.ViewGroup.MarginLayoutParams () "," Set the relative start margin. <br /><br />"
"android.support.v4.view.MarginLayoutParamsCompat.requestLayout () () "," This will be called by requestLayout(). <br /><br />"
"android.support.v4.view.MenuCompat.MenuItemCompat.setShowAsAction (MenuItem, int) () "," This method is deprecated. Use MenuItemCompat.setShowAsAction(MenuItem, int) <br /><br />"
"android.support.v4.view.MenuItemCompat.MenuItemCompat.OnActionExpandListener () "," Set an MenuItemCompat.OnActionExpandListener on this menu item to be notified when the associated action view is expanded or collapsed. <br /><br />"
"android.support.v4.view.MenuItemCompat.MenuItem () "," Sets how this item should display in the presence of a compatible Action Bar. <br /><br />"
"android.support.v4.view.MenuItemCompat.View () "," Set an action view for this menu item. <br /><br />"
"android.support.v4.view.MenuItemCompat.ActionProvider () "," Sets the ActionProvider responsible for creating an action view if the item is placed on the action bar. <br /><br />"
"android.support.v4.view.MenuItemCompat.OnActionExpandListener.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW () "," Called when a menu item with SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW is expanded. <br /><br />"
"android.support.v4.view.MotionEventCompat.getPointerId (MotionEvent, int) () "," Returns the value of the requested axis for the given pointer index (use getPointerId(MotionEvent, int) to find the pointer identifier for this index). <br /><br />"
"android.support.v4.view.MotionEventCompat.ACTION_MASK () "," Call getAction(), returning only the ACTION_MASK portion. <br /><br />"
"android.support.v4.view.MotionEventCompat.getX (int) () "," Call getX(int). <br /><br />"
"android.support.v4.view.MotionEventCompat.MotionEvent () "," Gets the source of the event. <br /><br />"
"android.support.v4.view.MotionEventCompat.getY (int) () "," Call getY(int). <br /><br />"
"android.support.v4.view.MotionEventCompat.getPointerId (int) () "," Call getPointerId(int). <br /><br />"
"android.support.v4.view.MotionEventCompat.getAction () () "," Call getAction(), returning only the pointer index portion <br /><br />"
"android.support.v4.view.MotionEventCompat.findPointerIndex (int) () "," Call findPointerIndex(int). <br /><br />"
"android.support.v4.view.NestedScrollingChild.dispatchNestedPreScroll (int dx, int dy, int[] consumed, int[] offsetInWindow) "," Dispatch one step of a nested scroll in progress before this view consumes any portion of it. <br /><br />"
"android.support.v4.view.NestedScrollingChild.setNestedScrollingEnabled (boolean enabled) "," Enable or disable nested scrolling for this view. <br /><br />"
"android.support.v4.view.NestedScrollingChild.dispatchNestedScroll (int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[] offsetInWindow) "," Dispatch one step of a nested scroll in progress. <br /><br />"
"android.support.v4.view.NestedScrollingChild.stopNestedScroll () "," Stop a nested scroll in progress. <br /><br />"
"android.support.v4.view.NestedScrollingChild.hasNestedScrollingParent () "," Returns true if this view has a nested scrolling parent. <br /><br />"
"android.support.v4.view.NestedScrollingChild.isNestedScrollingEnabled () "," Returns true if nested scrolling is enabled for this view. <br /><br />"
"android.support.v4.view.NestedScrollingChild.dispatchNestedPreFling (float velocityX, float velocityY) "," Dispatch a fling to a nested scrolling parent before it is processed by this view. <br /><br />"
"android.support.v4.view.NestedScrollingChild.startNestedScroll (int axes) "," Begin a nestable scroll operation along the given axes. <br /><br />"
"android.support.v4.view.NestedScrollingChild.dispatchNestedFling (float velocityX, float velocityY, boolean consumed) "," Dispatch a fling to a nested scrolling parent. <br /><br />"
"android.support.v4.view.NestedScrollingChildHelper.onDetachedFromWindow () "," View subclasses should always call this method on their NestedScrollingChildHelper when detached from a window. <br /><br />"
"android.support.v4.view.NestedScrollingChildHelper.dispatchNestedPreScroll (int dx, int dy, int[] consumed, int[] offsetInWindow) "," Dispatch one step of a nested pre-scrolling operation to the current nested scrolling parent. <br /><br />"
"android.support.v4.view.NestedScrollingChildHelper.setNestedScrollingEnabled (boolean enabled) "," Enable nested scrolling. <br /><br />"
"android.support.v4.view.NestedScrollingChildHelper.dispatchNestedScroll (int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[] offsetInWindow) "," Dispatch one step of a nested scrolling operation to the current nested scrolling parent. <br /><br />"
"android.support.v4.view.NestedScrollingChildHelper.stopNestedScroll () "," Stop a nested scroll in progress. <br /><br />"
"android.support.v4.view.NestedScrollingChildHelper.hasNestedScrollingParent () "," Check if this view has a nested scrolling parent view currently receiving events for a nested scroll in progress. <br /><br />"
"android.support.v4.view.NestedScrollingChildHelper.View () "," Called when a nested scrolling child stops its current nested scroll operation. <br /><br />"
"android.support.v4.view.NestedScrollingChildHelper.isNestedScrollingEnabled () "," Check if nested scrolling is enabled for this view. <br /><br />"
"android.support.v4.view.NestedScrollingChildHelper.dispatchNestedPreFling (float velocityX, float velocityY) "," Dispatch a nested pre-fling operation to the current nested scrolling parent. <br /><br />"
"android.support.v4.view.NestedScrollingChildHelper.startNestedScroll (int axes) "," Start a new nested scroll for this view. <br /><br />"
"android.support.v4.view.NestedScrollingChildHelper.dispatchNestedFling (float velocityX, float velocityY, boolean consumed) "," Dispatch a nested fling operation to the current nested scrolling parent. <br /><br />"
"android.support.v4.view.NestedScrollingParent.getNestedScrollAxes () "," Return the current axes of nested scrolling for this NestedScrollingParent. <br /><br />"
"android.support.v4.view.NestedScrollingParent.View () "," React to a nested scroll operation ending. <br /><br />"
"android.support.v4.view.NestedScrollingParentHelper.getNestedScrollAxes () "," Return the current axes of nested scrolling for this ViewGroup. <br /><br />"
"android.support.v4.view.NestedScrollingParentHelper.View () "," Called when a nested scrolling operation initiated by a descendant view is accepted by this ViewGroup. <br /><br />"
"android.support.v4.view.OnApplyWindowInsetsListener.set () "," When set on a View, this listener method will be called instead of the view's own onApplyWindowInsets method. <br /><br />"
"android.support.v4.view.PagerAdapter.destroyItem (ViewGroup, int, Object) () "," This method is deprecated. Use destroyItem(ViewGroup, int, Object) <br /><br />"
"android.support.v4.view.PagerAdapter.saveState () () "," Restore any instance state associated with this adapter and its pages that was previously saved by saveState(). <br /><br />"
"android.support.v4.view.PagerAdapter.saveState () "," Save any instance state associated with this adapter and its pages that should be restored if the current UI state needs to be reconstructed. <br /><br />"
"android.support.v4.view.PagerAdapter.getPageWidth (int position) "," Returns the proportional width of a given page as a percentage of the ViewPager's measured width from (0.f-1.f] <br /><br />"
"android.support.v4.view.PagerAdapter.getCount () "," Return the number of views available. <br /><br />"
"android.support.v4.view.PagerAdapter.ViewGroup () "," Called when a change in the shown pages is going to start being made. <br /><br />"
"android.support.v4.view.PagerAdapter.Object () "," Called to inform the adapter of which item is currently considered to be the 'primary', that is the one show to the user as the current page. <br /><br />"
"android.support.v4.view.PagerAdapter.finishUpdate (ViewGroup) () "," This method is deprecated. Use finishUpdate(ViewGroup) <br /><br />"
"android.support.v4.view.PagerAdapter.setPrimaryItem (ViewGroup, int, Object) () "," This method is deprecated. Use setPrimaryItem(ViewGroup, int, Object) <br /><br />"
"android.support.v4.view.PagerAdapter.instantiateItem (ViewGroup, int) () "," Determines whether a page View is associated with a specific key object as returned by instantiateItem(ViewGroup, int). <br /><br />"
"android.support.v4.view.PagerAdapter.DataSetObserver () "," Unregister an observer from callbacks related to the adapter's data changing. <br /><br />"
"android.support.v4.view.PagerAdapter.startUpdate (ViewGroup) () "," This method is deprecated. Use startUpdate(ViewGroup) <br /><br />"
"android.support.v4.view.PagerAdapter.getPageTitle (int position) "," This method may be called by the ViewPager to obtain a title string to describe the specified page. <br /><br />"
"android.support.v4.view.PagerAdapter.notifyDataSetChanged () "," This method should be called by the application if the data backing this adapter has changed and associated views should update. <br /><br />"
"android.support.v4.view.PagerTabStrip.getTabIndicatorColor () "," no description <br /><br />"
"android.support.v4.view.PagerTabStrip.setBackgroundColor (int color) "," Sets the background color for this view. <br /><br />"
"android.support.v4.view.PagerTabStrip.setPadding (int left, int top, int right, int bottom) "," Sets the padding. <br /><br />"
"android.support.v4.view.PagerTabStrip.setBackgroundResource (int resId) "," Set the background to a given resource. <br /><br />"
"android.support.v4.view.PagerTabStrip.setTabIndicatorColor (int color) "," Set the color of the tab indicator bar. <br /><br />"
"android.support.v4.view.PagerTabStrip.getDrawFullUnderline () "," Return whether or not this tab strip will draw a full-width underline. <br /><br />"
"android.support.v4.view.PagerTabStrip.setBackground (Drawable) () "," This method is deprecated. use setBackground(Drawable) instead <br /><br />"
"android.support.v4.view.PagerTabStrip.MotionEvent () "," Implement this method to handle touch screen motion events. <br /><br />"
"android.support.v4.view.PagerTabStrip.setDrawFullUnderline (boolean drawFull) "," Set whether this tab strip should draw a full-width underline in the current tab indicator color. <br /><br />"
"android.support.v4.view.PagerTabStrip.setTextSpacing (int textSpacing) "," Set the required spacing between title segments. <br /><br />"
"android.support.v4.view.PagerTabStrip.setTabIndicatorColorResource (int resId) "," Set the color of the tab indicator bar from a color resource. <br /><br />"
"android.support.v4.view.PagerTitleStrip.setTextSpacing (int spacingPixels) "," Set the required spacing between title segments. <br /><br />"
"android.support.v4.view.PagerTitleStrip.setTextColor (int color) "," Set the color value used as the base color for all displayed page titles. <br /><br />"
"android.support.v4.view.PagerTitleStrip.setNonPrimaryAlpha (float alpha) "," Set the alpha value used for non-primary page titles. <br /><br />"
"android.support.v4.view.PagerTitleStrip.requestLayout () "," Call this when something has changed which has invalidated the layout of this view. <br /><br />"
"android.support.v4.view.PagerTitleStrip.getTextSpacing () "," no description <br /><br />"
"android.support.v4.view.PagerTitleStrip.Gravity (int gravity) "," Set the Gravity used to position text within the title strip. <br /><br />"
"android.support.v4.view.PagerTitleStrip.setTextSize (int unit, float size) "," Set the default text size to a given unit and value. <br /><br />"
"android.support.v4.view.ScaleGestureDetectorCompat.Object () "," Set whether the associated OnScaleGestureListener should receive onScale callbacks when the user performs a doubleTap followed by a swipe. <br /><br />"
"android.support.v4.view.ScrollingView.computeVerticalScrollRange () "," Compute the vertical range that the vertical scrollbar represents. <br /><br />"
"android.support.v4.view.ScrollingView.computeHorizontalScrollOffset () "," Compute the horizontal offset of the horizontal scrollbar's thumb within the horizontal range. <br /><br />"
"android.support.v4.view.ScrollingView.computeVerticalScrollOffset () "," Compute the vertical offset of the vertical scrollbar's thumb within the horizontal range. <br /><br />"
"android.support.v4.view.ScrollingView.computeHorizontalScrollRange () "," Compute the horizontal range that the horizontal scrollbar represents. <br /><br />"
"android.support.v4.view.ScrollingView.computeVerticalScrollExtent () "," Compute the vertical extent of the vertical scrollbar's thumb within the vertical range. <br /><br />"
"android.support.v4.view.ScrollingView.computeHorizontalScrollExtent () "," Compute the horizontal extent of the horizontal scrollbar's thumb within the horizontal range. <br /><br />"
"android.support.v4.view.TintableBackgroundView.getSupportBackgroundTintList () "," Return the tint applied to the background drawable, if specified. <br /><br />"
"android.support.v4.view.TintableBackgroundView.ColorStateList () "," Applies a tint to the background drawable. <br /><br />"
"android.support.v4.view.TintableBackgroundView.setSupportBackgroundTintList (ColorStateList) () "," Specifies the blending mode used to apply the tint specified by setSupportBackgroundTintList(ColorStateList)} to the background drawable. <br /><br />"
"android.support.v4.view.TintableBackgroundView.getSupportBackgroundTintMode () "," Return the blending mode used to apply the tint to the background drawable, if specified. <br /><br />"
"android.support.v4.view.VelocityTrackerCompat.getYVelocity (int) () "," Call getYVelocity(int). <br /><br />"
"android.support.v4.view.VelocityTrackerCompat.getXVelocity (int) () "," Call getXVelocity(int). <br /><br />"
"android.support.v4.view.ViewCompat.OnApplyWindowInsetsListener () "," Set an OnApplyWindowInsetsListener to take over the policy for applying window insets to this view. <br /><br />"
"android.support.v4.view.ViewCompat.String () "," Sets the name of the View to be used to identify Views in Transitions. <br /><br />"
"android.support.v4.view.ViewCompat.AccessibilityService () "," Gets the provider for managing a virtual view hierarchy rooted at this View and reported to AccessibilityServices that explore the window content. <br /><br />"
"android.support.v4.view.ViewCompat.ViewGroup () "," Tells the ViewGroup whether to draw its children in the order defined by the method ViewGroup.getChildDrawingOrder(int, int). <br /><br />"
"android.support.v4.view.ViewCompat.left () "," The vertical location of this view relative to its left position. <br /><br />"
"android.support.v4.view.ViewCompat.fitSystemWindows (Rect) () "," Sets whether or not this view should account for system screen decorations such as the status bar and inset its content; that is, controlling whether the default implementation of fitSystemWindows(Rect) will be executed. <br /><br />"
"android.support.v4.view.ViewCompat.AccessibilityDelegateCompat () "," Sets a delegate for implementing accessibility support via compositon as opposed to inheritance. <br /><br />"
"android.support.v4.view.ViewCompat.View () "," Stop a nested scroll in progress. <br /><br />"
"android.support.v4.view.ViewCompat.Paint () "," Specifies the type of layer backing this view. <br /><br />"
"android.support.v4.view.ViewCompat.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.support.v4.view.ViewCompat.ColorStateList () "," Applies a tint to the background drawable. <br /><br />"
"android.support.v4.view.ViewCompat.dispatchPopulateAccessibilityEvent (AccessibilityEvent) () "," Called from dispatchPopulateAccessibilityEvent(AccessibilityEvent) giving a chance to this View to populate the accessibility event with its text content. <br /><br />"
"android.support.v4.view.ViewCompat.elevation () "," Sets the depth location of this view relative to its elevation. <br /><br />"
"android.support.v4.view.ViewCompat.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.support.v4.view.ViewCompat.getMeasuredHeightAndState (View) () "," Return only the state bits of getMeasuredWidthAndState(View) and getMeasuredHeightAndState(View), combined into one integer. <br /><br />"
"android.support.v4.view.ViewCompat.Bundle () "," Performs the specified accessibility action on the view. <br /><br />"
"android.support.v4.view.ViewCompat.LAYER_TYPE_NONE () "," Updates the Paint object used with the current layer (used only if the current layer type is not set to LAYER_TYPE_NONE). <br /><br />"
"android.support.v4.view.ViewCompat.resolveSizeAndState (int size, int measureSpec, int childMeasuredState) "," Utility to reconcile a desired size and state, with constraints imposed by a MeasureSpec. <br /><br />"
"android.support.v4.view.ViewCompat.WindowInsetsCompat () "," Called when the view should apply WindowInsetsCompat according to its internal policy. <br /><br />"
"android.support.v4.view.ViewCompat.setBackgroundTintList (android.view.View, android.content.res.ColorStateList) () "," Specifies the blending mode used to apply the tint specified by setBackgroundTintList(android.view.View, android.content.res.ColorStateList) to the background drawable. <br /><br />"
"android.support.v4.view.ViewCompat.Runnable () "," Causes the Runnable to execute on the next animation time step, after the specified amount of time elapses. <br /><br />"
"android.support.v4.view.ViewCompat.measure (int, int) () "," Return the full width measurement information for this view as computed by the most recent call to measure(int, int). <br /><br />"
"android.support.v4.view.ViewCompat.scaled () "," Sets the y location of the point around which the view is rotated and scaled. <br /><br />"
"android.support.v4.view.ViewConfigurationCompat.getScaledPagingTouchSlop () () "," Call getScaledPagingTouchSlop(). <br /><br />"
"android.support.v4.view.ViewConfigurationCompat.ViewConfiguration () "," Report if the device has a permanent menu key available to the user, in a backwards compatible way. <br /><br />"
"android.support.v4.view.ViewGroupCompat.AccessibilityEvent () "," Called when a child has requested sending an AccessibilityEvent and gives an opportunity to its parent to augment the event. <br /><br />"
"android.support.v4.view.ViewGroupCompat.LAYOUT_MODE_OPTICAL_BOUNDS () "," Returns the basis of alignment during layout operations on this ViewGroup: either LAYOUT_MODE_CLIP_BOUNDS or LAYOUT_MODE_OPTICAL_BOUNDS. <br /><br />"
"android.support.v4.view.ViewGroupCompat.ViewGroup () "," Changes whether or not this ViewGroup should be treated as a single entity during Activity Transitions. <br /><br />"
"android.support.v4.view.ViewPager.AttributeSet () "," Returns a new set of layout parameters based on the supplied attributes set. <br /><br />"
"android.support.v4.view.ViewPager.MotionEvent () "," Implement this method to handle touch screen motion events. <br /><br />"
"android.support.v4.view.ViewPager.setPageMargin (int marginPixels) "," Set the margin between pages. <br /><br />"
"android.support.v4.view.ViewPager.setCurrentItem (int item, boolean smoothScroll) "," Set the currently selected page. <br /><br />"
"android.support.v4.view.ViewPager.PagerAdapter () "," Set a PagerAdapter that will supply views for this pager as needed. <br /><br />"
"android.support.v4.view.ViewPager.ViewPager.PageTransformer () "," Set a ViewPager.PageTransformer that will be called for each attached page whenever the scroll position is changed. <br /><br />"
"android.support.v4.view.ViewPager.onSaveInstanceState () "," Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. <br /><br />"
"android.support.v4.view.ViewPager.canScrollHorizontally (int direction) "," Check if this view can be scrolled horizontally in a certain direction. <br /><br />"
"android.support.v4.view.ViewPager.arrowScroll (int direction) "," no description <br /><br />"
"android.support.v4.view.ViewPager.Drawable () "," Set a drawable that will be used to fill the margin between pages. <br /><br />"
"android.support.v4.view.ViewPager.ViewPager.OnPageChangeListener () "," Set a listener that will be invoked whenever the page changes or is incrementally scrolled. <br /><br />"
"android.support.v4.view.ViewPager.beginFakeDrag () "," Start a fake drag of the pager. <br /><br />"
"android.support.v4.view.ViewPager.endFakeDrag () "," End a fake drag of the pager. <br /><br />"
"android.support.v4.view.ViewPager.getCurrentItem () "," no description <br /><br />"
"android.support.v4.view.ViewPager.onSaveInstanceState () () "," Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState(). <br /><br />"
"android.support.v4.view.ViewPager.setOffscreenPageLimit (int limit) "," Set the number of pages that should be retained to either side of the current page in the view hierarchy in an idle state. <br /><br />"
"android.support.v4.view.ViewPager.Canvas () "," Manually render this view (and all of its children) to the given Canvas. <br /><br />"
"android.support.v4.view.ViewPager.getOffscreenPageLimit () "," Returns the number of pages that will be retained to either side of the current page in the view hierarchy in an idle state. <br /><br />"
"android.support.v4.view.ViewPager.isFakeDragging () "," Returns true if a fake drag is in progress. <br /><br />"
"android.support.v4.view.ViewPager.getPageMargin () "," Return the margin between pages. <br /><br />"
"android.support.v4.view.ViewPager.View () "," Dispatches an AccessibilityEvent to the View first and then to its children for adding their text content to the event. <br /><br />"
"android.support.v4.view.ViewPager.setPageMarginDrawable (int resId) "," Set a drawable that will be used to fill the margin between pages. <br /><br />"
"android.support.v4.view.ViewPager.computeScroll () "," Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary. <br /><br />"
"android.support.v4.view.ViewPager.ViewGroup.LayoutParams () "," Adds a child view with the specified layout parameters. <br /><br />"
"android.support.v4.view.ViewPager.setCurrentItem (int item) "," Set the currently selected page. <br /><br />"
"android.support.v4.view.ViewPager.KeyEvent () "," You can call this function yourself to have the scroll view perform scrolling from a key event, just as if the event had been dispatched to it by the view hierarchy. <br /><br />"
"android.support.v4.view.ViewPager.getAdapter () "," Retrieve the current adapter supplying pages. <br /><br />"
"android.support.v4.view.ViewPager.dispatchDraw (android.graphics.Canvas) () "," Note: do not invoke this method from draw(android.graphics.Canvas), onDraw(android.graphics.Canvas), dispatchDraw(android.graphics.Canvas) or any related method. <br /><br />"
"android.support.v4.view.ViewPager.fakeDragBy (float xOffset) "," Fake drag by an offset in pixels. <br /><br />"
"android.support.v4.view.ViewPager.OnPageChangeListener.onPageSelected (int position) "," This method will be invoked when a new page becomes selected. <br /><br />"
"android.support.v4.view.ViewPager.OnPageChangeListener.onPageScrolled (int position, float positionOffset, int positionOffsetPixels) "," This method will be invoked when the current page is scrolled, either as part of a programmatically initiated smooth scroll or a user initiated touch scroll. <br /><br />"
"android.support.v4.view.ViewPager.OnPageChangeListener.onPageScrollStateChanged (int state) "," Called when the scroll state changes. <br /><br />"
"android.support.v4.view.ViewPager.PageTransformer.View () "," Apply a property transformation to the given page. <br /><br />"
"android.support.v4.view.ViewPager.SavedState.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.support.v4.view.ViewPager.SavedState.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.support.v4.view.ViewPager.SimpleOnPageChangeListener.onPageSelected (int position) "," This method will be invoked when a new page becomes selected. <br /><br />"
"android.support.v4.view.ViewPager.SimpleOnPageChangeListener.onPageScrolled (int position, float positionOffset, int positionOffsetPixels) "," This method will be invoked when the current page is scrolled, either as part of a programmatically initiated smooth scroll or a user initiated touch scroll. <br /><br />"
"android.support.v4.view.ViewPager.SimpleOnPageChangeListener.onPageScrollStateChanged (int state) "," Called when the scroll state changes. <br /><br />"
"android.support.v4.view.ViewParentCompat.AccessibilityEvent () "," Called by a child to request from its parent to send an AccessibilityEvent. <br /><br />"
"android.support.v4.view.ViewParentCompat.View () "," React to a nested scroll operation ending. <br /><br />"
"android.support.v4.view.ViewParentCompatICS.AccessibilityEvent () "," no description <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.scaleXBy (float value) "," This method will cause the View's scaleX property to be animated by the specified value. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.translationX (float value) "," This method will cause the View's translationX property to be animated to the specified value. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.rotationX (float value) "," This method will cause the View's rotationX property to be animated to the specified value. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.alphaBy (float value) "," This method will cause the View's alpha property to be animated by the specified value. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.setDuration (long value) "," Sets the duration for the underlying animator that animates the requested properties. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.scaleY (float value) "," This method will cause the View's scaleY property to be animated to the specified value. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.y (float value) "," This method will cause the View's y property to be animated to the specified value. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.cancel () "," Cancels all property animations that are currently running or pending. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.translationYBy (float value) "," This method will cause the View's translationY property to be animated by the specified value. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.getDuration () "," Returns the current duration of property animations. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.LAYER_TYPE_HARDWARE () "," The View associated with this ViewPropertyAnimator will have its layer type set to LAYER_TYPE_HARDWARE for the duration of the next animation. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.scaleYBy (float value) "," This method will cause the View's scaleY property to be animated by the specified value. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.translationXBy (float value) "," This method will cause the View's translationX property to be animated by the specified value. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.setStartDelay (long value) "," Sets the startDelay for the underlying animator that animates the requested properties. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.rotation (float value) "," This method will cause the View's rotation property to be animated to the specified value. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.rotationYBy (float value) "," This method will cause the View's rotationY property to be animated by the specified value. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.start () "," Starts the currently pending property animations immediately. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.rotationXBy (float value) "," This method will cause the View's rotationX property to be animated by the specified value. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.getStartDelay () "," Returns the current startDelay of property animations. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.yBy (float value) "," This method will cause the View's y property to be animated by the specified value. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.xBy (float value) "," This method will cause the View's x property to be animated by the specified value. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.rotationBy (float value) "," This method will cause the View's rotation property to be animated by the specified value. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.scaleX (float value) "," This method will cause the View's scaleX property to be animated to the specified value. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.translationY (float value) "," This method will cause the View's translationY property to be animated to the specified value. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.alpha (float value) "," This method will cause the View's alpha property to be animated to the specified value. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.x (float value) "," This method will cause the View's x property to be animated to the specified value. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.ViewPropertyAnimatorUpdateListener () "," Sets a listener for update events in the underlying Animator that runs the property animations. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.rotationY (float value) "," This method will cause the View's rotationY property to be animated to the specified value. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.getInterpolator () "," Returns the timing interpolator that this animation uses. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.Interpolator () "," Sets the interpolator for the underlying animator that animates the requested properties. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.ViewPropertyAnimatorListener () "," Sets a listener for events in the underlying Animators that run the property animations. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorCompat.Runnable () "," Specifies an action to take place when the next animation runs. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorListener.View () "," Notifies the start of the animation. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorListenerAdapter.View () "," Notifies the start of the animation. <br /><br />"
"android.support.v4.view.ViewPropertyAnimatorUpdateListener.View () "," Notifies the occurrence of another frame of the animation. <br /><br />"
"android.support.v4.view.WindowInsetsCompat.consumeStableInsets () "," Returns a copy of this WindowInsets with the stable insets fully consumed. <br /><br />"
"android.support.v4.view.WindowInsetsCompat.hasStableInsets () "," Returns true if this WindowInsets has nonzero stable insets. <br /><br />"
"android.support.v4.view.WindowInsetsCompat.isRound () "," Returns true if the associated window has a round shape. <br /><br />"
"android.support.v4.view.WindowInsetsCompat.hasSystemWindowInsets () "," Returns true if this WindowInsets has nonzero system window insets. <br /><br />"
"android.support.v4.view.WindowInsetsCompat.consumeSystemWindowInsets () "," Returns a copy of this WindowInsets with the system window insets fully consumed. <br /><br />"
"android.support.v4.view.WindowInsetsCompat.getStableInsetRight () "," Returns the right stable inset in pixels. <br /><br />"
"android.support.v4.view.WindowInsetsCompat.hasInsets () "," Returns true if this WindowInsets has any nonzero insets. <br /><br />"
"android.support.v4.view.WindowInsetsCompat.isConsumed () "," Check if these insets have been fully consumed. <br /><br />"
"android.support.v4.view.WindowInsetsCompat.getStableInsetTop () "," Returns the top stable inset in pixels. <br /><br />"
"android.support.v4.view.WindowInsetsCompat.Rect () "," Returns a copy of this WindowInsets with selected system window insets replaced with new values. <br /><br />"
"android.support.v4.view.WindowInsetsCompat.getStableInsetBottom () "," Returns the bottom stable inset in pixels. <br /><br />"
"android.support.v4.view.WindowInsetsCompat.getSystemWindowInsetLeft () "," Returns the left system window inset in pixels. <br /><br />"
"android.support.v4.view.WindowInsetsCompat.getSystemWindowInsetBottom () "," Returns the bottom system window inset in pixels. <br /><br />"
"android.support.v4.view.WindowInsetsCompat.getSystemWindowInsetTop () "," Returns the top system window inset in pixels. <br /><br />"
"android.support.v4.view.WindowInsetsCompat.getSystemWindowInsetRight () "," Returns the right system window inset in pixels. <br /><br />"
"android.support.v4.view.WindowInsetsCompat.getStableInsetLeft () "," Returns the left stable inset in pixels. <br /><br />"
"android.support.v4.view.WindowInsetsCompat.replaceSystemWindowInsets (int left, int top, int right, int bottom) "," Returns a copy of this WindowInsets with selected system window insets replaced with new values. <br /><br />"
"android.support.v4.widget.AutoScrollHelper.canTargetScrollHorizontally (int direction) "," Override this method to return whether the target view can be scrolled horizontally in a certain direction. <br /><br />"
"android.support.v4.widget.AutoScrollHelper.setRampUpDuration (int durationMillis) "," Sets the amount of time after activation of auto-scrolling that is takes to reach target velocity for the current touch position. <br /><br />"
"android.support.v4.widget.AutoScrollHelper.setMinimumVelocity (float horizontalMin, float verticalMin) "," Sets the absolute minimum scrolling velocity. <br /><br />"
"android.support.v4.widget.AutoScrollHelper.setRelativeEdges (float horizontal, float vertical) "," Sets the activation edge size relative to the host view's dimensions. <br /><br />"
"android.support.v4.widget.AutoScrollHelper.MotionEvent () "," Handles touch events by activating automatic scrolling, adjusting scroll velocity, or stopping. <br /><br />"
"android.support.v4.widget.AutoScrollHelper.scrollTargetBy (int deltaX, int deltaY) "," Override this method to scroll the target view by the specified number of pixels. <br /><br />"
"android.support.v4.widget.AutoScrollHelper.setMaximumVelocity (float horizontalMax, float verticalMax) "," Sets the absolute maximum scrolling velocity. <br /><br />"
"android.support.v4.widget.AutoScrollHelper.isExclusive () "," Indicates whether the scroll helper handles touch events exclusively during scrolling. <br /><br />"
"android.support.v4.widget.AutoScrollHelper.setActivationDelay (int delayMillis) "," Sets the delay after entering an activation edge before activation of auto-scrolling. <br /><br />"
"android.support.v4.widget.AutoScrollHelper.isEnabled () "," no description <br /><br />"
"android.support.v4.widget.AutoScrollHelper.canTargetScrollVertically (int direction) "," Override this method to return whether the target view can be scrolled vertically in a certain direction. <br /><br />"
"android.support.v4.widget.AutoScrollHelper.setRelativeVelocity (float horizontal, float vertical) "," Sets the target scrolling velocity relative to the host view's dimensions. <br /><br />"
"android.support.v4.widget.AutoScrollHelper.setExclusive (boolean exclusive) "," Enables or disables exclusive handling of touch events during scrolling. <br /><br />"
"android.support.v4.widget.AutoScrollHelper.setEnabled (boolean enabled) "," Sets whether the scroll helper is enabled and should respond to touch events. <br /><br />"
"android.support.v4.widget.AutoScrollHelper.setRampDownDuration (int durationMillis) "," Sets the amount of time after de-activation of auto-scrolling that is takes to slow to a stop. <br /><br />"
"android.support.v4.widget.AutoScrollHelper.EDGE_TYPE_INSIDE (int type) "," Sets the activation edge type, one of:  EDGE_TYPE_INSIDE for edges that respond to touches inside the bounds of the host view. <br /><br />"
"android.support.v4.widget.AutoScrollHelper.setMaximumEdges (float horizontalMax, float verticalMax) "," Sets the absolute maximum edge size. <br /><br />"
"android.support.v4.widget.ContentLoadingProgressBar.hide () "," Hide the progress view if it is visible. <br /><br />"
"android.support.v4.widget.ContentLoadingProgressBar.show () "," Show the progress view after waiting for a minimum delay. <br /><br />"
"android.support.v4.widget.ContentLoadingProgressBar.onDetachedFromWindow () "," This is called when the view is detached from a window. <br /><br />"
"android.support.v4.widget.ContentLoadingProgressBar.onAttachedToWindow () "," This is called when the view is attached to a window. <br /><br />"
"android.support.v4.widget.CursorAdapter.getItem (int position) "," no description <br /><br />"
"android.support.v4.widget.CursorAdapter.Cursor () "," Swap in a new Cursor, returning the old Cursor. <br /><br />"
"android.support.v4.widget.CursorAdapter.getCursor () "," Returns the cursor. <br /><br />"
"android.support.v4.widget.CursorAdapter.FilterQueryProvider () "," Sets the query filter provider used to filter the current Cursor. <br /><br />"
"android.support.v4.widget.CursorAdapter.getCount () "," no description <br /><br />"
"android.support.v4.widget.CursorAdapter.CharSequence () "," Runs a query with the specified constraint. <br /><br />"
"android.support.v4.widget.CursorAdapter.hasStableIds () "," Indicates whether the item ids are stable across changes to the underlying data. <br /><br />"
"android.support.v4.widget.CursorAdapter.ViewGroup () "," Makes a new view to hold the data pointed to by cursor. <br /><br />"
"android.support.v4.widget.CursorAdapter.getFilter () "," Returns a filter that can be used to constrain data with a filtering pattern. <br /><br />"
"android.support.v4.widget.CursorAdapter.View () "," Get a View that displays in the drop down popup the data at the specified position in the data set. <br /><br />"
"android.support.v4.widget.CursorAdapter.getFilterQueryProvider () "," Returns the query filter provider used for filtering. <br /><br />"
"android.support.v4.widget.CursorAdapter.getItemId (int position) "," no description <br /><br />"
"android.support.v4.widget.DrawerLayout.DrawerListener.onDrawerStateChanged (int newState) "," Called when the drawer motion state changes. <br /><br />"
"android.support.v4.widget.DrawerLayout.DrawerListener.View () "," Called when a drawer's position changes. <br /><br />"
"android.support.v4.widget.DrawerLayout.AttributeSet () "," Returns a new set of layout parameters based on the supplied attributes set. <br /><br />"
"android.support.v4.widget.DrawerLayout.setDrawerLockMode (int lockMode, int edgeGravity) "," Enable or disable interaction with the given drawer. <br /><br />"
"android.support.v4.widget.DrawerLayout.MotionEvent () "," Implement this method to handle touch screen motion events. <br /><br />"
"android.support.v4.widget.DrawerLayout.getDrawerTitle (int edgeGravity) "," Returns the title of the drawer with the given gravity. <br /><br />"
"android.support.v4.widget.DrawerLayout.closeDrawer (int gravity) "," Close the specified drawer by animating it out of view. <br /><br />"
"android.support.v4.widget.DrawerLayout.isDrawerOpen (int drawerGravity) "," Check if the given drawer view is currently in an open state. <br /><br />"
"android.support.v4.widget.DrawerLayout.onInterceptTouchEvent (MotionEvent) (boolean disallowIntercept) "," Called when a child does not want this parent and its ancestors to intercept touch events with onInterceptTouchEvent(MotionEvent). <br /><br />"
"android.support.v4.widget.DrawerLayout.closeDrawers () "," Close all currently open drawer views by animating them out of view. <br /><br />"
"android.support.v4.widget.DrawerLayout.setDrawerShadow (int resId, int gravity) "," Set a simple drawable used for the left or right shadow. <br /><br />"
"android.support.v4.widget.DrawerLayout.setScrimColor (int color) "," Set a color to use for the scrim that obscures primary content while a drawer is open. <br /><br />"
"android.support.v4.widget.DrawerLayout.DrawerLayout.DrawerListener () "," Set a listener to be notified of drawer events. <br /><br />"
"android.support.v4.widget.DrawerLayout.Drawable () "," Set a drawable to draw in the insets area for the status bar. <br /><br />"
"android.support.v4.widget.DrawerLayout.setDrawerLockMode (int lockMode) "," Enable or disable interaction with all drawers. <br /><br />"
"android.support.v4.widget.DrawerLayout.getStatusBarBackgroundDrawable () "," Gets the drawable used to draw in the insets area for the status bar. <br /><br />"
"android.support.v4.widget.DrawerLayout.getDrawerLockMode (int edgeGravity) "," Check the lock mode of the drawer with the given gravity. <br /><br />"
"android.support.v4.widget.DrawerLayout.requestLayout () "," Call this when something has changed which has invalidated the layout of this view. <br /><br />"
"android.support.v4.widget.DrawerLayout.Canvas () "," Implement this to do your drawing. <br /><br />"
"android.support.v4.widget.DrawerLayout.CharSequence () "," Sets the title of the drawer with the given gravity. <br /><br />"
"android.support.v4.widget.DrawerLayout.View () "," Enable or disable interaction with the given drawer. <br /><br />"
"android.support.v4.widget.DrawerLayout.openDrawer (int gravity) "," Open the specified drawer by animating it out of view. <br /><br />"
"android.support.v4.widget.DrawerLayout.KEYCODE_ENTER () "," Default implementation of KeyEvent.Callback.onKeyUp(): perform clicking of the view when KEYCODE_DPAD_CENTER or KEYCODE_ENTER is released. <br /><br />"
"android.support.v4.widget.DrawerLayout.setStatusBarBackground (int resId) "," Set a drawable to draw in the insets area for the status bar. <br /><br />"
"android.support.v4.widget.DrawerLayout.computeScroll () "," Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary. <br /><br />"
"android.support.v4.widget.DrawerLayout.ViewGroup.LayoutParams () "," Adds a child view with the specified layout parameters. <br /><br />"
"android.support.v4.widget.DrawerLayout.isDrawerVisible (int drawerGravity) "," Check if a given drawer view is currently visible on-screen. <br /><br />"
"android.support.v4.widget.DrawerLayout.setStatusBarBackgroundColor (int color) "," Set a drawable to draw in the insets area for the status bar. <br /><br />"
"android.support.v4.widget.DrawerLayout.SavedState.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.support.v4.widget.DrawerLayout.SimpleDrawerListener.onDrawerStateChanged (int newState) "," Called when the drawer motion state changes. <br /><br />"
"android.support.v4.widget.DrawerLayout.SimpleDrawerListener.View () "," Called when a drawer's position changes. <br /><br />"
"android.support.v4.widget.EdgeEffectCompat.finish () "," Immediately finish the current animation. <br /><br />"
"android.support.v4.widget.EdgeEffectCompat.onRelease () "," Call when the object is released after being pulled. <br /><br />"
"android.support.v4.widget.EdgeEffectCompat.isFinished () "," Reports if this EdgeEffectCompat's animation is finished. <br /><br />"
"android.support.v4.widget.EdgeEffectCompat.setSize (int width, int height) "," Set the size of this edge effect in pixels. <br /><br />"
"android.support.v4.widget.EdgeEffectCompat.Canvas () "," Draw into the provided canvas. <br /><br />"
"android.support.v4.widget.EdgeEffectCompat.onPull (float deltaDistance, float displacement) "," A view should call this when content is pulled away from an edge by the user. <br /><br />"
"android.support.v4.widget.EdgeEffectCompat.onPull (float, float) (float deltaDistance) "," This method is deprecated. use onPull(float, float) <br /><br />"
"android.support.v4.widget.EdgeEffectCompat.onAbsorb (int velocity) "," Call when the effect absorbs an impact at the given velocity. <br /><br />"
"android.support.v4.widget.ExploreByTouchHelper.invalidateVirtualView (int virtualViewId) "," Notifies the accessibility framework that the properties of a particular item have changed. <br /><br />"
"android.support.v4.widget.ExploreByTouchHelper.AccessibilityNodeProviderCompat () "," Returns the AccessibilityNodeProviderCompat for this helper. <br /><br />"
"android.support.v4.widget.ExploreByTouchHelper.getFocusedVirtualView () "," Returns the virtual view id for the currently focused item, <br /><br />"
"android.support.v4.widget.ExploreByTouchHelper.sendEventForVirtualView (int virtualViewId, int eventType) "," Populates an event of the specified type with information about an item and attempts to send it up through the view hierarchy. <br /><br />"
"android.support.v4.widget.ExploreByTouchHelper.MotionEvent () "," Dispatches hover MotionEvents to the virtual view hierarchy when the Explore by Touch feature is enabled. <br /><br />"
"android.support.v4.widget.ExploreByTouchHelper.invalidateRoot () "," Notifies the accessibility framework that the properties of the parent view have changed. <br /><br />"
"android.support.v4.widget.ListPopupWindowCompat.View.OnTouchListener () "," On API KITKAT and higher, returns an View.OnTouchListener that can be added to the source view to implement drag-to-open behavior. <br /><br />"
"android.support.v4.widget.ListViewAutoScrollHelper.canTargetScrollHorizontally (int direction) "," Override this method to return whether the target view can be scrolled horizontally in a certain direction. <br /><br />"
"android.support.v4.widget.ListViewAutoScrollHelper.canTargetScrollVertically (int direction) "," Override this method to return whether the target view can be scrolled vertically in a certain direction. <br /><br />"
"android.support.v4.widget.ListViewAutoScrollHelper.scrollTargetBy (int deltaX, int deltaY) "," Override this method to scroll the target view by the specified number of pixels. <br /><br />"
"android.support.v4.widget.NestedScrollView.setSmoothScrollingEnabled (boolean smoothScrollingEnabled) "," Set whether arrow scrolling will animate its transition. <br /><br />"
"android.support.v4.widget.NestedScrollView.MotionEvent () "," Implement this method to handle touch screen motion events. <br /><br />"
"android.support.v4.widget.NestedScrollView.getMaxScrollAmount () "," no description <br /><br />"
"android.support.v4.widget.NestedScrollView.scrollBy (int, int) (int dx, int dy) "," Like scrollBy(int, int), but scroll smoothly instead of immediately. <br /><br />"
"android.support.v4.widget.NestedScrollView.dispatchNestedPreFling (float velocityX, float velocityY) "," Dispatch a fling to a nested scrolling parent before it is processed by this view. <br /><br />"
"android.support.v4.widget.NestedScrollView.isFillViewport () "," Indicates whether this ScrollView's content is stretched to fill the viewport. <br /><br />"
"android.support.v4.widget.NestedScrollView.startNestedScroll (int axes) "," Begin a nestable scroll operation along the given axes. <br /><br />"
"android.support.v4.widget.NestedScrollView.onInterceptTouchEvent (MotionEvent) (boolean disallowIntercept) "," Called when a child does not want this parent and its ancestors to intercept touch events with onInterceptTouchEvent(MotionEvent). <br /><br />"
"android.support.v4.widget.NestedScrollView.Rect () "," Called when a child of this group wants a particular rectangle to be positioned onto the screen. <br /><br />"
"android.support.v4.widget.NestedScrollView.arrowScroll (int direction) "," Handle scrolling in response to an up or down arrow click. <br /><br />"
"android.support.v4.widget.NestedScrollView.isSmoothScrollingEnabled () "," no description <br /><br />"
"android.support.v4.widget.NestedScrollView.getNestedScrollAxes () "," Return the current axes of nested scrolling for this ViewGroup. <br /><br />"
"android.support.v4.widget.NestedScrollView.dispatchNestedPreScroll (int dx, int dy, int[] consumed, int[] offsetInWindow) "," Dispatch one step of a nested scroll in progress before this view consumes any portion of it. <br /><br />"
"android.support.v4.widget.NestedScrollView.onAttachedToWindow () "," This is called when the view is attached to a window. <br /><br />"
"android.support.v4.widget.NestedScrollView.setNestedScrollingEnabled (boolean enabled) "," Enable or disable nested scrolling for this view. <br /><br />"
"android.support.v4.widget.NestedScrollView.stopNestedScroll () "," Stop a nested scroll in progress. <br /><br />"
"android.support.v4.widget.NestedScrollView.pageScroll (int direction) "," Handles scrolling in response to a 'page up/down' shortcut press. <br /><br />"
"android.support.v4.widget.NestedScrollView.scrollTo (int, int) (int x, int y) "," Like scrollTo(int, int), but scroll smoothly instead of immediately. <br /><br />"
"android.support.v4.widget.NestedScrollView.isNestedScrollingEnabled () "," Returns true if nested scrolling is enabled for this view. <br /><br />"
"android.support.v4.widget.NestedScrollView.fling (int velocityY) "," Fling the scroll view <br /><br />"
"android.support.v4.widget.NestedScrollView.setFillViewport (boolean fillViewport) "," Indicates this ScrollView whether it should stretch its content height to fill the viewport or not. <br /><br />"
"android.support.v4.widget.NestedScrollView.shouldDelayChildPressedState () "," Return true if the pressed state should be delayed for children or descendants of this ViewGroup. <br /><br />"
"android.support.v4.widget.NestedScrollView.requestLayout () "," Call this when something has changed which has invalidated the layout of this view. <br /><br />"
"android.support.v4.widget.NestedScrollView.Canvas () "," Manually render this view (and all of its children) to the given Canvas. <br /><br />"
"android.support.v4.widget.NestedScrollView.scrollTo (int x, int y) "," Set the scrolled position of your view. This version also clamps the scrolling to the bounds of our child. <br /><br />"
"android.support.v4.widget.NestedScrollView.hasNestedScrollingParent () "," Returns true if this view has a nested scrolling parent. <br /><br />"
"android.support.v4.widget.NestedScrollView.fullScroll (int direction) "," Handles scrolling in response to a 'home/end' shortcut press. <br /><br />"
"android.support.v4.widget.NestedScrollView.View () "," Called when a child of this parent wants focus <br /><br />"
"android.support.v4.widget.NestedScrollView.computeScroll () "," Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary. <br /><br />"
"android.support.v4.widget.NestedScrollView.ViewGroup.LayoutParams () "," Adds a child view with the specified layout parameters. <br /><br />"
"android.support.v4.widget.NestedScrollView.KeyEvent () "," You can call this function yourself to have the scroll view perform scrolling from a key event, just as if the event had been dispatched to it by the view hierarchy. <br /><br />"
"android.support.v4.widget.NestedScrollView.dispatchNestedScroll (int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[] offsetInWindow) "," Dispatch one step of a nested scroll in progress. <br /><br />"
"android.support.v4.widget.NestedScrollView.dispatchNestedFling (float velocityX, float velocityY, boolean consumed) "," Dispatch a fling to a nested scrolling parent. <br /><br />"
"android.support.v4.widget.PopupMenuCompat.View.OnTouchListener () "," On API KITKAT and higher, returns an View.OnTouchListener that can be added to the anchor view to implement drag-to-open behavior. <br /><br />"
"android.support.v4.widget.PopupWindowCompat.View () "," Display the content view in a popup window anchored to the bottom-left corner of the anchor view offset by the specified x and y coordinates. <br /><br />"
"android.support.v4.widget.ResourceCursorAdapter.setViewResource (int layout) "," Sets the layout resource of the item views. <br /><br />"
"android.support.v4.widget.ResourceCursorAdapter.setDropDownViewResource (int dropDownLayout) "," Sets the layout resource of the drop down views. <br /><br />"
"android.support.v4.widget.ResourceCursorAdapter.ViewGroup () "," Inflates view(s) from the specified XML file. <br /><br />"
"android.support.v4.widget.ScrollerCompat.getFinalX () "," no description <br /><br />"
"android.support.v4.widget.ScrollerCompat.computeScrollOffset () "," Call this when you want to know the new location. <br /><br />"
"android.support.v4.widget.ScrollerCompat.isFinished () "," Returns whether the scroller has finished scrolling. <br /><br />"
"android.support.v4.widget.ScrollerCompat.notifyVerticalEdgeReached (int startY, int finalY, int overY) "," Notify the scroller that we've reached a vertical boundary. <br /><br />"
"android.support.v4.widget.ScrollerCompat.notifyHorizontalEdgeReached (int startX, int finalX, int overX) "," Notify the scroller that we've reached a horizontal boundary. <br /><br />"
"android.support.v4.widget.ScrollerCompat.getCurrX () "," Returns the current X offset in the scroll. <br /><br />"
"android.support.v4.widget.ScrollerCompat.abortAnimation () "," Stops the animation. <br /><br />"
"android.support.v4.widget.ScrollerCompat.getCurrVelocity () "," Returns the current velocity on platform versions that support it. <br /><br />"
"android.support.v4.widget.ScrollerCompat.isOverScrolled () "," Returns whether the current Scroller is currently returning to a valid position. <br /><br />"
"android.support.v4.widget.ScrollerCompat.Context () "," no description <br /><br />"
"android.support.v4.widget.ScrollerCompat.fling (int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY) "," Start scrolling based on a fling gesture. <br /><br />"
"android.support.v4.widget.ScrollerCompat.startScroll (int startX, int startY, int dx, int dy) "," Start scrolling by providing a starting point and the distance to travel. <br /><br />"
"android.support.v4.widget.ScrollerCompat.getCurrY () "," Returns the current Y offset in the scroll. <br /><br />"
"android.support.v4.widget.ScrollerCompat.getFinalY () "," no description <br /><br />"
"android.support.v4.widget.ScrollerCompat.startScroll (int startX, int startY, int dx, int dy, int duration) "," Start scrolling by providing a starting point and the distance to travel. <br /><br />"
"android.support.v4.widget.ScrollerCompat.Interpolator () "," no description <br /><br />"
"android.support.v4.widget.ScrollerCompat.fling (int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY, int overX, int overY) "," Start scrolling based on a fling gesture. <br /><br />"
"android.support.v4.widget.ScrollerCompatTestBase.testTargetReached () "," no description <br /><br />"
"android.support.v4.widget.ScrollerCompatTestBase.testAbort () "," no description <br /><br />"
"android.support.v4.widget.SearchViewCompat.OnCloseListenerCompat.onClose () "," The user is attempting to close the SearchView. <br /><br />"
"android.support.v4.widget.SearchViewCompat.OnQueryTextListenerCompat.String () "," Called when the user submits the query. <br /><br />"
"android.support.v4.widget.SimpleCursorAdapter.CursorToStringConverter.Cursor () "," Returns a CharSequence representing the specified Cursor. <br /><br />"
"android.support.v4.widget.SimpleCursorAdapter.getCursorToStringConverter () "," Returns the converter used to convert the filtering Cursor into a String. <br /><br />"
"android.support.v4.widget.SimpleCursorAdapter.String () "," Called by bindView() to set the text for a TextView but only if there is no existing ViewBinder or if the existing ViewBinder cannot handle binding to an TextView. <br /><br />"
"android.support.v4.widget.SimpleCursorAdapter.Cursor () "," Swap in a new Cursor, returning the old Cursor. <br /><br />"
"android.support.v4.widget.SimpleCursorAdapter.setStringConversionColumn (int stringConversionColumn) "," Defines the index of the column in the Cursor used to get a String representation of that Cursor. <br /><br />"
"android.support.v4.widget.SimpleCursorAdapter.getStringConversionColumn () "," Return the index of the column used to get a String representation of the Cursor. <br /><br />"
"android.support.v4.widget.SimpleCursorAdapter.String[] () "," Change the cursor and change the column-to-view mappings at the same time. <br /><br />"
"android.support.v4.widget.SimpleCursorAdapter.SimpleCursorAdapter.CursorToStringConverter () "," Sets the converter used to convert the filtering Cursor into a String. <br /><br />"
"android.support.v4.widget.SimpleCursorAdapter.SimpleCursorAdapter.ViewBinder () "," Sets the binder used to bind data to views. <br /><br />"
"android.support.v4.widget.SimpleCursorAdapter.ViewBinder.Cursor () "," Binds the Cursor column defined by the specified index to the specified view. <br /><br />"
"android.support.v4.widget.SlidingPaneLayout.AttributeSet () "," Returns a new set of layout parameters based on the supplied attributes set. <br /><br />"
"android.support.v4.widget.SlidingPaneLayout.setShadowResourceRight (int resId) "," Set a drawable to use as a shadow cast by the left pane onto the right pane during opening/closing to support right to left language. <br /><br />"
"android.support.v4.widget.SlidingPaneLayout.getCoveredFadeColor () "," no description <br /><br />"
"android.support.v4.widget.SlidingPaneLayout.MotionEvent () "," Implement this method to handle touch screen motion events. <br /><br />"
"android.support.v4.widget.SlidingPaneLayout.openPane () "," Open the sliding pane if it is currently slideable. <br /><br />"
"android.support.v4.widget.SlidingPaneLayout.Canvas () "," Manually render this view (and all of its children) to the given Canvas. <br /><br />"
"android.support.v4.widget.SlidingPaneLayout.setSliderFadeColor (int color) "," Set the color used to fade the sliding pane out when it is slid most of the way offscreen. <br /><br />"
"android.support.v4.widget.SlidingPaneLayout.setParallaxDistance (int parallaxBy) "," Set a distance to parallax the lower pane by when the upper pane is in its fully closed state. <br /><br />"
"android.support.v4.widget.SlidingPaneLayout.SlidingPaneLayout.PanelSlideListener () "," no description <br /><br />"
"android.support.v4.widget.SlidingPaneLayout.closePane () "," Close the sliding pane if it is currently slideable. <br /><br />"
"android.support.v4.widget.SlidingPaneLayout.setCoveredFadeColor (int color) "," Set the color used to fade the pane covered by the sliding pane out when the pane will become fully covered in the closed state. <br /><br />"
"android.support.v4.widget.SlidingPaneLayout.View () "," Called when a child of this parent wants focus <br /><br />"
"android.support.v4.widget.SlidingPaneLayout.isSlideable () () "," This method is deprecated. Renamed to isSlideable() - this method is going away soon! <br /><br />"
"android.support.v4.widget.SlidingPaneLayout.computeScroll () "," Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary. <br /><br />"
"android.support.v4.widget.SlidingPaneLayout.setShadowResourceLeft (int resId) "," Set a drawable to use as a shadow cast by the right pane onto the left pane during opening/closing. <br /><br />"
"android.support.v4.widget.SlidingPaneLayout.getParallaxDistance () "," no description <br /><br />"
"android.support.v4.widget.SlidingPaneLayout.getSliderFadeColor () "," no description <br /><br />"
"android.support.v4.widget.SlidingPaneLayout.Drawable () "," Set a drawable to use as a shadow cast by the left pane onto the right pane during opening/closing to support right to left language. <br /><br />"
"android.support.v4.widget.SlidingPaneLayout.isOpen () "," Check if the layout is completely open. <br /><br />"
"android.support.v4.widget.SlidingPaneLayout.isSlideable () "," Check if the content in this layout cannot fully fit side by side and therefore the content pane can be slid back and forth. <br /><br />"
"android.support.v4.widget.SlidingPaneLayout.closePane () () "," This method is deprecated. Renamed to closePane() - this method is going away soon! <br /><br />"
"android.support.v4.widget.SlidingPaneLayout.setShadowResource (int resId) "," Set a drawable to use as a shadow cast by the right pane onto the left pane during opening/closing. <br /><br />"
"android.support.v4.widget.SlidingPaneLayout.setShadowDrawableRight (Drawable) () "," This method is deprecated. Renamed to setShadowDrawableLeft(Drawable) to support LTR (left to right language) and setShadowDrawableRight(Drawable) to support RTL (right to left language) during opening/closing. <br /><br />"
"android.support.v4.widget.SlidingPaneLayout.openPane () () "," This method is deprecated. Renamed to openPane() - this method is going away soon! <br /><br />"
"android.support.v4.widget.SlidingPaneLayout.PanelSlideListener.View () "," Called when a sliding pane's position changes. <br /><br />"
"android.support.v4.widget.SlidingPaneLayout.SimplePanelSlideListener.View () "," Called when a sliding pane's position changes. <br /><br />"
"android.support.v4.widget.SwipeRefreshLayout.canChildScrollUp () "," no description <br /><br />"
"android.support.v4.widget.SwipeRefreshLayout.setColorSchemeResources (int) (int... colors) "," This method is deprecated. Use setColorSchemeResources(int) <br /><br />"
"android.support.v4.widget.SwipeRefreshLayout.MotionEvent () "," Implement this method to handle touch screen motion events. <br /><br />"
"android.support.v4.widget.SwipeRefreshLayout.onInterceptTouchEvent (MotionEvent) (boolean b) "," Called when a child does not want this parent and its ancestors to intercept touch events with onInterceptTouchEvent(MotionEvent). <br /><br />"
"android.support.v4.widget.SwipeRefreshLayout.setColorSchemeResources (int... colorResIds) "," Set the color resources used in the progress animation from color resources. <br /><br />"
"android.support.v4.widget.SwipeRefreshLayout.getProgressCircleDiameter () "," Get the diameter of the progress circle that is displayed as part of the swipe to refresh layout. <br /><br />"
"android.support.v4.widget.SwipeRefreshLayout.isRefreshing () "," no description <br /><br />"
"android.support.v4.widget.SwipeRefreshLayout.setColorSchemeColors (int... colors) "," Set the colors used in the progress animation. <br /><br />"
"android.support.v4.widget.SwipeRefreshLayout.setProgressViewEndTarget (boolean scale, int end) "," The refresh indicator resting position is always positioned near the top of the refreshing content. <br /><br />"
"android.support.v4.widget.SwipeRefreshLayout.setProgressBackgroundColorSchemeColor (int color) "," Set the background color of the progress spinner disc. <br /><br />"
"android.support.v4.widget.SwipeRefreshLayout.setSize (int size) "," One of DEFAULT, or LARGE. <br /><br />"
"android.support.v4.widget.SwipeRefreshLayout.onMeasure (int widthMeasureSpec, int heightMeasureSpec) "," Measure the view and its content to determine the measured width and the measured height. <br /><br />"
"android.support.v4.widget.SwipeRefreshLayout.setRefreshing (boolean refreshing) "," Notify the widget that refresh state has changed. <br /><br />"
"android.support.v4.widget.SwipeRefreshLayout.setProgressViewOffset (boolean scale, int start, int end) "," The refresh indicator starting and resting position is always positioned near the top of the refreshing content. <br /><br />"
"android.support.v4.widget.SwipeRefreshLayout.setProgressBackgroundColorSchemeResource (int colorRes) "," Set the background color of the progress spinner disc. <br /><br />"
"android.support.v4.widget.SwipeRefreshLayout.setDistanceToTriggerSync (int distance) "," Set the distance to trigger a sync in dips <br /><br />"
"android.support.v4.widget.SwipeRefreshLayout.SwipeRefreshLayout.OnRefreshListener () "," Set the listener to be notified when a refresh is triggered via the swipe gesture. <br /><br />"
"android.support.v4.widget.SwipeRefreshLayout.setProgressBackgroundColorSchemeResource (int) (int colorRes) "," This method is deprecated. Use setProgressBackgroundColorSchemeResource(int) <br /><br />"
"android.support.v4.widget.SwipeRefreshLayout.OnRefreshListener.onRefresh () "," no description <br /><br />"
"android.support.v4.widget.ViewDragHelper.Callback.onEdgeTouched (int edgeFlags, int pointerId) "," Called when one of the subscribed edges in the parent view has been touched by the user while no child view is currently captured. <br /><br />"
"android.support.v4.widget.ViewDragHelper.Callback.onEdgeDragStarted (int edgeFlags, int pointerId) "," Called when the user has started a deliberate drag away from one of the subscribed edges in the parent view while no child view is currently captured. <br /><br />"
"android.support.v4.widget.ViewDragHelper.Callback.onViewDragStateChanged (int state) "," Called when the drag state changes. <br /><br />"
"android.support.v4.widget.ViewDragHelper.Callback.getOrderedChildIndex (int index) "," Called to determine the Z-order of child views. <br /><br />"
"android.support.v4.widget.ViewDragHelper.Callback.onEdgeLock (int edgeFlags) "," Called when the given edge may become locked. <br /><br />"
"android.support.v4.widget.ViewDragHelper.Callback.View () "," Called when the user's input indicates that they want to capture the given child view with the pointer indicated by pointerId. <br /><br />"
"android.support.v4.widget.ViewDragHelper.checkTouchSlop (int directions, int pointerId) "," Check if the specified pointer tracked in the current gesture has crossed the required slop threshold. <br /><br />"
"android.support.v4.widget.ViewDragHelper.checkTouchSlop (int directions) "," Check if any pointer tracked in the current gesture has crossed the required slop threshold. <br /><br />"
"android.support.v4.widget.ViewDragHelper.MotionEvent () "," Check if this event as provided to the parent view's onInterceptTouchEvent should cause the parent to intercept the touch event stream. <br /><br />"
"android.support.v4.widget.ViewDragHelper.isEdgeTouched (int edges, int pointerId) "," Check if any of the edges specified were initially touched by the pointer with the specified ID. <br /><br />"
"android.support.v4.widget.ViewDragHelper.getTouchSlop () "," no description <br /><br />"
"android.support.v4.widget.ViewDragHelper.cancel () () "," cancel(), but also abort all motion in progress and snap to the end of any animation. <br /><br />"
"android.support.v4.widget.ViewDragHelper.findTopChildUnder (int x, int y) "," Find the topmost child under the given point within the parent view's coordinate system. <br /><br />"
"android.support.v4.widget.ViewDragHelper.continueSettling (boolean deferCallbacks) "," Move the captured settling view by the appropriate amount for the current time. <br /><br />"
"android.support.v4.widget.ViewDragHelper.View () "," Animate the view child to the given (left, top) position. <br /><br />"
"android.support.v4.widget.ViewDragHelper.isPointerDown (int pointerId) "," Check if the given pointer ID represents a pointer that is currently down (to the best of the ViewDragHelper's knowledge). <br /><br />"
"android.support.v4.widget.ViewDragHelper.flingCapturedView (int minLeft, int minTop, int maxLeft, int maxTop) "," Settle the captured view based on standard free-moving fling behavior. <br /><br />"
"android.support.v4.widget.ViewDragHelper.ViewDragHelper.Callback () "," Factory method to create a new ViewDragHelper. <br /><br />"
"android.support.v4.widget.ViewDragHelper.getViewDragState () "," Retrieve the current drag state of this helper. <br /><br />"
"android.support.v4.widget.ViewDragHelper.setMinVelocity (float minVel) "," Set the minimum velocity that will be detected as having a magnitude greater than zero in pixels per second. <br /><br />"
"android.support.v4.widget.ViewDragHelper.getMinVelocity () "," Return the currently configured minimum velocity. <br /><br />"
"android.support.v4.widget.ViewDragHelper.settleCapturedViewAt (int finalLeft, int finalTop) "," Settle the captured view at the given (left, top) position. <br /><br />"
"android.support.v4.widget.ViewDragHelper.processTouchEvent (android.view.MotionEvent) () "," The result of a call to this method is equivalent to processTouchEvent(android.view.MotionEvent) receiving an ACTION_CANCEL event. <br /><br />"
"android.support.v4.widget.ViewDragHelper.getEdgeSize () "," Return the size of an edge. <br /><br />"
"android.support.v4.widget.ViewDragHelper.setEdgeTrackingEnabled (int edgeFlags) "," Enable edge tracking for the selected edges of the parent view. <br /><br />"
"android.support.v4.widget.ViewDragHelper.getCapturedView () "," no description <br /><br />"
"android.support.v4.widget.ViewDragHelper.isEdgeTouched (int edges) "," Check if any of the edges specified were initially touched in the currently active gesture. <br /><br />"
"android.support.v4.widget.ViewDragHelper.isCapturedViewUnder (int x, int y) "," Determine if the currently captured view is under the given point in the parent view's coordinate system. <br /><br />"
"android.support.v4.widget.ViewDragHelper.getActivePointerId () "," no description <br /><br />"
"android.support.v7.app.ActionBar.setDisplayHomeAsUpEnabled (boolean showHomeAsUp) "," Set whether home should be displayed as an 'up' affordance. <br /><br />"
"android.support.v7.app.ActionBar.DISPLAY_HOME_AS_UP (int resId) "," Set an alternate drawable to display next to the icon/logo/title when DISPLAY_HOME_AS_UP is enabled. <br /><br />"
"android.support.v7.app.ActionBar.setDisplayOptions (int options, int mask) "," Set selected display options. <br /><br />"
"android.support.v7.app.ActionBar.setSubtitle (int resId) "," Set the action bar's subtitle. <br /><br />"
"android.support.v7.app.ActionBar.setElevation (float elevation) "," Set the Z-axis elevation of the action bar in pixels. <br /><br />"
"android.support.v7.app.ActionBar.setTitle (int resId) "," Set the action bar's title. <br /><br />"
"android.support.v7.app.ActionBar.getSubtitle () "," Returns the current ActionBar subtitle in standard mode. <br /><br />"
"android.support.v7.app.ActionBar.setDisplayOptions (int options) "," Set display options. <br /><br />"
"android.support.v7.app.ActionBar.hide () "," Hide the ActionBar if it is currently showing. <br /><br />"
"android.support.v7.app.ActionBar.common navigation patterns (int position) "," This method is deprecated. Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead. <br /><br />"
"android.support.v7.app.ActionBar.getHeight () "," Retrieve the current height of the ActionBar. <br /><br />"
"android.support.v7.app.ActionBar.isShowing () "," no description <br /><br />"
"android.support.v7.app.ActionBar.Drawable () "," Set the ActionBar's stacked background. <br /><br />"
"android.support.v7.app.ActionBar.setLogo (int resId) "," Set the logo to display in the 'home' section of the action bar. <br /><br />"
"android.support.v7.app.ActionBar.getCustomView () "," no description <br /><br />"
"android.support.v7.app.ActionBar.common navigation patterns (int mode) "," This method is deprecated. Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead. <br /><br />"
"android.support.v7.app.ActionBar.setIcon (int resId) "," Set the icon to display in the 'home' section of the action bar. <br /><br />"
"android.support.v7.app.ActionBar.getDisplayOptions () "," no description <br /><br />"
"android.support.v7.app.ActionBar.getTitle () "," Returns the current ActionBar title in standard mode. <br /><br />"
"android.support.v7.app.ActionBar.setDisplayShowCustomEnabled (boolean showCustom) "," Set whether a custom view should be displayed, if set. <br /><br />"
"android.support.v7.app.ActionBar.setHomeActionContentDescription (int resId) "," Set an alternate description for the Home/Up action, when enabled. <br /><br />"
"android.support.v7.app.ActionBar.ActionBar.OnMenuVisibilityListener () "," Remove a menu visibility listener. <br /><br />"
"android.support.v7.app.ActionBar.getHideOffset () "," Return the current vertical offset of the action bar. <br /><br />"
"android.support.v7.app.ActionBar.ActionBar.LayoutParams () "," Set the action bar into custom navigation mode, supplying a view for custom navigation. <br /><br />"
"android.support.v7.app.ActionBar.common navigation patterns () "," This method is deprecated. Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead. <br /><br />"
"android.support.v7.app.ActionBar.setDisplayShowHomeEnabled (boolean showHome) "," Set whether to include the application home affordance in the action bar. <br /><br />"
"android.support.v7.app.ActionBar.setHideOffset (int offset) "," Set the current hide offset of the action bar. <br /><br />"
"android.support.v7.app.ActionBar.setCustomView (int resId) "," Set the action bar into custom navigation mode, supplying a view for custom navigation. <br /><br />"
"android.support.v7.app.ActionBar.setDisplayShowTitleEnabled (boolean showTitle) "," Set whether an activity title/subtitle should be displayed. <br /><br />"
"android.support.v7.app.ActionBar.CharSequence () "," Set the action bar's title. <br /><br />"
"android.support.v7.app.ActionBar.getElevation () "," Get the Z-axis elevation of the action bar in pixels. <br /><br />"
"android.support.v7.app.ActionBar.common navigation patterns (int index) "," This method is deprecated. Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead. <br /><br />"
"android.support.v7.app.ActionBar.setHomeButtonEnabled (boolean enabled) "," Enable or disable the 'home' button in the corner of the action bar. <br /><br />"
"android.support.v7.app.ActionBar.View () "," Set the action bar into custom navigation mode, supplying a view for custom navigation. <br /><br />"
"android.support.v7.app.ActionBar.DISPLAY_HOME_AS_UP () "," Set an alternate drawable to display next to the icon/logo/title when DISPLAY_HOME_AS_UP is enabled. <br /><br />"
"android.support.v7.app.ActionBar.Context () "," Returns a Context with an appropriate theme for creating views that will appear in the action bar. <br /><br />"
"android.support.v7.app.ActionBar.show () "," Show the ActionBar if it is not currently showing. <br /><br />"
"android.support.v7.app.ActionBar.setHideOnContentScrollEnabled (boolean hideOnContentScroll) "," Enable hiding the action bar on content scroll. <br /><br />"
"android.support.v7.app.ActionBar.nested scrolling child () "," Return whether the action bar is configured to scroll out of sight along with a nested scrolling child. <br /><br />"
"android.support.v7.app.ActionBar.setDisplayUseLogoEnabled (boolean useLogo) "," Set whether to display the activity logo rather than the activity icon. <br /><br />"
"android.support.v7.app.ActionBar.OnMenuVisibilityListener.onMenuVisibilityChanged (boolean isVisible) "," Called when an action bar menu is shown or hidden. <br /><br />"
"android.support.v7.app.ActionBar.OnNavigationListener.onNavigationItemSelected (int itemPosition, long itemId) "," This method is called whenever a navigation item in your action bar is selected. <br /><br />"
"android.support.v7.app.ActionBar.Tab.getIcon () "," Return the icon associated with this tab. <br /><br />"
"android.support.v7.app.ActionBar.Tab.select () "," Select this tab. <br /><br />"
"android.support.v7.app.ActionBar.Tab.getTag () "," no description <br /><br />"
"android.support.v7.app.ActionBar.Tab.setText (int resId) "," Set the text displayed on this tab. <br /><br />"
"android.support.v7.app.ActionBar.Tab.CharSequence () "," Set the text displayed on this tab. <br /><br />"
"android.support.v7.app.ActionBar.Tab.Object () "," Give this Tab an arbitrary object to hold for later use. <br /><br />"
"android.support.v7.app.ActionBar.Tab.getText () "," Return the text of this tab. <br /><br />"
"android.support.v7.app.ActionBar.Tab.View () "," Set a custom view to be used for this tab. <br /><br />"
"android.support.v7.app.ActionBar.Tab.ActionBar.TabListener () "," Set the ActionBar.TabListener that will handle switching to and from this tab. <br /><br />"
"android.support.v7.app.ActionBar.Tab.Drawable () "," Set the icon displayed on this tab. <br /><br />"
"android.support.v7.app.ActionBar.Tab.getCustomView () "," Retrieve a previously set custom view for this tab. <br /><br />"
"android.support.v7.app.ActionBar.Tab.setContentDescription (int resId) "," Set a description of this tab's content for use in accessibility support. <br /><br />"
"android.support.v7.app.ActionBar.Tab.setIcon (int resId) "," Set the icon displayed on this tab. <br /><br />"
"android.support.v7.app.ActionBar.Tab.getPosition () "," Return the current position of this tab in the action bar. <br /><br />"
"android.support.v7.app.ActionBar.Tab.setCustomView (int layoutResId) "," Set a custom view to be used for this tab. <br /><br />"
"android.support.v7.app.ActionBar.Tab.getContentDescription () "," Gets a brief description of this tab's content for use in accessibility support. <br /><br />"
"android.support.v7.app.ActionBar.TabListener.FragmentTransaction () "," Called when a tab exits the selected state. <br /><br />"
"android.support.v7.app.ActionBarDrawerToggle.Delegate.Drawable () "," Set the Action Bar's up indicator drawable and content description. <br /><br />"
"android.support.v7.app.ActionBarDrawerToggle.Delegate.setActionBarDescription (int contentDescRes) "," Set the Action Bar's up indicator content description. <br /><br />"
"android.support.v7.app.ActionBarDrawerToggle.Delegate.getActionBarThemedContext () "," Returns the context of ActionBar <br /><br />"
"android.support.v7.app.ActionBarDrawerToggle.Delegate.getThemeUpIndicator () "," Returns the drawable to be set as up button when DrawerToggle is disabled <br /><br />"
"android.support.v7.app.ActionBarDrawerToggle.Delegate.isNavigationVisible () "," Returns whether navigation icon is visible or not. <br /><br />"
"android.support.v7.app.ActionBarDrawerToggle.DelegateProvider.getDrawerToggleDelegate () "," no description <br /><br />"
"android.support.v7.app.ActionBarDrawerToggle.Drawable () "," Set the up indicator to display when the drawer indicator is not enabled. <br /><br />"
"android.support.v7.app.ActionBarDrawerToggle.DrawerLayout.DrawerListener () "," DrawerLayout.DrawerListener callback method. <br /><br />"
"android.support.v7.app.ActionBarDrawerToggle.getToolbarNavigationClickListener () "," Returns the fallback listener for Navigation icon click events. <br /><br />"
"android.support.v7.app.ActionBarDrawerToggle.View.OnClickListener () "," When DrawerToggle is constructed with a Toolbar, it sets the click listener on the Navigation icon. <br /><br />"
"android.support.v7.app.ActionBarDrawerToggle.onConfigurationChanged () "," This method should always be called by your Activity's onConfigurationChanged method. <br /><br />"
"android.support.v7.app.ActionBarDrawerToggle.onOptionsItemSelected () "," This method should be called by your Activity's onOptionsItemSelected method. <br /><br />"
"android.support.v7.app.ActionBarDrawerToggle.setHomeAsUpIndicator (int resId) "," Set the up indicator to display when the drawer indicator is not enabled. <br /><br />"
"android.support.v7.app.ActionBarDrawerToggle.setDrawerIndicatorEnabled (boolean enable) "," Enable or disable the drawer indicator. <br /><br />"
"android.support.v7.app.ActionBarDrawerToggle.DrawerLayout.DrawerListener (int newState) "," DrawerLayout.DrawerListener callback method. <br /><br />"
"android.support.v7.app.ActionBarDrawerToggle.isDrawerIndicatorEnabled () "," no description <br /><br />"
"android.support.v7.app.ActionBarDrawerToggle.syncState () "," Synchronize the state of the drawer indicator/affordance with the linked DrawerLayout. <br /><br />"
"android.support.v7.app.AppCompatActivity.setSupportProgress (int progress) "," This method is deprecated. Progress bars are no longer provided in AppCompat. <br /><br />"
"android.support.v7.app.AppCompatActivity.onContentChanged () () "," This method is deprecated. Use onContentChanged() instead. <br /><br />"
"android.support.v7.app.AppCompatActivity.setSupportProgressBarIndeterminateVisibility (boolean visible) "," This method is deprecated. Progress bars are no longer provided in AppCompat. <br /><br />"
"android.support.v7.app.AppCompatActivity.ActionMode () "," Notifies the Activity that a support action mode has been started. <br /><br />"
"android.support.v7.app.AppCompatActivity.onSupportNavigateUp () "," This method is called whenever the user chooses to navigate Up within your application's activity hierarchy from the action bar. <br /><br />"
"android.support.v7.app.AppCompatActivity.MenuItem () "," Dispatch context and options menu to fragments. <br /><br />"
"android.support.v7.app.AppCompatActivity.MenuInflater () "," Returns a MenuInflater with this context. <br /><br />"
"android.support.v7.app.AppCompatActivity.getDelegate () "," no description <br /><br />"
"android.support.v7.app.AppCompatActivity.ActionBar () "," Set a Toolbar to act as the ActionBar for this Activity window. <br /><br />"
"android.support.v7.app.AppCompatActivity.Configuration () "," Dispatch configuration change to all fragments. <br /><br />"
"android.support.v7.app.AppCompatActivity.ActionMode.Callback () "," no description <br /><br />"
"android.support.v7.app.AppCompatActivity.onPrepareNavigateUpTaskStack (android.app.TaskStackBuilder) () "," Support version of onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder). <br /><br />"
"android.support.v7.app.AppCompatActivity.getDrawerToggleDelegate () "," no description <br /><br />"
"android.support.v7.app.AppCompatActivity.supportRequestWindowFeature (int featureId) "," Enable extended support library window features. <br /><br />"
"android.support.v7.app.AppCompatActivity.PARENT_ACTIVITY () "," Obtain an Intent that will launch an explicit target activity specified by sourceActivity's PARENT_ACTIVITY &lt;meta-data&gt; element in the application's manifest. <br /><br />"
"android.support.v7.app.AppCompatActivity.View () "," Set the activity content to an explicit view. <br /><br />"
"android.support.v7.app.AppCompatActivity.ViewGroup.LayoutParams () "," Set the activity content to an explicit view. <br /><br />"
"android.support.v7.app.AppCompatActivity.setContentView (int layoutResID) "," Set the activity content from a layout resource. <br /><br />"
"android.support.v7.app.AppCompatActivity.getActionBar () () "," Support library version of getActionBar(). <br /><br />"
"android.support.v7.app.AppCompatActivity.setSupportProgressBarVisibility (boolean visible) "," This method is deprecated. Progress bars are no longer provided in AppCompat. <br /><br />"
"android.support.v7.app.AppCompatActivity.onCreateNavigateUpTaskStack (android.app.TaskStackBuilder) () "," Support version of onCreateNavigateUpTaskStack(android.app.TaskStackBuilder). <br /><br />"
"android.support.v7.app.AppCompatActivity.Window.addContentView () "," This hook is called whenever the content view of the screen changes (due to a call to Window.setContentView or Window.addContentView). <br /><br />"
"android.support.v7.app.AppCompatActivity.invalidateOptionsMenu () () "," Support library version of invalidateOptionsMenu(). <br /><br />"
"android.support.v7.app.AppCompatActivity.Intent () "," Returns true if sourceActivity should recreate the task when navigating 'up' by using targetIntent. <br /><br />"
"android.support.v7.app.AppCompatActivity.setSupportProgressBarIndeterminate (boolean indeterminate) "," This method is deprecated. Progress bars are no longer provided in AppCompat. <br /><br />"
"android.support.v7.app.AppCompatCallback.ActionMode () "," Called when a support action mode has been started. <br /><br />"
"android.support.v7.app.AppCompatDelegate.supportInvalidateOptionsMenu () () "," Should be called from invalidateOptionsMenu()} or supportInvalidateOptionsMenu(). <br /><br />"
"android.support.v7.app.AppCompatDelegate.setContentView (android.view.View) () "," Should be called instead of setContentView(android.view.View)} <br /><br />"
"android.support.v7.app.AppCompatDelegate.requestWindowFeature (int featureId) "," Enable extended window features. <br /><br />"
"android.support.v7.app.AppCompatDelegate.getMenuInflater () () "," Return the value of this call from your getMenuInflater() <br /><br />"
"android.support.v7.app.AppCompatDelegate.onTitleChanged (CharSequence, int) () "," Should be called from onTitleChanged(CharSequence, int)} <br /><br />"
"android.support.v7.app.AppCompatDelegate.setContentView (int) (int resId) "," Should be called instead of setContentView(int)} <br /><br />"
"android.support.v7.app.AppCompatDelegate.LayoutInflaterFactory () "," This should be called from a LayoutInflaterFactory in order to return tint-aware widgets. <br /><br />"
"android.support.v7.app.AppCompatDelegate.setContentView (android.view.View, android.view.ViewGroup.LayoutParams) () "," Should be called instead of setContentView(android.view.View, android.view.ViewGroup.LayoutParams)} <br /><br />"
"android.support.v7.app.AppCompatDelegate.addContentView (android.view.View, android.view.ViewGroup.LayoutParams) () "," Should be called instead of addContentView(android.view.View, android.view.ViewGroup.LayoutParams)} <br /><br />"
"android.support.v7.app.AppCompatDelegate.Activity.onStop () () "," Should be called from Activity.onStop() <br /><br />"
"android.support.v7.app.AppCompatDelegate.onPostResume () () "," Should be called from onPostResume() <br /><br />"
"android.support.v7.app.AppCompatDelegate.onDestroy () () "," Should be called from onDestroy() <br /><br />"
"android.support.v7.app.AppCompatDelegate.ActionBarDrawerToggle.DelegateProvider () "," Returns an ActionBarDrawerToggle.Delegate which can be returned from your Activity if it implements ActionBarDrawerToggle.DelegateProvider. <br /><br />"
"android.support.v7.app.AppCompatDelegate.Activity.onCreate () () "," Should be called from Activity.onCreate() <br /><br />"
"android.support.v7.app.AppCompatDelegate.LayoutInflater () "," Installs AppCompat's LayoutInflater Factory so that it can replace the framework widgets with compatible tinted versions. <br /><br />"
"android.support.v7.app.AppCompatDelegate.ActionBar () "," Set a Toolbar to act as the ActionBar for this delegate. <br /><br />"
"android.support.v7.app.AppCompatDelegate.getActionBar () () "," Support library version of getActionBar(). <br /><br />"
"android.support.v7.app.AppCompatDelegate.onConfigurationChanged (Configuration) () "," Should be called from onConfigurationChanged(Configuration) <br /><br />"
"android.support.v7.app.AppCompatDelegate.AppCompatDelegate () "," Create a AppCompatDelegate to use with dialog. <br /><br />"
"android.support.v7.app.AppCompatDelegate.ActionMode.Callback () "," Start an action mode. <br /><br />"
"android.support.v7.app.AppCompatDelegate.onPostCreate (android.os.Bundle) () "," Should be called from onPostCreate(android.os.Bundle) <br /><br />"
"android.support.v7.app.AppCompatDialog.ViewGroup.LayoutParams () "," Set the screen content to an explicit view. <br /><br />"
"android.support.v7.app.AppCompatDialog.setTitle (int titleId) "," Set the title text for this dialog's window. <br /><br />"
"android.support.v7.app.AppCompatDialog.setContentView (int layoutResID) "," Set the screen content from a layout resource. <br /><br />"
"android.support.v7.app.AppCompatDialog.getActionBar () () "," Support library version of getActionBar(). <br /><br />"
"android.support.v7.app.AppCompatDialog.supportRequestWindowFeature (int featureId) "," Enable extended support library window features. <br /><br />"
"android.support.v7.app.AppCompatDialog.ActionMode () "," Called when a support action mode has been started. <br /><br />"
"android.support.v7.app.AppCompatDialog.CharSequence () "," Set the title text for this dialog's window. <br /><br />"
"android.support.v7.app.AppCompatDialog.View () "," Set the screen content to an explicit view. <br /><br />"
"android.support.v7.app.AppCompatDialog.getDelegate () "," no description <br /><br />"
"android.support.v7.app.MediaRouteActionProvider.onPerformDefaultAction () "," Performs an optional default action. <br /><br />"
"android.support.v7.app.MediaRouteActionProvider.getRouteSelector () "," Gets the media route selector for filtering the routes that the user can select using the media route chooser dialog. <br /><br />"
"android.support.v7.app.MediaRouteActionProvider.onCreateActionView () "," Factory method for creating new action views. <br /><br />"
"android.support.v7.app.MediaRouteActionProvider.MediaRouteSelector () "," Sets the media route selector for filtering the routes that the user can select using the media route chooser dialog. <br /><br />"
"android.support.v7.app.MediaRouteActionProvider.onCreateMediaRouteButton () "," Called when the media route button is being created. <br /><br />"
"android.support.v7.app.MediaRouteActionProvider.MenuItem () "," The result of this method determines whether or not isVisible() will be used by the MenuItem this ActionProvider is bound to help determine its visibility. <br /><br />"
"android.support.v7.app.MediaRouteActionProvider.MediaRouteDialogFactory () "," Sets the media route dialog factory to use when showing the route chooser or controller dialog. <br /><br />"
"android.support.v7.app.MediaRouteActionProvider.getMediaRouteButton () "," Gets the associated media route button, or null if it has not yet been created. <br /><br />"
"android.support.v7.app.MediaRouteActionProvider.getDialogFactory () "," Gets the media route dialog factory to use when showing the route chooser or controller dialog. <br /><br />"
"android.support.v7.app.MediaRouteButton.performLongClick () "," Call this view's OnLongClickListener, if it is defined. <br /><br />"
"android.support.v7.app.MediaRouteButton.getRouteSelector () "," Gets the media route selector for filtering the routes that the user can select using the media route chooser dialog. <br /><br />"
"android.support.v7.app.MediaRouteButton.onDetachedFromWindow () "," This is called when the view is detached from a window. <br /><br />"
"android.support.v7.app.MediaRouteButton.setVisibility (int visibility) "," Set the enabled state of this view. <br /><br />"
"android.support.v7.app.MediaRouteButton.performClick () "," Call this view's OnClickListener, if it is defined. <br /><br />"
"android.support.v7.app.MediaRouteButton.onAttachedToWindow () "," This is called when the view is attached to a window. <br /><br />"
"android.support.v7.app.MediaRouteButton.MediaRouteSelector () "," Sets the media route selector for filtering the routes that the user can select using the media route chooser dialog. <br /><br />"
"android.support.v7.app.MediaRouteButton.Drawable.jumpToCurrentState () () "," Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view. <br /><br />"
"android.support.v7.app.MediaRouteButton.showDialog () "," Show the route chooser or controller dialog. <br /><br />"
"android.support.v7.app.MediaRouteButton.MediaRouteDialogFactory () "," Sets the media route dialog factory to use when showing the route chooser or controller dialog. <br /><br />"
"android.support.v7.app.MediaRouteButton.getDialogFactory () "," Gets the media route dialog factory to use when showing the route chooser or controller dialog. <br /><br />"
"android.support.v7.app.MediaRouteChooserDialog.getRouteSelector () "," Gets the media route selector for filtering the routes that the user can select. <br /><br />"
"android.support.v7.app.MediaRouteChooserDialog.refreshRoutes () "," Refreshes the list of routes that are shown in the chooser dialog. <br /><br />"
"android.support.v7.app.MediaRouteChooserDialog.MediaRouter.RouteInfo () "," Called to filter the set of routes that should be included in the list. <br /><br />"
"android.support.v7.app.MediaRouteChooserDialog.onDetachedFromWindow () "," Called when the window has been attached to the window manager. <br /><br />"
"android.support.v7.app.MediaRouteChooserDialog.onAttachedToWindow () "," Called when the window has been attached to the window manager. <br /><br />"
"android.support.v7.app.MediaRouteChooserDialog.MediaRouteSelector () "," Sets the media route selector for filtering the routes that the user can select. <br /><br />"
"android.support.v7.app.MediaRouteChooserDialogFragment.getRouteSelector () "," Gets the media route selector for filtering the routes that the user can select. <br /><br />"
"android.support.v7.app.MediaRouteChooserDialogFragment.MediaRouteSelector () "," Sets the media route selector for filtering the routes that the user can select. <br /><br />"
"android.support.v7.app.MediaRouteChooserDialogFragment.Bundle () "," Override to build your own custom Dialog container. <br /><br />"
"android.support.v7.app.MediaRouteControllerDialog.onDetachedFromWindow () "," Called when the window has been attached to the window manager. <br /><br />"
"android.support.v7.app.MediaRouteControllerDialog.getRoute () "," Gets the route that this dialog is controlling. <br /><br />"
"android.support.v7.app.MediaRouteControllerDialog.KeyEvent () "," A key was released. <br /><br />"
"android.support.v7.app.MediaRouteControllerDialog.onAttachedToWindow () "," Called when the window has been attached to the window manager. <br /><br />"
"android.support.v7.app.MediaRouteControllerDialog.onCreateMediaControlView (Bundle) () "," Gets the media control view that was created by onCreateMediaControlView(Bundle). <br /><br />"
"android.support.v7.app.MediaRouteControllerDialog.getMediaSession () "," Gets the description being used by the default UI. <br /><br />"
"android.support.v7.app.MediaRouteControllerDialog.Bundle () "," Provides the subclass an opportunity to create a view that will be included within the body of the dialog to offer additional media controls for the currently playing content. <br /><br />"
"android.support.v7.app.MediaRouteControllerDialogFragment.Bundle () "," Override to build your own custom Dialog container. <br /><br />"
"android.support.v7.app.MediaRouteDialogFactory.onCreateControllerDialogFragment () "," Called when the controller dialog is being opened and it is time to create the fragment. <br /><br />"
"android.support.v7.app.MediaRouteDialogFactory.getDefault () "," Gets the default factory instance. <br /><br />"
"android.support.v7.app.MediaRouteDialogFactory.onCreateChooserDialogFragment () "," Called when the chooser dialog is being opened and it is time to create the fragment. <br /><br />"
"android.support.v7.app.MediaRouteDiscoveryFragment.onStop () "," Called when the Fragment is no longer started. <br /><br />"
"android.support.v7.app.MediaRouteDiscoveryFragment.getRouteSelector () "," Gets the media route selector for filtering the routes to be discovered. <br /><br />"
"android.support.v7.app.MediaRouteDiscoveryFragment.getMediaRouter () "," Gets the media router instance. <br /><br />"
"android.support.v7.app.MediaRouteDiscoveryFragment.MediaRouteSelector () "," Sets the media route selector for filtering the routes to be discovered. <br /><br />"
"android.support.v7.app.MediaRouteDiscoveryFragment.onStart () "," Called when the Fragment is visible to the user. <br /><br />"
"android.support.v7.app.MediaRouteDiscoveryFragment.callback () "," Called to prepare the callback flags that will be used when the callback is registered. <br /><br />"
"android.support.v7.graphics.Palette.Builder.Bitmap (int colors) "," Set the maximum number of colors to use in the quantization step when using a Bitmap as the source. <br /><br />"
"android.support.v7.graphics.Palette.Builder.Bitmap (int maxDimension) "," Set the resize value when using a Bitmap as the source. <br /><br />"
"android.support.v7.graphics.Palette.Builder.Palette () "," Set the Palette.Generator to use when generating the Palette. <br /><br />"
"android.support.v7.graphics.Palette.Generator.Palette.Swatch () "," Return the most vibrant Palette.Swatch <br /><br />"
"android.support.v7.graphics.Palette.PaletteAsyncListener.Palette () "," Called when the Palette has been generated. <br /><br />"
"android.support.v7.graphics.Palette.Swatch.getPopulation () "," no description <br /><br />"
"android.support.v7.graphics.Palette.Swatch.Palette.Swatch () "," Returns an appropriate color to use for any 'title' text which is displayed over this Palette.Swatch's color. <br /><br />"
"android.support.v7.graphics.Palette.Swatch.getRgb () "," no description <br /><br />"
"android.support.v7.graphics.Palette.Swatch.getHsl () "," Return this swatch's HSL values. <br /><br />"
"android.support.v7.graphics.Palette.Swatch.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.support.v7.graphics.Palette.Swatch.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.support.v7.graphics.Palette.Swatch.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.support.v7.internal.widget.TintAutoCompleteTextView.setDropDownBackgroundResource (int id) "," Sets the background of the auto-complete drop-down list. <br /><br />"
"android.support.v7.internal.widget.TintCheckBox.setButtonDrawable (int resid) "," Set the button graphic to a given Drawable, identified by its resource id. <br /><br />"
"android.support.v7.internal.widget.TintCheckedTextView.setCheckMarkDrawable (int resid) "," Set the checkmark to a given Drawable, identified by its resourece id. <br /><br />"
"android.support.v7.internal.widget.TintMultiAutoCompleteTextView.setDropDownBackgroundResource (int id) "," Sets the background of the auto-complete drop-down list. <br /><br />"
"android.support.v7.internal.widget.TintRadioButton.setButtonDrawable (int resid) "," Set the button graphic to a given Drawable, identified by its resource id. <br /><br />"
"android.support.v7.media.MediaItemStatus.Builder.setContentDuration (long durationMilliseconds) "," Sets the total duration of the content to be played as a long integer number of milliseconds. <br /><br />"
"android.support.v7.media.MediaItemStatus.Builder.setContentPosition (long positionMilliseconds) "," Sets the content playback position as a long integer number of milliseconds from the beginning of the content. <br /><br />"
"android.support.v7.media.MediaItemStatus.Builder.Bundle () "," Sets a bundle of extras for this status object. <br /><br />"
"android.support.v7.media.MediaItemStatus.Builder.setPlaybackState (int playbackState) "," Sets the playback state of the media item. <br /><br />"
"android.support.v7.media.MediaItemStatus.Builder.elapsedRealtime () (long elapsedRealtimeTimestamp) "," Sets the timestamp associated with the status information in milliseconds since boot in the elapsedRealtime() time base. <br /><br />"
"android.support.v7.media.MediaItemStatus.Builder.media item status object () "," Builds the media item status object. <br /><br />"
"android.support.v7.media.MediaItemStatus.getExtras () "," Gets a bundle of extras for this status object. <br /><br />"
"android.support.v7.media.MediaItemStatus.asBundle () "," Converts this object to a bundle for serialization. <br /><br />"
"android.support.v7.media.MediaItemStatus.elapsedRealtime () () "," Gets the timestamp associated with the status information in milliseconds since boot in the elapsedRealtime() time base. <br /><br />"
"android.support.v7.media.MediaItemStatus.getContentDuration () "," Gets the total duration of the content to be played as a long integer number of milliseconds. <br /><br />"
"android.support.v7.media.MediaItemStatus.getContentPosition () "," Gets the content playback position as a long integer number of milliseconds from the beginning of the content. <br /><br />"
"android.support.v7.media.MediaItemStatus.Bundle () "," Creates an instance from a bundle. <br /><br />"
"android.support.v7.media.MediaItemStatus.getPlaybackState () "," Gets the playback state of the media item. <br /><br />"
"android.support.v7.media.MediaItemStatus.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.support.v7.media.MediaRouteDescriptor.Builder.media control intent () "," Adds a list of media control intent filters for the route. <br /><br />"
"android.support.v7.media.MediaRouteDescriptor.Builder.String () "," Sets the user-visible name of the route. <br /><br />"
"android.support.v7.media.MediaRouteDescriptor.Builder.setCanDisconnect (boolean canDisconnect) "," Sets whether the route can be disconnected without stopping playback. <br /><br />"
"android.support.v7.media.MediaRouteDescriptor.Builder.setConnecting (boolean connecting) "," Sets whether the route is in the process of connecting and is not yet ready for use. <br /><br />"
"android.support.v7.media.MediaRouteDescriptor.Builder.IntentSender () "," Sets an intent sender for launching the settings activity for this route. <br /><br />"
"android.support.v7.media.MediaRouteDescriptor.Builder.setVolume (int volume) "," Sets the route's current volume, or 0 if unknown. <br /><br />"
"android.support.v7.media.MediaRouteDescriptor.Builder.setPlaybackType (int playbackType) "," Sets the route's playback type. <br /><br />"
"android.support.v7.media.MediaRouteDescriptor.Builder.setPresentationDisplayId (int presentationDisplayId) "," Sets the route's presentation display id, or -1 if none. <br /><br />"
"android.support.v7.media.MediaRouteDescriptor.Builder.setEnabled (boolean enabled) "," Sets whether the route is enabled. <br /><br />"
"android.support.v7.media.MediaRouteDescriptor.Builder.setVolumeHandling (int volumeHandling) "," Sets the route's volume handling. <br /><br />"
"android.support.v7.media.MediaRouteDescriptor.Builder.Bundle () "," Sets a bundle of extras for this route descriptor. <br /><br />"
"android.support.v7.media.MediaRouteDescriptor.Builder.setPlaybackStream (int playbackStream) "," Sets the route's playback stream. <br /><br />"
"android.support.v7.media.MediaRouteDescriptor.Builder.media route descriptor () "," Builds the media route descriptor. <br /><br />"
"android.support.v7.media.MediaRouteDescriptor.Builder.setVolumeMax (int volumeMax) "," Sets the route's maximum volume, or 0 if unknown. <br /><br />"
"android.support.v7.media.MediaRouteDiscoveryRequest.asBundle () "," Converts this object to a bundle for serialization. <br /><br />"
"android.support.v7.media.MediaRouteDiscoveryRequest.isActiveScan () "," Returns true if active scanning should be performed. <br /><br />"
"android.support.v7.media.MediaRouteDiscoveryRequest.getSelector () "," Gets the route selector that specifies the kinds of routes to discover. <br /><br />"
"android.support.v7.media.MediaRouteDiscoveryRequest.isValid () "," Returns true if the discovery request has all of the required fields. <br /><br />"
"android.support.v7.media.MediaRouteDiscoveryRequest.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.support.v7.media.MediaRouteDiscoveryRequest.Bundle () "," Creates an instance from a bundle. <br /><br />"
"android.support.v7.media.MediaRouteDiscoveryRequest.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.support.v7.media.MediaRouteDiscoveryRequest.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.support.v7.media.MediaRouteProvider.Callback.MediaRouteProviderDescriptor () "," Called when information about a route provider and its routes changes. <br /><br />"
"android.support.v7.media.MediaRouteProvider.MediaRouteProvider.Callback () "," Sets a callback to invoke when the provider's descriptor changes. <br /><br />"
"android.support.v7.media.MediaRouteProvider.discovery request () "," Called by the media router when the discovery request has changed. <br /><br />"
"android.support.v7.media.MediaRouteProvider.String () "," Called by the media router to obtain a route controller for a particular route. <br /><br />"
"android.support.v7.media.MediaRouteProvider.getMetadata () "," Gets some metadata about the provider's implementation. <br /><br />"
"android.support.v7.media.MediaRouteProvider.MediaRouteDiscoveryRequest () "," Sets a discovery request to inform the provider about the kinds of routes that its clients would like to discover and whether to perform active scanning. <br /><br />"
"android.support.v7.media.MediaRouteProvider.getDiscoveryRequest () "," Gets the current discovery request which informs the provider about the kinds of routes to discover and whether to perform active scanning. <br /><br />"
"android.support.v7.media.MediaRouteProvider.MediaRouteProviderDescriptor () "," Sets the provider's descriptor. <br /><br />"
"android.support.v7.media.MediaRouteProvider.getDescriptor () "," Gets the provider's descriptor. <br /><br />"
"android.support.v7.media.MediaRouteProvider.getHandler () "," Gets the provider's handler which is associated with the main thread. <br /><br />"
"android.support.v7.media.MediaRouteProvider.getContext () "," Gets the context of the media route provider. <br /><br />"
"android.support.v7.media.MediaRouteProvider.ProviderMetadata.getComponentName () "," Gets the provider's component name. <br /><br />"
"android.support.v7.media.MediaRouteProvider.ProviderMetadata.getPackageName () "," Gets the provider's package name. <br /><br />"
"android.support.v7.media.MediaRouteProvider.ProviderMetadata.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.support.v7.media.MediaRouteProvider.RouteController.onUnselect (int reason) "," Unselects the route and provides a reason. <br /><br />"
"android.support.v7.media.MediaRouteProvider.RouteController.onUnselect () "," Unselects the route. <br /><br />"
"android.support.v7.media.MediaRouteProvider.RouteController.onRelease () "," Releases the route controller, allowing it to free its resources. <br /><br />"
"android.support.v7.media.MediaRouteProvider.RouteController.onUpdateVolume (int delta) "," Requests an incremental volume update for the route. <br /><br />"
"android.support.v7.media.MediaRouteProvider.RouteController.media control () "," Performs a media control request asynchronously on behalf of the route. <br /><br />"
"android.support.v7.media.MediaRouteProvider.RouteController.onSetVolume (int volume) "," Requests to set the volume of the route. <br /><br />"
"android.support.v7.media.MediaRouteProvider.RouteController.onSelect () "," Selects the route. <br /><br />"
"android.support.v7.media.MediaRouteProviderDescriptor.Builder.MediaRouteDescriptor () "," Adds a list of routes. <br /><br />"
"android.support.v7.media.MediaRouteProviderDescriptor.Builder.media route provider descriptor () "," Builds the media route provider descriptor. <br /><br />"
"android.support.v7.media.MediaRouteProviderService.onCreateMediaRouteProvider () "," Called by the system when it is time to create the media route provider. <br /><br />"
"android.support.v7.media.MediaRouteProviderService.Intent () "," Return the communication channel to the service. <br /><br />"
"android.support.v7.media.MediaRouteProviderService.getMediaRouteProvider () "," Gets the media route provider offered by this service. <br /><br />"
"android.support.v7.media.MediaRouter.Callback.MediaRouter.RouteInfo () "," Called when a media route's volume changes. <br /><br />"
"android.support.v7.media.MediaRouter.Callback.MediaRouter.ProviderInfo () "," Called when a media route provider has been removed. <br /><br />"
"android.support.v7.media.MediaRouter.ControlRequestCallback.Bundle () "," Called when a media control request succeeds. <br /><br />"
"android.support.v7.media.MediaRouter.MediaRouter.Callback () "," Removes the specified callback. <br /><br />"
"android.support.v7.media.MediaRouter.Context () "," Gets an instance of the media router service associated with the context. <br /><br />"
"android.support.v7.media.MediaRouter.MediaRouter.RouteInfo () "," Selects the specified route. <br /><br />"
"android.support.v7.media.MediaRouter.getDefaultRoute () "," Gets the default route for playing media content on the system. <br /><br />"
"android.support.v7.media.MediaRouter.routes () "," Gets information about the routes currently known to this media router. <br /><br />"
"android.support.v7.media.MediaRouter.MediaRouteSelector () "," Returns the selected route if it matches the specified selector, otherwise selects the default route and returns it. <br /><br />"
"android.support.v7.media.MediaRouter.getMediaSessionToken () "," no description <br /><br />"
"android.support.v7.media.MediaRouter.getSelectedRoute () "," Gets the currently selected route. <br /><br />"
"android.support.v7.media.MediaRouter.route providers () "," Gets information about the route providers currently known to this media router. <br /><br />"
"android.support.v7.media.MediaRouter.Object () "," Sets the media session to enable remote control of the volume of the selected route. <br /><br />"
"android.support.v7.media.MediaRouter.MediaRouteProvider () "," Unregisters a media route provider within this application process. <br /><br />"
"android.support.v7.media.MediaRouter.unselect (int reason) "," Unselects the current round and selects the default route instead. <br /><br />"
"android.support.v7.media.MediaRouter.MediaSessionCompat () "," Sets a compat media session to enable remote control of the volume of the selected route. <br /><br />"
"android.support.v7.media.MediaRouter.ProviderInfo.getComponentName () "," Gets the component name of the media route provider. <br /><br />"
"android.support.v7.media.MediaRouter.ProviderInfo.getPackageName () "," Gets the package name of the media route provider. <br /><br />"
"android.support.v7.media.MediaRouter.ProviderInfo.routes () "," Gets the routes published by this route provider. <br /><br />"
"android.support.v7.media.MediaRouter.ProviderInfo.MediaRouteProvider () "," Gets the provider's underlying MediaRouteProvider instance. <br /><br />"
"android.support.v7.media.MediaRouter.ProviderInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.support.v7.media.MediaRouter.RouteInfo.media control intent () "," Gets a list of media control intent filters that describe the capabilities of this route and the media control actions that it supports. <br /><br />"
"android.support.v7.media.MediaRouter.RouteInfo.getSettingsIntent () "," Gets an intent sender for launching a settings activity for this route. <br /><br />"
"android.support.v7.media.MediaRouter.RouteInfo.select () "," Selects this media route. <br /><br />"
"android.support.v7.media.MediaRouter.RouteInfo.requestUpdateVolume (int delta) "," Requests an incremental volume update for this route asynchronously. <br /><br />"
"android.support.v7.media.MediaRouter.RouteInfo.getPlaybackType () "," Gets the type of playback associated with this route. <br /><br />"
"android.support.v7.media.MediaRouter.RouteInfo.MediaRouteSelector () "," Returns true if the route supports at least one of the capabilities described by a media route selector. <br /><br />"
"android.support.v7.media.MediaRouter.RouteInfo.isDefault () "," Returns true if this route is the default route. <br /><br />"
"android.support.v7.media.MediaRouter.RouteInfo.getVolume () "," Gets the current volume for this route. <br /><br />"
"android.support.v7.media.MediaRouter.RouteInfo.getVolumeMax () "," Gets the maximum volume at which the playback associated with this route is performed. <br /><br />"
"android.support.v7.media.MediaRouter.RouteInfo.media control () "," Returns true if the route supports the specified media control request. <br /><br />"
"android.support.v7.media.MediaRouter.RouteInfo.requestSetVolume (int volume) "," Requests a volume change for this route asynchronously. <br /><br />"
"android.support.v7.media.MediaRouter.RouteInfo.getVolumeHandling () "," Gets information about how volume is handled on the route. <br /><br />"
"android.support.v7.media.MediaRouter.RouteInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.support.v7.media.MediaRouter.RouteInfo.getDescription () "," Gets the user-visible description of the route. <br /><br />"
"android.support.v7.media.MediaRouter.RouteInfo.getExtras () "," Gets a collection of extra properties about this route that were supplied by its media route provider, or null if none. <br /><br />"
"android.support.v7.media.MediaRouter.RouteInfo.getName () "," Gets the user-visible name of the route. <br /><br />"
"android.support.v7.media.MediaRouter.RouteInfo.getProvider () "," Gets information about the provider of this media route. <br /><br />"
"android.support.v7.media.MediaRouter.RouteInfo.getPlaybackStream () "," Gets the audio stream over which the playback associated with this route is performed. <br /><br />"
"android.support.v7.media.MediaRouter.RouteInfo.isEnabled () "," Returns true if this route is enabled and may be selected. <br /><br />"
"android.support.v7.media.MediaRouter.RouteInfo.getId () "," Gets the unique id of the route. <br /><br />"
"android.support.v7.media.MediaRouter.RouteInfo.canDisconnect () "," Gets whether this route supports disconnecting without interrupting playback. <br /><br />"
"android.support.v7.media.MediaRouter.RouteInfo.Presentation () "," Gets the Display that should be used by the application to show a Presentation on an external display when this route is selected. <br /><br />"
"android.support.v7.media.MediaRouter.RouteInfo.isSelected () "," Returns true if this route is currently selected. <br /><br />"
"android.support.v7.media.MediaRouter.RouteInfo.isConnecting () "," Returns true if the route is in the process of connecting and is not yet ready for use. <br /><br />"
"android.support.v7.media.MediaRouteSelector.Builder.media control category () "," Adds a media control category to the builder. <br /><br />"
"android.support.v7.media.MediaRouteSelector.Builder.media control categories () "," Adds a list of media control categories to the builder. <br /><br />"
"android.support.v7.media.MediaRouteSelector.Builder.media route selector () "," Builds the media route selector. <br /><br />"
"android.support.v7.media.MediaRouteSelector.Builder.MediaRouteSelector () "," Adds the contents of an existing media route selector to the builder. <br /><br />"
"android.support.v7.media.MediaRouteSelector.String () "," Returns true if the selector contains the specified category. <br /><br />"
"android.support.v7.media.MediaRouteSelector.IntentFilter () "," Returns true if the selector matches at least one of the specified control filters. <br /><br />"
"android.support.v7.media.MediaRouteSelector.media control categories () "," Gets the list of media control categories in the selector. <br /><br />"
"android.support.v7.media.MediaRouteSelector.asBundle () "," Converts this object to a bundle for serialization. <br /><br />"
"android.support.v7.media.MediaRouteSelector.MediaRouteSelector () "," Returns true if this selector contains all of the capabilities described by the specified selector. <br /><br />"
"android.support.v7.media.MediaRouteSelector.isEmpty () "," Returns true if the selector does not specify any capabilities. <br /><br />"
"android.support.v7.media.MediaRouteSelector.isValid () "," Returns true if the selector has all of the required fields. <br /><br />"
"android.support.v7.media.MediaRouteSelector.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.support.v7.media.MediaRouteSelector.Bundle () "," Creates an instance from a bundle. <br /><br />"
"android.support.v7.media.MediaRouteSelector.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.support.v7.media.MediaRouteSelector.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.support.v7.media.MediaSessionStatus.Builder.setQueuePaused (boolean queuePaused) "," Sets whether the queue is paused. <br /><br />"
"android.support.v7.media.MediaSessionStatus.Builder.media session status object () "," Builds the media session status object. <br /><br />"
"android.support.v7.media.MediaSessionStatus.Builder.Bundle () "," Sets a bundle of extras for this status object. <br /><br />"
"android.support.v7.media.MediaSessionStatus.Builder.setSessionState (int sessionState) "," Sets the session state. <br /><br />"
"android.support.v7.media.MediaSessionStatus.Builder.elapsedRealtime () (long elapsedRealtimeTimestamp) "," Sets the timestamp associated with the status information in milliseconds since boot in the elapsedRealtime() time base. <br /><br />"
"android.support.v7.media.MediaSessionStatus.getExtras () "," Gets a bundle of extras for this status object. <br /><br />"
"android.support.v7.media.MediaSessionStatus.isQueuePaused () "," Returns true if the session's queue is paused. <br /><br />"
"android.support.v7.media.MediaSessionStatus.asBundle () "," Converts this object to a bundle for serialization. <br /><br />"
"android.support.v7.media.MediaSessionStatus.elapsedRealtime () () "," Gets the timestamp associated with the status information in milliseconds since boot in the elapsedRealtime() time base. <br /><br />"
"android.support.v7.media.MediaSessionStatus.getSessionState () "," Gets the session state. <br /><br />"
"android.support.v7.media.MediaSessionStatus.Bundle () "," Creates an instance from a bundle. <br /><br />"
"android.support.v7.media.MediaSessionStatus.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.support.v7.media.RemotePlaybackClient.ActionCallback.Bundle () "," Called when a media control request fails. <br /><br />"
"android.support.v7.media.RemotePlaybackClient.getSessionId () "," Gets the current session id if there is one. <br /><br />"
"android.support.v7.media.RemotePlaybackClient.String () "," Sets the current session id. <br /><br />"
"android.support.v7.media.RemotePlaybackClient.isQueuingSupported () "," Returns true if the route supports queuing features. <br /><br />"
"android.support.v7.media.RemotePlaybackClient.isRemotePlaybackSupported () "," Returns true if the route supports remote playback. <br /><br />"
"android.support.v7.media.RemotePlaybackClient.RemotePlaybackClient.SessionActionCallback () "," Sends a request to stop media playback and clear the media playback queue. <br /><br />"
"android.support.v7.media.RemotePlaybackClient.RemotePlaybackClient.StatusCallback () "," Sets a callback that should receive status updates when the state of media sessions or media items created by this instance of the remote playback client changes. <br /><br />"
"android.support.v7.media.RemotePlaybackClient.isSessionManagementSupported () "," Returns true if the route supports session management features. <br /><br />"
"android.support.v7.media.RemotePlaybackClient.hasSession () "," Returns true if the client currently has a session. <br /><br />"
"android.support.v7.media.RemotePlaybackClient.release () "," Releases resources owned by the client. <br /><br />"
"android.support.v7.media.RemotePlaybackClient.RemotePlaybackClient.ItemActionCallback () "," Sends a request to seek to a new position in a media item. <br /><br />"
"android.support.v7.media.RemotePlaybackClient.ItemActionCallback.MediaItemStatus () "," Called when the request succeeds. <br /><br />"
"android.support.v7.media.RemotePlaybackClient.SessionActionCallback.MediaSessionStatus () "," Called when the request succeeds. <br /><br />"
"android.support.v7.media.RemotePlaybackClient.StatusCallback.String () "," Called when the session of the remote playback client changes. <br /><br />"
"android.support.v7.media.RemotePlaybackClient.StatusCallback.MediaItemStatus () "," Called when the status of a media item changes. <br /><br />"
"android.support.v7.media.RemotePlaybackClient.StatusCallback.MediaSessionStatus () "," Called when the status of a media session changes. <br /><br />"
"android.support.v7.util.SortedList.BatchedCallback&lt;T2&gt;.onInserted (int position, int count) "," Called by the SortedList when an item is inserted at the given position. <br /><br />"
"android.support.v7.util.SortedList.BatchedCallback&lt;T2&gt;.onChanged (int position, int count) "," Called by the SortedList when the item at the given position is updated. <br /><br />"
"android.support.v7.util.SortedList.BatchedCallback&lt;T2&gt;.onRemoved (int position, int count) "," Called by the SortedList when an item is removed from the given position. <br /><br />"
"android.support.v7.util.SortedList.BatchedCallback&lt;T2&gt;.dispatchLastEvent () "," This method dispatches any pending event notifications to the wrapped Callback. <br /><br />"
"android.support.v7.util.SortedList.BatchedCallback&lt;T2&gt;.areItemsTheSame (T2 item1, T2 item2) "," Called by the SortedList to decide whether two object represent the same Item or not. <br /><br />"
"android.support.v7.util.SortedList.BatchedCallback&lt;T2&gt;.areContentsTheSame (T2 oldItem, T2 newItem) "," Called by the SortedList when it wants to check whether two items have the same data or not. <br /><br />"
"android.support.v7.util.SortedList.BatchedCallback&lt;T2&gt;.onMoved (int fromPosition, int toPosition) "," Called by the SortedList when an item changes its position in the list. <br /><br />"
"android.support.v7.util.SortedList.BatchedCallback&lt;T2&gt;.compare (Object, Object) (T2 o1, T2 o2) "," Similar to compare(Object, Object), should compare two and return how they should be ordered. <br /><br />"
"android.support.v7.util.SortedList.Callback&lt;T2&gt;.onInserted (int position, int count) "," Called by the SortedList when an item is inserted at the given position. <br /><br />"
"android.support.v7.util.SortedList.Callback&lt;T2&gt;.onChanged (int position, int count) "," Called by the SortedList when the item at the given position is updated. <br /><br />"
"android.support.v7.util.SortedList.Callback&lt;T2&gt;.onRemoved (int position, int count) "," Called by the SortedList when an item is removed from the given position. <br /><br />"
"android.support.v7.util.SortedList.Callback&lt;T2&gt;.areItemsTheSame (T2 item1, T2 item2) "," Called by the SortedList to decide whether two object represent the same Item or not. <br /><br />"
"android.support.v7.util.SortedList.Callback&lt;T2&gt;.areContentsTheSame (T2 oldItem, T2 newItem) "," Called by the SortedList when it wants to check whether two items have the same data or not. <br /><br />"
"android.support.v7.util.SortedList.Callback&lt;T2&gt;.onMoved (int fromPosition, int toPosition) "," Called by the SortedList when an item changes its position in the list. <br /><br />"
"android.support.v7.util.SortedList.Callback&lt;T2&gt;.compare (Object, Object) (T2 o1, T2 o2) "," Similar to compare(Object, Object), should compare two and return how they should be ordered. <br /><br />"
"android.support.v7.util.SortedList&lt;T&gt;.onRemoved (int, int) (T item) "," Removes the provided item from the list and calls onRemoved(int, int). <br /><br />"
"android.support.v7.util.SortedList&lt;T&gt;.onMoved (int, int) (int index, T item) "," Updates the item at the given index and calls onChanged(int, int) and/or onMoved(int, int) if necessary. <br /><br />"
"android.support.v7.util.SortedList&lt;T&gt;.onRemoved (int, int) (int index) "," Removes the item at the given index and calls onRemoved(int, int). <br /><br />"
"android.support.v7.util.SortedList&lt;T&gt;.endBatchedUpdates () () "," Batches adapter updates that happen between calling this method until calling endBatchedUpdates(). <br /><br />"
"android.support.v7.util.SortedList&lt;T&gt;.get (int index) "," Returns the item at the given index. <br /><br />"
"android.support.v7.util.SortedList&lt;T&gt;.endBatchedUpdates () "," Ends the update transaction and dispatches any remaining event to the callback. <br /><br />"
"android.support.v7.util.SortedList&lt;T&gt;.indexOf (T item) "," Returns the position of the provided item. <br /><br />"
"android.support.v7.util.SortedList&lt;T&gt;.size () "," The number of items in the list. <br /><br />"
"android.support.v7.util.SortedList&lt;T&gt;.onChanged (int, int) (int index) "," This method can be used to recalculate the position of the item at the given index, without triggering an onChanged(int, int) callback. <br /><br />"
"android.support.v7.util.SortedList&lt;T&gt;.add (T item) "," Adds the given item to the list. <br /><br />"
"android.support.v7.util.SortedListAdapterCallbackWrapperTest.testAdd () "," no description <br /><br />"
"android.support.v7.util.SortedListAdapterCallbackWrapperTest.testBatchAddReverseLoop () "," no description <br /><br />"
"android.support.v7.util.SortedListAdapterCallbackWrapperTest.testBatchChange4 () "," no description <br /><br />"
"android.support.v7.util.SortedListAdapterCallbackWrapperTest.testRemove () "," no description <br /><br />"
"android.support.v7.util.SortedListAdapterCallbackWrapperTest.testBatchAdd6 () "," no description <br /><br />"
"android.support.v7.util.SortedListAdapterCallbackWrapperTest.testBatchChange5 () "," no description <br /><br />"
"android.support.v7.util.SortedListAdapterCallbackWrapperTest.testBatchAdd3 () "," no description <br /><br />"
"android.support.v7.util.SortedListAdapterCallbackWrapperTest.testBatchRemove2 () "," no description <br /><br />"
"android.support.v7.util.SortedListAdapterCallbackWrapperTest.testBatchChange2 () "," no description <br /><br />"
"android.support.v7.util.SortedListAdapterCallbackWrapperTest.testBatchAddLoop () "," no description <br /><br />"
"android.support.v7.util.SortedListAdapterCallbackWrapperTest.testMove () "," no description <br /><br />"
"android.support.v7.util.SortedListAdapterCallbackWrapperTest.testBatchChange1 () "," no description <br /><br />"
"android.support.v7.util.SortedListAdapterCallbackWrapperTest.testBadBatchAddReverseLoop () "," no description <br /><br />"
"android.support.v7.util.SortedListAdapterCallbackWrapperTest.testBatchAdd5 () "," no description <br /><br />"
"android.support.v7.util.SortedListAdapterCallbackWrapperTest.testChange () "," no description <br /><br />"
"android.support.v7.util.SortedListAdapterCallbackWrapperTest.testBatchAdd4 () "," no description <br /><br />"
"android.support.v7.util.SortedListAdapterCallbackWrapperTest.testBatchAdd2 () "," no description <br /><br />"
"android.support.v7.util.SortedListAdapterCallbackWrapperTest.testBatchAdd1 () "," no description <br /><br />"
"android.support.v7.util.SortedListAdapterCallbackWrapperTest.testBatchRemove3 () "," no description <br /><br />"
"android.support.v7.util.SortedListAdapterCallbackWrapperTest.testBatchRemove1 () "," no description <br /><br />"
"android.support.v7.util.SortedListAdapterCallbackWrapperTest.testBatchChange3 () "," no description <br /><br />"
"android.support.v7.util.SortedListTest.testEmpty () "," no description <br /><br />"
"android.support.v7.util.SortedListTest.testAdd () "," no description <br /><br />"
"android.support.v7.util.SortedListTest.testRemove () "," no description <br /><br />"
"android.support.v7.util.SortedListTest.testRandom () "," no description <br /><br />"
"android.support.v7.util.SortedListTest.testBatch () "," no description <br /><br />"
"android.support.v7.util.SortedListTest.testRemove2 () "," no description <br /><br />"
"android.support.v7.util.SortedListTest.testAddDuplicate () "," no description <br /><br />"
"android.support.v7.util.SortedListTest.setUp () "," Sets up the fixture, for example, open a network connection. <br /><br />"
"android.support.v7.view.ActionMode.Callback.ActionMode () "," Called when an action mode is about to be exited and destroyed. <br /><br />"
"android.support.v7.view.ActionMode.Callback.Menu () "," Called to refresh an action mode's action menu whenever it is invalidated. <br /><br />"
"android.support.v7.view.ActionMode.Callback.MenuItem () "," Called to report a user click on an action button. <br /><br />"
"android.support.v7.view.ActionMode.getTag () "," Retrieve the tag object associated with this ActionMode. <br /><br />"
"android.support.v7.view.ActionMode.getMenu () "," Returns the menu of actions that this action mode presents. <br /><br />"
"android.support.v7.view.ActionMode.CharSequence () "," Set the title of the action mode. <br /><br />"
"android.support.v7.view.ActionMode.setTitleOptionalHint (boolean titleOptional) "," Set whether or not the title/subtitle display for this action mode is optional. <br /><br />"
"android.support.v7.view.ActionMode.Object () "," Set a tag object associated with this ActionMode. <br /><br />"
"android.support.v7.view.ActionMode.setSubtitle (int resId) "," Set the subtitle of the action mode. <br /><br />"
"android.support.v7.view.ActionMode.MenuInflater () "," Returns a MenuInflater with the ActionMode's context. <br /><br />"
"android.support.v7.view.ActionMode.View () "," Set a custom view for this action mode. <br /><br />"
"android.support.v7.view.ActionMode.setTitle (int resId) "," Set the title of the action mode. <br /><br />"
"android.support.v7.view.ActionMode.getSubtitle () "," Returns the current subtitle of this action mode. <br /><br />"
"android.support.v7.view.ActionMode.finish () "," Finish and close this action mode. <br /><br />"
"android.support.v7.view.ActionMode.isTitleOptional () "," no description <br /><br />"
"android.support.v7.view.ActionMode.getCustomView () "," Returns the current custom view for this action mode. <br /><br />"
"android.support.v7.view.ActionMode.getTitle () "," Returns the current title of this action mode. <br /><br />"
"android.support.v7.view.ActionMode.getTitleOptionalHint () "," no description <br /><br />"
"android.support.v7.view.ActionMode.invalidate () "," Invalidate the action mode and refresh menu content. <br /><br />"
"android.support.v7.view.CollapsibleActionView.onActionViewCollapsed () "," Called when this view is collapsed as an action view. <br /><br />"
"android.support.v7.view.CollapsibleActionView.onActionViewExpanded () "," Called when this view is expanded as an action view. <br /><br />"
"android.support.v7.widget.ActionMenuView.isOverflowMenuShowing () "," Check whether the overflow menu is currently showing. <br /><br />"
"android.support.v7.widget.ActionMenuView.getPopupTheme () "," no description <br /><br />"
"android.support.v7.widget.ActionMenuView.AttributeSet () "," Returns a new set of layout parameters based on the supplied attributes set. <br /><br />"
"android.support.v7.widget.ActionMenuView.onDetachedFromWindow () "," This is called when the view is detached from a window. <br /><br />"
"android.support.v7.widget.ActionMenuView.showOverflowMenu () "," Show the overflow items from the associated menu. <br /><br />"
"android.support.v7.widget.ActionMenuView.dismissPopupMenus () "," Dismiss any popups associated with this menu view. <br /><br />"
"android.support.v7.widget.ActionMenuView.setPopupTheme (int resId) "," Specifies the theme to use when inflating popup menus. <br /><br />"
"android.support.v7.widget.ActionMenuView.hideOverflowMenu () "," Hide the overflow items from the associated menu. <br /><br />"
"android.support.v7.widget.ActionMenuView.getMenu () "," Returns the Menu object that this ActionMenuView is currently presenting. <br /><br />"
"android.support.v7.widget.ActionMenuView.ActionMenuView.OnMenuItemClickListener () "," no description <br /><br />"
"android.support.v7.widget.ActionMenuView.Configuration () "," Called when the current configuration of the resources being used by the application have changed. <br /><br />"
"android.support.v7.widget.ActionMenuView.View () "," Dispatches an AccessibilityEvent to the View first and then to its children for adding their text content to the event. <br /><br />"
"android.support.v7.widget.ActionMenuView.OnMenuItemClickListener.MenuItem () "," This method will be invoked when a menu item is clicked if the item itself did not already handle the event. <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenario21 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenario5 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenario22 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testMoveAdded () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenario6 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenario12 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.List () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenario24 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testDeleteCount () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenario9 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenerio33 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenario23 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenario27 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenario8 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenario20 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenario26 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenerio45 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testAddProcess () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.Random () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.TestResult () "," Runs the test case and collects the results in TestResult. <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenerio29 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenerio36 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testAddRemoveSeparate () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenerio44 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenario18 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenario17 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenerio28 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenerio46 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenerio37 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenario19 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenerio35 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenerio43 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testAddCount () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testChangeAll () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testFindPositionOffsetInPreLayout () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testDeleteVisible () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenerio34 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenerio42 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenerio39 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testDeleteInvisible () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenerio41 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenerio32 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenerio31 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testRandom () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testSinglePass () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenario25 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenerio38 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenario16 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenario15 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenerio40 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenario4 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testDivideDelete () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenario13 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenario25a () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenario1 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenerio30 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenario14 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenario11 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenario2 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenario10 () "," no description <br /><br />"
"android.support.v7.widget.AdapterHelperTest.testScenario3 () "," no description <br /><br />"
"android.support.v7.widget.BaseRecyclerViewInstrumentationTest.AttachDetachCountingAdapter.getCounter () "," no description <br /><br />"
"android.support.v7.widget.BaseRecyclerViewInstrumentationTest.scrollBy (int dt) "," no description <br /><br />"
"android.support.v7.widget.BaseRecyclerViewInstrumentationTest.removeRecyclerView () "," no description <br /><br />"
"android.support.v7.widget.BaseRecyclerViewInstrumentationTest.getDecoratedRecyclerViewBounds () "," no description <br /><br />"
"android.support.v7.widget.BaseRecyclerViewInstrumentationTest.View () "," no description <br /><br />"
"android.support.v7.widget.BaseRecyclerViewInstrumentationTest.RecyclerView () "," no description <br /><br />"
"android.support.v7.widget.BaseRecyclerViewInstrumentationTest.Runnable () "," Helper for running portions of a test on the UI thread. <br /><br />"
"android.support.v7.widget.BaseRecyclerViewInstrumentationTest.isMainThread () "," no description <br /><br />"
"android.support.v7.widget.BaseRecyclerViewInstrumentationTest.ViewAttachDetachCounter.RecyclerView.ViewHolder () "," no description <br /><br />"
"android.support.v7.widget.BaseRecyclerViewInstrumentationTest.ViewAttachDetachCounter.RecyclerView () "," no description <br /><br />"
"android.support.v7.widget.BucketTest.testSetClear () "," no description <br /><br />"
"android.support.v7.widget.BucketTest.testInsert () "," no description <br /><br />"
"android.support.v7.widget.BucketTest.testRemove () "," no description <br /><br />"
"android.support.v7.widget.BucketTest.setUp () "," Sets up the fixture, for example, open a network connection. <br /><br />"
"android.support.v7.widget.BucketTest.testCountOnesBefore () "," no description <br /><br />"
"android.support.v7.widget.CardView.setCardBackgroundColor (int color) "," Updates the background color of the CardView <br /><br />"
"android.support.v7.widget.CardView.setPadding (int left, int top, int right, int bottom) "," Sets the padding. <br /><br />"
"android.support.v7.widget.CardView.setUseCompatPadding (boolean useCompatPadding) "," CardView adds additional padding to draw shadows on platforms before L. <br /><br />"
"android.support.v7.widget.CardView.setPreventCornerOverlap (boolean preventCornerOverlap) "," On API 20 and before, CardView does not clip the bounds of the Card for the rounded corners. <br /><br />"
"android.support.v7.widget.CardView.getContentPaddingTop () "," Returns the inner padding after the Card's top edge <br /><br />"
"android.support.v7.widget.CardView.setMaxCardElevation (float radius) "," Updates the backward compatible elevation of the CardView. <br /><br />"
"android.support.v7.widget.CardView.setPaddingRelative (int start, int top, int end, int bottom) "," Sets the relative padding. <br /><br />"
"android.support.v7.widget.CardView.getContentPaddingRight () "," Returns the inner padding before the Card's right edge <br /><br />"
"android.support.v7.widget.CardView.getContentPaddingBottom () "," Returns the inner padding before the Card's bottom edge <br /><br />"
"android.support.v7.widget.CardView.getPreventCornerOverlap () "," Returns whether CardView should add extra padding to content to avoid overlaps with rounded corners on API versions 20 and below. <br /><br />"
"android.support.v7.widget.CardView.getRadius () "," Returns the corner radius of the CardView. <br /><br />"
"android.support.v7.widget.CardView.setContentPadding (int left, int top, int right, int bottom) "," Sets the padding between the Card's edges and the children of CardView. <br /><br />"
"android.support.v7.widget.CardView.setRadius (float radius) "," Updates the corner radius of the CardView. <br /><br />"
"android.support.v7.widget.CardView.getContentPaddingLeft () "," Returns the inner padding after the Card's left edge <br /><br />"
"android.support.v7.widget.CardView.getMaxCardElevation () "," Returns the backward compatible elevation of the CardView. <br /><br />"
"android.support.v7.widget.CardView.getUseCompatPadding () "," Returns whether CardView will add inner padding on platforms L and after. <br /><br />"
"android.support.v7.widget.CardView.setCardElevation (float radius) "," Updates the backward compatible elevation of the CardView. <br /><br />"
"android.support.v7.widget.CardView.getCardElevation () "," Returns the backward compatible elevation of the CardView. <br /><br />"
"android.support.v7.widget.DefaultItemAnimator.isRunning () "," Method which returns whether there are any item animations currently running. <br /><br />"
"android.support.v7.widget.DefaultItemAnimator.endAnimations () "," Method called when all item animations should be ended immediately. <br /><br />"
"android.support.v7.widget.DefaultItemAnimator.RecyclerView.ViewHolder () "," Method called when an animation on a view should be ended immediately. <br /><br />"
"android.support.v7.widget.DefaultItemAnimator.notifyItemRangeChanged (int, int) () "," Called when an item is changed in the RecyclerView, as indicated by a call to notifyItemChanged(int) or notifyItemRangeChanged(int, int). <br /><br />"
"android.support.v7.widget.DefaultItemAnimator.runPendingAnimations () "," Called when there are pending animations waiting to be started. <br /><br />"
"android.support.v7.widget.DefaultItemAnimatorTest.cancelChangeNewTest (boolean before) "," no description <br /><br />"
"android.support.v7.widget.DefaultItemAnimatorTest.testCancelChangeNewAfter () "," no description <br /><br />"
"android.support.v7.widget.DefaultItemAnimatorTest.testCancelChangeBothAfter () "," no description <br /><br />"
"android.support.v7.widget.DefaultItemAnimatorTest.testCancelChangeOldAfter () "," no description <br /><br />"
"android.support.v7.widget.DefaultItemAnimatorTest.testCancelChangeNewBefore () "," no description <br /><br />"
"android.support.v7.widget.DefaultItemAnimatorTest.cancelChangeBothTest (boolean before) "," no description <br /><br />"
"android.support.v7.widget.DefaultItemAnimatorTest.testCancelAddAfter () "," no description <br /><br />"
"android.support.v7.widget.DefaultItemAnimatorTest.testAnimateAdd () "," no description <br /><br />"
"android.support.v7.widget.DefaultItemAnimatorTest.testCancelMoveAfter () "," no description <br /><br />"
"android.support.v7.widget.DefaultItemAnimatorTest.testAnimateMove () "," no description <br /><br />"
"android.support.v7.widget.DefaultItemAnimatorTest.testCancelAddBefore () "," no description <br /><br />"
"android.support.v7.widget.DefaultItemAnimatorTest.ViewHolder... () "," no description <br /><br />"
"android.support.v7.widget.DefaultItemAnimatorTest.testCancelChangeBothBefore () "," no description <br /><br />"
"android.support.v7.widget.DefaultItemAnimatorTest.testAnimateRemove () "," no description <br /><br />"
"android.support.v7.widget.DefaultItemAnimatorTest.testCancelMoveBefore () "," no description <br /><br />"
"android.support.v7.widget.DefaultItemAnimatorTest.cancelChangeOldTest (boolean before) "," no description <br /><br />"
"android.support.v7.widget.DefaultItemAnimatorTest.testCancelRemove () "," no description <br /><br />"
"android.support.v7.widget.DefaultItemAnimatorTest.testCancelChangeOldBefore () "," no description <br /><br />"
"android.support.v7.widget.DefaultItemAnimatorTest.Runnable () "," Helper for running portions of a test on the UI thread. <br /><br />"
"android.support.v7.widget.DefaultItemAnimatorTest.testAnimateChange () "," no description <br /><br />"
"android.support.v7.widget.GridLayout.UNDEFINED (int start, int size) "," Return a Spec, spec, where:   spec.span = [start, start + size]    To leave the start index undefined, use the value UNDEFINED. <br /><br />"
"android.support.v7.widget.GridLayout.spec (int start, float weight) "," Equivalent to: spec(start, 1, weight). <br /><br />"
"android.support.v7.widget.GridLayout.AttributeSet () "," Returns a new set of layout parameters based on the supplied attributes set. <br /><br />"
"android.support.v7.widget.GridLayout.GridLayout.Alignment () "," Equivalent to: spec(start, 1, alignment, weight). <br /><br />"
"android.support.v7.widget.GridLayout.GridLayout.LayoutParams (int start, int size, float weight) "," Equivalent to: spec(start, 1, default_alignment, weight) - where default_alignment is specified in GridLayout.LayoutParams. <br /><br />"
"android.support.v7.widget.GridLayout.getOrientation () "," Returns the current orientation. <br /><br />"
"android.support.v7.widget.GridLayout.setRowOrderPreserved (boolean rowOrderPreserved) "," When this property is true, GridLayout is forced to place the row boundaries so that their associated grid indices are in ascending order in the view. <br /><br />"
"android.support.v7.widget.GridLayout.setColumnOrderPreserved (boolean columnOrderPreserved) "," When this property is true, GridLayout is forced to place the column boundaries so that their associated grid indices are in ascending order in the view. <br /><br />"
"android.support.v7.widget.GridLayout.getAlignmentMode () "," Returns the alignment mode. <br /><br />"
"android.support.v7.widget.GridLayout.requestLayout () "," Call this when something has changed which has invalidated the layout of this view. <br /><br />"
"android.support.v7.widget.GridLayout.UNDEFINED (int start) "," Return a Spec, spec, where:   spec.span = [start, start + 1]    To leave the start index undefined, use the value UNDEFINED. <br /><br />"
"android.support.v7.widget.GridLayout.getUseDefaultMargins () "," Returns whether or not this GridLayout will allocate default margins when no corresponding layout parameters are defined. <br /><br />"
"android.support.v7.widget.GridLayout.getPrinter () "," Return the printer that will log diagnostics from this layout. <br /><br />"
"android.support.v7.widget.GridLayout.setOrientation (int orientation) "," GridLayout uses the orientation property for two purposes:   To control the 'direction' in which default row/column indices are generated when they are not specified in a component's layout parameters. <br /><br />"
"android.support.v7.widget.GridLayout.getColumnCount () "," Returns the current number of columns. <br /><br />"
"android.support.v7.widget.GridLayout.setUseDefaultMargins (boolean useDefaultMargins) "," When true, GridLayout allocates default margins around children based on the child's visual characteristics. <br /><br />"
"android.support.v7.widget.GridLayout.setAlignmentMode (int alignmentMode) "," Sets the alignment mode to be used for all of the alignments between the children of this container. <br /><br />"
"android.support.v7.widget.GridLayout.setRowCount (int rowCount) "," RowCount is used only to generate default row/column indices when they are not specified by a component's layout parameters. <br /><br />"
"android.support.v7.widget.GridLayout.Printer () "," Set the printer that will log diagnostics from this layout. <br /><br />"
"android.support.v7.widget.GridLayout.getRowCount () "," Returns the current number of rows. <br /><br />"
"android.support.v7.widget.GridLayout.UNDEFINED () "," Return a Spec, spec, where:   spec.span = [start, start + size]   spec.alignment = alignment   spec.weight = weight    To leave the start index undefined, use the value UNDEFINED. <br /><br />"
"android.support.v7.widget.GridLayout.isRowOrderPreserved () "," Returns whether or not row boundaries are ordered by their grid indices. <br /><br />"
"android.support.v7.widget.GridLayout.setColumnCount (int columnCount) "," ColumnCount is used only to generate default column/column indices when they are not specified by a component's layout parameters. <br /><br />"
"android.support.v7.widget.GridLayout.isColumnOrderPreserved () "," Returns whether or not column boundaries are ordered by their grid indices. <br /><br />"
"android.support.v7.widget.GridLayout.LayoutParams.setGravity (int gravity) "," Describes how the child views are positioned. <br /><br />"
"android.support.v7.widget.GridLayout.LayoutParams.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.support.v7.widget.GridLayout.LayoutParams.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.support.v7.widget.GridLayout.Spec.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.support.v7.widget.GridLayout.Spec.Object () "," Returns true if the class, alignment and span properties of this Spec and the supplied parameter are pairwise equal, false otherwise. <br /><br />"
"android.support.v7.widget.GridLayoutManager.DefaultSpanSizeLookup.getSpanIndex (int position, int spanCount) "," Returns the final span index of the provided position. <br /><br />"
"android.support.v7.widget.GridLayoutManager.DefaultSpanSizeLookup.getSpanSize (int position) "," Returns the number of span occupied by the item at position. <br /><br />"
"android.support.v7.widget.GridLayoutManager.AttributeSet () "," Create a LayoutParams object suitable for this LayoutManager from an inflated layout resource. <br /><br />"
"android.support.v7.widget.GridLayoutManager.RecyclerView.LayoutParams () "," Determines the validity of the supplied LayoutParams object. <br /><br />"
"android.support.v7.widget.GridLayoutManager.getSpanCount () "," Returns the number of spans laid out by this grid. <br /><br />"
"android.support.v7.widget.GridLayoutManager.RecyclerView.State () "," Lay out all relevant child views from the given adapter. <br /><br />"
"android.support.v7.widget.GridLayoutManager.AccessibilityNodeInfoCompat () "," Called by the AccessibilityDelegate when the accessibility information for a specific item should be populated. <br /><br />"
"android.support.v7.widget.GridLayoutManager.RecyclerView () "," Called when items have been changed in the adapter. <br /><br />"
"android.support.v7.widget.GridLayoutManager.supportsPredictiveItemAnimations () "," Returns whether this LayoutManager supports automatic item animations. <br /><br />"
"android.support.v7.widget.GridLayoutManager.notifyDataSetChanged () () "," Called when notifyDataSetChanged() is triggered instead of giving detailed information on what has actually changed. <br /><br />"
"android.support.v7.widget.GridLayoutManager.setSpanCount (int spanCount) "," Sets the number of spans to be laid out. <br /><br />"
"android.support.v7.widget.GridLayoutManager.ViewGroup.LayoutParams () "," Create a LayoutParams object suitable for this LayoutManager, copying relevant values from the supplied LayoutParams object if possible. <br /><br />"
"android.support.v7.widget.GridLayoutManager.GridLayoutManager.SpanSizeLookup () "," Sets the source to get the number of spans occupied by each item in the adapter. <br /><br />"
"android.support.v7.widget.GridLayoutManager.generateDefaultLayoutParams () "," Create a default LayoutParams object for a child of the RecyclerView. <br /><br />"
"android.support.v7.widget.GridLayoutManager.setStackFromEnd (boolean stackFromEnd) "," stackFromEnd is not supported by GridLayoutManager. <br /><br />"
"android.support.v7.widget.GridLayoutManager.LayoutParams.getSpanSize () "," Returns the number of spans occupied by this View. <br /><br />"
"android.support.v7.widget.GridLayoutManager.LayoutParams.getSpanIndex () "," Returns the current span index of this View. <br /><br />"
"android.support.v7.widget.GridLayoutManager.SpanSizeLookup.getSpanGroupIndex (int adapterPosition, int spanCount) "," Returns the index of the group this position belongs. <br /><br />"
"android.support.v7.widget.GridLayoutManager.SpanSizeLookup.invalidateSpanIndexCache () "," Clears the span index cache. <br /><br />"
"android.support.v7.widget.GridLayoutManager.SpanSizeLookup.getSpanIndex (int, int) (boolean cacheSpanIndices) "," Sets whether the results of getSpanIndex(int, int) method should be cached or not. <br /><br />"
"android.support.v7.widget.GridLayoutManager.SpanSizeLookup.getSpanIndex (int position, int spanCount) "," Returns the final span index of the provided position. <br /><br />"
"android.support.v7.widget.GridLayoutManager.SpanSizeLookup.getSpanSize (int position) "," Returns the number of span occupied by the item at position. <br /><br />"
"android.support.v7.widget.GridLayoutManager.SpanSizeLookup.getSpanIndex (int, int) () "," Returns whether results of getSpanIndex(int, int) method are cached or not. <br /><br />"
"android.support.v7.widget.GridLayoutManagerTest.testUnevenHeights () "," no description <br /><br />"
"android.support.v7.widget.GridLayoutManagerTest.testSpanLookupCache () "," no description <br /><br />"
"android.support.v7.widget.GridLayoutManagerTest.testLayoutParams () "," no description <br /><br />"
"android.support.v7.widget.GridLayoutManagerTest.scrollBackAndPreservePositionsTest (GridLayoutManagerTest.Config config) "," no description <br /><br />"
"android.support.v7.widget.GridLayoutManagerTest.testUnevenWidths () "," no description <br /><br />"
"android.support.v7.widget.GridLayoutManagerTest.setupBasic (GridLayoutManagerTest.Config config, GridLayoutManagerTest.GridTestAdapter testAdapter) "," no description <br /><br />"
"android.support.v7.widget.GridLayoutManagerTest.testCacheSpanIndices () "," no description <br /><br />"
"android.support.v7.widget.GridLayoutManagerTest.testScrollBackAndPreservePositions () "," no description <br /><br />"
"android.support.v7.widget.GridLayoutManagerTest.View () "," no description <br /><br />"
"android.support.v7.widget.GridLayoutManagerTest.testSpanLookupWithCache () "," no description <br /><br />"
"android.support.v7.widget.GridLayoutManagerTest.testAnchorUpdate () "," no description <br /><br />"
"android.support.v7.widget.GridLayoutManagerTest.RecyclerView () "," no description <br /><br />"
"android.support.v7.widget.GridLayoutManagerTest.testCustomHeightInVertical () "," no description <br /><br />"
"android.support.v7.widget.GridLayoutManagerTest.spanLookupTest (boolean enableCache) "," no description <br /><br />"
"android.support.v7.widget.GridLayoutManagerTest.testVerticalAccessibilitySpanIndices () "," no description <br /><br />"
"android.support.v7.widget.GridLayoutManagerTest.customSizeInScrollDirectionTest (GridLayoutManagerTest.Config config) "," no description <br /><br />"
"android.support.v7.widget.GridLayoutManagerTest.accessibilitySpanIndicesTest (int orientation) "," no description <br /><br />"
"android.support.v7.widget.GridLayoutManagerTest.testSpanLookup () "," no description <br /><br />"
"android.support.v7.widget.GridLayoutManagerTest.testHorizontalAccessibilitySpanIndices () "," no description <br /><br />"
"android.support.v7.widget.GridLayoutManagerTest.testCustomWidthInHorizontal () "," no description <br /><br />"
"android.support.v7.widget.GridLayoutManagerTest.layoutParamsTest (int orientation) "," no description <br /><br />"
"android.support.v7.widget.GridLayoutManagerTest.testNotifyDataSetChange () "," no description <br /><br />"
"android.support.v7.widget.GridLayoutManagerTest.setupBasic (GridLayoutManagerTest.Config config) "," no description <br /><br />"
"android.support.v7.widget.GridLayoutManagerTest.testSpanGroupIndex () "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutCompat.AttributeSet () "," Returns a new set of layout parameters based on the supplied attributes set. <br /><br />"
"android.support.v7.widget.LinearLayoutCompat.setWeightSum (float weightSum) "," Defines the desired weights sum. <br /><br />"
"android.support.v7.widget.LinearLayoutCompat.getDividerPadding () "," Get the padding size used to inset dividers in pixels <br /><br />"
"android.support.v7.widget.LinearLayoutCompat.shouldDelayChildPressedState () "," Return true if the pressed state should be delayed for children or descendants of this ViewGroup. <br /><br />"
"android.support.v7.widget.LinearLayoutCompat.getOrientation () "," Returns the current orientation. <br /><br />"
"android.support.v7.widget.LinearLayoutCompat.setBaselineAlignedChildIndex (int i) "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutCompat.getBaseline () "," Return the offset of the widget's text baseline from the widget's top boundary. <br /><br />"
"android.support.v7.widget.LinearLayoutCompat.setShowDividers (int showDividers) "," Set how dividers should be shown between items in this layout <br /><br />"
"android.support.v7.widget.LinearLayoutCompat.getBaselineAlignedChildIndex () "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutCompat.setDividerPadding (int padding) "," Set padding displayed on both ends of dividers. <br /><br />"
"android.support.v7.widget.LinearLayoutCompat.setOrientation (int orientation) "," Should the layout be a column or a row. <br /><br />"
"android.support.v7.widget.LinearLayoutCompat.setGravity (int gravity) "," Describes how the child views are positioned. <br /><br />"
"android.support.v7.widget.LinearLayoutCompat.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.support.v7.widget.LinearLayoutCompat.Drawable () "," Set a drawable to be used as a divider between items. <br /><br />"
"android.support.v7.widget.LinearLayoutCompat.setBaselineAligned (boolean baselineAligned) "," Defines whether widgets contained in this layout are baseline-aligned or not. <br /><br />"
"android.support.v7.widget.LinearLayoutCompat.getShowDividers () "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutCompat.getWeightSum () "," Returns the desired weights sum. <br /><br />"
"android.support.v7.widget.LinearLayoutCompat.isBaselineAligned () "," Indicates whether widgets contained within this layout are aligned on their baseline or not. <br /><br />"
"android.support.v7.widget.LinearLayoutCompat.getDividerDrawable () "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutCompat.setHorizontalGravity (int horizontalGravity) "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutCompat.setMeasureWithLargestChildEnabled (boolean enabled) "," When set to true, all children with a weight will be considered having the minimum size of the largest child. <br /><br />"
"android.support.v7.widget.LinearLayoutCompat.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.support.v7.widget.LinearLayoutCompat.setVerticalGravity (int verticalGravity) "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutCompat.isMeasureWithLargestChildEnabled () "," When true, all children with a weight will be considered having the minimum size of the largest child. <br /><br />"
"android.support.v7.widget.LinearLayoutManager.findViewByPosition (int position) "," Finds the view which represents the given adapter position. <br /><br />"
"android.support.v7.widget.LinearLayoutManager.getOrientation () "," Returns the current orientaion of the layout. <br /><br />"
"android.support.v7.widget.LinearLayoutManager.findFirstCompletelyVisibleItemPosition () "," Returns the adapter position of the first fully visible view. <br /><br />"
"android.support.v7.widget.LinearLayoutManager.getReverseLayout () "," Returns if views are laid out from the opposite direction of the layout. <br /><br />"
"android.support.v7.widget.LinearLayoutManager.RecyclerView.State () "," Smooth scroll to the specified adapter position. <br /><br />"
"android.support.v7.widget.LinearLayoutManager.setReverseLayout (boolean reverseLayout) "," Used to reverse item traversal and layout order. <br /><br />"
"android.support.v7.widget.LinearLayoutManager.isSmoothScrollbarEnabled () "," Returns the current state of the smooth scrollbar feature. <br /><br />"
"android.support.v7.widget.LinearLayoutManager.onSaveInstanceState () "," Called when the LayoutManager should save its state. <br /><br />"
"android.support.v7.widget.LinearLayoutManager.setOrientation (int orientation) "," Sets the orientation of the layout. <br /><br />"
"android.support.v7.widget.LinearLayoutManager.findLastCompletelyVisibleItemPosition () "," Returns the adapter position of the last fully visible view. <br /><br />"
"android.support.v7.widget.LinearLayoutManager.generateDefaultLayoutParams () "," Create a default LayoutParams object for a child of the RecyclerView. <br /><br />"
"android.support.v7.widget.LinearLayoutManager.canScrollHorizontally () "," Query if horizontal scrolling is currently supported. <br /><br />"
"android.support.v7.widget.LinearLayoutManager.canScrollVertically () "," Query if vertical scrolling is currently supported. <br /><br />"
"android.support.v7.widget.LinearLayoutManager.IllegalStateException () "," Checks if RecyclerView is in the middle of a layout or scroll and throws an IllegalStateException if it is. <br /><br />"
"android.support.v7.widget.LinearLayoutManager.setRecycleChildrenOnDetach (boolean recycleChildrenOnDetach) "," Set whether LayoutManager will recycle its children when it is detached from RecyclerView. <br /><br />"
"android.support.v7.widget.LinearLayoutManager.computeScrollVectorForPosition (int targetPosition) "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutManager.Parcelable () "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutManager.getRecycleChildrenOnDetach () "," Returns whether LayoutManager will recycle its children when it is detached from RecyclerView. <br /><br />"
"android.support.v7.widget.LinearLayoutManager.scrollToPositionWithOffset (int position, int offset) "," Scroll to the specified adapter position with the given offset from resolved layout start. <br /><br />"
"android.support.v7.widget.LinearLayoutManager.RecyclerView.Recycler () "," Called when this LayoutManager is detached from its parent RecyclerView or when its parent RecyclerView is detached from its window. <br /><br />"
"android.support.v7.widget.LinearLayoutManager.findFirstVisibleItemPosition () "," Returns the adapter position of the first visible view. <br /><br />"
"android.support.v7.widget.LinearLayoutManager.supportsPredictiveItemAnimations () "," Returns whether this LayoutManager supports automatic item animations. <br /><br />"
"android.support.v7.widget.LinearLayoutManager.scrollToPosition (int position) "," Scroll the RecyclerView to make the position visible. <br /><br />"
"android.support.v7.widget.LinearLayoutManager.setStackFromBottom (boolean) (boolean stackFromEnd) "," Compatibility support for setStackFromBottom(boolean) <br /><br />"
"android.support.v7.widget.LinearLayoutManager.setSmoothScrollbarEnabled (boolean enabled) "," When smooth scrollbar is enabled, the position and size of the scrollbar thumb is computed based on the number of visible pixels in the visible items. <br /><br />"
"android.support.v7.widget.LinearLayoutManager.getStackFromEnd () "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutManager.AccessibilityEvent () "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutManager.findLastVisibleItemPosition () "," Returns the adapter position of the last visible view. <br /><br />"
"android.support.v7.widget.LinearLayoutManagerTest.testKeepStackFromEndPartialFocusOnResize () "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutManagerTest.testRecycleDuringAnimations () "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutManagerTest.testKeepReversePartialFocusOnResize () "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutManagerTest.testRecycleChildrenOnDetach () "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutManagerTest.testAccessibilityPositions () "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutManagerTest.testKeepFullFocusOnResize () "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutManagerTest.testKeepReverseFullFocusOnResize () "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutManagerTest.testDontRecycleChildrenOnDetach () "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutManagerTest.scrollToPositionWithOffsetTest (LinearLayoutManagerTest.Config config) "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutManagerTest.getFirstLastChildrenTest (LinearLayoutManagerTest.Config config) "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutManagerTest.testKeepFocusOnRelayout () "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutManagerTest.testResize () "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutManagerTest.testKeepPartialFocusOnResize () "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutManagerTest.savedStateTest (LinearLayoutManagerTest.Config config, boolean waitForLayout, LinearLayoutManagerTest.PostLayoutRunnable postLayoutOperation, LinearLayoutManagerTest.PostRestoreRunnable postRestoreOperation) "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutManagerTest.stackFromEndTest (LinearLayoutManagerTest.Config config) "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutManagerTest.testGetFirstLastChildrenTest () "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutManagerTest.Rect () "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutManagerTest.keepFocusOnResizeTest (LinearLayoutManagerTest.Config config, boolean fullyVisible) "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutManagerTest.scrollToPositionWithPredictive (int scrollPosition, int scrollOffset) "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutManagerTest.testKeepStackFromEndFullFocusOnResize () "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutManagerTest.testScrollToPositionWithOffset () "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutManagerTest.testScrollToPositionWithPredictive () "," no description <br /><br />"
"android.support.v7.widget.LinearLayoutManagerTest.testSavedState () "," no description <br /><br />"
"android.support.v7.widget.LinearSmoothScroller.computeScrollVectorForPosition (int targetPosition) "," no description <br /><br />"
"android.support.v7.widget.LinearSmoothScroller.calculateDyToMakeVisible (android.view.View, int) (int viewStart, int viewEnd, int boxStart, int boxEnd, int snapPreference) "," Helper method for calculateDxToMakeVisible(android.view.View, int) and calculateDyToMakeVisible(android.view.View, int) <br /><br />"
"android.support.v7.widget.LinearSmoothScroller.View () "," Calculates the vertical scroll amount necessary to make the given view fully visible inside the RecyclerView. <br /><br />"
"android.support.v7.widget.ListPopupWindow.AdapterView.OnItemClickListener () "," Sets a listener to receive events when a list item is clicked. <br /><br />"
"android.support.v7.widget.ListPopupWindow.ListAdapter () "," Sets the adapter that provides the data and the views to represent the data in this popup window. <br /><br />"
"android.support.v7.widget.ListPopupWindow.setWidth (int width) "," Sets the width of the popup window in pixels. <br /><br />"
"android.support.v7.widget.ListPopupWindow.getSelectedItem () "," no description <br /><br />"
"android.support.v7.widget.ListPopupWindow.getAnchorView () "," Returns the view that will be used to anchor this popup. <br /><br />"
"android.support.v7.widget.ListPopupWindow.Drawable () "," Sets a drawable to use as the list item selector. <br /><br />"
"android.support.v7.widget.ListPopupWindow.getHeight () "," no description <br /><br />"
"android.support.v7.widget.ListPopupWindow.dismiss () "," Dismiss the popup window. <br /><br />"
"android.support.v7.widget.ListPopupWindow.getSelectedItemPosition () "," no description <br /><br />"
"android.support.v7.widget.ListPopupWindow.isShowing () "," no description <br /><br />"
"android.support.v7.widget.ListPopupWindow.AdapterView.OnItemSelectedListener () "," Sets a listener to receive events when a list item is selected. <br /><br />"
"android.support.v7.widget.ListPopupWindow.View.OnTouchListener () "," Returns an View.OnTouchListener that can be added to the source view to implement drag-to-open behavior. <br /><br />"
"android.support.v7.widget.ListPopupWindow.show () () "," Post a show() call to the UI thread. <br /><br />"
"android.support.v7.widget.ListPopupWindow.setHorizontalOffset (int offset) "," Set the horizontal offset of this popup from its anchor view in pixels. <br /><br />"
"android.support.v7.widget.ListPopupWindow.setSoftInputMode (int) () "," Returns the current value in setSoftInputMode(int). <br /><br />"
"android.support.v7.widget.ListPopupWindow.performItemClick (int position) "," Perform an item click operation on the specified list adapter position. <br /><br />"
"android.support.v7.widget.ListPopupWindow.isModal () "," Returns whether the popup window will be modal when shown. <br /><br />"
"android.support.v7.widget.ListPopupWindow.INPUT_METHOD_NOT_NEEDED (int mode) "," Control how the popup operates with an input method: one of INPUT_METHOD_FROM_FOCUSABLE, INPUT_METHOD_NEEDED, or INPUT_METHOD_NOT_NEEDED. <br /><br />"
"android.support.v7.widget.ListPopupWindow.setVerticalOffset (int offset) "," Set the vertical offset of this popup from its anchor view in pixels. <br /><br />"
"android.support.v7.widget.ListPopupWindow.getSelectedItemId () "," no description <br /><br />"
"android.support.v7.widget.ListPopupWindow.getWidth () "," no description <br /><br />"
"android.support.v7.widget.ListPopupWindow.setSoftInputMode (int mode) "," Sets the operating mode for the soft input area. <br /><br />"
"android.support.v7.widget.ListPopupWindow.getListView () "," no description <br /><br />"
"android.support.v7.widget.ListPopupWindow.setPromptPosition (int position) "," Set where the optional prompt view should appear. <br /><br />"
"android.support.v7.widget.ListPopupWindow.getPromptPosition () "," no description <br /><br />"
"android.support.v7.widget.ListPopupWindow.setInputMethodMode (int) () "," Return the current value in setInputMethodMode(int). <br /><br />"
"android.support.v7.widget.ListPopupWindow.setSelection (int position) "," Set the selected position of the list. <br /><br />"
"android.support.v7.widget.ListPopupWindow.setAnimationStyle (int animationStyle) "," Set an animation style to use when the popup window is shown or dismissed. <br /><br />"
"android.support.v7.widget.ListPopupWindow.View () "," Set a view to act as a user prompt for this popup window. <br /><br />"
"android.support.v7.widget.ListPopupWindow.PopupWindow.OnDismissListener () "," Set a listener to receive a callback when the popup is dismissed. <br /><br />"
"android.support.v7.widget.ListPopupWindow.setModal (boolean modal) "," Set whether this window should be modal when shown. <br /><br />"
"android.support.v7.widget.ListPopupWindow.setDropDownGravity (int gravity) "," Set the gravity of the dropdown list. <br /><br />"
"android.support.v7.widget.ListPopupWindow.getSelectedView () "," no description <br /><br />"
"android.support.v7.widget.ListPopupWindow.show () "," Show the popup list. <br /><br />"
"android.support.v7.widget.ListPopupWindow.getVerticalOffset () "," no description <br /><br />"
"android.support.v7.widget.ListPopupWindow.getHorizontalOffset () "," no description <br /><br />"
"android.support.v7.widget.ListPopupWindow.getAnimationStyle () "," Returns the animation style that will be used when the popup window is shown or dismissed. <br /><br />"
"android.support.v7.widget.ListPopupWindow.clearListSelection () "," Clear any current list selection. <br /><br />"
"android.support.v7.widget.ListPopupWindow.KeyEvent () "," Filter key down events. <br /><br />"
"android.support.v7.widget.ListPopupWindow.setHeight (int height) "," Sets the height of the popup window in pixels. <br /><br />"
"android.support.v7.widget.ListPopupWindow.setContentWidth (int width) "," Sets the width of the popup window by the size of its content. <br /><br />"
"android.support.v7.widget.ListPopupWindow.getBackground () "," no description <br /><br />"
"android.support.v7.widget.ListPopupWindow.isInputMethodNotNeeded () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.testSwapMoveRemove_3 () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.testRandomMoveUpdate () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.testSwapMoveRemove_16 () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.test2 () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.test1 () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.testSwapMoveRemove_5 () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.testSwapMoveRemove_1 () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.test3 () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.testRandomMoveAdd () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.testSwapMoveRemove_15 () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.testSwapMoveRemove_6 () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.testMoveRemove () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.test6 () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.testSwapMoveRemove_13 () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.orderedRandom (int... ops) "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.testSwapMoveUpdate_2 () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.testSwapMoveRemove_14 () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.testSwapMoveUpdate_0 () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.testSwapMoveRemove_4 () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.test7 () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.testRandomMoveRemove () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.testSwapMoveRemove_10 () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.testSwapMoveUpdate_1 () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.testRandom () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.testSwapMoveRemove_7 () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.test8 () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.testSwapMoveRemove_8 () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.test9 () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.test5 () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.testMoveRemoved () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.setup (int count) "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.testSwapMoveRemove_11 () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.testSwapMoveRemove_9 () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.test4 () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.testSwapMoveRemove_12 () "," no description <br /><br />"
"android.support.v7.widget.OpReorderTest.testSwapMoveRemove_2 () "," no description <br /><br />"
"android.support.v7.widget.OrientationHelper.getEndAfterPadding () "," Returns the end position of the layout after the end padding is removed. <br /><br />"
"android.support.v7.widget.OrientationHelper.RecyclerView.LayoutManager () "," Creates a vertical OrientationHelper for the given LayoutManager. <br /><br />"
"android.support.v7.widget.OrientationHelper.getEnd () "," Returns the end position of the layout without taking padding into account. <br /><br />"
"android.support.v7.widget.OrientationHelper.onLayoutComplete () "," Call this method after onLayout method is complete if state is NOT pre-layout. <br /><br />"
"android.support.v7.widget.OrientationHelper.getEndPadding () "," Returns the padding at the end of the layout. <br /><br />"
"android.support.v7.widget.OrientationHelper.offsetChildren (int amount) "," Offsets all children's positions by the given amount. <br /><br />"
"android.support.v7.widget.OrientationHelper.getStartAfterPadding () "," Returns the start position of the layout after the start padding is added. <br /><br />"
"android.support.v7.widget.OrientationHelper.getTotalSpace () "," Returns the total space to layout. <br /><br />"
"android.support.v7.widget.OrientationHelper.View () "," Offsets the child in this orientation. <br /><br />"
"android.support.v7.widget.OrientationHelper.getTotalSpaceChange () "," Returns the layout space change between the previous layout pass and current layout pass. <br /><br />"
"android.support.v7.widget.PopupMenu.show () "," Show the menu popup anchored to the view specified during construction. <br /><br />"
"android.support.v7.widget.PopupMenu.dismiss () "," Dismiss the menu popup. <br /><br />"
"android.support.v7.widget.PopupMenu.View.OnTouchListener () "," Returns an View.OnTouchListener that can be added to the anchor view to implement drag-to-open behavior. <br /><br />"
"android.support.v7.widget.PopupMenu.getMenu () "," no description <br /><br />"
"android.support.v7.widget.PopupMenu.PopupMenu.OnMenuItemClickListener () "," Set a listener that will be notified when the user selects an item from the menu. <br /><br />"
"android.support.v7.widget.PopupMenu.inflate (int menuRes) "," Inflate a menu resource into this PopupMenu. <br /><br />"
"android.support.v7.widget.PopupMenu.PopupMenu.OnDismissListener () "," Set a listener that will be notified when this menu is dismissed. <br /><br />"
"android.support.v7.widget.PopupMenu.getMenuInflater () "," no description <br /><br />"
"android.support.v7.widget.PopupMenu.OnDismissListener.PopupMenu () "," Called when the associated menu has been dismissed. <br /><br />"
"android.support.v7.widget.PopupMenu.OnMenuItemClickListener.MenuItem () "," This method will be invoked when a menu item is clicked if the item itself did not already handle the event. <br /><br />"
"android.support.v7.widget.RecyclerView.Adapter&lt;VH&nbsp;extends&nbsp;android.support.v7.widget.RecyclerView.ViewHolder&gt;.notifyItemChanged (int position) "," Notify any registered observers that the item at position has changed. <br /><br />"
"android.support.v7.widget.RecyclerView.Adapter&lt;VH&nbsp;extends&nbsp;android.support.v7.widget.RecyclerView.ViewHolder&gt;.onViewAttachedToWindow (VH holder) "," Called when a view created by this adapter has been attached to a window. <br /><br />"
"android.support.v7.widget.RecyclerView.Adapter&lt;VH&nbsp;extends&nbsp;android.support.v7.widget.RecyclerView.ViewHolder&gt;.notifyItemRangeInserted (int positionStart, int itemCount) "," Notify any registered observers that the currently reflected itemCount items starting at positionStart have been newly inserted. <br /><br />"
"android.support.v7.widget.RecyclerView.Adapter&lt;VH&nbsp;extends&nbsp;android.support.v7.widget.RecyclerView.ViewHolder&gt;.Long (boolean hasStableIds) "," Indicates whether each item in the data set can be represented with a unique identifier of type Long. <br /><br />"
"android.support.v7.widget.RecyclerView.Adapter&lt;VH&nbsp;extends&nbsp;android.support.v7.widget.RecyclerView.ViewHolder&gt;.hasObservers () "," Returns true if one or more observers are attached to this adapter. <br /><br />"
"android.support.v7.widget.RecyclerView.Adapter&lt;VH&nbsp;extends&nbsp;android.support.v7.widget.RecyclerView.ViewHolder&gt;.hasStableIds () "," Returns true if this adapter publishes a unique long value that can act as a key for the item at a given position in the data set. <br /><br />"
"android.support.v7.widget.RecyclerView.Adapter&lt;VH&nbsp;extends&nbsp;android.support.v7.widget.RecyclerView.ViewHolder&gt;.onViewDetachedFromWindow (VH holder) "," Called when a view created by this adapter has been detached from its window. <br /><br />"
"android.support.v7.widget.RecyclerView.Adapter&lt;VH&nbsp;extends&nbsp;android.support.v7.widget.RecyclerView.ViewHolder&gt;.getItemCount () "," Returns the total number of items in the data set hold by the adapter. <br /><br />"
"android.support.v7.widget.RecyclerView.Adapter&lt;VH&nbsp;extends&nbsp;android.support.v7.widget.RecyclerView.ViewHolder&gt;.RecyclerView.AdapterDataObserver () "," Unregister an observer currently listening for data changes. <br /><br />"
"android.support.v7.widget.RecyclerView.Adapter&lt;VH&nbsp;extends&nbsp;android.support.v7.widget.RecyclerView.ViewHolder&gt;.RecyclerView () "," Called by RecyclerView when it stops observing this Adapter. <br /><br />"
"android.support.v7.widget.RecyclerView.Adapter&lt;VH&nbsp;extends&nbsp;android.support.v7.widget.RecyclerView.ViewHolder&gt;.getItemId (int position) "," Return the stable ID for the item at position. <br /><br />"
"android.support.v7.widget.RecyclerView.Adapter&lt;VH&nbsp;extends&nbsp;android.support.v7.widget.RecyclerView.ViewHolder&gt;.onBindViewHolder (VH holder, int position) "," Called by RecyclerView to display the data at the specified position. <br /><br />"
"android.support.v7.widget.RecyclerView.Adapter&lt;VH&nbsp;extends&nbsp;android.support.v7.widget.RecyclerView.ViewHolder&gt;.notifyItemRangeChanged (int positionStart, int itemCount) "," Notify any registered observers that the itemCount items starting at position positionStart have changed. <br /><br />"
"android.support.v7.widget.RecyclerView.Adapter&lt;VH&nbsp;extends&nbsp;android.support.v7.widget.RecyclerView.ViewHolder&gt;.onFailedToRecycleView (VH holder) "," Called by the RecyclerView if a ViewHolder created by this Adapter cannot be recycled due to its transient state. <br /><br />"
"android.support.v7.widget.RecyclerView.Adapter&lt;VH&nbsp;extends&nbsp;android.support.v7.widget.RecyclerView.ViewHolder&gt;.notifyItemMoved (int fromPosition, int toPosition) "," Notify any registered observers that the item reflected at fromPosition has been moved to toPosition. <br /><br />"
"android.support.v7.widget.RecyclerView.Adapter&lt;VH&nbsp;extends&nbsp;android.support.v7.widget.RecyclerView.ViewHolder&gt;.onViewRecycled (VH holder) "," Called when a view created by this adapter has been recycled. <br /><br />"
"android.support.v7.widget.RecyclerView.Adapter&lt;VH&nbsp;extends&nbsp;android.support.v7.widget.RecyclerView.ViewHolder&gt;.notifyItemRemoved (int position) "," Notify any registered observers that the item previously located at position has been removed from the data set. <br /><br />"
"android.support.v7.widget.RecyclerView.Adapter&lt;VH&nbsp;extends&nbsp;android.support.v7.widget.RecyclerView.ViewHolder&gt;.notifyItemRangeRemoved (int positionStart, int itemCount) "," Notify any registered observers that the itemCount items previously located at positionStart have been removed from the data set. <br /><br />"
"android.support.v7.widget.RecyclerView.Adapter&lt;VH&nbsp;extends&nbsp;android.support.v7.widget.RecyclerView.ViewHolder&gt;.getItemViewType (int position) "," Return the view type of the item at position for the purposes of view recycling. <br /><br />"
"android.support.v7.widget.RecyclerView.Adapter&lt;VH&nbsp;extends&nbsp;android.support.v7.widget.RecyclerView.ViewHolder&gt;.RecyclerView.ViewHolder () "," Called when RecyclerView needs a new RecyclerView.ViewHolder of the given type to represent an item. <br /><br />"
"android.support.v7.widget.RecyclerView.Adapter&lt;VH&nbsp;extends&nbsp;android.support.v7.widget.RecyclerView.ViewHolder&gt;.RecyclerView.ViewHolder (VH holder, int position) "," This method internally calls onBindViewHolder(ViewHolder, int) to update the RecyclerView.ViewHolder contents with the item at the given position and also sets up some private fields to be used by RecyclerView. <br /><br />"
"android.support.v7.widget.RecyclerView.Adapter&lt;VH&nbsp;extends&nbsp;android.support.v7.widget.RecyclerView.ViewHolder&gt;.notifyItemInserted (int position) "," Notify any registered observers that the item reflected at position has been newly inserted. <br /><br />"
"android.support.v7.widget.RecyclerView.Adapter&lt;VH&nbsp;extends&nbsp;android.support.v7.widget.RecyclerView.ViewHolder&gt;.notifyDataSetChanged () "," Notify any registered observers that the data set has changed. <br /><br />"
"android.support.v7.widget.RecyclerView.AdapterDataObserver.onItemRangeRemoved (int positionStart, int itemCount) "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.AdapterDataObserver.onChanged () "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.AdapterDataObserver.onItemRangeChanged (int positionStart, int itemCount) "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.AdapterDataObserver.onItemRangeInserted (int positionStart, int itemCount) "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.AdapterDataObserver.onItemRangeMoved (int fromPosition, int toPosition, int itemCount) "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.Adapter () "," Swaps the current adapter with the provided one. <br /><br />"
"android.support.v7.widget.RecyclerView.AttributeSet () "," Returns a new set of layout parameters based on the supplied attributes set. <br /><br />"
"android.support.v7.widget.RecyclerView.findChildViewUnder (float x, float y) "," Find the topmost view under the given point. <br /><br />"
"android.support.v7.widget.RecyclerView.RecyclerView.LayoutManager () "," Set the RecyclerView.LayoutManager that this RecyclerView will use. <br /><br />"
"android.support.v7.widget.RecyclerView.setScrollingTouchSlop (int slopConstant) "," Configure the scrolling touch slop for a specific use case. <br /><br />"
"android.support.v7.widget.RecyclerView.scrollBy (int x, int y) "," Move the scrolled position of your view. <br /><br />"
"android.support.v7.widget.RecyclerView.MotionEvent () "," Implement this method to handle touch screen motion events. <br /><br />"
"android.support.v7.widget.RecyclerView.recycled view pool (int size) "," Set the number of offscreen views to retain before adding them to the potentially shared recycled view pool. <br /><br />"
"android.support.v7.widget.RecyclerView.computeVerticalScrollRange () "," Compute the vertical range that the vertical scrollbar represents. <br /><br />"
"android.support.v7.widget.RecyclerView.RecyclerView.RecyclerListener () "," Register a listener that will be notified whenever a child view is recycled. <br /><br />"
"android.support.v7.widget.RecyclerView.computeHorizontalScrollOffset () "," Compute the horizontal offset of the horizontal scrollbar's thumb within the horizontal range. <br /><br />"
"android.support.v7.widget.RecyclerView.getItemAnimator () "," Gets the current ItemAnimator for this RecyclerView. <br /><br />"
"android.support.v7.widget.RecyclerView.RecyclerView.OnScrollListener () "," Set a listener that will be notified of any changes in scroll state or position. <br /><br />"
"android.support.v7.widget.RecyclerView.computeHorizontalScrollRange () "," Compute the horizontal range that the horizontal scrollbar represents. <br /><br />"
"android.support.v7.widget.RecyclerView.Rect () "," Called when a child of this group wants a particular rectangle to be positioned onto the screen. <br /><br />"
"android.support.v7.widget.RecyclerView.setHasFixedSize (boolean hasFixedSize) "," RecyclerView can perform several optimizations if it can know in advance that changes in adapter content cannot change the size of the RecyclerView itself. <br /><br />"
"android.support.v7.widget.RecyclerView.RecyclerView.RecycledViewPool () "," Recycled view pools allow multiple RecyclerViews to share a common pool of scrap views. <br /><br />"
"android.support.v7.widget.RecyclerView.smoothScrollToPosition (int position) "," Starts a smooth scroll to an adapter position. <br /><br />"
"android.support.v7.widget.RecyclerView.findViewHolderForAdapterPosition (int position) "," Return the ViewHolder for the item in the given position of the data set. <br /><br />"
"android.support.v7.widget.RecyclerView.getCompatAccessibilityDelegate () "," Returns the accessibility delegate compatibility implementation used by the RecyclerView. <br /><br />"
"android.support.v7.widget.RecyclerView.RecyclerView.ViewHolder () "," Retrieve the RecyclerView.ViewHolder for the given child view. <br /><br />"
"android.support.v7.widget.RecyclerView.RecyclerViewAccessibilityDelegate () "," Sets the accessibility delegate compatibility implementation used by RecyclerView. <br /><br />"
"android.support.v7.widget.RecyclerView.computeVerticalScrollOffset () "," Compute the vertical offset of the vertical scrollbar's thumb within the vertical range. <br /><br />"
"android.support.v7.widget.RecyclerView.computeVerticalScrollExtent () "," Compute the vertical extent of the vertical scrollbar's thumb within the vertical range. <br /><br />"
"android.support.v7.widget.RecyclerView.findViewHolderForLayoutPosition (int position) "," Return the ViewHolder for the item in the given position of the data set as of the latest layout pass. <br /><br />"
"android.support.v7.widget.RecyclerView.offsetChildrenVertical (int dy) "," Offset the bounds of all child views by dy pixels. <br /><br />"
"android.support.v7.widget.RecyclerView.offsetChildrenHorizontal (int dx) "," Offset the bounds of all child views by dx pixels. <br /><br />"
"android.support.v7.widget.RecyclerView.fling (int, int) () "," Stop any current scroll in progress, such as one started by smoothScrollBy(int, int), fling(int, int) or a touch-initiated fling. <br /><br />"
"android.support.v7.widget.RecyclerView.smoothScrollBy (int dx, int dy) "," Animate a scroll by the given amount of pixels along either axis. <br /><br />"
"android.support.v7.widget.RecyclerView.invalidateItemDecorations () "," Invalidates all ItemDecorations. <br /><br />"
"android.support.v7.widget.RecyclerView.requestLayout () "," Call this when something has changed which has invalidated the layout of this view. <br /><br />"
"android.support.v7.widget.RecyclerView.Canvas () "," Implement this to do your drawing. <br /><br />"
"android.support.v7.widget.RecyclerView.RecyclerView.ItemDecoration () "," Remove an RecyclerView.ItemDecoration from this RecyclerView. <br /><br />"
"android.support.v7.widget.RecyclerView.findViewHolderForItemId (long id) "," Return the ViewHolder for the item with the given id. <br /><br />"
"android.support.v7.widget.RecyclerView.scrollTo (int x, int y) "," Set the scrolled position of your view. <br /><br />"
"android.support.v7.widget.RecyclerView.RecyclerView.ViewCacheExtension () "," Sets a new RecyclerView.ViewCacheExtension to be used by the Recycler. <br /><br />"
"android.support.v7.widget.RecyclerView.View () "," Called when a child of this parent wants focus <br /><br />"
"android.support.v7.widget.RecyclerView.setClipToPadding (boolean clipToPadding) "," Sets whether this ViewGroup will clip its children to its padding, if padding is present. <br /><br />"
"android.support.v7.widget.RecyclerView.getScrollState () "," Return the current scrolling state of the RecyclerView. <br /><br />"
"android.support.v7.widget.RecyclerView.computeHorizontalScrollExtent () "," Compute the horizontal extent of the horizontal scrollbar's thumb within the horizontal range. <br /><br />"
"android.support.v7.widget.RecyclerView.scrollToPosition (int position) "," Convenience method to scroll to a certain position. <br /><br />"
"android.support.v7.widget.RecyclerView.findViewHolderForAdapterPosition (int) (int position) "," This method is deprecated. use findViewHolderForLayoutPosition(int) or findViewHolderForAdapterPosition(int) <br /><br />"
"android.support.v7.widget.RecyclerView.fling (int velocityX, int velocityY) "," Begin a standard fling with an initial velocity along each axis in pixels per second. <br /><br />"
"android.support.v7.widget.RecyclerView.getAdapter () "," Retrieves the previously set adapter or null if no adapter is set. <br /><br />"
"android.support.v7.widget.RecyclerView.RecyclerView.ItemAnimator () "," Sets the RecyclerView.ItemAnimator that will handle animations involving changes to the items in this RecyclerView. <br /><br />"
"android.support.v7.widget.RecyclerView.RecyclerView.OnItemTouchListener () "," Remove an RecyclerView.OnItemTouchListener. <br /><br />"
"android.support.v7.widget.RecyclerView.hasFixedSize () "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.getChildLayoutPosition (View) () "," This method is deprecated. use getChildAdapterPosition(View) or getChildLayoutPosition(View). <br /><br />"
"android.support.v7.widget.RecyclerView.ItemAnimator.isRunning () () "," Like isRunning(), this method returns whether there are any item animations currently running. <br /><br />"
"android.support.v7.widget.RecyclerView.ItemAnimator.endAnimations () "," Method called when all item animations should be ended immediately. <br /><br />"
"android.support.v7.widget.RecyclerView.ItemAnimator.getChangeDuration () "," Gets the current duration for which all change animations will run. <br /><br />"
"android.support.v7.widget.RecyclerView.ItemAnimator.setAddDuration (long addDuration) "," Sets the duration for which all add animations will run. <br /><br />"
"android.support.v7.widget.RecyclerView.ItemAnimator.notifyItemRangeChanged (int, int) () "," Called when an item is changed in the RecyclerView, as indicated by a call to notifyItemChanged(int) or notifyItemRangeChanged(int, int). <br /><br />"
"android.support.v7.widget.RecyclerView.ItemAnimator.setMoveDuration (long moveDuration) "," Sets the duration for which all move animations will run. <br /><br />"
"android.support.v7.widget.RecyclerView.ItemAnimator.runPendingAnimations () "," Called when there are pending animations waiting to be started. <br /><br />"
"android.support.v7.widget.RecyclerView.ItemAnimator.getMoveDuration () "," Gets the current duration for which all move animations will run. <br /><br />"
"android.support.v7.widget.RecyclerView.ItemAnimator.setSupportsChangeAnimations (boolean supportsChangeAnimations) "," Sets whether this ItemAnimator supports animations of item change events. <br /><br />"
"android.support.v7.widget.RecyclerView.ItemAnimator.getRemoveDuration () "," Gets the current duration for which all remove animations will run. <br /><br />"
"android.support.v7.widget.RecyclerView.ItemAnimator.setRemoveDuration (long removeDuration) "," Sets the duration for which all remove animations will run. <br /><br />"
"android.support.v7.widget.RecyclerView.ItemAnimator.getAddDuration () "," Gets the current duration for which all add animations will run. <br /><br />"
"android.support.v7.widget.RecyclerView.ItemAnimator.isRunning () "," Method which returns whether there are any item animations currently running. <br /><br />"
"android.support.v7.widget.RecyclerView.ItemAnimator.setChangeDuration (long changeDuration) "," Sets the duration for which all change animations will run. <br /><br />"
"android.support.v7.widget.RecyclerView.ItemAnimator.getSupportsChangeAnimations () "," Returns whether this ItemAnimator supports animations of change events. <br /><br />"
"android.support.v7.widget.RecyclerView.ItemAnimator.RecyclerView.ViewHolder () "," Called when a remove animation is being started on the given ViewHolder. <br /><br />"
"android.support.v7.widget.RecyclerView.ItemAnimator.dispatchAnimationsFinished () "," This method should be called by ItemAnimator implementations to notify any listeners that all pending and active item animations are finished. <br /><br />"
"android.support.v7.widget.RecyclerView.ItemAnimator.ItemAnimatorFinishedListener.onAnimationsFinished () "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.ItemDecoration.onDrawOver (Canvas, RecyclerView, RecyclerView.State) () "," This method is deprecated. Override onDrawOver(Canvas, RecyclerView, RecyclerView.State) <br /><br />"
"android.support.v7.widget.RecyclerView.ItemDecoration.getItemOffsets (Rect, View, RecyclerView, State) () "," This method is deprecated. Use getItemOffsets(Rect, View, RecyclerView, State) <br /><br />"
"android.support.v7.widget.RecyclerView.ItemDecoration.onDraw (Canvas, RecyclerView, RecyclerView.State) () "," This method is deprecated. Override onDraw(Canvas, RecyclerView, RecyclerView.State) <br /><br />"
"android.support.v7.widget.RecyclerView.ItemDecoration.RecyclerView.State () "," Draw any appropriate decorations into the Canvas supplied to the RecyclerView. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.AttributeSet () "," Create a LayoutParams object suitable for this LayoutManager from an inflated layout resource. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.Adapter () "," Called if the RecyclerView this LayoutManager is bound to has a different adapter set. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.Recycler's () "," Detach a child view and add it to a Recycler's scrap heap. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.isFocused () "," Returns true if the RecyclerView this LayoutManager is bound to has focus. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.getPaddingRight () "," Return the right padding of the parent RecyclerView <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.detached () "," Finish removing a view that was previously temporarily detached. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.requestSimpleAnimationsInNextLayout () "," A LayoutManager can call this method to force RecyclerView to run simple animations in the next layout pass, even if there is not any trigger to do so. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.RecyclerView.LayoutParams () "," Determines the validity of the supplied LayoutParams object. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.removeViewAt (int index) "," Remove a view from the currently attached RecyclerView if needed. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.RecyclerView.State () "," Smooth scroll to the specified adapter position. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.RecyclerView () "," Called when items have been changed in the adapter. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.FocusFinder () "," This method gives a LayoutManager an opportunity to intercept the initial focus search before the default behavior of FocusFinder is used. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.getPaddingTop () "," Return the top padding of the parent RecyclerView <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.getHeight () "," Return the height of the parent RecyclerView <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.canScrollHorizontally () "," Query if horizontal scrolling is currently supported. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.IllegalStateException () "," Checks if RecyclerView is in the middle of a layout or scroll and throws an IllegalStateException if it is. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.canScrollVertically () "," Query if vertical scrolling is currently supported. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.offsetChildrenVertical (int dy) "," Offset all child views attached to the parent RecyclerView by dy pixels along the vertical axis. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.getLayoutDirection () "," Returns the resolved layout direction for this RecyclerView. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.offsetChildrenHorizontal (int dx) "," Offset all child views attached to the parent RecyclerView by dx pixels along the horizontal axis. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.getClipToPadding () "," Check if the RecyclerView is configured to clip child views to its padding. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.removed () "," To be called only during onLayoutChildren(Recycler, State) to add a view to the layout that is known to be going away, either because it has been removed or because it is actually not in the visible portion of the container but is being laid out in order to inform RecyclerView in how to animate the item out of view. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.RecyclerView.Recycler () "," Remove a child view and recycle it using the given Recycler. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.requestLayout () "," Calls RecyclerView#requestLayout on the underlying RecyclerView <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.Set the measured dimensions (int widthSize, int heightSize) "," Set the measured dimensions of the host RecyclerView. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.getItemCount () "," Returns the number of items in the adapter bound to the parent RecyclerView. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.hasFocus () "," Returns true if the RecyclerView this LayoutManager is bound to has or contains focus. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.moveView (int fromIndex, int toIndex) "," Moves a View from one position to another. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.supportsPredictiveItemAnimations () "," Returns whether this LayoutManager supports automatic item animations. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.RecyclerView.SmoothScroller () "," Starts a smooth scroll using the provided SmoothScroller. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.onRequestChildFocus (RecyclerView, State, View, View) () "," This method is deprecated. Use onRequestChildFocus(RecyclerView, State, View, View) <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.RecyclerView.ItemAnimator () "," Ends all animations on the view created by the RecyclerView.ItemAnimator. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.removeAllViews () "," Remove all views from the currently attached RecyclerView. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.AccessibilityEvent () "," Called by the accessibility delegate to initialize an accessibility event. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.getMinimumHeight () "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.ItemDecorations () "," Lay out the given child view within the RecyclerView using coordinates that include any current ItemDecorations. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.findViewByPosition (int position) "," Finds the view which represents the given adapter position. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.onDetachedFromWindow (RecyclerView, Recycler) () "," This method is deprecated. override onDetachedFromWindow(RecyclerView, Recycler) <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.onScrollStateChanged (int state) "," RecyclerView calls this method to notify LayoutManager that scroll state has changed. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.onSaveInstanceState () "," Called when the LayoutManager should save its state. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.Rect () "," Called when a child of the RecyclerView wants a particular rectangle to be positioned onto the screen. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.notifyDataSetChanged () () "," Called when notifyDataSetChanged() is triggered instead of giving detailed information on what has actually changed. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.getPaddingLeft () "," Return the left padding of the parent RecyclerView <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.getFocusedChild () "," Returns the item View which has or contains focus. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.getPaddingBottom () "," Return the bottom padding of the parent RecyclerView <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.getChildAt (int index) "," Return the child view at the given index <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.generateDefaultLayoutParams () "," Create a default LayoutParams object for a child of the RecyclerView. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.isSmoothScrolling () "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.Parcelable () "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.getChildMeasureSpec (int parentSize, int padding, int childDimension, boolean canScroll) "," Calculate a MeasureSpec value for measuring a child view in one dimension. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.getPaddingEnd () "," Return the end padding of the parent RecyclerView <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.getWidth () "," Return the width of the parent RecyclerView <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.getMinimumWidth () "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.getPaddingStart () "," Return the start padding of the parent RecyclerView <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.View () "," View can be scrapped and recycled again. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.AccessibilityNodeInfoCompat () "," Called by the AccessibilityDelegate when the accessibility information for a specific item should be populated. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.scrollToPosition (int position) "," Scroll to the specified adapter position. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.ViewGroup.LayoutParams () "," Create a LayoutParams object suitable for this LayoutManager, copying relevant values from the supplied LayoutParams object if possible. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.detachViewAt (int index) "," Temporarily detach a child view. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.getChildCount () "," Return the current number of child views attached to the parent RecyclerView. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutManager.Bundle () "," Called by AccessibilityDelegate when an accessibility action is requested on one of the children of LayoutManager. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutParams.isItemRemoved () "," Returns true if the adapter data item corresponding to the view this LayoutParams is attached to has been removed from the data set. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutParams.viewNeedsUpdate () "," Returns true if the view this LayoutParams is attached to needs to have its content updated from the corresponding adapter. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutParams.isItemChanged () "," Returns true if the adapter data item corresponding to the view this LayoutParams is attached to has been changed in the data set. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutParams.getViewLayoutPosition () "," Returns the adapter position that the view this LayoutParams is attached to corresponds to as of latest layout calculation. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutParams.getViewAdapterPosition () "," Returns the up-to-date adapter position that the view this LayoutParams is attached to corresponds to. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutParams.isViewInvalid () "," Returns true if the view this LayoutParams is attached to is now representing potentially invalid data. <br /><br />"
"android.support.v7.widget.RecyclerView.LayoutParams.getViewAdapterPosition () () "," This method is deprecated. use getViewLayoutPosition() or getViewAdapterPosition() <br /><br />"
"android.support.v7.widget.RecyclerView.OnItemTouchListener.onInterceptTouchEvent (RecyclerView, MotionEvent) () "," Process a touch event as part of a gesture that was claimed by returning true from a previous call to onInterceptTouchEvent(RecyclerView, MotionEvent). <br /><br />"
"android.support.v7.widget.RecyclerView.OnItemTouchListener.MotionEvent () "," Silently observe and/or take over touch events sent to the RecyclerView before they are handled by either the RecyclerView itself or its child views. <br /><br />"
"android.support.v7.widget.RecyclerView.OnScrollListener.RecyclerView () "," Callback method to be invoked when the RecyclerView has been scrolled. <br /><br />"
"android.support.v7.widget.RecyclerView.RecycledViewPool.clear () "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.RecycledViewPool.RecyclerView.ViewHolder () "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.RecycledViewPool.getRecycledView (int viewType) "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.RecycledViewPool.setMaxRecycledViews (int viewType, int max) "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.Recycler.clear () "," Clear scrap views out of this recycler. <br /><br />"
"android.support.v7.widget.RecyclerView.Recycler.bindViewToPosition (View, int) (int position) "," RecyclerView provides artificial position range (item count) in pre-layout state and automatically maps these positions to RecyclerView.Adapter positions when getViewForPosition(int) or bindViewToPosition(View, int) is called. <br /><br />"
"android.support.v7.widget.RecyclerView.Recycler.getScrapList () "," Returns an unmodifiable list of ViewHolders that are currently in the scrap list. <br /><br />"
"android.support.v7.widget.RecyclerView.Recycler.getViewForPosition (int position) "," Obtain a view initialized for the given position. <br /><br />"
"android.support.v7.widget.RecyclerView.Recycler.setViewCacheSize (int viewCount) "," Set the maximum number of detached, valid views we should retain for later use. <br /><br />"
"android.support.v7.widget.RecyclerView.Recycler.View () "," Recycle a detached view. <br /><br />"
"android.support.v7.widget.RecyclerView.RecyclerListener.RecyclerView.ViewHolder () "," This method is called whenever the view in the ViewHolder is recycled. <br /><br />"
"android.support.v7.widget.RecyclerView.SmoothScroller.Action.getInterpolator () "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.SmoothScroller.Action.setDy (int dy) "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.SmoothScroller.Action.Interpolator () "," Updates the action with given parameters. <br /><br />"
"android.support.v7.widget.RecyclerView.SmoothScroller.Action.getDy () "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.SmoothScroller.Action.getDx () "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.SmoothScroller.Action.setDuration (int duration) "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.SmoothScroller.Action.setDx (int dx) "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.SmoothScroller.Action.getDuration () "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.SmoothScroller.instantScrollToPosition (int position) "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.SmoothScroller.isRunning () "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.SmoothScroller.findViewByPosition (int position) "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.SmoothScroller.getChildCount () "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.SmoothScroller.getLayoutManager () "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.SmoothScroller.getTargetPosition () "," Returns the adapter position of the target item <br /><br />"
"android.support.v7.widget.RecyclerView.SmoothScroller.isPendingInitialRun () "," Returns true if SmoothScroller has been started but has not received the first animation callback yet. <br /><br />"
"android.support.v7.widget.RecyclerView.SmoothScroller.View () "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.SmoothScroller.setTargetPosition (int targetPosition) "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.State.getTargetScrollPosition () "," If scroll is triggered to make a certain item visible, this value will return the adapter index of that item. <br /><br />"
"android.support.v7.widget.RecyclerView.State.willRunSimpleAnimations () "," Returns whether RecyclerView will run simple animations in this layout pass or not. <br /><br />"
"android.support.v7.widget.RecyclerView.State.isPreLayout () "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.State.RecyclerView.ViewHolder () "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.State.remove (int resourceId) "," Removes the mapping from the specified id, if there was any. <br /><br />"
"android.support.v7.widget.RecyclerView.State.get (int resourceId) "," Gets the Object mapped from the specified id, or null if no such data exists. <br /><br />"
"android.support.v7.widget.RecyclerView.State.willRunPredictiveAnimations () "," Returns whether RecyclerView will run predictive animations in this layout pass or not. <br /><br />"
"android.support.v7.widget.RecyclerView.State.Object () "," Adds a mapping from the specified id to the specified value, replacing the previous mapping from the specified key if there was one. <br /><br />"
"android.support.v7.widget.RecyclerView.State.getItemCount () "," Returns the total number of items that can be laid out. <br /><br />"
"android.support.v7.widget.RecyclerView.State.hasTargetScrollPosition () "," Returns if current scroll has a target position. <br /><br />"
"android.support.v7.widget.RecyclerView.State.didStructureChange () "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.State.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.support.v7.widget.RecyclerView.ViewCacheExtension.RecyclerView.Recycler () "," Returns a View that can be binded to the given Adapter position. <br /><br />"
"android.support.v7.widget.RecyclerView.ViewHolder.setIsRecyclable (boolean recyclable) "," Informs the recycler whether this item can be recycled. <br /><br />"
"android.support.v7.widget.RecyclerView.ViewHolder.getAdapterPosition () () "," This method is deprecated. This method is deprecated because its meaning is ambiguous due to the async handling of adapter updates. Please use getLayoutPosition() or getAdapterPosition() depending on your use case. <br /><br />"
"android.support.v7.widget.RecyclerView.ViewHolder.getAdapterPosition () "," Returns the Adapter position of the item represented by this ViewHolder. <br /><br />"
"android.support.v7.widget.RecyclerView.ViewHolder.getItemViewType () "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.ViewHolder.getLayoutPosition () "," Returns the position of the ViewHolder in terms of the latest layout pass. <br /><br />"
"android.support.v7.widget.RecyclerView.ViewHolder.isRecyclable () "," no description <br /><br />"
"android.support.v7.widget.RecyclerView.ViewHolder.getItemId () "," Returns The itemId represented by this ViewHolder. <br /><br />"
"android.support.v7.widget.RecyclerView.ViewHolder.getOldPosition () "," When LayoutManager supports animations, RecyclerView tracks 3 positions for ViewHolders to perform animations. <br /><br />"
"android.support.v7.widget.RecyclerView.ViewHolder.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.support.v7.widget.RecyclerViewAccessibilityDelegate.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about the the host View which is the event source. <br /><br />"
"android.support.v7.widget.RecyclerViewAccessibilityDelegate.Bundle () "," Performs the specified accessibility action on the view. <br /><br />"
"android.support.v7.widget.RecyclerViewAccessibilityDelegate.AccessibilityNodeInfoCompat () "," Initializes an AccessibilityNodeInfoCompat with information about the host view. <br /><br />"
"android.support.v7.widget.RecyclerViewAccessibilityTest.onInitializeAccessibilityNodeInfoTest (boolean verticalScrollBefore, boolean horizontalScrollBefore, boolean verticalScrollAfter, boolean horizontalScrollAfter) "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAccessibilityTest.testOnInitializeAccessibilityNodeInfo () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.testAdapterChangeDuringScrolling () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.testNotifyDataSetChanged () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.testDeleteTwice () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.RecyclerView.State () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.testAddRemoveSamePass () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.testDeleteVisibleAndInvisible () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.testBasicDelete () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.testNotifyDataSetChangedDuringScroll () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.testStableIdNotifyDataSetChanged () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.testAddInvisible () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.testAddDelete1 () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.testAddSameIndexTwice () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.testDeleteInvisible () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.testFindPositionOffset () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.testRecycleDuringAnimations () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.testDetachBeforeAnimations () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.testAddDelete2 () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.getItemForDeletedViewTest (boolean stableIds) "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.testPreLayoutPositionCleanup () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.positionStatesTest (int itemCount, int firstLayoutStartIndex, int firstLayoutItemCount, RecyclerViewAnimationsTest.AdapterOps adapterChanges, PositionConstraint... constraints) "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.getTestRecyclerView () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.testGetItemForDeletedView () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.testAddManyMultiStep () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.positionStatesTest (int itemCount, int firstLayoutStartIndex, int firstLayoutItemCount, BaseRecyclerViewInstrumentationTest.TestAdapter adapter, RecyclerViewAnimationsTest.AdapterOps adapterChanges, PositionConstraint... constraints) "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.testChangeAnimations () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.testBasicAdd () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.testAddInvisibleAndVisible () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.changeAnimTest (boolean supportsChangeAnim, boolean changeType, boolean hasStableIds, boolean deleteSomeItems) "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.testDeleteInvisibleMultiStep () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewAnimationsTest.testRemoveScrapInvalidate () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewBasicTest.testLayoutWithoutAdapter () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewBasicTest.testSavedStateWithStatelessLayoutManager () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewBasicTest.testAdapterChangeCallbacks () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewBasicTest.testMeasureWithoutLayoutManager () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewBasicTest.testSmoothScrollWithoutLayoutManager () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewBasicTest.testSmoothScrollToPositionWithoutLayoutManager () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewBasicTest.testFocusWithoutLayoutManager () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewBasicTest.testScrollWithoutLayoutManager () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewBasicTest.testScrollToPositionWithoutLayoutManager () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewBasicTest.testLayoutWithoutLayoutManager () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewBasicTest.testLayout () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewBasicTest.testSavedState () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewBasicTest.testObservingAdapters () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testInvalidateAllDecorOffsets () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testScrollInBothDirectionMoreVerticalReverse () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testNotifyDataSetChangedWithStableIds () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testScrollInBothDirectionMoreHorizontalReverse () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testRecycleOnDetach () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testScrollStateDrag () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testAdapterPositionInvalidation () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.ViewGroup () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testDragVertical () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testTypeForExistingViews () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.scrollInBothDirection (int horizontalScrollCount, int verticalScrollCount, int horizontalVelocity, int verticalVelocity) "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testFindViewById () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.RecyclerView () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testDetachWithoutLayoutManager () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testScrollInBothDirectionMoreHorizontal () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testScrollInBothDirectionEqualReverse () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testScrollHorizontalOnlyReverse () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testRecycleIgnored () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testUpdatesAfterDetach () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testFocusRectOnScreenWithout () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testUpdateHiddenView () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testAdapterPositionsAddItemsBefore () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testSetIncompatibleAdapter () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testRecycleScrap () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testScrollVerticalOnly () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testConsecutiveSmoothScroll () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testAdapterPositionsNotifyDataSetChanged () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testAccessRecyclerOnOnMeasure () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testCallbacksDuringAdapterSwap () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.stableIdsMoveTest (boolean supportsPredictive) "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.callbacksDuringAdapterChange (boolean swap) "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.incompatibleAdapterTest (boolean useCustomPool) "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testState () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testTransientStateRecycleViaAdapter () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testInvalidateDecorOffsets () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.transientStateRecycleTest (boolean succeed, boolean unsetTransientState) "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.adapterPositionsTest (RecyclerViewLayoutTest.AdapterRunnable adapterChanges) "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testFocusRectOnScreenWithDecorOffsets () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testFindIgnoredByPosition () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.recycleScrapTest (boolean useRecycler) "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testTransientStateRecycleViaTransientStateCleanup () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testAdapterChangeDuringLayout () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.smoothScrollTest (boolean removeItem) "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testFlingHorizontal () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testScrollStateForSmoothScrollWithStop () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.scrollInOtherOrientationTest (boolean horizontal, boolean drag) "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testAdapterPositionsRemoveItemsBefore () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testSetCompatibleAdapter () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.focusRectOnScreenTest (boolean addItemDecors) "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testScrollInBothDirectionEqual () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testScrollInBothDirectionMoreVertical () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testAdapterChangeDuringScroll () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testScrollStateForSmoothScroll () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testFlingVertical () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testAdapterPositionsAddItemsInside () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testAdapterPositionsMoveItems () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testScrollVerticalOnlyReverse () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testMovingViaStableIds () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.RecyclerView.ItemDecoration () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testUpdatesWhileDetached () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testTypeForCache () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.accessRecyclerOnOnMeasureTest (boolean enablePredictiveAnimations) "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testAvoidLeakingRecyclerViewViaViewHolder () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.findViewByIdTest (boolean supportPredictive) "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testAvoidLeakingRecyclerViewIfViewIsNotRecycled () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testScrollToPositionCallback () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testCallbacksDuringAdapterSet () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testTransientStateDontRecycle () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testScrollStateForFling () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testAdapterPositionsRemoveItems () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testSmoothScrollWithRemovedItems () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testScrollStateForFlingWithStop () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testScrollHorizontalOnly () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testAdapterPositionsBasic () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.Runnable () "," no description <br /><br />"
"android.support.v7.widget.RecyclerViewLayoutTest.testDraglHorizontal () "," no description <br /><br />"
"android.support.v7.widget.SearchView.SearchView.OnSuggestionListener () "," Sets a listener to inform when a suggestion is focused or clicked. <br /><br />"
"android.support.v7.widget.SearchView.getInputType () "," Returns the input type set on the query text field. <br /><br />"
"android.support.v7.widget.SearchView.setMaxWidth (int maxpixels) "," Makes the view at most this many pixels wide <br /><br />"
"android.support.v7.widget.SearchView.onActionViewCollapsed () "," Called when this view is collapsed as an action view. <br /><br />"
"android.support.v7.widget.SearchView.isIconfiedByDefault () "," Returns the default iconified state of the search field. <br /><br />"
"android.support.v7.widget.SearchView.setInputType (int inputType) "," Sets the input type on the query text field. <br /><br />"
"android.support.v7.widget.SearchView.onActionViewExpanded () "," Called when this view is expanded as an action view. <br /><br />"
"android.support.v7.widget.SearchView.getImeOptions () "," Returns the IME options set on the query text field. <br /><br />"
"android.support.v7.widget.SearchView.SearchView.OnCloseListener () "," Sets a listener to inform when the user closes the SearchView. <br /><br />"
"android.support.v7.widget.SearchView.getQueryHint () "," Gets the hint text to display in the query text field. <br /><br />"
"android.support.v7.widget.SearchView.View.OnClickListener () "," Sets a listener to inform when the search button is pressed. <br /><br />"
"android.support.v7.widget.SearchView.getQuery () "," Returns the query string currently in the text field. <br /><br />"
"android.support.v7.widget.SearchView.View.OnFocusChangeListener () "," Sets a listener to inform when the focus of the query text field changes. <br /><br />"
"android.support.v7.widget.SearchView.getMaxWidth () "," Gets the specified maximum width in pixels, if set. <br /><br />"
"android.support.v7.widget.SearchView.onWindowFocusChanged (boolean hasWindowFocus) "," Called when the window containing this view gains or loses focus. <br /><br />"
"android.support.v7.widget.SearchView.CursorAdapter () "," You can set a custom adapter if you wish. <br /><br />"
"android.support.v7.widget.SearchView.setIconified (boolean iconify) "," Iconifies or expands the SearchView. <br /><br />"
"android.support.v7.widget.SearchView.isIconified () "," Returns the current iconified state of the SearchView. <br /><br />"
"android.support.v7.widget.SearchView.SearchableInfo () "," Sets the SearchableInfo for this SearchView. <br /><br />"
"android.support.v7.widget.SearchView.setQueryRefinementEnabled (boolean enable) "," Specifies if a query refinement button should be displayed alongside each suggestion or if it should depend on the flags set in the individual items retrieved from the suggestions provider. <br /><br />"
"android.support.v7.widget.SearchView.CharSequence () "," Sets the hint text to display in the query text field. <br /><br />"
"android.support.v7.widget.SearchView.SearchView.OnQueryTextListener () "," Sets a listener for user actions within the SearchView. <br /><br />"
"android.support.v7.widget.SearchView.setSubmitButtonEnabled (boolean enabled) "," Enables showing a submit button when the query is non-empty. <br /><br />"
"android.support.v7.widget.SearchView.getSuggestionsAdapter () "," Returns the adapter used for suggestions, if any. <br /><br />"
"android.support.v7.widget.SearchView.setIconifiedByDefault (boolean iconified) "," Sets the default or resting state of the search field. <br /><br />"
"android.support.v7.widget.SearchView.isQueryRefinementEnabled () "," Returns whether query refinement is enabled for all items or only specific ones. <br /><br />"
"android.support.v7.widget.SearchView.isSubmitButtonEnabled () "," Returns whether the submit button is enabled when necessary or never displayed. <br /><br />"
"android.support.v7.widget.SearchView.setImeOptions (int imeOptions) "," Sets the IME options on the query text field. <br /><br />"
"android.support.v7.widget.SearchView.OnCloseListener.onClose () "," The user is attempting to close the SearchView. <br /><br />"
"android.support.v7.widget.SearchView.OnQueryTextListener.String () "," Called when the user submits the query. <br /><br />"
"android.support.v7.widget.SearchView.OnSuggestionListener.onSuggestionClick (int position) "," Called when a suggestion was clicked. <br /><br />"
"android.support.v7.widget.SearchView.OnSuggestionListener.onSuggestionSelect (int position) "," Called when a suggestion was selected by navigating to it. <br /><br />"
"android.support.v7.widget.ShareActionProvider.String () "," Sets the file name of a file for persisting the share history which history will be used for ordering share targets. <br /><br />"
"android.support.v7.widget.ShareActionProvider.onCreateActionView () "," Factory method for creating new action views. <br /><br />"
"android.support.v7.widget.ShareActionProvider.hasSubMenu () "," Determines if this ActionProvider has a submenu associated with it. <br /><br />"
"android.support.v7.widget.ShareActionProvider.ShareActionProvider.OnShareTargetSelectedListener () "," Sets a listener to be notified when a share target has been selected. <br /><br />"
"android.support.v7.widget.ShareActionProvider.SubMenu () "," Called to prepare an associated submenu for the menu item backed by this ActionProvider. <br /><br />"
"android.support.v7.widget.ShareActionProvider.Intent () "," Sets an intent with information about the share action. <br /><br />"
"android.support.v7.widget.ShareActionProvider.OnShareTargetSelectedListener.Intent () "," Called when a share target has been selected. <br /><br />"
"android.support.v7.widget.Space.Canvas () "," Draw nothing. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.AttributeSet () "," Create a LayoutParams object suitable for this LayoutManager from an inflated layout resource. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.getGapStrategy () "," Returns the current gap handling strategy for StaggeredGridLayoutManager. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.getOrientation () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.findFirstCompletelyVisibleItemPositions (int[] into) "," Returns the adapter position of the first completely visible view for each span. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.RecyclerView.LayoutParams () "," Determines the validity of the supplied LayoutParams object. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.getReverseLayout () "," Returns whether views are laid out in reverse order or not. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.RecyclerView.State () "," Smooth scroll to the specified adapter position. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.setReverseLayout (boolean reverseLayout) "," Sets whether LayoutManager should start laying out items from the end of the UI. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.onScrollStateChanged (int state) "," RecyclerView calls this method to notify LayoutManager that scroll state has changed. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.RecyclerView () "," Called when items have been changed in the adapter. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.setOrientation (int orientation) "," Sets the orientation of the layout. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.onSaveInstanceState () "," Called when the LayoutManager should save its state. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.notifyDataSetChanged () () "," Called when notifyDataSetChanged() is triggered instead of giving detailed information on what has actually changed. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.setSpanCount (int spanCount) "," Sets the number of spans for the layout. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.generateDefaultLayoutParams () "," Create a default LayoutParams object for a child of the RecyclerView. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.canScrollHorizontally () "," Query if horizontal scrolling is currently supported. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.canScrollVertically () "," Query if vertical scrolling is currently supported. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.IllegalStateException () "," Checks if RecyclerView is in the middle of a layout or scroll and throws an IllegalStateException if it is. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.Parcelable () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.offsetChildrenVertical (int dy) "," Offset all child views attached to the parent RecyclerView by dy pixels along the vertical axis. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.invalidateSpanAssignments () "," For consistency, StaggeredGridLayoutManager keeps a mapping between spans and items. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.offsetChildrenHorizontal (int dx) "," Offset all child views attached to the parent RecyclerView by dx pixels along the horizontal axis. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.findLastCompletelyVisibleItemPositions (int[] into) "," Returns the adapter position of the last completely visible view for each span. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.scrollToPositionWithOffset (int position, int offset) "," Scroll to the specified adapter position with the given offset from layout start. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.RecyclerView.Recycler () "," Called when this LayoutManager is detached from its parent RecyclerView or when its parent RecyclerView is detached from its window. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.getSpanCount () "," Returns the number of spans laid out by StaggeredGridLayoutManager. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.AccessibilityNodeInfoCompat () "," Called by the AccessibilityDelegate when the accessibility information for a specific item should be populated. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.supportsPredictiveItemAnimations () "," Returns whether this LayoutManager supports automatic item animations. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.scrollToPosition (int position) "," Scroll to the specified adapter position. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.ViewGroup.LayoutParams () "," Create a LayoutParams object suitable for this LayoutManager, copying relevant values from the supplied LayoutParams object if possible. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.findFirstVisibleItemPositions (int[] into) "," Returns the adapter position of the first visible view for each span. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.AccessibilityEvent () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.findLastVisibleItemPositions (int[] into) "," Returns the adapter position of the last visible view for each span. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.setGapStrategy (int gapStrategy) "," Sets the gap handling strategy for StaggeredGridLayoutManager. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.LayoutParams.isFullSpan () "," Returns whether this View occupies all available spans or just one. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.LayoutParams.getSpanIndex () "," Returns the Span index to which this View is assigned. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManager.LayoutParams.setFullSpan (boolean fullSpan) "," When set to true, the item will layout using all span area. <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.innerGapHandlingTest (int strategy) "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.updateAfterFullSpanGapHandlingTest (int fullSpanIndex) "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.testSpanCountChangeOnRestoreSavedState () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.gapInTheMiddle (StaggeredGridLayoutManagerTest.Config config) "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.consistentRelayoutTest (StaggeredGridLayoutManagerTest.Config config, boolean firstChildMultiSpan) "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.testRTL () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.scrollByTest (StaggeredGridLayoutManagerTest.Config config) "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.testLayoutOrder () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.scrollToPositionTest (StaggeredGridLayoutManagerTest.Config config) "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.testAccessibilityPositions () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.testScrollBackAndPreservePositions () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.testUpdateAfterFullSpan () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.testSpanReassignmentsOnItemChange () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.testAreAllEndsTheSame () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.viewSnapTest (StaggeredGridLayoutManagerTest.Config config) "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.Rect () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.testScrollBy () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.getFirstLastChildrenTest (StaggeredGridLayoutManagerTest.Config config, boolean provideArr) "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.testGapAtTheBeginning () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.testMoveGapHandling () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.testPartialSpanInvalidation () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.testUpdateAfterFullSpan2 () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.testScrollToPositionWithOffset () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.savedStateTest (StaggeredGridLayoutManagerTest.Config config, boolean waitForLayout, StaggeredGridLayoutManagerTest.PostLayoutRunnable postLayoutOperations) "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.testSavedState () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.testAreAllStartsTheSame () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.testViewSnapping () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.testConsistentRelayout () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.testGrowLookup () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.testFindLastInUnevenDistribution () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.testInnerGapHandling () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.scrollToPositionWithOffsetTest (StaggeredGridLayoutManagerTest.Config config) "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.testFullSizeSpans () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.testTemporaryGapHandling () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.testScrollToPosition () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.layoutOrderTest (StaggeredGridLayoutManagerTest.Config config) "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.testGetFirstLastChildrenTest () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.testCustomHeightInVertical () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.scrollToPositionWithPredictive (int scrollPosition, int scrollOffset) "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.gapAtTheBeginningOfTheListTest (StaggeredGridLayoutManagerTest.Config config, int deletePosition, int deleteCount) "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.testCustomWidthInHorizontal () "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.customSizeInScrollDirectionTest (StaggeredGridLayoutManagerTest.Config config) "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.scrollBackAndPreservePositionsTest (StaggeredGridLayoutManagerTest.Config config, boolean saveRestoreInBetween) "," no description <br /><br />"
"android.support.v7.widget.StaggeredGridLayoutManagerTest.testScrollToPositionWithPredictive () "," no description <br /><br />"
"android.support.v7.widget.SwitchCompat.toggle () "," Change the checked state of the view to the inverse of its current state <br /><br />"
"android.support.v7.widget.SwitchCompat.setThumbResource (int resId) "," Set the drawable used for the switch 'thumb' - the piece that the user can physically touch and drag along the track. <br /><br />"
"android.support.v7.widget.SwitchCompat.getSplitTrack () "," Returns whether the track should be split by the thumb. <br /><br />"
"android.support.v7.widget.SwitchCompat.setChecked (boolean checked) "," Changes the checked state of this button. <br /><br />"
"android.support.v7.widget.SwitchCompat.MotionEvent () "," Implement this method to handle touch screen motion events. <br /><br />"
"android.support.v7.widget.SwitchCompat.getTrackDrawable () "," Get the drawable used for the track that the switch slides within. <br /><br />"
"android.support.v7.widget.SwitchCompat.setSwitchMinWidth (int pixels) "," Set the minimum width of the switch in pixels. <br /><br />"
"android.support.v7.widget.SwitchCompat.getShowText () "," no description <br /><br />"
"android.support.v7.widget.SwitchCompat.getSwitchPadding () "," Get the amount of horizontal padding between the switch and the associated text. <br /><br />"
"android.support.v7.widget.SwitchCompat.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.support.v7.widget.SwitchCompat.Drawable () "," Set the drawable used for the track that the switch slides within. <br /><br />"
"android.support.v7.widget.SwitchCompat.Typeface () "," Sets the typeface in which the text should be displayed on the switch. <br /><br />"
"android.support.v7.widget.SwitchCompat.getTextOff () "," Returns the text displayed when the button is not in the checked state. <br /><br />"
"android.support.v7.widget.SwitchCompat.getSwitchMinWidth () "," Get the minimum width of the switch in pixels. <br /><br />"
"android.support.v7.widget.SwitchCompat.onMeasure (int widthMeasureSpec, int heightMeasureSpec) "," Measure the view and its content to determine the measured width and the measured height. <br /><br />"
"android.support.v7.widget.SwitchCompat.setSplitTrack (boolean splitTrack) "," Specifies whether the track should be split by the thumb. <br /><br />"
"android.support.v7.widget.SwitchCompat.getTextOn () "," Returns the text displayed when the button is in the checked state. <br /><br />"
"android.support.v7.widget.SwitchCompat.getCompoundPaddingRight () "," Returns the right padding of the view, plus space for the right Drawable if any. <br /><br />"
"android.support.v7.widget.SwitchCompat.setSwitchPadding (int pixels) "," Set the amount of horizontal padding between the switch and the associated text. <br /><br />"
"android.support.v7.widget.SwitchCompat.drawableHotspotChanged (float x, float y) "," This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. <br /><br />"
"android.support.v7.widget.SwitchCompat.Canvas () "," Manually render this view (and all of its children) to the given Canvas. <br /><br />"
"android.support.v7.widget.SwitchCompat.setThumbTextPadding (int pixels) "," Set the horizontal padding around the text drawn on the switch itself. <br /><br />"
"android.support.v7.widget.SwitchCompat.CharSequence () "," Sets the text displayed when the button is in the checked state. <br /><br />"
"android.support.v7.widget.SwitchCompat.Drawable.jumpToCurrentState () () "," Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view. <br /><br />"
"android.support.v7.widget.SwitchCompat.getThumbTextPadding () "," Get the horizontal padding around the text drawn on the switch itself. <br /><br />"
"android.support.v7.widget.SwitchCompat.Context () "," Sets the switch text color, size, style, hint color, and highlight color from the specified TextAppearance resource. <br /><br />"
"android.support.v7.widget.SwitchCompat.getThumbDrawable () "," Get the drawable used for the switch 'thumb' - the piece that the user can physically touch and drag along the track. <br /><br />"
"android.support.v7.widget.SwitchCompat.dispatchPopulateAccessibilityEvent (AccessibilityEvent) () "," Called from dispatchPopulateAccessibilityEvent(AccessibilityEvent) giving a chance to this View to populate the accessibility event with its text content. <br /><br />"
"android.support.v7.widget.SwitchCompat.setTrackResource (int resId) "," Set the drawable used for the track that the switch slides within. <br /><br />"
"android.support.v7.widget.SwitchCompat.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.support.v7.widget.SwitchCompat.getCompoundPaddingLeft () "," Returns the left padding of the view, plus space for the left Drawable if any. <br /><br />"
"android.support.v7.widget.SwitchCompat.setShowText (boolean showText) "," Sets whether the on/off text should be displayed. <br /><br />"
"android.support.v7.widget.Toolbar.AttributeSet () "," Returns a new set of layout parameters based on the supplied attributes set. <br /><br />"
"android.support.v7.widget.Toolbar.getPopupTheme () "," no description <br /><br />"
"android.support.v7.widget.Toolbar.onRtlPropertiesChanged (int layoutDirection) "," Called when any RTL property (layout direction or text direction or text alignment) has been changed. <br /><br />"
"android.support.v7.widget.Toolbar.dismissPopupMenus () "," Dismiss all currently showing popup menus, including overflow or submenus. <br /><br />"
"android.support.v7.widget.Toolbar.MotionEvent () "," Implement this method to handle touch screen motion events. <br /><br />"
"android.support.v7.widget.Toolbar.setLogoDescription (int resId) "," Set a description of the toolbar's logo. <br /><br />"
"android.support.v7.widget.Toolbar.getMenu () "," Return the Menu shown in the toolbar. <br /><br />"
"android.support.v7.widget.Toolbar.getNavigationIcon () "," Return the current drawable used as the navigation icon. <br /><br />"
"android.support.v7.widget.Toolbar.setSubtitle (int resId) "," Set the subtitle of this toolbar. <br /><br />"
"android.support.v7.widget.Toolbar.setTitle (int resId) "," Set the title of this toolbar. <br /><br />"
"android.support.v7.widget.Toolbar.setNavigationIcon (int resId) "," Set the icon to use for the toolbar's navigation button. <br /><br />"
"android.support.v7.widget.Toolbar.getSubtitle () "," Return the subtitle of this toolbar. <br /><br />"
"android.support.v7.widget.Toolbar.setMinimumHeight (int minHeight) "," Sets the minimum height of the view. <br /><br />"
"android.support.v7.widget.Toolbar.Drawable () "," Set the icon to use for the toolbar's navigation button. <br /><br />"
"android.support.v7.widget.Toolbar.View.OnClickListener () "," Set a listener to respond to navigation events. <br /><br />"
"android.support.v7.widget.Toolbar.getContentInsetStart () "," Get the starting content inset for this toolbar. <br /><br />"
"android.support.v7.widget.Toolbar.hideOverflowMenu () "," Hide the overflow items from the associated menu. <br /><br />"
"android.support.v7.widget.Toolbar.setLogo (int resId) "," Set a logo drawable from a resource id. <br /><br />"
"android.support.v7.widget.Toolbar.Toolbar.OnMenuItemClickListener () "," Set a listener to respond to menu item click events. <br /><br />"
"android.support.v7.widget.Toolbar.getTitle () "," Returns the title of this toolbar. <br /><br />"
"android.support.v7.widget.Toolbar.setNavigationContentDescription (int resId) "," Set a content description for the navigation button if one is present. <br /><br />"
"android.support.v7.widget.Toolbar.showOverflowMenu () "," Show the overflow items from the associated menu. <br /><br />"
"android.support.v7.widget.Toolbar.getLogo () "," Return the current logo drawable. <br /><br />"
"android.support.v7.widget.Toolbar.setPopupTheme (int resId) "," Specifies the theme to use when inflating popup menus. <br /><br />"
"android.support.v7.widget.Toolbar.getContentInsetRight () "," Get the right content inset for this toolbar. <br /><br />"
"android.support.v7.widget.Toolbar.setContentInsetsAbsolute (int contentInsetLeft, int contentInsetRight) "," Set the content insets for this toolbar. <br /><br />"
"android.support.v7.widget.Toolbar.CharSequence () "," Set the title of this toolbar. <br /><br />"
"android.support.v7.widget.Toolbar.getLogoDescription () "," Return the description of the toolbar's logo. <br /><br />"
"android.support.v7.widget.Toolbar.setSubtitleTextColor (int color) "," Sets the text color of the subtitle, if present. <br /><br />"
"android.support.v7.widget.Toolbar.getContentInsetEnd () "," Get the ending content inset for this toolbar. <br /><br />"
"android.support.v7.widget.Toolbar.isOverflowMenuShowing () "," Check whether the overflow menu is currently showing. <br /><br />"
"android.support.v7.widget.Toolbar.Context () "," Sets the text color, size, style, hint color, and highlight color from the specified TextAppearance resource. <br /><br />"
"android.support.v7.widget.Toolbar.getContentInsetLeft () "," Get the left content inset for this toolbar. <br /><br />"
"android.support.v7.widget.Toolbar.collapseActionView () "," Collapse a currently expanded action view. <br /><br />"
"android.support.v7.widget.Toolbar.setContentInsetsRelative (int contentInsetStart, int contentInsetEnd) "," Set the content insets for this toolbar relative to layout direction. <br /><br />"
"android.support.v7.widget.Toolbar.setTitleTextColor (int color) "," Sets the text color of the title, if present. <br /><br />"
"android.support.v7.widget.Toolbar.hasExpandedActionView () "," Check whether this Toolbar is currently hosting an expanded action view. <br /><br />"
"android.support.v7.widget.Toolbar.getNavigationContentDescription () "," Retrieve the currently configured content description for the navigation button view. <br /><br />"
"android.support.v7.widget.Toolbar.inflateMenu (int resId) "," Inflate a menu resource into this toolbar. <br /><br />"
"android.support.v7.widget.Toolbar.OnMenuItemClickListener.MenuItem () "," This method will be invoked when a menu item is clicked if the item itself did not already handle the event. <br /><br />"
"android.support.v7.widget.util.SortedListAdapterCallback&lt;T2&gt;.onInserted (int position, int count) "," Called by the SortedList when an item is inserted at the given position. <br /><br />"
"android.support.v7.widget.util.SortedListAdapterCallback&lt;T2&gt;.onChanged (int position, int count) "," Called by the SortedList when the item at the given position is updated. <br /><br />"
"android.support.v7.widget.util.SortedListAdapterCallback&lt;T2&gt;.onRemoved (int position, int count) "," Called by the SortedList when an item is removed from the given position. <br /><br />"
"android.support.v7.widget.util.SortedListAdapterCallback&lt;T2&gt;.onMoved (int fromPosition, int toPosition) "," Called by the SortedList when an item changes its position in the list. <br /><br />"
"android.support.v8.renderscript.Allocation.copy2DRangeFrom (int xoff, int yoff, int w, int h, short[] data) "," Copy from an array into a rectangular region in this Allocation. <br /><br />"
"android.support.v8.renderscript.Allocation.copy1DRangeFrom (int off, int count, float[] d) "," Copy an array into part of this Allocation. <br /><br />"
"android.support.v8.renderscript.Allocation.Element () "," Creates an Allocation with a specified number of given elements <br /><br />"
"android.support.v8.renderscript.Allocation.copyFromUnchecked (byte[] d) "," Copy into this Allocation from an array. <br /><br />"
"android.support.v8.renderscript.Allocation.copyFromUnchecked (int[] d) "," Copy into this Allocation from an array. <br /><br />"
"android.support.v8.renderscript.Allocation.copy1DRangeFrom (int off, int count, int[] d) "," Copy an array into part of this Allocation. <br /><br />"
"android.support.v8.renderscript.Allocation.copyFrom (short[] d) "," Copy into this Allocation from an array. <br /><br />"
"android.support.v8.renderscript.Allocation.copy1DRangeFromUnchecked (int off, int count, int[] d) "," Copy an array into part of this Allocation. <br /><br />"
"android.support.v8.renderscript.Allocation.copy2DRangeFrom (int xoff, int yoff, int w, int h, float[] data) "," Copy from an array into a rectangular region in this Allocation. <br /><br />"
"android.support.v8.renderscript.Allocation.copyFromUnchecked (float[] d) "," Copy into this Allocation from an array. <br /><br />"
"android.support.v8.renderscript.Allocation.copyTo (int[] d) "," Copy from the Allocation into a int array. <br /><br />"
"android.support.v8.renderscript.Allocation.copy1DRangeFrom (int off, int count, short[] d) "," Copy an array into part of this Allocation. <br /><br />"
"android.support.v8.renderscript.Allocation.Allocation () "," Copy an Allocation from an Allocation. <br /><br />"
"android.support.v8.renderscript.Allocation.copyTo (float[] d) "," Copy from the Allocation into a float array. <br /><br />"
"android.support.v8.renderscript.Allocation.Allocation.MipmapControl () "," Creates an Allocation from the Bitmap referenced by resource ID. <br /><br />"
"android.support.v8.renderscript.Allocation.copyTo (short[] d) "," Copy from the Allocation into a short array. <br /><br />"
"android.support.v8.renderscript.Allocation.String () "," Creates an Allocation containing string data encoded in UTF-8 format. <br /><br />"
"android.support.v8.renderscript.Allocation.copyTo (byte[] d) "," Copy from the Allocation into a byte array. <br /><br />"
"android.support.v8.renderscript.Allocation.BaseObj[] () "," Copy an array of RS objects to the Allocation. <br /><br />"
"android.support.v8.renderscript.Allocation.copyFrom (byte[] d) "," Copy into this Allocation from an array. <br /><br />"
"android.support.v8.renderscript.Allocation.copyFromUnchecked (short[] d) "," Copy into this Allocation from an array. <br /><br />"
"android.support.v8.renderscript.Allocation.copy1DRangeFromUnchecked (int off, int count, float[] d) "," Copy an array into part of this Allocation. <br /><br />"
"android.support.v8.renderscript.Allocation.getBytesSize () "," Get the size of the Allocation in bytes. <br /><br />"
"android.support.v8.renderscript.Allocation.ioSend () "," Send a buffer to the output stream. <br /><br />"
"android.support.v8.renderscript.Allocation.copyFrom (int[] d) "," Copy into this Allocation from an array. <br /><br />"
"android.support.v8.renderscript.Allocation.Type () "," Get the Type of the Allocation. <br /><br />"
"android.support.v8.renderscript.Allocation.generateMipmaps () "," Generate a mipmap chain. <br /><br />"
"android.support.v8.renderscript.Allocation.copy1DRangeFrom (int off, int count, byte[] d) "," Copy an array into part of this Allocation. <br /><br />"
"android.support.v8.renderscript.Allocation.syncAll (int srcLocation) "," Propagate changes from one usage of the Allocation to the other usages of the Allocation. <br /><br />"
"android.support.v8.renderscript.Allocation.copyFrom (float[] d) "," Copy into this Allocation from an array. <br /><br />"
"android.support.v8.renderscript.Allocation.FieldPacker () "," This is only intended to be used by auto-generated code reflected from the RenderScript script files. <br /><br />"
"android.support.v8.renderscript.Allocation.copy2DRangeFrom (int xoff, int yoff, int w, int h, int[] data) "," Copy from an array into a rectangular region in this Allocation. <br /><br />"
"android.support.v8.renderscript.Allocation.copy2DRangeFrom (int xoff, int yoff, int w, int h, byte[] data) "," Copy from an array into a rectangular region in this Allocation. <br /><br />"
"android.support.v8.renderscript.Allocation.copy1DRangeFromUnchecked (int off, int count, byte[] d) "," Copy an array into part of this Allocation. <br /><br />"
"android.support.v8.renderscript.Allocation.copy1DRangeFromUnchecked (int off, int count, short[] d) "," Copy an array into part of this Allocation. <br /><br />"
"android.support.v8.renderscript.Allocation.ioReceive () "," Receive the latest input into the Allocation. <br /><br />"
"android.support.v8.renderscript.Allocation.getUsage () "," Get the usage flags of the Allocation. <br /><br />"
"android.support.v8.renderscript.Allocation.Bitmap () "," Creates a non-mipmapped Allocation to use as a graphics texture from the Bitmap referenced by resource ID. <br /><br />"
"android.support.v8.renderscript.BaseObj.destroy () "," Frees any native resources associated with this object. <br /><br />"
"android.support.v8.renderscript.BaseObj.hashCode () "," Calculates the hash code value for a BaseObj. <br /><br />"
"android.support.v8.renderscript.BaseObj.Object () "," Compare the current BaseObj with another BaseObj for equality. <br /><br />"
"android.support.v8.renderscript.Element.Builder.String () "," Add an array of elements to this element. <br /><br />"
"android.support.v8.renderscript.Element.Builder.create () "," Create the element from this builder. <br /><br />"
"android.support.v8.renderscript.FieldPacker.Byte4 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.Int4 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.skip (int i) "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.addU64 (long v) "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.addU32 (long v) "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.Float3 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.Matrix4f () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.Short3 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.Float4 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.Long4 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.Short4 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.addF64 (double v) "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.Long3 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.reset (int i) "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.addU16 (int v) "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.Float2 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.Long2 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.Byte3 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.Double3 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.Byte2 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.addU8 (short v) "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.Double2 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.addI64 (long v) "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.Double4 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.align (int v) "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.getPos () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.Matrix3f () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.addI32 (int v) "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.addI8 (byte v) "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.getData () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.Short2 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.addF32 (float v) "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.Int3 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.reset () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.addI16 (short v) "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.Int2 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.BaseObj () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.Matrix2f () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPacker.addBoolean (boolean v) "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.Byte4 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.Int4 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.skip (int i) "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.addU64 (long v) "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.addU32 (long v) "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.Float3 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.Matrix4f () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.Short3 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.Float4 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.Long4 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.Short4 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.addF64 (double v) "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.Long3 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.addU16 (int v) "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.Float2 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.Long2 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.Byte3 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.Double3 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.Byte2 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.addU8 (short v) "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.Double2 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.addI64 (long v) "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.Double4 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.getPos () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.Matrix3f () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.addI32 (int v) "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.addI8 (byte v) "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.getData () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.Short2 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.addF32 (float v) "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.Int3 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.addI16 (short v) "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.Int2 () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.BaseObj () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.Matrix2f () "," no description <br /><br />"
"android.support.v8.renderscript.FieldPackerThunker.addBoolean (boolean v) "," no description <br /><br />"
"android.support.v8.renderscript.Matrix2f.set (int x, int y, float v) "," Sets the value for a given row and column <br /><br />"
"android.support.v8.renderscript.Matrix2f.loadRotate (float rot) "," Sets current values to be a rotation matrix of given angle <br /><br />"
"android.support.v8.renderscript.Matrix2f.getArray () "," Return a reference to the internal array representing matrix values. <br /><br />"
"android.support.v8.renderscript.Matrix2f.loadScale (float x, float y) "," Sets current values to be a scale matrix of given dimensions <br /><br />"
"android.support.v8.renderscript.Matrix2f.loadIdentity () "," Sets the matrix values to identity <br /><br />"
"android.support.v8.renderscript.Matrix2f.transpose () "," Sets the current matrix to its transpose <br /><br />"
"android.support.v8.renderscript.Matrix2f.scale (float x, float y) "," Modifies the current matrix by post-multiplying it with a scale matrix of given dimensions <br /><br />"
"android.support.v8.renderscript.Matrix2f.rotate (float rot) "," Modifies the current matrix by post-multiplying it with a rotation matrix of given angle <br /><br />"
"android.support.v8.renderscript.Matrix2f.Matrix2f () "," Post-multiplies the current matrix by a given parameter <br /><br />"
"android.support.v8.renderscript.Matrix2f.get (int x, int y) "," Returns the value for a given row and column <br /><br />"
"android.support.v8.renderscript.Matrix3f.scale (float x, float y, float z) "," Modifies the current matrix by post-multiplying it with a scale matrix of given dimensions <br /><br />"
"android.support.v8.renderscript.Matrix3f.loadScale (float x, float y) "," Makes the upper 2x2 a scale matrix of given dimensions <br /><br />"
"android.support.v8.renderscript.Matrix3f.loadIdentity () "," Sets the matrix values to identity <br /><br />"
"android.support.v8.renderscript.Matrix3f.loadRotate (float rot, float x, float y, float z) "," Sets current values to be a rotation matrix of certain angle about a given axis <br /><br />"
"android.support.v8.renderscript.Matrix3f.loadScale (float x, float y, float z) "," Sets current values to be a scale matrix of given dimensions <br /><br />"
"android.support.v8.renderscript.Matrix3f.loadTranslate (float x, float y) "," Sets current values to be a translation matrix of given dimensions <br /><br />"
"android.support.v8.renderscript.Matrix3f.transpose () "," Sets the current matrix to its transpose <br /><br />"
"android.support.v8.renderscript.Matrix3f.translate (float x, float y) "," Modifies the current matrix by post-multiplying it with a translation matrix of given dimensions <br /><br />"
"android.support.v8.renderscript.Matrix3f.get (int x, int y) "," Returns the value for a given row and column <br /><br />"
"android.support.v8.renderscript.Matrix3f.Matrix3f () "," Post-multiplies the current matrix by a given parameter <br /><br />"
"android.support.v8.renderscript.Matrix3f.set (int x, int y, float v) "," Sets the value for a given row and column <br /><br />"
"android.support.v8.renderscript.Matrix3f.loadRotate (float rot) "," Makes the upper 2x2 a rotation matrix of the given angle <br /><br />"
"android.support.v8.renderscript.Matrix3f.getArray () "," Return a reference to the internal array representing matrix values. <br /><br />"
"android.support.v8.renderscript.Matrix3f.scale (float x, float y) "," Modifies the upper 2x2 of the current matrix by post-multiplying it with a scale matrix of given dimensions <br /><br />"
"android.support.v8.renderscript.Matrix3f.rotate (float rot) "," Modifies the upper 2x2 of the current matrix by post-multiplying it with a rotation matrix of given angle <br /><br />"
"android.support.v8.renderscript.Matrix3f.rotate (float rot, float x, float y, float z) "," Modifies the current matrix by post-multiplying it with a rotation matrix of certain angle about a given axis <br /><br />"
"android.support.v8.renderscript.Matrix4f.translate (float x, float y, float z) "," Modifies the current matrix by post-multiplying it with a translation matrix of given dimensions <br /><br />"
"android.support.v8.renderscript.Matrix4f.scale (float x, float y, float z) "," Modifies the current matrix by post-multiplying it with a scale matrix of given dimensions <br /><br />"
"android.support.v8.renderscript.Matrix4f.loadIdentity () "," Sets the matrix values to identity <br /><br />"
"android.support.v8.renderscript.Matrix4f.Matrix4f () "," Post-multiplies the current matrix by a given parameter <br /><br />"
"android.support.v8.renderscript.Matrix4f.loadScale (float x, float y, float z) "," Sets current values to be a scale matrix of given dimensions <br /><br />"
"android.support.v8.renderscript.Matrix4f.loadRotate (float rot, float x, float y, float z) "," Sets current values to be a rotation matrix of certain angle about a given axis <br /><br />"
"android.support.v8.renderscript.Matrix4f.transpose () "," Sets the current matrix to its transpose <br /><br />"
"android.support.v8.renderscript.Matrix4f.loadTranslate (float x, float y, float z) "," Sets current values to be a translation matrix of given dimensions <br /><br />"
"android.support.v8.renderscript.Matrix4f.get (int x, int y) "," Returns the value for a given row and column <br /><br />"
"android.support.v8.renderscript.Matrix4f.loadOrtho (float l, float r, float b, float t, float n, float f) "," Set current values to be an orthographic projection matrix <br /><br />"
"android.support.v8.renderscript.Matrix4f.set (int x, int y, float v) "," Sets the value for a given row and column <br /><br />"
"android.support.v8.renderscript.Matrix4f.inverse () "," Sets the current matrix to its inverse <br /><br />"
"android.support.v8.renderscript.Matrix4f.getArray () "," Return a reference to the internal array representing matrix values. <br /><br />"
"android.support.v8.renderscript.Matrix4f.inverseTranspose () "," Sets the current matrix to its inverse transpose <br /><br />"
"android.support.v8.renderscript.Matrix4f.loadPerspective (float fovy, float aspect, float near, float far) "," Sets current values to be a perspective projection matrix <br /><br />"
"android.support.v8.renderscript.Matrix4f.loadFrustum (float l, float r, float b, float t, float n, float f) "," Sets current values to be a perspective projection matrix <br /><br />"
"android.support.v8.renderscript.Matrix4f.loadOrthoWindow (int w, int h) "," Set current values to be an orthographic projection matrix with the right and bottom clipping planes set to the given values. <br /><br />"
"android.support.v8.renderscript.Matrix4f.loadProjectionNormalized (int w, int h) "," Helper function to set the current values to a perspective projection matrix with aspect ratio defined by the parameters and (near, far), (bottom, top) mapping to (-1, 1) at z = 0 <br /><br />"
"android.support.v8.renderscript.Matrix4f.rotate (float rot, float x, float y, float z) "," Modifies the current matrix by post-multiplying it with a rotation matrix of certain angle about a given axis <br /><br />"
"android.support.v8.renderscript.RenderScript.RSErrorHandler.run () "," Starts executing the active part of the class' code. <br /><br />"
"android.support.v8.renderscript.RenderScript.RSMessageHandler.run () "," Starts executing the active part of the class' code. <br /><br />"
"android.support.v8.renderscript.Sampler.Builder.Sampler.Value () "," no description <br /><br />"
"android.support.v8.renderscript.Sampler.Builder.create () "," no description <br /><br />"
"android.support.v8.renderscript.Sampler.Builder.setAnisotropy (float v) "," no description <br /><br />"
"android.support.v8.renderscript.Script.FieldBase.getAllocation () "," no description <br /><br />"
"android.support.v8.renderscript.Script.FieldBase.getType () "," no description <br /><br />"
"android.support.v8.renderscript.Script.FieldBase.getElement () "," no description <br /><br />"
"android.support.v8.renderscript.Script.FieldBase.updateAllocation () "," no description <br /><br />"
"android.support.v8.renderscript.Script.LaunchOptions.setZ (int zstartArg, int zendArg) "," Set the Z range. <br /><br />"
"android.support.v8.renderscript.Script.LaunchOptions.getYEnd () "," Returns the current Y end <br /><br />"
"android.support.v8.renderscript.Script.LaunchOptions.setX (int xstartArg, int xendArg) "," Set the X range. <br /><br />"
"android.support.v8.renderscript.Script.LaunchOptions.getZEnd () "," Returns the current Z end <br /><br />"
"android.support.v8.renderscript.Script.LaunchOptions.setY (int ystartArg, int yendArg) "," Set the Y range. <br /><br />"
"android.support.v8.renderscript.Script.LaunchOptions.getYStart () "," Returns the current Y start <br /><br />"
"android.support.v8.renderscript.Script.LaunchOptions.getXEnd () "," Returns the current X end <br /><br />"
"android.support.v8.renderscript.Script.LaunchOptions.getZStart () "," Returns the current Z start <br /><br />"
"android.support.v8.renderscript.Script.LaunchOptions.getXStart () "," Returns the current X start <br /><br />"
"android.support.v8.renderscript.ScriptGroup.Builder.create () "," Creates the Script group. <br /><br />"
"android.support.v8.renderscript.ScriptGroup.Builder.Script.KernelID () "," Adds a Kernel to the group. <br /><br />"
"android.support.v8.renderscript.ScriptGroup.Builder.Script.FieldID () "," Adds a connection to the group. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicBlend.getKernelIDAdd () "," Get a KernelID for the Add kernel. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicBlend.getKernelIDClear () "," Get a KernelID for the Clear kernel. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicBlend.getKernelIDMultiply () "," Get a KernelID for the Multiply kernel. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicBlend.getKernelIDSrcAtop () "," Get a KernelID for the SrcAtop kernel. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicBlend.getKernelIDDstOut () "," Get a KernelID for the DstOut kernel. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicBlend.getKernelIDSrcOut () "," Get a KernelID for the SrcOut kernel. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicBlend.getKernelIDSubtract () "," Get a KernelID for the Subtract kernel. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicBlend.getKernelIDDstOver () "," Get a KernelID for the DstOver kernel. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicBlend.getKernelIDSrcOver () "," Get a KernelID for the SrcOver kernel. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicBlend.U8_4 (RenderScript) () "," Supported elements types are U8_4(RenderScript) <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicBlend.getKernelIDDst () "," Get a KernelID for the Dst kernel. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicBlend.getKernelIDSrcIn () "," Get a KernelID for the SrcIn kernel. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicBlend.Allocation () "," Sets dst = {src.r ^ dst.r, src.g ^ dst.g, src.b ^ dst.b, src.a ^ dst.a} <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicBlend.getKernelIDSrc () "," Get a KernelID for the Src kernel. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicBlend.getKernelIDXor () "," Get a KernelID for the Xor kernel. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicBlend.getKernelIDDstAtop () "," Get a KernelID for the DstAtop kernel. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicBlend.getKernelIDDstIn () "," Get a KernelID for the DstIn kernel. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicBlur.setRadius (float radius) "," Set the radius of the Blur. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicBlur.Element () "," Create an intrinsic for applying a blur to an allocation. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicBlur.getFieldID_Input () "," Get a FieldID for the input field of this intrinsic. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicBlur.getKernelID () "," Get a KernelID for this intrinsic kernel. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicBlur.Allocation () "," Set the input of the blur. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicColorMatrix.Matrix3f () "," Set the color matrix which will be applied to each cell of the image. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicColorMatrix.setGreyscale () "," Set a color matrix to convert from RGB to luminance. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicColorMatrix.Element () "," Create an intrinsic for applying a color matrix to an allocation. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicColorMatrix.getKernelID () "," Get a KernelID for this intrinsic kernel. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicColorMatrix.setYUVtoRGB () "," Set the matrix to convert from YUV to RGB with a direct copy of the 4th channel. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicColorMatrix.setRGBtoYUV () "," Set the matrix to convert from RGB to YUV with a direct copy of the 4th channel. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicColorMatrix.Matrix4f () "," Set the color matrix which will be applied to each cell of the image. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicColorMatrix.Allocation () "," Invoke the kernel and apply the matrix to each cell of ain and copy to aout. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicConvolve3x3.setCoefficients (float[] v) "," Set the coefficients for the convolve. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicConvolve3x3.getFieldID_Input () "," Get a FieldID for the input field of this intrinsic. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicConvolve3x3.U8_4 (RenderScript) () "," Supported elements types are U8_4(RenderScript) The default coefficients are. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicConvolve3x3.getKernelID () "," Get a KernelID for this intrinsic kernel. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicConvolve3x3.Allocation () "," Set the input of the blur. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicConvolve5x5.setCoefficients (float[] v) "," Set the coefficients for the convolve. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicConvolve5x5.getFieldID_Input () "," Get a FieldID for the input field of this intrinsic. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicConvolve5x5.U8_4 (RenderScript) () "," Supported elements types are U8_4(RenderScript) The default coefficients are. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicConvolve5x5.getKernelID () "," Get a KernelID for this intrinsic kernel. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicConvolve5x5.Allocation () "," Set the input of the blur. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicLUT.setAlpha (int index, int value) "," Set an entry in the alpha channel lookup table <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicLUT.setBlue (int index, int value) "," Set an entry in the blue channel lookup table <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicLUT.setGreen (int index, int value) "," Set an entry in the green channel lookup table <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicLUT.U8_4 (RenderScript) () "," Supported elements types are U8_4(RenderScript) The defaults tables are identity. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicLUT.setRed (int index, int value) "," Set an entry in the red channel lookup table <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicLUT.getKernelID () "," Get a KernelID for this intrinsic kernel. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicLUT.Allocation () "," Invoke the kernel and apply the lookup to each cell of ain and copy to aout. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicYuvToRGB.Element () "," Create an intrinsic for converting YUV to RGB. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicYuvToRGB.getFieldID_Input () "," Get a FieldID for the input field of this intrinsic. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicYuvToRGB.getKernelID () "," Get a KernelID for this intrinsic kernel. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicYuvToRGB.Allocation () "," Convert the image to RGB. <br /><br />"
"android.support.v8.renderscript.ScriptIntrinsicYuvToRGB.U8 (RenderScript) () "," Set the input yuv allocation, must be U8(RenderScript). <br /><br />"
"android.support.v8.renderscript.Type.Builder.setFaces (boolean value) "," no description <br /><br />"
"android.support.v8.renderscript.Type.Builder.create () "," Validate structure and create a new Type. <br /><br />"
"android.support.v8.renderscript.Type.Builder.setZ (int value) "," no description <br /><br />"
"android.support.v8.renderscript.Type.Builder.setMipmaps (boolean value) "," no description <br /><br />"
"android.support.v8.renderscript.Type.Builder.setY (int value) "," no description <br /><br />"
"android.support.v8.renderscript.Type.Builder.setX (int value) "," Add a dimension to the Type. <br /><br />"
"android.support.wearable.activity.ConfirmationActivity.onCreate (Bundle savedInstanceState) "," no description <br /><br />"
"android.support.wearable.view.BoxInsetLayout.onApplyWindowInsets (WindowInsets insets) "," no description <br /><br />"
"android.support.wearable.view.BoxInsetLayout.getInsets () "," no description <br /><br />"
"android.support.wearable.view.BoxInsetLayout.setForeground (Drawable drawable) "," no description <br /><br />"
"android.support.wearable.view.BoxInsetLayout.generateLayoutParams (AttributeSet attrs) "," no description <br /><br />"
"android.support.wearable.view.BoxInsetLayout.isRound () "," determine screen shape <br /><br />"
"android.support.wearable.view.CardFragment.setCardMarginBottom (int bottom) "," Sets the additional margin between the bottom edge of the card shadow, and the parent view. <br /><br />"
"android.support.wearable.view.CardFragment.onActivityCreated (Bundle savedInstanceState) "," no description <br /><br />"
"android.support.wearable.view.CardFragment.create (CharSequence title, CharSequence description) "," Construct a new CardFragment using the default content layout. <br /><br />"
"android.support.wearable.view.CardFragment.setExpansionFactor (float factor) "," Sets the allowed maximum height of the card as a multiple of the parent height. <br /><br />"
"android.support.wearable.view.CardFragment.scrollToBottom () "," Sets the card scroll position as far down as possible so the bottom edge is visible. <br /><br />"
"android.support.wearable.view.CardFragment.setCardGravity (int gravity) "," Assigns vertical gravity to the card, which determines where it should float when the card and it's content are shorter than the page. <br /><br />"
"android.support.wearable.view.CardFragment.setExpansionDirection (int direction) "," Adjusts which direction the card height will expand. <br /><br />"
"android.support.wearable.view.CardFragment.setCardMargins (int left, int top, int right, int bottom) "," Sets the additional margin between the card shadow edge and the parent view. <br /><br />"
"android.support.wearable.view.CardFragment.setCardMarginTop (int top) "," Sets the additional margin between the top edge of the card shadow, and the parent view. <br /><br />"
"android.support.wearable.view.CardFragment.setContentPadding (int left, int top, int right, int bottom) "," Sets padding between the inside card edge and the card content. <br /><br />"
"android.support.wearable.view.CardFragment.create (CharSequence title, CharSequence text, int iconRes) "," Construct a new CardFragment using the default content layout, including and icon. <br /><br />"
"android.support.wearable.view.CardFragment.setExpansionEnabled (boolean enabled) "," Enables support contents which maybe be larger than the card's container. <br /><br />"
"android.support.wearable.view.CardFragment.onDestroy () "," no description <br /><br />"
"android.support.wearable.view.CardFragment.scrollToTop () "," Sets the card scroll position as far up as possible so the top edge is visible. <br /><br />"
"android.support.wearable.view.CardFragment.onCreateView (LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) "," no description <br /><br />"
"android.support.wearable.view.CardFragment.setCardMarginLeft (int left) "," Sets the additional margin between the left edge of the card shadow, and the parent view. <br /><br />"
"android.support.wearable.view.CardFragment.setCardMarginRight (int right) "," Sets the additional margin between the right edge of the card shadow, and the parent view. <br /><br />"
"android.support.wearable.view.CardFrame.isExpansionEnabled () "," Indicates whether expansion is on. <br /><br />"
"android.support.wearable.view.CardFrame.addView (View child, int index, ViewGroup.LayoutParams params) "," no description <br /><br />"
"android.support.wearable.view.CardFrame.shouldDelayChildPressedState () "," no description <br /><br />"
"android.support.wearable.view.CardFrame.addView (View child, ViewGroup.LayoutParams params) "," no description <br /><br />"
"android.support.wearable.view.CardFrame.getContentPaddingTop () "," Returns the inner padding after the Card's top edge <br /><br />"
"android.support.wearable.view.CardFrame.getContentPaddingRight () "," Returns the inner padding before the Card's right edge <br /><br />"
"android.support.wearable.view.CardFrame.getContentPaddingBottom () "," Returns the inner padding before the Card's bottom edge <br /><br />"
"android.support.wearable.view.CardFrame.getExpansionFactor () "," Returns the current expansionFactor which is the maximum height of this view as a multiple of the parent view's height. <br /><br />"
"android.support.wearable.view.CardFrame.setExpansionFactor (float expansionFactor) "," Sets the allowed expansion amount as a multiple of the parent height. <br /><br />"
"android.support.wearable.view.CardFrame.addView (View child, int index) "," no description <br /><br />"
"android.support.wearable.view.CardFrame.setExpansionDirection (int direction) "," Sets the direction in which content expands. <br /><br />"
"android.support.wearable.view.CardFrame.onInitializeAccessibilityNodeInfo (AccessibilityNodeInfo info) "," no description <br /><br />"
"android.support.wearable.view.CardFrame.addView (View child) "," no description <br /><br />"
"android.support.wearable.view.CardFrame.onApplyWindowInsets (WindowInsets insets) "," no description <br /><br />"
"android.support.wearable.view.CardFrame.getContentPaddingLeft () "," Returns the inner padding after the Card's left edge <br /><br />"
"android.support.wearable.view.CardFrame.setExpansionEnabled (boolean enabled) "," Enables support contents which maybe be larger than the card's container. <br /><br />"
"android.support.wearable.view.CardFrame.onInitializeAccessibilityEvent (AccessibilityEvent event) "," no description <br /><br />"
"android.support.wearable.view.CardFrame.EXPAND_DOWN () "," Returns the current expansion direction, either EXPAND_UP or EXPAND_DOWN. <br /><br />"
"android.support.wearable.view.CardScrollView.isExpansionEnabled () "," Indicates if expansion is enabled. <br /><br />"
"android.support.wearable.view.CardScrollView.getCardGravity () "," Returns the current layout gravity for contained card frame. <br /><br />"
"android.support.wearable.view.CardScrollView.canScrollHorizontally (int direction) "," no description <br /><br />"
"android.support.wearable.view.CardScrollView.addView (View child, int index, ViewGroup.LayoutParams params) "," no description <br /><br />"
"android.support.wearable.view.CardScrollView.onApplyWindowInsets (WindowInsets insets) "," no description <br /><br />"
"android.support.wearable.view.CardScrollView.getExpansionDirection () "," Returns the current expansion direction for the contained CardFrame. <br /><br />"
"android.support.wearable.view.CardScrollView.setExpansionEnabled (boolean enableExpansion) "," Whether the height of the card is permitted to increase beyond the card layout bounds. <br /><br />"
"android.support.wearable.view.CardScrollView.getExpansionFactor () "," Returns the current expansion factor for the contained CardFrame. <br /><br />"
"android.support.wearable.view.CardScrollView.setExpansionFactor (float expansionFactor) "," Changes the expansion factor for the contained CardFrame. <br /><br />"
"android.support.wearable.view.CardScrollView.setCardGravity (int gravity) "," Applies gravity to adjust the vertical alignment of the contained card frame when it's shorter than the containing view. <br /><br />"
"android.support.wearable.view.CardScrollView.setExpansionDirection (int direction) "," Control which direction expansion occurs. <br /><br />"
"android.support.wearable.view.CardScrollView.getAvailableScrollDelta (int direction) "," Indicates how far the container may be vertically scrolled in the given direction. <br /><br />"
"android.support.wearable.view.CircledImageView.setPressed (boolean pressed) "," no description <br /><br />"
"android.support.wearable.view.CircledImageView.setCircleRadiusPressed (float circleRadiusPressed) "," no description <br /><br />"
"android.support.wearable.view.CircledImageView.showIndeterminateProgress (boolean show) "," Show the circle border as an indeterminate progress spinner. <br /><br />"
"android.support.wearable.view.CircledImageView.setCircleColor (int circleColor) "," no description <br /><br />"
"android.support.wearable.view.CircledImageView.setCircleBorderColor (int circleBorderColor) "," no description <br /><br />"
"android.support.wearable.view.CircledImageView.setCircleHidden (boolean circleHidden) "," no description <br /><br />"
"android.support.wearable.view.CircledImageView.setImageResource (int resId) "," no description <br /><br />"
"android.support.wearable.view.CircledImageView.setShadowVisibility (float shadowVisibility) "," Set how much of the shadow should be shown. <br /><br />"
"android.support.wearable.view.CircledImageView.setImageDrawable (Drawable drawable) "," no description <br /><br />"
"android.support.wearable.view.CircledImageView.setProgress (float progress) "," no description <br /><br />"
"android.support.wearable.view.CircledImageView.setCircleBorderWidth (float circleBorderWidth) "," Set the border around the circle. <br /><br />"
"android.support.wearable.view.CircledImageView.getCircleRadius () "," no description <br /><br />"
"android.support.wearable.view.CircledImageView.setCircleColorStateList (ColorStateList circleColor) "," no description <br /><br />"
"android.support.wearable.view.CircledImageView.getDefaultCircleColor () "," no description <br /><br />"
"android.support.wearable.view.CircledImageView.getCircleColorStateList () "," no description <br /><br />"
"android.support.wearable.view.CircledImageView.getInitialCircleRadius () "," no description <br /><br />"
"android.support.wearable.view.CircledImageView.setCircleRadius (float circleRadius) "," no description <br /><br />"
"android.support.wearable.view.CrossfadeDrawable.setColorFilter (ColorFilter cf) "," no description <br /><br />"
"android.support.wearable.view.CrossfadeDrawable.getChangingConfigurations () "," no description <br /><br />"
"android.support.wearable.view.CrossfadeDrawable.getOpacity () "," no description <br /><br />"
"android.support.wearable.view.CrossfadeDrawable.getIntrinsicWidth () "," no description <br /><br />"
"android.support.wearable.view.CrossfadeDrawable.setAlpha (int alpha) "," no description <br /><br />"
"android.support.wearable.view.CrossfadeDrawable.setColorFilter (int color, PorterDuff.Mode mode) "," no description <br /><br />"
"android.support.wearable.view.CrossfadeDrawable.isStateful () "," no description <br /><br />"
"android.support.wearable.view.CrossfadeDrawable.setFading (Drawable d) "," Sets the image for the fading layer. <br /><br />"
"android.support.wearable.view.CrossfadeDrawable.getIntrinsicHeight () "," no description <br /><br />"
"android.support.wearable.view.CrossfadeDrawable.invalidateDrawable (Drawable who) "," no description <br /><br />"
"android.support.wearable.view.CrossfadeDrawable.jumpToCurrentState () "," no description <br /><br />"
"android.support.wearable.view.CrossfadeDrawable.scheduleDrawable (Drawable who, Runnable what, long when) "," no description <br /><br />"
"android.support.wearable.view.CrossfadeDrawable.unscheduleDrawable (Drawable who, Runnable what) "," no description <br /><br />"
"android.support.wearable.view.CrossfadeDrawable.setDither (boolean dither) "," no description <br /><br />"
"android.support.wearable.view.CrossfadeDrawable.clearColorFilter () "," no description <br /><br />"
"android.support.wearable.view.CrossfadeDrawable.setFilterBitmap (boolean filter) "," no description <br /><br />"
"android.support.wearable.view.CrossfadeDrawable.setChangingConfigurations (int configs) "," no description <br /><br />"
"android.support.wearable.view.CrossfadeDrawable.setProgress (float progress) "," no description <br /><br />"
"android.support.wearable.view.CrossfadeDrawable.draw (Canvas canvas) "," no description <br /><br />"
"android.support.wearable.view.CrossfadeDrawable.setBase (Drawable d) "," Sets the image for the base layer. <br /><br />"
"android.support.wearable.view.CrossfadeDrawable.getAlpha () "," no description <br /><br />"
"android.support.wearable.view.DelayedConfirmationView.DelayedConfirmationListener.onTimerSelected (View v) "," Called when the user selects the timer. <br /><br />"
"android.support.wearable.view.DelayedConfirmationView.DelayedConfirmationListener.onTimerFinished (View v) "," Called when the timer is finished. <br /><br />"
"android.support.wearable.view.DelayedConfirmationView.start () "," Starts the timer countdown. <br /><br />"
"android.support.wearable.view.DelayedConfirmationView.setTotalTimeMs (long time) "," Sets the total time in milliseconds for the Timer to countdown to. <br /><br />"
"android.support.wearable.view.DelayedConfirmationView.DelayedConfirmationView.DelayedConfirmationListener () "," Sets a listener to get callbacks for when the timer finishes or cancelled. <br /><br />"
"android.support.wearable.view.DelayedConfirmationView.onTouchEvent (MotionEvent event) "," no description <br /><br />"
"android.support.wearable.view.DelayedConfirmationView.reset () "," Resets the timer. <br /><br />"
"android.support.wearable.view.DelayedConfirmationView.setStartTimeMs (long time) "," Artificially sets the start time in milliseconds for the Timer to countdown from. <br /><br />"
"android.support.wearable.view.DismissOverlayView.setIntroText (CharSequence str) "," Set the intro text. <br /><br />"
"android.support.wearable.view.DismissOverlayView.show () "," Show the exit button. <br /><br />"
"android.support.wearable.view.DismissOverlayView.showIntroIfNecessary () "," Displays the intro overlay over your app if necessary. <br /><br />"
"android.support.wearable.view.DismissOverlayView.performClick () "," no description <br /><br />"
"android.support.wearable.view.DismissOverlayView.setIntroText (int textResId) "," Set the intro text. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.GridViewPager.OnPageChangeListener () "," Sets a listener to receive the page change events that are provided to the page indicator. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.setDotRadiusSelected (int radius) "," Sets the radius of the page dot for the selected page. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.setDotFadeWhenIdle (boolean fade) "," Sets whether the dots fade out when the pager is idle. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.getDotFadeInDuration () "," Returns the duration of the fade in duration, in milliseconds. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.setDotRadius (int radius) "," Sets the radius of the page dots. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.setDotFadeInDuration (int duration, TimeUnit unit) "," Sets the duration of the fade in animation. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.getDotColorSelected () "," Returns the color of the dot for the selected page. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.onPageScrolled (int row, int column, float rowOffset, float columnOffset, int rowOffsetPixels, int columnOffsetPixels) "," This method will be invoked when the current page is scrolled, either as part of a programmatically initiated smooth scroll or a user initiated touch scroll. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.setDotShadowDx (float dx) "," Sets the horizontal offset of shadows drawn beneath the dots. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.setDotFadeOutDelay (int delay) "," Sets the delay between the pager arriving at an idle state, and the fade out animation beginning, in milliseconds. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.setDotShadowColor (int color) "," Sets the color of the shadows drawn beneath the dots. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.getDotShadowDy () "," Returns the vertical offset of shadows drawn beneath the dots. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.onPageSelected (int row, int column) "," This method is called when a new page becomes selected. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.getDotShadowDx () "," Returns the horizontal offset of shadows drawn beneath the dots. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.onDataSetChanged () "," Called when a change is made to the content of the current adapter. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.getDotRadius () "," Gets the radius of the page dots. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.setDotShadowRadius (float radius) "," Sets the pixel radius of shadows drawn beneath the dots. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.getDotFadeOutDuration () "," Returns the duration of fade out animation, in milliseconds. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.getDotColor () "," Returns the color used for dots other than the selected page. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.setDotSpacing (int spacing) "," Sets the center-to-center distance between page dots. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.getDotShadowRadius () "," Sets the pixel radius of shadows drawn beneath the dots. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.setDotColorSelected (int color) "," Sets the color of the dot for the selected page. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.setAdapter (GridPagerAdapter) () "," Called when the adapter is changed with setAdapter(GridPagerAdapter). <br /><br />"
"android.support.wearable.view.DotsPageIndicator.onPageScrollStateChanged (int state) "," Called when the scroll state changes. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.setDotFadeOutDuration (int duration, TimeUnit unit) "," Sets the duration of the fade out animation. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.getDotShadowColor () "," Returns the color of the shadows drawn beneath the dots. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.setDotColor (int color) "," Sets the color used for dots other than the selected page. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.GridViewPager.OnAdapterChangeListener () "," Supplies the GridViewPager instance, and attaches this views GridViewPager.OnPageChangeListener and GridViewPager.OnAdapterChangeListener listeners to the pager. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.getDotRadiusSelected () "," Gets the radius of the page dot for the selected page. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.getDotSpacing () "," Gets the center-to-center distance between page dots. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.getDotFadeWhenIdle () "," Indicates if the dots fade out when the pager is idle. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.getDotFadeOutDelay () "," Sets the delay between the pager arriving at an idle state, and the fade out animation beginning, in milliseconds. <br /><br />"
"android.support.wearable.view.DotsPageIndicator.setDotShadowDy (float dy) "," Sets the vertical offset of shadows drawn beneath the dots. <br /><br />"
"android.support.wearable.view.FragmentGridPagerAdapter.instantiateItem (ViewGroup, int, int) (View view, Object object) "," Determines whether a page View is associated with a specific key object as returned by instantiateItem(ViewGroup, int, int). <br /><br />"
"android.support.wearable.view.FragmentGridPagerAdapter.Fragment (int row, int column) "," Returns the Fragment at the specified row number and column number. <br /><br />"
"android.support.wearable.view.FragmentGridPagerAdapter.getBackgroundForPage (int row, int column) "," Provides content to be displayed as the background for a specific page. <br /><br />"
"android.support.wearable.view.GridPageOptions.BackgroundListener.notifyBackgroundChanged () "," Notifies the container about a change to the background. <br /><br />"
"android.support.wearable.view.GridPagerAdapter.getBackgroundForRow (int) (int row) "," This method should be called if the value returned by getBackgroundForRow(int) changes. <br /><br />"
"android.support.wearable.view.GridPagerAdapter.unregisterDataSetObserver (DataSetObserver observer) "," Unregister an observer from callbacks related to the adapter's data changing. <br /><br />"
"android.support.wearable.view.GridPagerAdapter.restoreState (Parcelable savedState, ClassLoader classLoader) "," Restores the previously saved state of this adapter. <br /><br />"
"android.support.wearable.view.GridPagerAdapter.saveState () "," Saves the current state of this adapter. <br /><br />"
"android.support.wearable.view.GridPagerAdapter.registerDataSetObserver (DataSetObserver observer) "," Register an observer to receive callbacks related to the adapter's data changing. <br /><br />"
"android.support.wearable.view.GridPagerAdapter.getColumnCount (int row) "," Returns the maximum number of columns for each row. <br /><br />"
"android.support.wearable.view.GridPagerAdapter.getOptionsForPage (int, int) (int row, int column) "," This method should be called if the value returned by getBackgroundForPage(int, int) or options returned by getOptionsForPage(int, int) change. <br /><br />"
"android.support.wearable.view.GridPagerAdapter.instantiateItem (ViewGroup, int, int) (View view, Object object) "," Determines whether a page View is associated with a specific key object as returned by instantiateItem(ViewGroup, int, int). <br /><br />"
"android.support.wearable.view.GridPagerAdapter.getBackgroundForPage (int row, int column) "," Provides content to be displayed as background for a specific page. <br /><br />"
"android.support.wearable.view.GridPagerAdapter.getCurrentColumnForRow (int row, int currentColumn) "," Returns the column to arrive at when navigating vertically to the specified row. <br /><br />"
"android.support.wearable.view.GridPagerAdapter.getBackgroundForRow (int row) "," Provides content to be displayed as the default background for all pages on the given row. <br /><br />"
"android.support.wearable.view.GridPagerAdapter.getOptionsForPage (int row, int column) "," Provides a set of features to apply to a page background. <br /><br />"
"android.support.wearable.view.GridPagerAdapter.getItemPosition (Object object) "," Called when the host view is attempting to determine if an item's position has changed. <br /><br />"
"android.support.wearable.view.GridPagerAdapter.getRowCount () "," Returns the number of rows available. <br /><br />"
"android.support.wearable.view.GridPagerAdapter.notifyDataSetChanged () "," This method should be called by the application if the data backing this adapter has changed and associated views should update. <br /><br />"
"android.support.wearable.view.GridViewPager.GridViewPager.OnPageChangeListener () "," Set a listener that will be invoked whenever the page changes or is incrementally scrolled. <br /><br />"
"android.support.wearable.view.GridViewPager.addView (View child, int index, ViewGroup.LayoutParams params) "," no description <br /><br />"
"android.support.wearable.view.GridViewPager.getOffscreenPageCount () "," Returns the number of pages that will be retained on the sides of the current page in the view hierarchy in an idle state. <br /><br />"
"android.support.wearable.view.GridViewPager.dispatchApplyWindowInsets (WindowInsets insets) "," no description <br /><br />"
"android.support.wearable.view.GridViewPager.canScrollVertically (int direction) "," no description <br /><br />"
"android.support.wearable.view.GridViewPager.setOnApplyWindowInsetsListener (View.OnApplyWindowInsetsListener listener) "," no description <br /><br />"
"android.support.wearable.view.GridViewPager.onSaveInstanceState () "," no description <br /><br />"
"android.support.wearable.view.GridViewPager.canScrollHorizontally (int direction) "," no description <br /><br />"
"android.support.wearable.view.GridViewPager.onRestoreInstanceState (Parcelable state) "," no description <br /><br />"
"android.support.wearable.view.GridViewPager.removeView (View view) "," no description <br /><br />"
"android.support.wearable.view.GridViewPager.onAttachedToWindow () "," no description <br /><br />"
"android.support.wearable.view.GridViewPager.setPageMargins (int rowMarginPx, int columnMarginPx) "," Sets the margin between pages. <br /><br />"
"android.support.wearable.view.GridViewPager.GridPagerAdapter () "," Assigns an adapter to provide the content for this pager. <br /><br />"
"android.support.wearable.view.GridViewPager.getCurrentItem () "," no description <br /><br />"
"android.support.wearable.view.GridViewPager.setOffscreenPageCount (int limit) "," Set the number of pages that should be retained to either side of the current page in the view hierarchy in an idle state. <br /><br />"
"android.support.wearable.view.GridViewPager.dispatchKeyEvent (KeyEvent event) "," no description <br /><br />"
"android.support.wearable.view.GridViewPager.requestFitSystemWindows () "," no description <br /><br />"
"android.support.wearable.view.GridViewPager.getPageColumnMargin () "," Return the margin between columns of pages. <br /><br />"
"android.support.wearable.view.GridViewPager.scrollTo (int x, int y) "," no description <br /><br />"
"android.support.wearable.view.GridViewPager.computeScroll () "," no description <br /><br />"
"android.support.wearable.view.GridViewPager.onApplyWindowInsets (WindowInsets insets) "," no description <br /><br />"
"android.support.wearable.view.GridViewPager.GridViewPager.OnAdapterChangeListener () "," Set a listener that will be invoked whenever the adapter is changed. <br /><br />"
"android.support.wearable.view.GridViewPager.generateLayoutParams (AttributeSet attrs) "," no description <br /><br />"
"android.support.wearable.view.GridViewPager.getAdapter () "," no description <br /><br />"
"android.support.wearable.view.GridViewPager.getPageRowMargin () "," Returns the margin between rows of pages. <br /><br />"
"android.support.wearable.view.GridViewPager.onInterceptTouchEvent (MotionEvent ev) "," no description <br /><br />"
"android.support.wearable.view.GridViewPager.onTouchEvent (MotionEvent ev) "," no description <br /><br />"
"android.support.wearable.view.GridViewPager.OnAdapterChangeListener.setAdapter (GridPagerAdapter) () "," Called when the adapter is changed with setAdapter(GridPagerAdapter). <br /><br />"
"android.support.wearable.view.GridViewPager.OnAdapterChangeListener.onDataSetChanged () "," Called when a change is made to the content of the current adapter. <br /><br />"
"android.support.wearable.view.GridViewPager.OnPageChangeListener.onPageSelected (int row, int column) "," This method is called when a new page becomes selected. <br /><br />"
"android.support.wearable.view.GridViewPager.OnPageChangeListener.onPageScrollStateChanged (int state) "," Called when the scroll state changes. <br /><br />"
"android.support.wearable.view.GridViewPager.OnPageChangeListener.onPageScrolled (int row, int column, float rowOffset, float columnOffset, int rowOffsetPixels, int columnOffsetPixels) "," This method will be invoked when the current page is scrolled, either as part of a programmatically initiated smooth scroll or a user initiated touch scroll. <br /><br />"
"android.support.wearable.view.SimpleAnimatorListener.onAnimationEnd (Animator animator) "," no description <br /><br />"
"android.support.wearable.view.SimpleAnimatorListener.onAnimationComplete (Animator animator) "," Called when the animation finishes. <br /><br />"
"android.support.wearable.view.SimpleAnimatorListener.wasCanceled () "," Provides information if the animation was cancelled. <br /><br />"
"android.support.wearable.view.SimpleAnimatorListener.onAnimationStart (Animator animator) "," no description <br /><br />"
"android.support.wearable.view.SimpleAnimatorListener.onAnimationCancel (Animator animator) "," no description <br /><br />"
"android.support.wearable.view.SimpleAnimatorListener.onAnimationRepeat (Animator animator) "," no description <br /><br />"
"android.support.wearable.view.WatchViewStub.inflate () "," Inflate the appropriate child layout for the last known container. <br /><br />"
"android.support.wearable.view.WatchViewStub.onApplyWindowInsets (WindowInsets insets) "," no description <br /><br />"
"android.support.wearable.view.WatchViewStub.setRoundLayout (int resId) "," Set a layout resource to be inflated when this stub is within a round container. <br /><br />"
"android.support.wearable.view.WatchViewStub.onMeasure (int widthMeasureSpec, int heightMeasureSpec) "," no description <br /><br />"
"android.support.wearable.view.WatchViewStub.WatchViewStub.OnLayoutInflatedListener () "," Set a listener to be notified when one of the specified sub-layouts is inflated into this stub container. <br /><br />"
"android.support.wearable.view.WatchViewStub.setRectLayout (int resId) "," Set a layout resource to be inflated when this stub is within a rectangular container. <br /><br />"
"android.support.wearable.view.WatchViewStub.OnLayoutInflatedListener.WatchViewStub () "," no description <br /><br />"
"android.support.wearable.view.WearableListView.ClickListener.WearableListView.ViewHolder () "," Called when the central child of the WearableListView is tapped. <br /><br />"
"android.support.wearable.view.WearableListView.ClickListener.onTopEmptyRegionClick () "," Called when the user taps the top third of the WearableListView and no item is present there. <br /><br />"
"android.support.wearable.view.WearableListView.WearableListView.ClickListener () "," Adds a listener that will be called when the user taps on the WearableListView or its items. <br /><br />"
"android.support.wearable.view.WearableListView.resetLayoutManager () "," Clears the state of the layout manager that positions list items. <br /><br />"
"android.support.wearable.view.WearableListView.setAdapter (Adapter adapter) "," no description <br /><br />"
"android.support.wearable.view.WearableListView.onInterceptTouchEvent (MotionEvent event) "," no description <br /><br />"
"android.support.wearable.view.WearableListView.getChildViewHolder (View child) "," no description <br /><br />"
"android.support.wearable.view.WearableListView.fling (int velocityX, int velocityY) "," no description <br /><br />"
"android.support.wearable.view.WearableListView.onTouchEvent (MotionEvent event) "," no description <br /><br />"
"android.support.wearable.view.WearableListView.animateToCenter () "," Automatically starts an animation that snaps the list to center on the element closest to the middle. <br /><br />"
"android.support.wearable.view.WearableListView.WearableListView.OnScrollListener () "," Removes listener for scroll events. <br /><br />"
"android.support.wearable.view.WearableListView.setInitialOffset (int top) "," By default the first element of the list is initially positioned in the center of the screen. <br /><br />"
"android.support.wearable.view.WearableListView.setGreedyTouchMode (boolean greedy) "," Controls whether WearableListView should intercept all touch events and also prevent the parent from receiving them. <br /><br />"
"android.support.wearable.view.WearableListView.OnCenterProximityListener.onCenterPosition (boolean animate) "," Called when this view becomes central item of the WearableListView. <br /><br />"
"android.support.wearable.view.WearableListView.OnCenterProximityListener.onNonCenterPosition (boolean animate) "," Called when this view stops being the central item of the WearableListView. <br /><br />"
"android.support.wearable.view.WearableListView.OnScrollListener.onCentralPositionChanged (int centralPosition) "," Called when the central item of the WearableListView changes. <br /><br />"
"android.support.wearable.view.WearableListView.OnScrollListener.onAbsoluteScrollChange (int scroll) "," Called when the content is scrolled, reporting the absolute scroll value. <br /><br />"
"android.support.wearable.view.WearableListView.OnScrollListener.onScrollStateChanged (int scrollState) "," Called when WearableListView's scroll state changes. <br /><br />"
"android.support.wearable.view.WearableListView.OnScrollListener.onScroll (int scroll) "," Called when the content is scrolled, reporting the relative scroll value. <br /><br />"
"android.support.wearable.watchface.CanvasWatchFaceService.Engine.onSurfaceChanged (SurfaceHolder holder, int format, int width, int height) "," no description <br /><br />"
"android.support.wearable.watchface.CanvasWatchFaceService.Engine.onDraw (Canvas canvas, Rect bounds) "," Draws the watch face. <br /><br />"
"android.support.wearable.watchface.CanvasWatchFaceService.Engine.onSurfaceCreated (SurfaceHolder holder) "," no description <br /><br />"
"android.support.wearable.watchface.CanvasWatchFaceService.Engine.onDestroy () "," no description <br /><br />"
"android.support.wearable.watchface.CanvasWatchFaceService.Engine.onDraw (Canvas, Rect) () "," Posts a message to schedule a call to onDraw(Canvas, Rect) to draw the next frame. <br /><br />"
"android.support.wearable.watchface.CanvasWatchFaceService.Engine.onSurfaceRedrawNeeded (SurfaceHolder holder) "," no description <br /><br />"
"android.support.wearable.watchface.CanvasWatchFaceService.onCreateEngine () "," no description <br /><br />"
"android.support.wearable.watchface.Gles2WatchFaceService.Engine.onSurfaceChanged (SurfaceHolder holder, int format, int width, int height) "," no description <br /><br />"
"android.support.wearable.watchface.Gles2WatchFaceService.Engine.onApplyWindowInsets (WindowInsets insets) "," no description <br /><br />"
"android.support.wearable.watchface.Gles2WatchFaceService.Engine.onGlSurfaceCreated (int width, int height) "," Called when a new GL surface is created. <br /><br />"
"android.support.wearable.watchface.Gles2WatchFaceService.Engine.onGlContextCreated () "," Called when a new GL context is created. <br /><br />"
"android.support.wearable.watchface.Gles2WatchFaceService.Engine.onCreate (SurfaceHolder surfaceHolder) "," no description <br /><br />"
"android.support.wearable.watchface.Gles2WatchFaceService.Engine.onDestroy () "," no description <br /><br />"
"android.support.wearable.watchface.Gles2WatchFaceService.Engine.onDraw () () "," Posts a message to schedule a call to onDraw() to draw the next frame. <br /><br />"
"android.support.wearable.watchface.Gles2WatchFaceService.Engine.onDraw () "," Draws the watch face. <br /><br />"
"android.support.wearable.watchface.Gles2WatchFaceService.Engine.onSurfaceDestroyed (SurfaceHolder holder) "," no description <br /><br />"
"android.support.wearable.watchface.Gles2WatchFaceService.Engine.onSurfaceRedrawNeeded (SurfaceHolder holder) "," no description <br /><br />"
"android.support.wearable.watchface.Gles2WatchFaceService.onCreateEngine () "," no description <br /><br />"
"android.support.wearable.watchface.WatchFaceService.Engine.onInterruptionFilterChanged (int interruptionFilter) "," Called when the user changes interruption filter. <br /><br />"
"android.support.wearable.watchface.WatchFaceService.Engine.onCreate (SurfaceHolder holder) "," no description <br /><br />"
"android.support.wearable.watchface.WatchFaceService.Engine.onCommand (String action, int x, int y, int z, Bundle extras, boolean resultRequested) "," no description <br /><br />"
"android.support.wearable.watchface.WatchFaceService.Engine.WatchFaceStyle () "," Sets the watch face style. <br /><br />"
"android.support.wearable.watchface.WatchFaceService.Engine.getInterruptionFilter () "," Returns interruption filter selected by the user. <br /><br />"
"android.support.wearable.watchface.WatchFaceService.Engine.onPropertiesChanged (Bundle properties) "," Called when the properties of the device are determined. <br /><br />"
"android.support.wearable.watchface.WatchFaceService.Engine.getPeekCardPosition () "," Returns the location of the first peeking card. <br /><br />"
"android.support.wearable.watchface.WatchFaceService.Engine.onTimeTick () "," Called periodically in ambient mode to update the time shown by the watch face. <br /><br />"
"android.support.wearable.watchface.WatchFaceService.Engine.onVisibilityChanged (boolean visible) "," Called to inform you of the watch face becoming visible or hidden. <br /><br />"
"android.support.wearable.watchface.WatchFaceService.Engine.isInAmbientMode () "," Returns whether the watch face is in ambient mode. <br /><br />"
"android.support.wearable.watchface.WatchFaceService.Engine.onPeekCardPositionUpdate (Rect rect) "," Called when the first, peeking card positions itself on the screen. <br /><br />"
"android.support.wearable.watchface.WatchFaceService.Engine.onAmbientModeChanged (boolean inAmbientMode) "," Called when the device enters or exits ambient mode. <br /><br />"
"android.support.wearable.watchface.WatchFaceService.Engine.getUnreadCount () "," Returns the number of unread notification cards in the stream. <br /><br />"
"android.support.wearable.watchface.WatchFaceService.Engine.onUnreadCountChanged (int count) "," Called when the number of unread notification cards in the stream has changed. <br /><br />"
"android.support.wearable.watchface.WatchFaceService.onCreateEngine () "," no description <br /><br />"
"android.support.wearable.watchface.WatchFaceStyle.Builder.setShowUnreadCountIndicator (boolean show) "," Sets whether to add an indicator of how many unread cards there are in the stream. <br /><br />"
"android.support.wearable.watchface.WatchFaceStyle.Builder.setViewProtection (int viewProtection) "," Adds background color to UI elements of the home screen, so they are readable on the watch face. <br /><br />"
"android.support.wearable.watchface.WatchFaceStyle.Builder.setPeekOpacityMode (int peekOpacityMode) "," Sets whether the first, peeking card should be opaque when the watch face is displayed. <br /><br />"
"android.support.wearable.watchface.WatchFaceStyle.Builder.setAmbientPeekMode (int ambientPeekMode) "," Sets how the first, peeking card will be displayed while the watch is in ambient, black &amp; white mode. <br /><br />"
"android.support.wearable.watchface.WatchFaceStyle.Builder.setHotwordIndicatorGravity (int hotwordIndicatorGravity) "," Sets position of hotword (OK Google) on the screen. <br /><br />"
"android.support.wearable.watchface.WatchFaceStyle.Builder.setShowSystemUiTime (boolean showSystemUiTime) "," Sets if the system will draw the system-style time over the watch face. <br /><br />"
"android.support.wearable.watchface.WatchFaceStyle.Builder.setCardPeekMode (int peekMode) "," Sets how far into the screen the first card will peek while the watch face is displayed. <br /><br />"
"android.support.wearable.watchface.WatchFaceStyle.Builder.build () "," Constructs read only WatchFaceStyle object. <br /><br />"
"android.support.wearable.watchface.WatchFaceStyle.Builder.setStatusBarGravity (int statusBarGravity) "," Sets position of status icons (battery state, lack of connection) on the screen. <br /><br />"
"android.support.wearable.watchface.WatchFaceStyle.Builder.setBackgroundVisibility (int backgroundVisibility) "," Set how to display background of the first, peeking card. <br /><br />"
"android.support.wearable.watchface.WatchFaceStyle.getStatusBarGravity () "," Controls position of status icons (battery state, lack of connection) on the screen. <br /><br />"
"android.support.wearable.watchface.WatchFaceStyle.writeToParcel (Parcel parcel, int flags) "," no description <br /><br />"
"android.support.wearable.watchface.WatchFaceStyle.getShowUnreadCountIndicator () "," Whether to add an indicator of how many unread cards there are in the stream. <br /><br />"
"android.support.wearable.watchface.WatchFaceStyle.getAmbientPeekMode () "," Controls how the first, peeking card will be displayed while the watch is in ambient, black &amp; white mode. <br /><br />"
"android.support.wearable.watchface.WatchFaceStyle.getComponent () "," The component of the watch face activity whose style is being specified. <br /><br />"
"android.support.wearable.watchface.WatchFaceStyle.getShowSystemUiTime () "," If true, the system will draw the system-style time over the watch face. <br /><br />"
"android.support.wearable.watchface.WatchFaceStyle.describeContents () "," no description <br /><br />"
"android.support.wearable.watchface.WatchFaceStyle.toString () "," no description <br /><br />"
"android.support.wearable.watchface.WatchFaceStyle.getHotwordIndicatorGravity () "," Controls position of hotword (OK Google) on the screen. <br /><br />"
"android.support.wearable.watchface.WatchFaceStyle.getBackgroundVisibility () "," Controls displaying background of the first, peeking card. <br /><br />"
"android.support.wearable.watchface.WatchFaceStyle.hashCode () "," no description <br /><br />"
"android.support.wearable.watchface.WatchFaceStyle.getCardPeekMode () "," Controls how far into the screen the first card will peek while the watch face is displayed. <br /><br />"
"android.support.wearable.watchface.WatchFaceStyle.getViewProtectionMode () "," Allows adding background color to UI elements of the home screen, so they are readable on the watch face. <br /><br />"
"android.support.wearable.watchface.WatchFaceStyle.getPeekOpacityMode () "," Controls whether the first, peeking card should be opaque when the watch face is displayed. <br /><br />"
"android.support.wearable.watchface.WatchFaceStyle.equals (Object otherObj) "," no description <br /><br />"
"android.system.ErrnoException.getMessage () "," Converts the stashed function name and errno value to a human-readable string. <br /><br />"
"android.system.Os.open (2) () "," See open(2). <br /><br />"
"android.system.Os.stat (2) () "," See stat(2). <br /><br />"
"android.system.Os.recvfrom (2) () "," See recvfrom(2). <br /><br />"
"android.system.Os.statvfs (2) () "," See statvfs(2). <br /><br />"
"android.system.Os.if_indextoname (3) (int index) "," See if_indextoname(3). <br /><br />"
"android.system.Os.fstat (2) () "," See fstat(2). <br /><br />"
"android.system.Os.accept (2) () "," See accept(2). <br /><br />"
"android.system.Os.poll (2) () "," See poll(2). <br /><br />"
"android.system.Os.isatty (3) () "," See isatty(3). <br /><br />"
"android.system.Os.seteuid (2) (int euid) "," See seteuid(2). <br /><br />"
"android.system.Os.setenv (3) () "," See setenv(3). <br /><br />"
"android.system.Os.fdatasync (2) () "," See fdatasync(2). <br /><br />"
"android.system.Os.setgid (2) (int gid) "," See setgid(2). <br /><br />"
"android.system.Os.lseek (2) () "," See lseek(2). <br /><br />"
"android.system.Os.mlock (2) (long address, long byteCount) "," See mlock(2). <br /><br />"
"android.system.Os.readv (2) () "," See readv(2). <br /><br />"
"android.system.Os.unsetenv (3) () "," See unsetenv(3). <br /><br />"
"android.system.Os.socket (2) (int domain, int type, int protocol) "," See socket(2). <br /><br />"
"android.system.Os.pwrite (2) () "," See pwrite(2). <br /><br />"
"android.system.Os.execve (2) () "," See execve(2). <br /><br />"
"android.system.Os.tcsendbreak (3) () "," See tcsendbreak(3). <br /><br />"
"android.system.Os.fsync (2) () "," See fsync(2). <br /><br />"
"android.system.Os.getpeername (2) () "," See getpeername(2). <br /><br />"
"android.system.Os.strerror (2) (int errno) "," See strerror(2). <br /><br />"
"android.system.Os.ftruncate (2) () "," See ftruncate(2). <br /><br />"
"android.system.Os.prctl (2) (int option, long arg2, long arg3, long arg4, long arg5) "," See prctl(2). <br /><br />"
"android.system.Os.getenv (3) () "," See getenv(3). <br /><br />"
"android.system.Os.close (2) () "," See close(2). <br /><br />"
"android.system.Os.getgid (2) () "," See getgid(2). <br /><br />"
"android.system.Os.getegid (2) () "," See getegid(2). <br /><br />"
"android.system.Os.getuid (2) () "," See getuid(2). <br /><br />"
"android.system.Os.lchown (2) () "," See lchown(2). <br /><br />"
"android.system.Os.readlink (2) () "," See readlink(2). <br /><br />"
"android.system.Os.geteuid (2) () "," See geteuid(2). <br /><br />"
"android.system.Os.fstatvfs (2) () "," See fstatvfs(2). <br /><br />"
"android.system.Os.sendto (2) () "," See sendto(2). <br /><br />"
"android.system.Os.link (2) () "," See link(2). <br /><br />"
"android.system.Os.umask (2) (int mask) "," See umask(2). <br /><br />"
"android.system.Os.munlock (2) (long address, long byteCount) "," See munlock(2). <br /><br />"
"android.system.Os.shutdown (2) () "," See shutdown(2). <br /><br />"
"android.system.Os.setsid (2) () "," See setsid(2). <br /><br />"
"android.system.Os.munmap (2) (long address, long byteCount) "," See munmap(2). <br /><br />"
"android.system.Os.tcdrain (3) () "," See tcdrain(3). <br /><br />"
"android.system.Os.access (2) () "," See access(2). <br /><br />"
"android.system.Os.execv (2) () "," See execv(2). <br /><br />"
"android.system.Os.lstat (2) () "," See lstat(2). <br /><br />"
"android.system.Os.mkfifo (3) () "," See mkfifo(3). <br /><br />"
"android.system.Os.fchown (2) () "," See fchown(2). <br /><br />"
"android.system.Os.fchmod (2) () "," See fchmod(2). <br /><br />"
"android.system.Os.getpid (2) () "," See getpid(2). <br /><br />"
"android.system.Os.connect (2) () "," See connect(2). <br /><br />"
"android.system.Os.getppid (2) () "," See getppid(2). <br /><br />"
"android.system.Os.writev (2) () "," See writev(2). <br /><br />"
"android.system.Os.getsockname (2) () "," See getsockname(2). <br /><br />"
"android.system.Os.chmod (2) () "," See chmod(2). <br /><br />"
"android.system.Os.dup (2) () "," See dup(2). <br /><br />"
"android.system.Os.gettid (2) () "," See gettid(2). <br /><br />"
"android.system.Os.posix_fallocate (2) () "," See posix_fallocate(2). <br /><br />"
"android.system.Os.listen (2) () "," See listen(2). <br /><br />"
"android.system.Os.socketpair (2) () "," See socketpair(2). <br /><br />"
"android.system.Os.inet_pton (3) () "," See inet_pton(3). <br /><br />"
"android.system.Os.mmap (2) () "," See mmap(2). <br /><br />"
"android.system.Os.write (2) () "," See write(2). <br /><br />"
"android.system.Os.read (2) () "," See read(2). <br /><br />"
"android.system.Os.msync (2) (long address, long byteCount, int flags) "," See msync(2). <br /><br />"
"android.system.Os.strsignal (3) (int signal) "," See strsignal(3). <br /><br />"
"android.system.Os.remove (3) () "," See remove(3). <br /><br />"
"android.system.Os.kill (2) (int pid, int signal) "," See kill(2). <br /><br />"
"android.system.Os.bind (2) () "," See bind(2). <br /><br />"
"android.system.Os.uname (2) () "," See uname(2). <br /><br />"
"android.system.Os.sysconf (3) (int name) "," See sysconf(3). <br /><br />"
"android.system.Os.gai_strerror (3) (int error) "," See gai_strerror(3). <br /><br />"
"android.system.Os.mincore (2) (long address, long byteCount, byte[] vector) "," See mincore(2). <br /><br />"
"android.system.Os.pipe (2) () "," See pipe(2). <br /><br />"
"android.system.Os.setegid (2) (int egid) "," See setegid(2). <br /><br />"
"android.system.Os.environ (3) () "," See environ(3). <br /><br />"
"android.system.Os.mkdir (2) () "," See mkdir(2). <br /><br />"
"android.system.Os.waitpid (2) () "," See waitpid(2). <br /><br />"
"android.system.Os.setuid (2) (int uid) "," See setuid(2). <br /><br />"
"android.system.Os.pread (2) () "," See pread(2). <br /><br />"
"android.system.Os.dup2 (2) () "," See dup2(2). <br /><br />"
"android.system.Os.rename (2) () "," See rename(2). <br /><br />"
"android.system.Os.symlink (2) () "," See symlink(2). <br /><br />"
"android.system.Os.sendfile (2) () "," See sendfile(2). <br /><br />"
"android.system.Os.chown (2) () "," See chown(2). <br /><br />"
"android.system.OsConstants.errnoName (int errno) "," Returns the string name of an errno value. <br /><br />"
"android.system.OsConstants.S_ISCHR (int mode) "," Tests whether the given mode is a character device. <br /><br />"
"android.system.OsConstants.S_ISLNK (int mode) "," Tests whether the given mode is a symbolic link. <br /><br />"
"android.system.OsConstants.WSTOPSIG (int status) "," Returns the signal that cause the child to stop. <br /><br />"
"android.system.OsConstants.S_ISREG (int mode) "," Tests whether the given mode is a regular file. <br /><br />"
"android.system.OsConstants.WIFSIGNALED (int status) "," Tests whether the child was terminated by a signal. <br /><br />"
"android.system.OsConstants.S_ISDIR (int mode) "," Tests whether the given mode is a directory. <br /><br />"
"android.system.OsConstants.S_ISBLK (int mode) "," Tests whether the given mode is a block device. <br /><br />"
"android.system.OsConstants.S_ISFIFO (int mode) "," Tests whether the given mode is a FIFO. <br /><br />"
"android.system.OsConstants.WCOREDUMP (int status) "," Tests whether the child dumped core. <br /><br />"
"android.system.OsConstants.WTERMSIG (int status) "," Returns the signal that caused the child to exit. <br /><br />"
"android.system.OsConstants.WIFEXITED (int status) "," Tests whether the child exited normally. <br /><br />"
"android.system.OsConstants.gaiName (int error) "," Returns the string name of a getaddrinfo(3) error value. <br /><br />"
"android.system.OsConstants.WIFSTOPPED (int status) "," Tests whether the child was stopped (not terminated) by a signal. <br /><br />"
"android.system.OsConstants.WEXITSTATUS (int status) "," Extracts the exit status of a child. <br /><br />"
"android.system.OsConstants.S_ISSOCK (int mode) "," Tests whether the given mode is a socket. <br /><br />"
"android.system.StructPollfd.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.system.StructStat.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.system.StructStatVfs.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.system.StructUtsname.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.telecom.TelecomManager.String () "," Processes the specified dial string as an MMI code. <br /><br />"
"android.telecom.TelecomManager.cancelMissedCallsNotification () "," Removes the missed-call notification if one is present. <br /><br />"
"android.telecom.TelecomManager.showInCallScreen (boolean showDialpad) "," Brings the in-call screen to the foreground if there is an ongoing call. <br /><br />"
"android.telecom.TelecomManager.isInCall () "," Returns whether there is an ongoing phone call (can be in dialing, ringing, active or holding states). <br /><br />"
"android.telephony.cdma.CdmaCellLocation.getBaseStationLatitude () "," Latitude is a decimal number as specified in 3GPP2 C.S0005-A v6.0. <br /><br />"
"android.telephony.cdma.CdmaCellLocation.setCellLocationData (int baseStationId, int baseStationLatitude, int baseStationLongitude) "," Set the cell location data. <br /><br />"
"android.telephony.cdma.CdmaCellLocation.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.telephony.cdma.CdmaCellLocation.setCellLocationData (int baseStationId, int baseStationLatitude, int baseStationLongitude, int systemId, int networkId) "," Set the cell location data. <br /><br />"
"android.telephony.cdma.CdmaCellLocation.getBaseStationId () "," no description <br /><br />"
"android.telephony.cdma.CdmaCellLocation.getBaseStationLongitude () "," Longitude is a decimal number as specified in 3GPP2 C.S0005-A v6.0. <br /><br />"
"android.telephony.cdma.CdmaCellLocation.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.telephony.cdma.CdmaCellLocation.convertQuartSecToDecDegrees (int quartSec) "," Converts latitude or longitude from 0.25 seconds (as defined in the 3GPP2 C.S0005-A v6.0 standard) to decimal degrees <br /><br />"
"android.telephony.cdma.CdmaCellLocation.getNetworkId () "," no description <br /><br />"
"android.telephony.cdma.CdmaCellLocation.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.telephony.cdma.CdmaCellLocation.Bundle () "," Fill the cell location data into the intent notifier Bundle based on service state <br /><br />"
"android.telephony.cdma.CdmaCellLocation.getSystemId () "," no description <br /><br />"
"android.telephony.cdma.CdmaCellLocation.setStateInvalid () "," Invalidate this object. <br /><br />"
"android.telephony.CellIdentityCdma.getBasestationId () "," no description <br /><br />"
"android.telephony.CellIdentityCdma.Parcel () "," Implement the Parcelable interface <br /><br />"
"android.telephony.CellIdentityCdma.getNetworkId () "," no description <br /><br />"
"android.telephony.CellIdentityCdma.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.telephony.CellIdentityCdma.getLongitude () "," no description <br /><br />"
"android.telephony.CellIdentityCdma.getLatitude () "," no description <br /><br />"
"android.telephony.CellIdentityCdma.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.telephony.CellIdentityCdma.describeContents () "," Implement the Parcelable interface <br /><br />"
"android.telephony.CellIdentityCdma.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.telephony.CellIdentityCdma.getSystemId () "," no description <br /><br />"
"android.telephony.CellIdentityGsm.getCid () "," no description <br /><br />"
"android.telephony.CellIdentityGsm.getMcc () "," no description <br /><br />"
"android.telephony.CellIdentityGsm.getLac () "," no description <br /><br />"
"android.telephony.CellIdentityGsm.Parcel () "," Implement the Parcelable interface <br /><br />"
"android.telephony.CellIdentityGsm.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.telephony.CellIdentityGsm.getPsc () "," no description <br /><br />"
"android.telephony.CellIdentityGsm.getMnc () "," no description <br /><br />"
"android.telephony.CellIdentityGsm.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.telephony.CellIdentityGsm.describeContents () "," Implement the Parcelable interface <br /><br />"
"android.telephony.CellIdentityGsm.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.telephony.CellIdentityLte.getTac () "," no description <br /><br />"
"android.telephony.CellIdentityLte.getMcc () "," no description <br /><br />"
"android.telephony.CellIdentityLte.getCi () "," no description <br /><br />"
"android.telephony.CellIdentityLte.Parcel () "," Implement the Parcelable interface <br /><br />"
"android.telephony.CellIdentityLte.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.telephony.CellIdentityLte.getMnc () "," no description <br /><br />"
"android.telephony.CellIdentityLte.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.telephony.CellIdentityLte.getPci () "," no description <br /><br />"
"android.telephony.CellIdentityLte.describeContents () "," Implement the Parcelable interface <br /><br />"
"android.telephony.CellIdentityLte.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.telephony.CellIdentityWcdma.getCid () "," no description <br /><br />"
"android.telephony.CellIdentityWcdma.getMcc () "," no description <br /><br />"
"android.telephony.CellIdentityWcdma.getLac () "," no description <br /><br />"
"android.telephony.CellIdentityWcdma.Parcel () "," Implement the Parcelable interface <br /><br />"
"android.telephony.CellIdentityWcdma.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.telephony.CellIdentityWcdma.getPsc () "," no description <br /><br />"
"android.telephony.CellIdentityWcdma.getMnc () "," no description <br /><br />"
"android.telephony.CellIdentityWcdma.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.telephony.CellIdentityWcdma.describeContents () "," Implement the Parcelable interface <br /><br />"
"android.telephony.CellIdentityWcdma.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.telephony.CellInfo.getTimeStamp () "," Approximate time of this cell information in nanos since boot <br /><br />"
"android.telephony.CellInfo.Parcel () "," Implement the Parcelable interface <br /><br />"
"android.telephony.CellInfo.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.telephony.CellInfo.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.telephony.CellInfo.describeContents () "," Implement the Parcelable interface <br /><br />"
"android.telephony.CellInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.telephony.CellInfo.isRegistered () "," True if this cell is registered to the mobile network <br /><br />"
"android.telephony.CellInfoCdma.Parcel () "," Implement the Parcelable interface <br /><br />"
"android.telephony.CellInfoCdma.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.telephony.CellInfoCdma.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.telephony.CellInfoCdma.getCellSignalStrength () "," no description <br /><br />"
"android.telephony.CellInfoCdma.describeContents () "," Implement the Parcelable interface <br /><br />"
"android.telephony.CellInfoCdma.getCellIdentity () "," no description <br /><br />"
"android.telephony.CellInfoCdma.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.telephony.CellInfoGsm.Parcel () "," Implement the Parcelable interface <br /><br />"
"android.telephony.CellInfoGsm.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.telephony.CellInfoGsm.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.telephony.CellInfoGsm.getCellSignalStrength () "," no description <br /><br />"
"android.telephony.CellInfoGsm.describeContents () "," Implement the Parcelable interface <br /><br />"
"android.telephony.CellInfoGsm.getCellIdentity () "," no description <br /><br />"
"android.telephony.CellInfoGsm.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.telephony.CellInfoLte.Parcel () "," Implement the Parcelable interface <br /><br />"
"android.telephony.CellInfoLte.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.telephony.CellInfoLte.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.telephony.CellInfoLte.getCellSignalStrength () "," no description <br /><br />"
"android.telephony.CellInfoLte.describeContents () "," Implement the Parcelable interface <br /><br />"
"android.telephony.CellInfoLte.getCellIdentity () "," no description <br /><br />"
"android.telephony.CellInfoLte.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.telephony.CellInfoWcdma.Parcel () "," Implement the Parcelable interface <br /><br />"
"android.telephony.CellInfoWcdma.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.telephony.CellInfoWcdma.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.telephony.CellInfoWcdma.getCellSignalStrength () "," no description <br /><br />"
"android.telephony.CellInfoWcdma.describeContents () "," Implement the Parcelable interface <br /><br />"
"android.telephony.CellInfoWcdma.getCellIdentity () "," no description <br /><br />"
"android.telephony.CellInfoWcdma.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.telephony.CellLocation.getEmpty () "," Return a new CellLocation object representing an unknown location, or null for unknown/none phone radio types. <br /><br />"
"android.telephony.CellLocation.requestLocationUpdate () "," Request an update of the current location. <br /><br />"
"android.telephony.CellSignalStrength.getLevel () "," Get signal level as an int from 0..4 <br /><br />"
"android.telephony.CellSignalStrength.getDbm () "," Get the signal strength as dBm <br /><br />"
"android.telephony.CellSignalStrength.getAsuLevel () "," Get the signal level as an asu value between 0..31, 99 is unknown <br /><br />"
"android.telephony.CellSignalStrength.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.telephony.CellSignalStrength.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.telephony.CellSignalStrengthCdma.getDbm () "," Get the signal strength as dBm <br /><br />"
"android.telephony.CellSignalStrengthCdma.getEvdoEcio () "," Get the EVDO Ec/Io value in dB*10 <br /><br />"
"android.telephony.CellSignalStrengthCdma.Parcel () "," Implement the Parcelable interface <br /><br />"
"android.telephony.CellSignalStrengthCdma.getCdmaDbm () "," Get the CDMA RSSI value in dBm <br /><br />"
"android.telephony.CellSignalStrengthCdma.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.telephony.CellSignalStrengthCdma.describeContents () "," Implement the Parcelable interface <br /><br />"
"android.telephony.CellSignalStrengthCdma.getCdmaEcio () "," Get the CDMA Ec/Io value in dB*10 <br /><br />"
"android.telephony.CellSignalStrengthCdma.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.telephony.CellSignalStrengthCdma.getEvdoLevel () "," Get Evdo as level 0..4 <br /><br />"
"android.telephony.CellSignalStrengthCdma.getLevel () "," Get signal level as an int from 0..4 <br /><br />"
"android.telephony.CellSignalStrengthCdma.getEvdoSnr () "," Get the signal to noise ratio. <br /><br />"
"android.telephony.CellSignalStrengthCdma.getCdmaLevel () "," Get cdma as level 0..4 <br /><br />"
"android.telephony.CellSignalStrengthCdma.getAsuLevel () "," Get the signal level as an asu value between 0..97, 99 is unknown <br /><br />"
"android.telephony.CellSignalStrengthCdma.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.telephony.CellSignalStrengthCdma.getEvdoDbm () "," Get the EVDO RSSI value in dBm <br /><br />"
"android.telephony.CellSignalStrengthGsm.getLevel () "," Get signal level as an int from 0..4 <br /><br />"
"android.telephony.CellSignalStrengthGsm.getDbm () "," Get the signal strength as dBm <br /><br />"
"android.telephony.CellSignalStrengthGsm.getAsuLevel () "," Get the signal level as an asu value between 0..31, 99 is unknown Asu is calculated based on 3GPP RSRP. <br /><br />"
"android.telephony.CellSignalStrengthGsm.Parcel () "," Implement the Parcelable interface <br /><br />"
"android.telephony.CellSignalStrengthGsm.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.telephony.CellSignalStrengthGsm.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.telephony.CellSignalStrengthGsm.describeContents () "," Implement the Parcelable interface <br /><br />"
"android.telephony.CellSignalStrengthGsm.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.telephony.CellSignalStrengthLte.getTimingAdvance () "," Get the timing advance value for LTE. <br /><br />"
"android.telephony.CellSignalStrengthLte.getLevel () "," Get signal level as an int from 0..4 <br /><br />"
"android.telephony.CellSignalStrengthLte.getDbm () "," Get signal strength as dBm <br /><br />"
"android.telephony.CellSignalStrengthLte.getAsuLevel () "," Get the LTE signal level as an asu value between 0..97, 99 is unknown Asu is calculated based on 3GPP RSRP. <br /><br />"
"android.telephony.CellSignalStrengthLte.Parcel () "," Implement the Parcelable interface <br /><br />"
"android.telephony.CellSignalStrengthLte.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.telephony.CellSignalStrengthLte.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.telephony.CellSignalStrengthLte.describeContents () "," Implement the Parcelable interface <br /><br />"
"android.telephony.CellSignalStrengthLte.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.telephony.CellSignalStrengthWcdma.getLevel () "," Get signal level as an int from 0..4 <br /><br />"
"android.telephony.CellSignalStrengthWcdma.getDbm () "," Get the signal strength as dBm <br /><br />"
"android.telephony.CellSignalStrengthWcdma.getAsuLevel () "," Get the signal level as an asu value between 0..31, 99 is unknown Asu is calculated based on 3GPP RSRP. <br /><br />"
"android.telephony.CellSignalStrengthWcdma.Parcel () "," Implement the Parcelable interface <br /><br />"
"android.telephony.CellSignalStrengthWcdma.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.telephony.CellSignalStrengthWcdma.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.telephony.CellSignalStrengthWcdma.describeContents () "," Implement the Parcelable interface <br /><br />"
"android.telephony.CellSignalStrengthWcdma.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.telephony.gsm.GsmCellLocation.getCid () "," no description <br /><br />"
"android.telephony.gsm.GsmCellLocation.getLac () "," no description <br /><br />"
"android.telephony.gsm.GsmCellLocation.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.telephony.gsm.GsmCellLocation.getPsc () "," On a UMTS network, returns the primary scrambling code of the serving cell. <br /><br />"
"android.telephony.gsm.GsmCellLocation.Bundle () "," Set intent notifier Bundle based on service state <br /><br />"
"android.telephony.gsm.GsmCellLocation.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.telephony.gsm.GsmCellLocation.setLacAndCid (int lac, int cid) "," Set the location area code and the cell id. <br /><br />"
"android.telephony.gsm.GsmCellLocation.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.telephony.gsm.GsmCellLocation.setStateInvalid () "," Invalidate this object. <br /><br />"
"android.telephony.gsm.SmsManager.String () "," This method was deprecated in API level 4. Use android.telephony.SmsManager. <br /><br />"
"android.telephony.gsm.SmsManager.getDefault () "," This method was deprecated in API level 4. Use android.telephony.SmsManager. <br /><br />"
"android.telephony.gsm.SmsManager.PendingIntent () "," This method was deprecated in API level 4. Use android.telephony.SmsManager. <br /><br />"
"android.telephony.gsm.SmsMessage.isMwiDontStore () "," This method was deprecated in API level 4. Use android.telephony.SmsMessage. <br /><br />"
"android.telephony.gsm.SmsMessage.isCphsMwiMessage () "," This method was deprecated in API level 4. Use android.telephony.SmsMessage. <br /><br />"
"android.telephony.gsm.SmsMessage.isStatusReportMessage () "," This method was deprecated in API level 4. Use android.telephony.SmsMessage. <br /><br />"
"android.telephony.gsm.SmsMessage.getMessageBody () "," This method was deprecated in API level 4. Use android.telephony.SmsMessage. <br /><br />"
"android.telephony.gsm.SmsMessage.getPseudoSubject () "," This method was deprecated in API level 4. Use android.telephony.SmsMessage. <br /><br />"
"android.telephony.gsm.SmsMessage.getUserData () "," This method was deprecated in API level 4. Use android.telephony.SmsMessage. <br /><br />"
"android.telephony.gsm.SmsMessage.isEmail () "," This method was deprecated in API level 4. Use android.telephony.SmsMessage. <br /><br />"
"android.telephony.gsm.SmsMessage.getEmailFrom () "," This method was deprecated in API level 4. Use android.telephony.SmsMessage. <br /><br />"
"android.telephony.gsm.SmsMessage.getEmailBody () "," This method was deprecated in API level 4. Use android.telephony.SmsMessage. <br /><br />"
"android.telephony.gsm.SmsMessage.getTimestampMillis () "," This method was deprecated in API level 4. Use android.telephony.SmsMessage. <br /><br />"
"android.telephony.gsm.SmsMessage.String () "," This method was deprecated in API level 4. Use android.telephony.SmsMessage. <br /><br />"
"android.telephony.gsm.SmsMessage.isReplyPathPresent () "," This method was deprecated in API level 4. Use android.telephony.SmsMessage. <br /><br />"
"android.telephony.gsm.SmsMessage.getPdu () "," This method was deprecated in API level 4. Use android.telephony.SmsMessage. <br /><br />"
"android.telephony.gsm.SmsMessage.getMessageClass () "," This method was deprecated in API level 4. Use android.telephony.SmsMessage. <br /><br />"
"android.telephony.gsm.SmsMessage.createFromPdu (byte[] pdu) "," This method was deprecated in API level 4. Use android.telephony.SmsMessage. <br /><br />"
"android.telephony.gsm.SmsMessage.getOriginatingAddress () "," This method was deprecated in API level 4. Use android.telephony.SmsMessage. <br /><br />"
"android.telephony.gsm.SmsMessage.CharSequence () "," This method was deprecated in API level 4. Use android.telephony.SmsMessage. <br /><br />"
"android.telephony.gsm.SmsMessage.isMWIClearMessage () "," This method was deprecated in API level 4. Use android.telephony.SmsMessage. <br /><br />"
"android.telephony.gsm.SmsMessage.getDisplayMessageBody () "," This method was deprecated in API level 4. Use android.telephony.SmsMessage. <br /><br />"
"android.telephony.gsm.SmsMessage.getServiceCenterAddress () "," This method was deprecated in API level 4. Use android.telephony.SmsMessage. <br /><br />"
"android.telephony.gsm.SmsMessage.getIndexOnSim () "," This method was deprecated in API level 4. Use android.telephony.SmsMessage and getIndexOnIcc instead. <br /><br />"
"android.telephony.gsm.SmsMessage.getStatusOnSim () "," This method was deprecated in API level 4. Use android.telephony.SmsMessage and getStatusOnIcc instead. <br /><br />"
"android.telephony.gsm.SmsMessage.getDisplayOriginatingAddress () "," This method was deprecated in API level 4. Use android.telephony.SmsMessage. <br /><br />"
"android.telephony.gsm.SmsMessage.getProtocolIdentifier () "," This method was deprecated in API level 4. Use android.telephony.SmsMessage. <br /><br />"
"android.telephony.gsm.SmsMessage.getStatus () "," This method was deprecated in API level 4. Use android.telephony.SmsMessage. <br /><br />"
"android.telephony.gsm.SmsMessage.isMWISetMessage () "," This method was deprecated in API level 4. Use android.telephony.SmsMessage. <br /><br />"
"android.telephony.gsm.SmsMessage.isReplace () "," This method was deprecated in API level 4. Use android.telephony.SmsMessage. <br /><br />"
"android.telephony.gsm.SmsMessage.SubmitPdu.toString () "," This method is deprecated. Use android.telephony.SmsMessage. <br /><br />"
"android.telephony.IccOpenLogicalChannelResponse.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.telephony.IccOpenLogicalChannelResponse.getStatus () "," no description <br /><br />"
"android.telephony.IccOpenLogicalChannelResponse.getChannel () "," no description <br /><br />"
"android.telephony.IccOpenLogicalChannelResponse.getSelectResponse () "," no description <br /><br />"
"android.telephony.IccOpenLogicalChannelResponse.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.telephony.IccOpenLogicalChannelResponse.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.telephony.NeighboringCellInfo.getCid () "," no description <br /><br />"
"android.telephony.NeighboringCellInfo.getRssi () "," no description <br /><br />"
"android.telephony.NeighboringCellInfo.getNetworkType () "," no description <br /><br />"
"android.telephony.NeighboringCellInfo.getLac () "," no description <br /><br />"
"android.telephony.NeighboringCellInfo.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.telephony.NeighboringCellInfo.NeighboringCellInfo (int, String, int) (int rssi) "," This method was deprecated in API level 5. initial rssi value passed as parameter to constructor NeighboringCellInfo(int, String, int) <br /><br />"
"android.telephony.NeighboringCellInfo.getPsc () "," no description <br /><br />"
"android.telephony.NeighboringCellInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.telephony.NeighboringCellInfo.NeighboringCellInfo (int, String, int) (int cid) "," This method was deprecated in API level 5. cid value passed as in location parameter passed to constructor NeighboringCellInfo(int, String, int) <br /><br />"
"android.telephony.NeighboringCellInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.telephony.PhoneNumberFormattingTextWatcher.Editable () "," This method is called to notify you that, somewhere within s, the text has been changed. <br /><br />"
"android.telephony.PhoneNumberFormattingTextWatcher.CharSequence () "," This method is called to notify you that, within s, the count characters beginning at start have just replaced old text that had length before. <br /><br />"
"android.telephony.PhoneNumberUtils.Editable () "," This method was deprecated in API level 21. Use link #formatNumber(String phoneNumber, String defaultCountryIso) instead <br /><br />"
"android.telephony.PhoneNumberUtils.Context () "," Extracts the phone number from an Intent. <br /><br />"
"android.telephony.PhoneNumberUtils.String () "," Returns the TOA for the given dial string Basically, returns TOA_International if there's a + prefix <br /><br />"
"android.telephony.PhoneNumberUtils.isNonSeparator (char c) "," True if c is ISO-LATIN characters 0-9, *, # , +, WILD, WAIT, PAUSE <br /><br />"
"android.telephony.PhoneNumberUtils.is12Key (char c) "," True if c is ISO-LATIN characters 0-9, *, # <br /><br />"
"android.telephony.PhoneNumberUtils.isDialable (char c) "," True if c is ISO-LATIN characters 0-9, *, # , +, WILD <br /><br />"
"android.telephony.PhoneNumberUtils.calledPartyBCDToString (byte[] bytes, int offset, int length) "," 3GPP TS 24.008 10.5.4.7 Called Party BCD Number See Also TS 51.011 10.5.1 'dialing number/ssc string' and TS 11.11 '10.3.1 EF adn (Abbreviated dialing numbers)' <br /><br />"
"android.telephony.PhoneNumberUtils.Locale () "," This method was deprecated in API level 21. Use link #formatNumber(String phoneNumber, String defaultCountryIso) instead <br /><br />"
"android.telephony.PhoneNumberUtils.isISODigit (char c) "," True if c is ISO-LATIN characters 0-9 <br /><br />"
"android.telephony.PhoneNumberUtils.isReallyDialable (char c) "," True if c is ISO-LATIN characters 0-9, *, # , + (no WILD) <br /><br />"
"android.telephony.PhoneNumberUtils.calledPartyBCDFragmentToString (byte[] bytes, int offset, int length) "," Like calledPartyBCDToString, but field does not start with a TOA byte. <br /><br />"
"android.telephony.PhoneNumberUtils.networkPortionToCalledPartyBCD (String) () "," Same as networkPortionToCalledPartyBCD(String), but includes a one-byte length prefix. <br /><br />"
"android.telephony.PhoneNumberUtils.isStartsPostDial (char c) "," This any anything to the right of this char is part of the post-dial string (eg this is PAUSE or WAIT) <br /><br />"
"android.telephony.PhoneStateListener.CellLocation () "," Callback invoked when device cell location changes. <br /><br />"
"android.telephony.PhoneStateListener.String () "," Callback invoked when device call state changes. <br /><br />"
"android.telephony.PhoneStateListener.SignalStrength () "," Callback invoked when network signal strengths changes. <br /><br />"
"android.telephony.PhoneStateListener.CellInfo () "," Callback invoked when a observed cell info has changed, or new cells have been added or removed. <br /><br />"
"android.telephony.PhoneStateListener.onDataActivity (int direction) "," Callback invoked when data activity state changes. <br /><br />"
"android.telephony.PhoneStateListener.ServiceState () "," Callback invoked when device service state changes. <br /><br />"
"android.telephony.PhoneStateListener.onDataConnectionStateChanged (int state) "," Callback invoked when connection state changes. <br /><br />"
"android.telephony.PhoneStateListener.onCallForwardingIndicatorChanged (boolean cfi) "," Callback invoked when the call-forwarding indicator changes. <br /><br />"
"android.telephony.PhoneStateListener.onSignalStrengthsChanged (SignalStrength) (int asu) "," This method was deprecated in API level 5. Use onSignalStrengthsChanged(SignalStrength) <br /><br />"
"android.telephony.PhoneStateListener.onMessageWaitingIndicatorChanged (boolean mwi) "," Callback invoked when the message-waiting indicator changes. <br /><br />"
"android.telephony.PhoneStateListener.onDataConnectionStateChanged (int state, int networkType) "," same as above, but with the network type. <br /><br />"
"android.telephony.ServiceState.getOperatorNumeric () "," Get current registered operator numeric id. <br /><br />"
"android.telephony.ServiceState.String () "," no description <br /><br />"
"android.telephony.ServiceState.getOperatorAlphaShort () "," Get current registered operator name in short alphanumeric format. <br /><br />"
"android.telephony.ServiceState.getState () "," Get current voice service state <br /><br />"
"android.telephony.ServiceState.getOperatorAlphaLong () "," Get current registered operator name in long alphanumeric format. <br /><br />"
"android.telephony.ServiceState.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.telephony.ServiceState.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.telephony.ServiceState.setIsManualSelection (boolean isManual) "," no description <br /><br />"
"android.telephony.ServiceState.setStateOff () "," no description <br /><br />"
"android.telephony.ServiceState.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.telephony.ServiceState.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.telephony.ServiceState.getRoaming () "," Get current roaming indicator of phone (note: not just decoding from TS 27.007 7.2) <br /><br />"
"android.telephony.ServiceState.setRoaming (boolean roaming) "," no description <br /><br />"
"android.telephony.ServiceState.setStateOutOfService () "," no description <br /><br />"
"android.telephony.ServiceState.setState (int state) "," no description <br /><br />"
"android.telephony.ServiceState.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.telephony.ServiceState.getIsManualSelection () "," Get current network selection mode. <br /><br />"
"android.telephony.SignalStrength.getGsmSignalStrength () "," Get the GSM Signal Strength, valid values are (0-31, 99) as defined in TS 27.007 8.5 <br /><br />"
"android.telephony.SignalStrength.isGsm () "," no description <br /><br />"
"android.telephony.SignalStrength.getEvdoSnr () "," Get the signal to noise ratio. <br /><br />"
"android.telephony.SignalStrength.getEvdoEcio () "," Get the EVDO Ec/Io value in dB*10 <br /><br />"
"android.telephony.SignalStrength.describeContents () () "," describeContents() <br /><br />"
"android.telephony.SignalStrength.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.telephony.SignalStrength.getCdmaDbm () "," Get the CDMA RSSI value in dBm <br /><br />"
"android.telephony.SignalStrength.writeToParcel (Parcel, int) () "," writeToParcel(Parcel, int) <br /><br />"
"android.telephony.SignalStrength.getEvdoDbm () "," Get the EVDO RSSI value in dBm <br /><br />"
"android.telephony.SignalStrength.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.telephony.SignalStrength.getGsmBitErrorRate () "," Get the GSM bit error rate (0-7, 99) as defined in TS 27.007 8.5 <br /><br />"
"android.telephony.SignalStrength.getCdmaEcio () "," Get the CDMA Ec/Io value in dB*10 <br /><br />"
"android.telephony.SignalStrength.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.telephony.SmsManager.String () "," Divide a message text into several fragments, none bigger than the maximum SMS message size. <br /><br />"
"android.telephony.SmsManager.getDefaultSmsSubscriptionId () "," Get default sms subscription id <br /><br />"
"android.telephony.SmsManager.getDefault () "," Get the SmsManager associated with the default subscription id. <br /><br />"
"android.telephony.SmsManager.getSmsManagerForSubscriptionId (int subId) "," Get the the instance of the SmsManager associated with a particular subscription id <br /><br />"
"android.telephony.SmsManager.getCarrierConfigValues () "," Get carrier-dependent configuration values. <br /><br />"
"android.telephony.SmsManager.getSubscriptionId () "," Get the associated subscription id. <br /><br />"
"android.telephony.SmsManager.PendingIntent () "," Send a text based SMS. <br /><br />"
"android.telephony.SmsMessage.isMwiDontStore () "," returns true if this message is a 'Message Waiting Indication Group: Discard Message' notification and should not be stored. <br /><br />"
"android.telephony.SmsMessage.isCphsMwiMessage () "," Returns true for CPHS MWI toggle message. <br /><br />"
"android.telephony.SmsMessage.isStatusReportMessage () "," Return true iff the message is a SMS-STATUS-REPORT message. <br /><br />"
"android.telephony.SmsMessage.getMessageBody () "," Returns the message body as a String, if it exists and is text based. <br /><br />"
"android.telephony.SmsMessage.getPseudoSubject () "," Unofficial convention of a subject line enclosed in parens empty string if not present <br /><br />"
"android.telephony.SmsMessage.getUserData () "," returns the user data section minus the user data header if one was present. <br /><br />"
"android.telephony.SmsMessage.isEmail () "," Returns true if message is an email. <br /><br />"
"android.telephony.SmsMessage.getEmailFrom () "," no description <br /><br />"
"android.telephony.SmsMessage.getEmailBody () "," no description <br /><br />"
"android.telephony.SmsMessage.getTimestampMillis () "," Returns the service centre timestamp in currentTimeMillis() format <br /><br />"
"android.telephony.SmsMessage.String () "," Get the TP-Layer-Length for the given SMS-SUBMIT PDU Basically, the length in bytes (not hex chars) less the SMSC header FIXME: This method is only used by a CTS test case that isn't run on CDMA devices. <br /><br />"
"android.telephony.SmsMessage.isReplyPathPresent () "," Returns true iff the TP-Reply-Path bit is set in this message. <br /><br />"
"android.telephony.SmsMessage.getPdu () "," Returns the raw PDU for the message. <br /><br />"
"android.telephony.SmsMessage.getMessageClass () "," Returns the class of this message. <br /><br />"
"android.telephony.SmsMessage.getIndexOnIcc () "," Returns the record index of the message on the ICC (1-based index). <br /><br />"
"android.telephony.SmsMessage.createFromPdu (byte[] pdu) "," Create an SmsMessage from a raw PDU. <br /><br />"
"android.telephony.SmsMessage.getOriginatingAddress () "," Returns the originating address (sender) of this SMS message in String form or null if unavailable <br /><br />"
"android.telephony.SmsMessage.CharSequence () "," Calculates the number of SMS's required to encode the message body and the number of characters remaining until the next message. <br /><br />"
"android.telephony.SmsMessage.isMWIClearMessage () "," returns true if this message is a CPHS voicemail / message waiting indicator (MWI) clear message <br /><br />"
"android.telephony.SmsMessage.getDisplayMessageBody () "," Returns the message body, or email message body if this message was from an email gateway. <br /><br />"
"android.telephony.SmsMessage.getServiceCenterAddress () "," Returns the address of the SMS service center that relayed this message or null if there is none. <br /><br />"
"android.telephony.SmsMessage.getIndexOnSim () "," This method was deprecated in API level 4. Use getIndexOnIcc instead. <br /><br />"
"android.telephony.SmsMessage.getStatusOnIcc () "," Returns the status of the message on the ICC (read, unread, sent, unsent). <br /><br />"
"android.telephony.SmsMessage.getStatusOnSim () "," This method was deprecated in API level 4. Use getStatusOnIcc instead. <br /><br />"
"android.telephony.SmsMessage.getDisplayOriginatingAddress () "," Returns the originating address, or email from address if this message was from an email gateway. <br /><br />"
"android.telephony.SmsMessage.getProtocolIdentifier () "," Get protocol identifier. <br /><br />"
"android.telephony.SmsMessage.getStatus () "," GSM: For an SMS-STATUS-REPORT message, this returns the status field from the status report. <br /><br />"
"android.telephony.SmsMessage.isMWISetMessage () "," returns true if this message is a CPHS voicemail / message waiting indicator (MWI) set message <br /><br />"
"android.telephony.SmsMessage.isReplace () "," See TS 23.040 9.2.3.9 returns true if this is a 'replace short message' SMS <br /><br />"
"android.telephony.SmsMessage.SubmitPdu.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.telephony.SubscriptionInfo.getIccId () "," no description <br /><br />"
"android.telephony.SubscriptionInfo.Context () "," Creates and returns an icon Bitmap to represent this SubscriptionInfo in a user interface. <br /><br />"
"android.telephony.SubscriptionInfo.getSimSlotIndex () "," no description <br /><br />"
"android.telephony.SubscriptionInfo.getMcc () "," no description <br /><br />"
"android.telephony.SubscriptionInfo.getDisplayName () "," no description <br /><br />"
"android.telephony.SubscriptionInfo.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.telephony.SubscriptionInfo.getNumber () "," no description <br /><br />"
"android.telephony.SubscriptionInfo.getMnc () "," no description <br /><br />"
"android.telephony.SubscriptionInfo.getCarrierName () "," no description <br /><br />"
"android.telephony.SubscriptionInfo.getSubscriptionId () "," no description <br /><br />"
"android.telephony.SubscriptionInfo.getCountryIso () "," no description <br /><br />"
"android.telephony.SubscriptionInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.telephony.SubscriptionInfo.getIconTint () "," A highlight color to use in displaying information about this PhoneAccount. <br /><br />"
"android.telephony.SubscriptionInfo.getDataRoaming () "," no description <br /><br />"
"android.telephony.SubscriptionInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.telephony.SubscriptionManager.Context () "," Get an instance of the SubscriptionManager from the Context. <br /><br />"
"android.telephony.SubscriptionManager.isNetworkRoaming (int subId) "," Returns true if the device is considered roaming on the current network for a subscription. <br /><br />"
"android.telephony.SubscriptionManager.getActiveSubscriptionInfoList () "," Get the SubscriptionInfo(s) of the currently inserted SIM(s). <br /><br />"
"android.telephony.SubscriptionManager.getActiveSubscriptionInfoCountMax () "," no description <br /><br />"
"android.telephony.SubscriptionManager.getActiveSubscriptionInfoCount () "," no description <br /><br />"
"android.telephony.SubscriptionManager.getActiveSubscriptionInfoForSimSlotIndex (int slotIdx) "," Get the active SubscriptionInfo associated with the slotIdx <br /><br />"
"android.telephony.SubscriptionManager.SubscriptionInfo () "," Register for changes to the list of active SubscriptionInfo records or to the individual records themselves. <br /><br />"
"android.telephony.SubscriptionManager.SubscriptionManager.OnSubscriptionsChangedListener () "," Unregister the SubscriptionManager.OnSubscriptionsChangedListener. <br /><br />"
"android.telephony.SubscriptionManager.getActiveSubscriptionInfo (int subId) "," Get the active SubscriptionInfo with the subId key <br /><br />"
"android.telephony.SubscriptionManager.OnSubscriptionsChangedListener.onSubscriptionsChanged () "," Callback invoked when there is any change to any SubscriptionInfo. <br /><br />"
"android.telephony.TelephonyManager.getSimState () "," Returns a constant indicating the state of the default SIM card. <br /><br />"
"android.telephony.TelephonyManager.getSubscriberId () "," Returns the unique subscriber ID, for example, the IMSI for a GSM phone. <br /><br />"
"android.telephony.TelephonyManager.isVoiceCapable () "," no description <br /><br />"
"android.telephony.TelephonyManager.isSmsCapable () "," no description <br /><br />"
"android.telephony.TelephonyManager.getMmsUserAgent () "," Returns the MMS user agent. <br /><br />"
"android.telephony.TelephonyManager.getDataActivity () "," Returns a constant indicating the type of activity on a data connection (cellular). <br /><br />"
"android.telephony.TelephonyManager.getVoiceMailAlphaTag () "," Retrieves the alphabetic identifier associated with the voice mail number. <br /><br />"
"android.telephony.TelephonyManager.PhoneStateListener () "," Registers a listener object to receive notification of changes in specified telephony states. <br /><br />"
"android.telephony.TelephonyManager.getLine1Number () "," Returns the phone number string for line 1, for example, the MSISDN for a GSM phone. <br /><br />"
"android.telephony.TelephonyManager.isNetworkRoaming () "," Returns true if the device is considered roaming on the current network, for GSM purposes. <br /><br />"
"android.telephony.TelephonyManager.getNetworkCountryIso () "," Returns the ISO country code equivalent of the current registered operator's MCC (Mobile Country Code). <br /><br />"
"android.telephony.TelephonyManager.getSimCountryIso () "," Returns the ISO country code equivalent for the SIM provider's country code. <br /><br />"
"android.telephony.TelephonyManager.getNetworkOperator () "," Returns the numeric name (MCC+MNC) of current registered operator. <br /><br />"
"android.telephony.TelephonyManager.getPhoneType () "," Returns a constant indicating the device phone type. <br /><br />"
"android.telephony.TelephonyManager.getCellLocation () "," Returns the current location of the device. <br /><br />"
"android.telephony.TelephonyManager.hasCarrierPrivileges () "," Has the calling application been granted carrier privileges by the carrier. <br /><br />"
"android.telephony.TelephonyManager.getDeviceId () "," Returns the unique device ID, for example, the IMEI for GSM and the MEID or ESN for CDMA phones. <br /><br />"
"android.telephony.TelephonyManager.String () "," Sets the voice mail number. <br /><br />"
"android.telephony.TelephonyManager.getDeviceSoftwareVersion () "," Returns the software version number for the device, for example, the IMEI/SV for GSM phones. <br /><br />"
"android.telephony.TelephonyManager.getSimOperatorName () "," Returns the Service Provider Name (SPN). <br /><br />"
"android.telephony.TelephonyManager.getNetworkType () "," no description <br /><br />"
"android.telephony.TelephonyManager.getSimSerialNumber () "," Returns the serial number of the SIM, if applicable. <br /><br />"
"android.telephony.TelephonyManager.getDataState () "," Returns a constant indicating the current data connection state (cellular). <br /><br />"
"android.telephony.TelephonyManager.getGroupIdLevel1 () "," Returns the Group Identifier Level1 for a GSM phone. <br /><br />"
"android.telephony.TelephonyManager.getAllCellInfo () "," Returns all observed cell information from all radios on the device including the primary and neighboring cells. <br /><br />"
"android.telephony.TelephonyManager.getVoiceMailNumber () "," Returns the voice mail number. <br /><br />"
"android.telephony.TelephonyManager.getCallState () "," Returns a constant indicating the call state (cellular) on the device. <br /><br />"
"android.telephony.TelephonyManager.iccCloseLogicalChannel (int channel) "," Closes a previously opened logical channel to the ICC card. <br /><br />"
"android.telephony.TelephonyManager.getNetworkOperatorName () "," Returns the alphabetic name of current registered operator. <br /><br />"
"android.telephony.TelephonyManager.getSimOperator () "," Returns the MCC+MNC (mobile country code + mobile network code) of the provider of the SIM. <br /><br />"
"android.telephony.TelephonyManager.getMmsUAProfUrl () "," Returns the MMS user agent profile URL. <br /><br />"
"android.telephony.TelephonyManager.setPreferredNetworkTypeToGlobal () "," Set the preferred network type to global mode which includes LTE, CDMA, EvDo and GSM/WCDMA. <br /><br />"
"android.telephony.TelephonyManager.hasIccCard () "," no description <br /><br />"
"android.telephony.TelephonyManager.getNeighboringCellInfo () "," Returns the neighboring cell information of the device. <br /><br />"
"android.test.ActivityInstrumentationTestCase&lt;T&nbsp;extends&nbsp;android.app.Activity&gt;.getActivity () "," no description <br /><br />"
"android.test.ActivityInstrumentationTestCase&lt;T&nbsp;extends&nbsp;android.app.Activity&gt;.testActivityTestCaseSetUpProperly () "," no description <br /><br />"
"android.test.ActivityInstrumentationTestCase2&lt;T&nbsp;extends&nbsp;android.app.Activity&gt;.getActivity () () "," Call this method before the first call to getActivity() to inject a customized Intent into the Activity under test. <br /><br />"
"android.test.ActivityInstrumentationTestCase2&lt;T&nbsp;extends&nbsp;android.app.Activity&gt;.getActivity () (boolean initialTouchMode) "," Call this method before the first call to getActivity() to set the initial touch mode for the Activity under test. <br /><br />"
"android.test.ActivityInstrumentationTestCase2&lt;T&nbsp;extends&nbsp;android.app.Activity&gt;.getActivity () "," Get the Activity under test, starting it if necessary. <br /><br />"
"android.test.ActivityUnitTestCase&lt;T&nbsp;extends&nbsp;android.app.Activity&gt;.startActivityForResult (Intent, int) () "," This method will return the launch request code if your Activity under test calls startActivityForResult(Intent, int). <br /><br />"
"android.test.ActivityUnitTestCase&lt;T&nbsp;extends&nbsp;android.app.Activity&gt;.Context () "," If you wish to inject a Mock, Isolated, or otherwise altered context, you can do so here. <br /><br />"
"android.test.ActivityUnitTestCase&lt;T&nbsp;extends&nbsp;android.app.Activity&gt;.getActivity () "," no description <br /><br />"
"android.test.ActivityUnitTestCase&lt;T&nbsp;extends&nbsp;android.app.Activity&gt;.Application () "," Set the application for use during the test. <br /><br />"
"android.test.ActivityUnitTestCase&lt;T&nbsp;extends&nbsp;android.app.Activity&gt;.finishActivity (int) () "," This method will notify you if the Activity under test called finish(), finishFromChild(Activity), or finishActivity(int). <br /><br />"
"android.test.ActivityUnitTestCase&lt;T&nbsp;extends&nbsp;android.app.Activity&gt;.setRequestedOrientation (int) () "," This method will return the value if your Activity under test calls setRequestedOrientation(int). <br /><br />"
"android.test.AndroidTestCase.Context () "," no description <br /><br />"
"android.test.AndroidTestCase.SecurityException () "," Asserts that writing to the content uri requires a particular permission by inserting into the uri and ensuring a SecurityException is thrown mentioning the particular permission. <br /><br />"
"android.test.AndroidTestCase.testAndroidTestCaseSetupProperly () "," no description <br /><br />"
"android.test.AndroidTestCase.getContext () "," no description <br /><br />"
"android.test.AndroidTestRunner.TestListener () "," no description <br /><br />"
"android.test.AndroidTestRunner.String () "," no description <br /><br />"
"android.test.AndroidTestRunner.Context () "," no description <br /><br />"
"android.test.AndroidTestRunner.runTest () "," no description <br /><br />"
"android.test.AndroidTestRunner.Throwable () "," no description <br /><br />"
"android.test.AndroidTestRunner.Instrumentation () "," no description <br /><br />"
"android.test.AndroidTestRunner.TestResult () "," no description <br /><br />"
"android.test.AndroidTestRunner.getTestCases () "," no description <br /><br />"
"android.test.AndroidTestRunner.getTestClassName () "," no description <br /><br />"
"android.test.AndroidTestRunner.clearTestListeners () "," no description <br /><br />"
"android.test.AndroidTestRunner.setInstrumentation (android.app.Instrumentation) () "," This method was deprecated in API level 5. Incorrect spelling, use setInstrumentation(android.app.Instrumentation) instead. <br /><br />"
"android.test.AndroidTestRunner.Test () "," no description <br /><br />"
"android.test.AndroidTestRunner.getTestResult () "," no description <br /><br />"
"android.test.ApplicationTestCase&lt;T&nbsp;extends&nbsp;android.app.Application&gt;.testApplicationTestCaseSetUpProperly () "," This test simply confirms that the Application class can be instantiated properly. <br /><br />"
"android.test.ApplicationTestCase&lt;T&nbsp;extends&nbsp;android.app.Application&gt;.getApplication () "," no description <br /><br />"
"android.test.ApplicationTestCase&lt;T&nbsp;extends&nbsp;android.app.Application&gt;.getSystemContext () "," Return a real (not mocked or instrumented) system Context that can be used when generating Mock or other Context objects for your Application under test. <br /><br />"
"android.test.ComparisonFailure.getMessage () "," Returns the detail message which was provided when this Throwable was created. <br /><br />"
"android.test.InstrumentationTestCase.String () "," Sends a series of key events through instrumentation and waits for idle. <br /><br />"
"android.test.InstrumentationTestCase.sendKeys (int... keys) "," Sends a series of key events through instrumentation and waits for idle. <br /><br />"
"android.test.InstrumentationTestCase.getInstrumentation () "," Inheritors can access the instrumentation using this. <br /><br />"
"android.test.InstrumentationTestCase.sendRepeatedKeys (int... keys) "," Sends a series of key events through instrumentation and waits for idle. <br /><br />"
"android.test.InstrumentationTestCase.Instrumentation () "," Injects instrumentation into this test case. <br /><br />"
"android.test.InstrumentationTestCase.Bundle () "," Utility method for launching an activity. <br /><br />"
"android.test.InstrumentationTestCase.Intent () "," Utility method for launching an activity with a specific Intent. <br /><br />"
"android.test.InstrumentationTestCase.Runnable () "," Helper for running portions of a test on the UI thread. <br /><br />"
"android.test.InstrumentationTestCase.injectInstrumentation (android.app.Instrumentation) () "," This method was deprecated in API level 5. Incorrect spelling, use injectInstrumentation(android.app.Instrumentation) instead. <br /><br />"
"android.test.InstrumentationTestRunner.getTestSuite () "," no description <br /><br />"
"android.test.InstrumentationTestRunner.getArguments () "," Get the arguments passed to this instrumentation. <br /><br />"
"android.test.InstrumentationTestRunner.getAllTests () "," Override this to define all of the tests to run in your package. <br /><br />"
"android.test.InstrumentationTestRunner.Bundle () "," Called when the instrumentation is starting, before any application code has been loaded. <br /><br />"
"android.test.InstrumentationTestRunner.getLoader () "," Override this to provide access to the class loader of your package. <br /><br />"
"android.test.InstrumentationTestRunner.onStart () "," Method where the instrumentation thread enters execution. <br /><br />"
"android.test.InstrumentationTestSuite.TestResult () "," no description <br /><br />"
"android.test.InstrumentationTestSuite.Class () "," Adds the tests from the given class to the suite <br /><br />"
"android.test.IsolatedContext.Uri () "," Determine whether a particular process and user ID has been granted permission to access a specific URI. <br /><br />"
"android.test.IsolatedContext.String () "," Broadcast the given intent to all interested BroadcastReceivers, delivering them one at a time to allow more preferred receivers to consume the broadcast before it is delivered to less preferred receivers. <br /><br />"
"android.test.IsolatedContext.IntentFilter () "," Register a BroadcastReceiver to be run in the main activity thread. <br /><br />"
"android.test.IsolatedContext.getContentResolver () "," Return a ContentResolver instance for your application's package. <br /><br />"
"android.test.IsolatedContext.ServiceConnection () "," Connect to an application service, creating it if needed. <br /><br />"
"android.test.IsolatedContext.BroadcastReceiver () "," Unregister a previously registered BroadcastReceiver. <br /><br />"
"android.test.IsolatedContext.Intent () "," Broadcast the given intent to all interested BroadcastReceivers. <br /><br />"
"android.test.IsolatedContext.openFileOutput (String, int) () "," Returns the absolute path to the directory on the filesystem where files created with openFileOutput(String, int) are stored. <br /><br />"
"android.test.IsolatedContext.getAndClearBroadcastIntents () "," Returns the list of intents that were broadcast since the last call to this method. <br /><br />"
"android.test.LoaderTestCase.Loader () "," Runs a Loader synchronously and returns the result of the load. <br /><br />"
"android.test.mock.MockApplication.onCreate () "," Called when the application is starting, before any activity, service, or receiver objects (excluding content providers) have been created. <br /><br />"
"android.test.mock.MockApplication.Configuration () "," Called by the system when the device configuration changes while your component is running. <br /><br />"
"android.test.mock.MockApplication.onTerminate () "," This method is for use in emulated process environments. <br /><br />"
"android.test.mock.MockContentProvider.Uri () "," Implement this to handle requests for the MIME type of the data at the given URI. <br /><br />"
"android.test.mock.MockContentProvider.ProviderInfo () "," After being instantiated, this is called to tell the content provider about itself. <br /><br />"
"android.test.mock.MockContentProvider.String () "," Implement this to handle query requests from clients. <br /><br />"
"android.test.mock.MockContentProvider.onCreate () "," Implement this to initialize your content provider on startup. <br /><br />"
"android.test.mock.MockContentProvider.apply (ContentProvider, ContentProviderResult[], int) () "," Override this to handle requests to perform a batch of operations, or the default implementation will iterate over the operations and call apply(ContentProvider, ContentProviderResult[], int) on each of them. <br /><br />"
"android.test.mock.MockContentProvider.String[] () "," Implement this to handle requests to update one or more rows. <br /><br />"
"android.test.mock.MockContentProvider.Bundle () "," Called by a client to open a read-only stream containing data of a particular MIME type. <br /><br />"
"android.test.mock.MockContentProvider.ContentValues[] () "," If you're reluctant to implement this manually, please just call super.bulkInsert(). <br /><br />"
"android.test.mock.MockContentProvider.ContentValues () "," Implement this to handle requests to insert a new row. <br /><br />"
"android.test.mock.MockContentResolver.ContentProvider () "," Adds access to a provider based on its authority <br /><br />"
"android.test.mock.MockContentResolver.ContentResolver.notifChange (Uri, ContentObserver, boolean) () "," Overrides ContentResolver.notifChange(Uri, ContentObserver, boolean). <br /><br />"
"android.test.mock.MockContext.getPackageManager () "," Return PackageManager instance to find global package information. <br /><br />"
"android.test.mock.MockContext.getResources () "," Return a Resources instance for your application's package. <br /><br />"
"android.test.mock.MockContext.UserHandle () "," This method is deprecated. Sticky broadcasts should not be used. They provide no security (anyone can access them), no protection (anyone can modify them), and many other problems. The recommended pattern is to use a non-sticky broadcast to report that something has changed, with another mechanism for apps to retrieve the current value whenever desired. <br /><br />"
"android.test.mock.MockContext.getFilesDir () () "," Returns the absolute path to the directory on the filesystem similar to getFilesDir(). <br /><br />"
"android.test.mock.MockContext.startActivities (Intent[], Bundle) () "," Same as startActivities(Intent[], Bundle) with no options specified. <br /><br />"
"android.test.mock.MockContext.setTheme (int resid) "," Set the base theme for this context. <br /><br />"
"android.test.mock.MockContext.IntentFilter () "," Register a BroadcastReceiver to be run in the main activity thread. <br /><br />"
"android.test.mock.MockContext.WallpaperManager.peek () () "," This method is deprecated. Use WallpaperManager.peek() instead. <br /><br />"
"android.test.mock.MockContext.Display () "," Return a new Context object for the current Context but whose resources are adjusted to match the metrics of the given Display. <br /><br />"
"android.test.mock.MockContext.openFileOutput (String, int) () "," Returns the absolute path to the directory on the filesystem where files created with openFileOutput(String, int) are stored. <br /><br />"
"android.test.mock.MockContext.sendBroadcast (Intent) () "," Version of sendBroadcast(Intent) that allows you to receive data back from the broadcast. <br /><br />"
"android.test.mock.MockContext.SecurityException () "," If a particular process and user ID has not been granted permission to access a specific URI, throw SecurityException. <br /><br />"
"android.test.mock.MockContext.isRestricted () "," Indicates whether this Context is restricted. <br /><br />"
"android.test.mock.MockContext.openOrCreateDatabase (String, int, SQLiteDatabase.CursorFactory) () "," Returns the absolute path on the filesystem where a database created with openOrCreateDatabase(String, int, SQLiteDatabase.CursorFactory) is stored. <br /><br />"
"android.test.mock.MockContext.BroadcastReceiver () "," Unregister a previously registered BroadcastReceiver. <br /><br />"
"android.test.mock.MockContext.getExternalCacheDirs () "," Returns absolute paths to application-specific directories on all external storage devices where the application can place cache files it owns. <br /><br />"
"android.test.mock.MockContext.getExternalMediaDirs () "," Returns absolute paths to application-specific directories on all external storage devices where the application can place media files. <br /><br />"
"android.test.mock.MockContext.Handler () "," Register to receive intent broadcasts, to run in the context of scheduler. <br /><br />"
"android.test.mock.MockContext.getPackageCodePath () "," Return the full path to this context's primary Android package. <br /><br />"
"android.test.mock.MockContext.SET_WALLPAPER () "," This method is deprecated. Use WallpaperManager.set() instead.  This method requires the caller to hold the permission SET_WALLPAPER. <br /><br />"
"android.test.mock.MockContext.sendOrderedBroadcast (Intent, String, BroadcastReceiver, Handler, int, String, Bundle) () "," Version of sendOrderedBroadcast(Intent, String, BroadcastReceiver, Handler, int, String, Bundle) that allows you to specify the user the broadcast will be sent to. <br /><br />"
"android.test.mock.MockContext.getApplicationContext () "," Return the context of the single, global Application object of the current process. <br /><br />"
"android.test.mock.MockContext.getMainLooper () "," Return the Looper for the main thread of the current process. <br /><br />"
"android.test.mock.MockContext.startActivity (Intent, Bundle) () "," Like startActivity(Intent, Bundle), but taking a IntentSender to start. <br /><br />"
"android.test.mock.MockContext.getPackageResourcePath () "," Return the full path to this context's primary Android package. <br /><br />"
"android.test.mock.MockContext.getPackageName () "," Return the name of this application's package. <br /><br />"
"android.test.mock.MockContext.getContentResolver () "," Return a ContentResolver instance for your application's package. <br /><br />"
"android.test.mock.MockContext.ServiceConnection () "," Disconnect from an application service. <br /><br />"
"android.test.mock.MockContext.startIntentSender (IntentSender, Intent, int, int, int, Bundle) () "," Same as startIntentSender(IntentSender, Intent, int, int, int, Bundle) with no options specified. <br /><br />"
"android.test.mock.MockContext.WallpaperManager.get () () "," This method is deprecated. Use WallpaperManager.get() instead. <br /><br />"
"android.test.mock.MockContext.getApplicationInfo () "," Return the full application info for this context's package. <br /><br />"
"android.test.mock.MockContext.getAssets () "," Return an AssetManager instance for your application's package. <br /><br />"
"android.test.mock.MockContext.grantUriPermission (String, Uri, int) () "," Remove all permissions to access a particular content provider Uri that were previously added with grantUriPermission(String, Uri, int). <br /><br />"
"android.test.mock.MockContext.SQLiteDatabase.CursorFactory () "," Open a new private SQLiteDatabase associated with this Context's application package. <br /><br />"
"android.test.mock.MockContext.getCodeCacheDir () "," Returns the absolute path to the application specific cache directory on the filesystem designed for storing cached code. <br /><br />"
"android.test.mock.MockContext.getClassLoader () "," Return a class loader you can use to retrieve classes in this package. <br /><br />"
"android.test.mock.MockContext.Instrumentation () "," Start executing an Instrumentation class. <br /><br />"
"android.test.mock.MockContext.Configuration () "," Return a new Context object for the current Context but whose resources are adjusted to match the given Configuration. <br /><br />"
"android.test.mock.MockContext.databaseList () "," Returns an array of strings naming the private databases associated with this Context's application package. <br /><br />"
"android.test.mock.MockContext.Uri () "," Grant permission to access a specific Uri to another package, regardless of whether that package has general permission to access the Uri's content provider. <br /><br />"
"android.test.mock.MockContext.String () "," Broadcast the given intent to all interested BroadcastReceivers, delivering them one at a time to allow more preferred receivers to consume the broadcast before it is delivered to less preferred receivers. <br /><br />"
"android.test.mock.MockContext.WallpaperManager.getDesiredMinimumHeight () () "," This method is deprecated. Use WallpaperManager.getDesiredMinimumHeight() instead. <br /><br />"
"android.test.mock.MockContext.getObbDir () "," Return the primary external storage directory where this application's OBB files (if there are any) can be found. <br /><br />"
"android.test.mock.MockContext.WallpaperManager.getDesiredMinimumWidth () () "," This method is deprecated. Use WallpaperManager.getDesiredMinimumWidth() instead. <br /><br />"
"android.test.mock.MockContext.getCacheDir () "," Returns the absolute path to the application specific cache directory on the filesystem. <br /><br />"
"android.test.mock.MockContext.DatabaseErrorHandler () "," Open a new private SQLiteDatabase associated with this Context's application package. <br /><br />"
"android.test.mock.MockContext.sendBroadcast (Intent, String) () "," Version of sendBroadcast(Intent, String) that allows you to specify the user the broadcast will be sent to. <br /><br />"
"android.test.mock.MockContext.Environment.getExternalStorageDirectory () () "," Returns the absolute path to the directory on the primary external filesystem (that is somewhere on Environment.getExternalStorageDirectory()) where the application can place persistent files it owns. <br /><br />"
"android.test.mock.MockContext.getTheme () "," Return the Theme object associated with this Context. <br /><br />"
"android.test.mock.MockContext.getObbDirs () "," Returns absolute paths to application-specific directories on all external storage devices where the application's OBB files (if there are any) can be found. <br /><br />"
"android.test.mock.MockContext.Bundle () "," Launch a new activity. <br /><br />"
"android.test.mock.MockContext.fileList () "," Returns an array of strings naming the private files associated with this Context's application package. <br /><br />"
"android.test.mock.MockContext.Intent () "," Request that a given application service be stopped. <br /><br />"
"android.test.mock.MockCursor.getDouble (int columnIndex) "," Returns the value of the requested column as a double. <br /><br />"
"android.test.mock.MockCursor.getColumnName (int columnIndex) "," Returns the column name at the given zero-based column index. <br /><br />"
"android.test.mock.MockCursor.getInt (int columnIndex) "," Returns the value of the requested column as an int. <br /><br />"
"android.test.mock.MockCursor.requery () "," Performs the query that created the cursor again, refreshing its contents. <br /><br />"
"android.test.mock.MockCursor.close () "," Closes the Cursor, releasing all of its resources and making it completely invalid. <br /><br />"
"android.test.mock.MockCursor.getCount () "," Returns the numbers of rows in the cursor. <br /><br />"
"android.test.mock.MockCursor.isFirst () "," Returns whether the cursor is pointing to the first row. <br /><br />"
"android.test.mock.MockCursor.isNull (int columnIndex) "," Returns true if the value in the indicated column is null. <br /><br />"
"android.test.mock.MockCursor.close () () "," Register an observer that is called when changes happen to the contents of the this cursors data set, for example, when the data set is changed via requery(), deactivate(), or close(). <br /><br />"
"android.test.mock.MockCursor.isBeforeFirst () "," Returns whether the cursor is pointing to the position before the first row. <br /><br />"
"android.test.mock.MockCursor.requery () () "," Deactivates the Cursor, making all calls on it fail until requery() is called. <br /><br />"
"android.test.mock.MockCursor.CharArrayBuffer () "," Retrieves the requested column text and stores it in the buffer provided. <br /><br />"
"android.test.mock.MockCursor.moveToPosition (int position) "," Move the cursor to an absolute position. <br /><br />"
"android.test.mock.MockCursor.getWantsAllOnMoveCalls () "," onMove() will only be called across processes if this method returns true. <br /><br />"
"android.test.mock.MockCursor.isClosed () "," return true if the cursor is closed <br /><br />"
"android.test.mock.MockCursor.getPosition () "," Returns the current position of the cursor in the row set. <br /><br />"
"android.test.mock.MockCursor.getShort (int columnIndex) "," Returns the value of the requested column as a short. <br /><br />"
"android.test.mock.MockCursor.moveToNext () "," Move the cursor to the next row. <br /><br />"
"android.test.mock.MockCursor.Uri () "," Register to watch a content URI for changes. <br /><br />"
"android.test.mock.MockCursor.moveToLast () "," Move the cursor to the last row. <br /><br />"
"android.test.mock.MockCursor.getColumnNames () "," Returns a string array holding the names of all of the columns in the result set in the order in which they were listed in the result. <br /><br />"
"android.test.mock.MockCursor.String () "," Returns the zero-based index for the given column name, or -1 if the column doesn't exist. <br /><br />"
"android.test.mock.MockCursor.isLast () "," Returns whether the cursor is pointing to the last row. <br /><br />"
"android.test.mock.MockCursor.setNotificationUri (ContentResolver, Uri) () "," Return the URI at which notifications of changes in this Cursor's data will be delivered, as previously set by setNotificationUri(ContentResolver, Uri). <br /><br />"
"android.test.mock.MockCursor.moveToFirst () "," Move the cursor to the first row. <br /><br />"
"android.test.mock.MockCursor.moveToPrevious () "," Move the cursor to the previous row. <br /><br />"
"android.test.mock.MockCursor.registerContentObserver (ContentObserver) () "," Unregister an observer that has previously been registered with this cursor via registerContentObserver(ContentObserver). <br /><br />"
"android.test.mock.MockCursor.getLong (int columnIndex) "," Returns the value of the requested column as a long. <br /><br />"
"android.test.mock.MockCursor.getType (int columnIndex) "," Returns data type of the given column's value. <br /><br />"
"android.test.mock.MockCursor.ContentObserver () "," Register an observer that is called when changes happen to the content backing this cursor. <br /><br />"
"android.test.mock.MockCursor.getBlob (int columnIndex) "," Returns the value of the requested column as a byte array. <br /><br />"
"android.test.mock.MockCursor.getExtras () "," Returns a bundle of extra values. <br /><br />"
"android.test.mock.MockCursor.move (int offset) "," Move the cursor by a relative amount, forward or backward, from the current position. <br /><br />"
"android.test.mock.MockCursor.getColumnCount () "," Return total number of columns <br /><br />"
"android.test.mock.MockCursor.getFloat (int columnIndex) "," Returns the value of the requested column as a float. <br /><br />"
"android.test.mock.MockCursor.Bundle () "," This is an out-of-band way for the the user of a cursor to communicate with the cursor. <br /><br />"
"android.test.mock.MockCursor.getString (int columnIndex) "," Returns the value of the requested column as a String. <br /><br />"
"android.test.mock.MockCursor.isAfterLast () "," Returns whether the cursor is pointing to the position after the last row. <br /><br />"
"android.test.mock.MockCursor.IllegalArgumentException () "," Returns the zero-based index for the given column name, or throws IllegalArgumentException if the column doesn't exist. <br /><br />"
"android.test.mock.MockDialogInterface.dismiss () "," no description <br /><br />"
"android.test.mock.MockDialogInterface.cancel () "," no description <br /><br />"
"android.test.mock.MockPackageManager.PermissionInfo () "," Add a new dynamic permission to the system. <br /><br />"
"android.test.mock.MockPackageManager.UserHandle () "," If the target user is a managed profile of the calling user or the caller is itself a managed profile, then this returns a copy of the label with badging for accessibility services like talkback. <br /><br />"
"android.test.mock.MockPackageManager.Context.startActivity () () "," This method is deprecated. This is a protected API that should not have been available to third party applications. It is the platform's responsibility for assigning preferred activities and this cannot be directly modified. Add a new preferred activity mapping to the system. This will be used to automatically select the given activity component when Context.startActivity() finds multiple matching activities and also matches the given filter. <br /><br />"
"android.test.mock.MockPackageManager.getDefaultActivityIcon () "," Return the generic icon for an activity that is used when no specific icon is defined. <br /><br />"
"android.test.mock.MockPackageManager.ComponentName () "," Set the enabled setting for a package component (activity, receiver, service, provider). <br /><br />"
"android.test.mock.MockPackageManager.getAllPermissionGroups (int flags) "," Retrieve all of the known permission groups in the system. <br /><br />"
"android.test.mock.MockPackageManager.Rect () "," If the target user is a managed profile of the calling user or the caller is itself a managed profile, then this returns a badged copy of the given drawable allowing the user to distinguish it from the original drawable. <br /><br />"
"android.test.mock.MockPackageManager.getSystemAvailableFeatures () "," Get a list of features that are available on the system. <br /><br />"
"android.test.mock.MockPackageManager.ApplicationInfo () "," Retrieve an XML file from a package. <br /><br />"
"android.test.mock.MockPackageManager.getNameForUid (int uid) "," Retrieve the official name associated with a user id. <br /><br />"
"android.test.mock.MockPackageManager.getSystemAvailableFeatures () () "," Check whether the given feature name is one of the available features as returned by getSystemAvailableFeatures(). <br /><br />"
"android.test.mock.MockPackageManager.package verification broadcast (int id, int verificationCodeAtTimeout, long millisecondsToDelay) "," Allows a package listening to the package verification broadcast to extend the default timeout for a response and declare what action to perform after the timeout occurs. <br /><br />"
"android.test.mock.MockPackageManager.String[] () "," Return a List of all installed packages that are currently holding any of the given permissions. <br /><br />"
"android.test.mock.MockPackageManager.getPackagesForUid (int uid) "," Retrieve the names of all packages that are associated with a particular user id. <br /><br />"
"android.test.mock.MockPackageManager.package verification broadcast (int id, int verificationCode) "," Allows a package listening to the package verification broadcast to respond to the package manager. <br /><br />"
"android.test.mock.MockPackageManager.String () "," Change the installer associated with a given package. <br /><br />"
"android.test.mock.MockPackageManager.checkSignatures (String, String) (int uid1, int uid2) "," Like checkSignatures(String, String), but takes UIDs of the two packages to be checked. <br /><br />"
"android.test.mock.MockPackageManager.getInstalledApplications (int flags) "," Return a List of all application packages that are installed on the device. <br /><br />"
"android.test.mock.MockPackageManager.addPreferredActivity (IntentFilter, int, ComponentName[], ComponentName) () "," Retrieve all preferred activities, previously added with addPreferredActivity(IntentFilter, int, ComponentName[], ComponentName), that are currently registered with the system. <br /><br />"
"android.test.mock.MockPackageManager.getPreferredPackages (int flags) "," Retrieve the list of all currently configured preferred packages. <br /><br />"
"android.test.mock.MockPackageManager.getSystemSharedLibraryNames () "," Get a list of shared libraries that are available on the system. <br /><br />"
"android.test.mock.MockPackageManager.addPermission (PermissionInfo) () "," Removes a permission that was previously added with addPermission(PermissionInfo). <br /><br />"
"android.test.mock.MockPackageManager.getInstalledPackages (int flags) "," Return a List of all packages that are installed on the device. <br /><br />"
"android.test.mock.MockPackageManager.isSafeMode () "," Return whether the device has been booted into safe mode. <br /><br />"
"android.test.mock.MockPackageManager.Intent () "," Determine the best service to handle for a given Intent. <br /><br />"
"android.test.mock.MockResources.AttributeSet () "," Retrieve a set of basic attribute values from an AttributeSet, not performing styling of them using a theme and/or style resources. <br /><br />"
"android.test.mock.MockResources.getDimensionPixelSize (int id) "," Retrieve a dimensional for a particular resource ID for use as a size in raw pixels. <br /><br />"
"android.test.mock.MockResources.getResourceEntryName (int resid) "," Return the entry name for a given resource identifier. <br /><br />"
"android.test.mock.MockResources.getQuantityText (int id, int quantity) "," Returns the character sequence necessary for grammatically correct pluralization of the given resource ID for the given quantity. <br /><br />"
"android.test.mock.MockResources.getStringArray (int id) "," Return the string array associated with a particular resource ID. <br /><br />"
"android.test.mock.MockResources.getLayout (int id) "," Return an XmlResourceParser through which you can read a view layout description for the given resource ID. <br /><br />"
"android.test.mock.MockResources.getIntArray (int id) "," Return the int array associated with a particular resource ID. <br /><br />"
"android.test.mock.MockResources.Object... () "," Formats the string necessary for grammatically correct pluralization of the given resource ID for the given quantity, using the given arguments. <br /><br />"
"android.test.mock.MockResources.getTextArray (int id) "," Return the styled text array associated with a particular resource ID. <br /><br />"
"android.test.mock.MockResources.getString (int id) "," Return the string value associated with a particular resource ID. It will be stripped of any styled text information. <br /><br />"
"android.test.mock.MockResources.getMovie (int id) "," Return a movie object associated with the particular resource ID. <br /><br />"
"android.test.mock.MockResources.TypedValue () "," Return the raw data associated with a particular resource ID. <br /><br />"
"android.test.mock.MockResources.openRawResource (int id) "," Open a data stream for reading a raw resource. <br /><br />"
"android.test.mock.MockResources.getConfiguration () "," Return the current configuration that is in effect for this resource object. <br /><br />"
"android.test.mock.MockResources.getResourceTypeName (int resid) "," Return the type name for a given resource identifier. <br /><br />"
"android.test.mock.MockResources.openRawResourceFd (int id) "," Open a file descriptor for reading a raw resource. <br /><br />"
"android.test.mock.MockResources.getAnimation (int id) "," Return an XmlResourceParser through which you can read an animation description for the given resource ID. <br /><br />"
"android.test.mock.MockResources.format (String, Object...) () "," Return the string value associated with a particular resource ID, substituting the format arguments as defined in Formatter and format(String, Object...). It will be stripped of any styled text information. <br /><br />"
"android.test.mock.MockResources.obtainTypedArray (int id) "," Return an array of heterogeneous values. <br /><br />"
"android.test.mock.MockResources.String () "," Return a resource identifier for the given resource name. <br /><br />"
"android.test.mock.MockResources.getDrawable (int, Theme) (int id) "," This method is deprecated. Use getDrawable(int, Theme) instead. <br /><br />"
"android.test.mock.MockResources.CharSequence () "," Return the string value associated with a particular resource ID. <br /><br />"
"android.test.mock.MockResources.getColor (int id) "," Return a color integer associated with a particular resource ID. <br /><br />"
"android.test.mock.MockResources.getResourcePackageName (int resid) "," Return the package name for a given resource identifier. <br /><br />"
"android.test.mock.MockResources.getXml (int id) "," Return an XmlResourceParser through which you can read a generic XML resource for the given resource ID. <br /><br />"
"android.test.mock.MockResources.getText (int id) "," Return the string value associated with a particular resource ID. The returned object will be a String if this is a plain string; it will be some other type of CharSequence if it is styled. <br /><br />"
"android.test.mock.MockResources.getInteger (int id) "," Return an integer associated with a particular resource ID. <br /><br />"
"android.test.mock.MockResources.getColorStateList (int id) "," Return a color state list associated with a particular resource ID. <br /><br />"
"android.test.mock.MockResources.getResourceName (int resid) "," Return the full name for a given resource identifier. <br /><br />"
"android.test.mock.MockResources.getDimensionPixelOffset (int id) "," Retrieve a dimensional for a particular resource ID for use as an offset in raw pixels. <br /><br />"
"android.test.mock.MockResources.getDimension (int id) "," Retrieve a dimensional for a particular resource ID. <br /><br />"
"android.test.mock.MockResources.DisplayMetrics () "," Store the newly updated configuration. <br /><br />"
"android.test.mock.MockResources.getQuantityString (int id, int quantity) "," Returns the string necessary for grammatically correct pluralization of the given resource ID for the given quantity. <br /><br />"
"android.test.mock.MockResources.getDisplayMetrics () "," Return the current display metrics that are in effect for this resource object. <br /><br />"
"android.test.MoreAsserts.Map () "," Asserts that map is not empty. <br /><br />"
"android.test.MoreAsserts.String () "," Asserts that expectedRegex does not exactly match actual, and fails with message if it does. <br /><br />"
"android.test.MoreAsserts.assertNotMatchesRegex (String, String, String) () "," Variant of assertNotMatchesRegex(String, String, String) using a generic message. <br /><br />"
"android.test.MoreAsserts.assertNotContainsRegex (String, String, String) () "," Variant of assertNotContainsRegex(String, String, String) using a generic message. <br /><br />"
"android.test.MoreAsserts.assertMatchesRegex (String, String, String) () "," Variant of assertMatchesRegex(String, String, String) using a generic message. <br /><br />"
"android.test.MoreAsserts.assertEmpty (String, Map) () "," Variant of assertEmpty(String, Map) using a generic message. <br /><br />"
"android.test.MoreAsserts.assertNotEmpty (String, Map) () "," Variant of assertNotEmpty(String, Map) using a generic message. <br /><br />"
"android.test.MoreAsserts.assertEquals (int[] expected, int[] actual) "," Asserts that array actual is the same size and every element equals those in array expected. <br /><br />"
"android.test.MoreAsserts.Object... () "," Asserts that actual contains precisely the elements expected, and in the same order. <br /><br />"
"android.test.MoreAsserts.Object[] () "," Asserts that array actual is the same size and every element is the same as those in array expected. <br /><br />"
"android.test.MoreAsserts.Object () "," Variant of checkEqualsAndHashCodeMethods(String,Object,Object,boolean...)} using a generic message. <br /><br />"
"android.test.MoreAsserts.assertContainsRegex (String, String, String) () "," Variant of assertContainsRegex(String, String, String) using a generic message. <br /><br />"
"android.test.MoreAsserts.equals (Object) () "," Asserts that actual is not equal unexpected, according to both == and equals(Object). <br /><br />"
"android.test.MoreAsserts.assertNotEqual (String, Object, Object) () "," Variant of assertNotEqual(String, Object, Object) using a generic message. <br /><br />"
"android.test.MoreAsserts.Class () "," Asserts that class expected is assignable from the class actual. <br /><br />"
"android.test.MoreAsserts.assertEquals (double[] expected, double[] actual) "," Asserts that array actual is the same size and every element equals those in array expected. <br /><br />"
"android.test.MoreAsserts.assertEmpty (String, Iterable) () "," Variant of assertEmpty(String, Iterable) using a generic message. <br /><br />"
"android.test.MoreAsserts.Iterable () "," Asserts that iterable is not empty. <br /><br />"
"android.test.MoreAsserts.assertEquals (byte[] expected, byte[] actual) "," Asserts that array actual is the same size and every element equals those in array expected. <br /><br />"
"android.test.PerformanceTestCase.Intermediates.String () "," no description <br /><br />"
"android.test.PerformanceTestCase.Intermediates.startTiming (boolean realTime) "," no description <br /><br />"
"android.test.PerformanceTestCase.Intermediates.setInternalIterations (int count) "," no description <br /><br />"
"android.test.PerformanceTestCase.Intermediates.finishTiming (boolean realTime) "," no description <br /><br />"
"android.test.ProviderTestCase&lt;T&nbsp;extends&nbsp;android.content.ContentProvider&gt;.String () "," no description <br /><br />"
"android.test.ProviderTestCase&lt;T&nbsp;extends&nbsp;android.content.ContentProvider&gt;.getProvider () "," no description <br /><br />"
"android.test.ProviderTestCase&lt;T&nbsp;extends&nbsp;android.content.ContentProvider&gt;.getMockContentResolver () "," no description <br /><br />"
"android.test.ProviderTestCase&lt;T&nbsp;extends&nbsp;android.content.ContentProvider&gt;.getMockContext () "," no description <br /><br />"
"android.test.ProviderTestCase2&lt;T&nbsp;extends&nbsp;android.content.ContentProvider&gt;.String () "," Creates a new content provider of the same type as that passed to the test case class, with an authority name set to the authority parameter, and using an SQLite database as the underlying data source. <br /><br />"
"android.test.ProviderTestCase2&lt;T&nbsp;extends&nbsp;android.content.ContentProvider&gt;.MockContentResolver () "," Gets the MockContentResolver created by this class during initialization. <br /><br />"
"android.test.ProviderTestCase2&lt;T&nbsp;extends&nbsp;android.content.ContentProvider&gt;.setUp () () "," Returns the content provider created by this class in the setUp() method. <br /><br />"
"android.test.ProviderTestCase2&lt;T&nbsp;extends&nbsp;android.content.ContentProvider&gt;.IsolatedContext () "," Gets the IsolatedContext created by this class during initialization. <br /><br />"
"android.test.RenamingDelegatingContext.SQLiteDatabase.CursorFactory () "," Open a new private SQLiteDatabase associated with this Context's application package. <br /><br />"
"android.test.RenamingDelegatingContext.String () "," no description <br /><br />"
"android.test.RenamingDelegatingContext.openOrCreateDatabase (String, int, SQLiteDatabase.CursorFactory) () "," Returns the absolute path on the filesystem where a database created with openOrCreateDatabase(String, int, SQLiteDatabase.CursorFactory) is stored. <br /><br />"
"android.test.RenamingDelegatingContext.getCacheDir () "," In order to support calls to getCacheDir(), we create a temp cache dir (inside the real one) and return it instead. <br /><br />"
"android.test.RenamingDelegatingContext.getDatabasePrefix () "," no description <br /><br />"
"android.test.RenamingDelegatingContext.fileList () "," Returns an array of strings naming the private files associated with this Context's application package. <br /><br />"
"android.test.RenamingDelegatingContext.DatabaseErrorHandler () "," Open a new private SQLiteDatabase associated with this Context's application package. <br /><br />"
"android.test.RenamingDelegatingContext.makeExistingFilesAndDbsAccessible () "," Makes accessible all files and databases whose names match the filePrefix that was passed to the constructor. <br /><br />"
"android.test.RenamingDelegatingContext.databaseList () "," Returns an array of strings naming the private databases associated with this Context's application package. <br /><br />"
"android.test.RenamingDelegatingContext.openFileOutput (String, int) () "," Returns the absolute path on the filesystem where a file created with openFileOutput(String, int) is stored. <br /><br />"
"android.test.ServiceTestCase&lt;T&nbsp;extends&nbsp;android.app.Service&gt;.setUp () () "," Returns the real system context that is saved by setUp(). <br /><br />"
"android.test.ServiceTestCase&lt;T&nbsp;extends&nbsp;android.app.Service&gt;.Application () "," Sets the application that is used during the test. <br /><br />"
"android.test.ServiceTestCase&lt;T&nbsp;extends&nbsp;android.app.Service&gt;.getApplication () "," Returns the Application object in use by the service under test. <br /><br />"
"android.test.ServiceTestCase&lt;T&nbsp;extends&nbsp;android.app.Service&gt;.getService () "," no description <br /><br />"
"android.test.ServiceTestCase&lt;T&nbsp;extends&nbsp;android.app.Service&gt;.assertNotNull (String, Object) () "," Tests that setupService() runs correctly and issues an assertNotNull(String, Object) if it does. <br /><br />"
"android.test.SingleLaunchActivityTestCase&lt;T&nbsp;extends&nbsp;android.app.Activity&gt;.getActivity () "," no description <br /><br />"
"android.test.SingleLaunchActivityTestCase&lt;T&nbsp;extends&nbsp;android.app.Activity&gt;.testActivityTestCaseSetUpProperly () "," no description <br /><br />"
"android.test.suitebuilder.TestMethod.getName () "," no description <br /><br />"
"android.test.suitebuilder.TestMethod.createTest () "," no description <br /><br />"
"android.test.suitebuilder.TestMethod.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.test.suitebuilder.TestMethod.getEnclosingClassname () "," no description <br /><br />"
"android.test.suitebuilder.TestMethod.getEnclosingClass () "," no description <br /><br />"
"android.test.suitebuilder.TestMethod.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.test.suitebuilder.TestMethod.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.test.suitebuilder.TestMethod.Class () "," no description <br /><br />"
"android.test.suitebuilder.TestSuiteBuilder.FailedToCreateTests.testSuiteConstructionFailed () "," no description <br /><br />"
"android.test.suitebuilder.TestSuiteBuilder.String () "," Override the default name for the suite being built. <br /><br />"
"android.test.suitebuilder.TestSuiteBuilder.TestMethod () "," Exclude tests that fail to satisfy all of the given predicates. <br /><br />"
"android.test.suitebuilder.TestSuiteBuilder.includeAllPackagesUnderHere () "," Include all junit tests that satisfy the requirements in the calling class' package and all sub-packages. <br /><br />"
"android.test.suitebuilder.TestSuiteBuilder.build () "," Call this method once you've configured your builder as desired. <br /><br />"
"android.test.suitebuilder.TestSuiteBuilder.String... () "," Include all tests that satisfy the requirements in the given packages and all sub-packages, unless otherwise specified. <br /><br />"
"android.test.TestSuiteProvider.getTestSuite () "," no description <br /><br />"
"android.test.TouchUtils.ActivityInstrumentationTestCase2 () "," This method was deprecated in API level 3. ActivityInstrumentationTestCase is deprecated in favor of ActivityInstrumentationTestCase2, which provides more options for configuring the Activity under test <br /><br />"
"android.test.TouchUtils.InstrumentationTestCase () "," Simulate touching a specific location and dragging to a new location. <br /><br />"
"android.test.TouchUtils.dragQuarterScreenDown (InstrumentationTestCase, Activity) () "," Scroll a ViewGroup to the top by repeatedly calling dragQuarterScreenDown(InstrumentationTestCase, Activity) <br /><br />"
"android.test.TouchUtils.dragQuarterScreenUp (InstrumentationTestCase, Activity) () "," Scroll a ViewGroup to the bottom by repeatedly calling dragQuarterScreenUp(InstrumentationTestCase, Activity) <br /><br />"
"android.test.TouchUtils.Activity () "," Simulate touching in the center of the screen and dragging one quarter of the way up <br /><br />"
"android.test.TouchUtils.View () "," Simulate touching the center of a view and cancelling (so no onClick should fire, etc). <br /><br />"
"android.test.ViewAsserts.ViewGroup () "," Assert the specified group's integrity. <br /><br />"
"android.test.ViewAsserts.View () "," Assert that the test view is vertically center aligned with respect to the reference view. <br /><br />"
"android.text.AlteredCharSequence.length () "," Returns the number of characters in this sequence. <br /><br />"
"android.text.AlteredCharSequence.subSequence (int start, int end) "," Returns a CharSequence from the start index (inclusive) to the end index (exclusive) of this sequence. <br /><br />"
"android.text.AlteredCharSequence.getChars (int start, int end, char[] dest, int off) "," Exactly like String.getChars(): copy chars start through end - 1 from this CharSequence into dest beginning at offset destoff. <br /><br />"
"android.text.AlteredCharSequence.charAt (int off) "," Returns the character at index. <br /><br />"
"android.text.AlteredCharSequence.CharSequence () "," Create an AlteredCharSequence whose text (and possibly spans) are mirrored from source, except that the range of offsets substart inclusive to subend exclusive are mirrored instead from sub, beginning at offset 0. <br /><br />"
"android.text.AlteredCharSequence.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.text.AndroidCharacter.mirror (char[] text, int start, int count) "," Replace the specified slice of text with the chars' right-to-left mirrors (if any), returning true if any replacements were made. <br /><br />"
"android.text.AndroidCharacter.getEastAsianWidths (char[] src, int start, int count, byte[] dest) "," Fill the first count bytes of dest with the East Asian Width from count chars of src starting at start. <br /><br />"
"android.text.AndroidCharacter.getDirectionalities (char[] src, byte[] dest, int count) "," Fill in the first count bytes of dest with the directionalities from the first count chars of src. <br /><br />"
"android.text.AndroidCharacter.Unicode TR#11 (char input) "," Calculate the East Asian Width of a character according to Unicode TR#11. <br /><br />"
"android.text.AndroidCharacter.getMirror (char ch) "," Return the right-to-left mirror (or the original char if none) of the specified char. <br /><br />"
"android.text.Annotation.getValue () "," no description <br /><br />"
"android.text.Annotation.getSpanTypeId () "," Return a special type identifier for this span class. <br /><br />"
"android.text.Annotation.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.text.Annotation.getKey () "," no description <br /><br />"
"android.text.Annotation.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.text.AutoText.View () "," Returns the size of the auto text dictionary. <br /><br />"
"android.text.BidiFormatter.Builder.TextDirectionHeuristic () "," Specifies the default directionality estimation algorithm to be used by the BidiFormatter. <br /><br />"
"android.text.BidiFormatter.Builder.build () "," no description <br /><br />"
"android.text.BidiFormatter.Builder.stereoReset (boolean stereoReset) "," Specifies whether the BidiFormatter to be built should also 'reset' directionality before a string being bidi-wrapped, not just after it. <br /><br />"
"android.text.BoringLayout.getLineMax (int line) "," Gets the unsigned horizontal extent of the specified line, including leading margin indent, but excluding trailing whitespace. <br /><br />"
"android.text.BoringLayout.getLineTop (int line) "," Return the vertical position of the top of the specified line (0 getLineCount()). <br /><br />"
"android.text.BoringLayout.getEllipsisCount (int line) "," Returns the number of characters to be ellipsized away, or 0 if no ellipsis is to take place. <br /><br />"
"android.text.BoringLayout.getTopPadding () "," Returns the (negative) number of extra pixels of ascent padding in the top line of the Layout. <br /><br />"
"android.text.BoringLayout.getBottomPadding () "," Returns the number of extra pixels of descent padding in the bottom line of the Layout. <br /><br />"
"android.text.BoringLayout.BoringLayout.Metrics () "," Returns a BoringLayout for the specified text, potentially reusing this one if it is already suitable. <br /><br />"
"android.text.BoringLayout.getEllipsisStart (int line) "," Return the offset of the first character to be ellipsized away, relative to the start of the line. <br /><br />"
"android.text.BoringLayout.getLineStart (int line) "," Return the text offset of the beginning of the specified line ( 0 getLineCount()). <br /><br />"
"android.text.BoringLayout.getLineCount () "," Return the number of lines of text in this layout. <br /><br />"
"android.text.BoringLayout.TextPaint () "," Returns null if not boring; the width, ascent, and descent if boring. <br /><br />"
"android.text.BoringLayout.Paint () "," Draw this Layout on the specified canvas, with the highlight path drawn between the background and the text. <br /><br />"
"android.text.BoringLayout.DIR_RIGHT_TO_LEFT (int line) "," Returns the primary directionality of the paragraph containing the specified line, either 1 for left-to-right lines, or -1 for right-to-left lines (see DIR_LEFT_TO_RIGHT, DIR_RIGHT_TO_LEFT). <br /><br />"
"android.text.BoringLayout.getLineDirections (int line) "," Returns the directional run information for the specified line. <br /><br />"
"android.text.BoringLayout.TextUtils.TruncateAt () "," Returns a BoringLayout for the specified text, potentially reusing this one if it is already suitable. <br /><br />"
"android.text.BoringLayout.getHeight () "," Return the total height of this layout. <br /><br />"
"android.text.BoringLayout.getWidth () () "," Return the width to which this Layout is ellipsizing, or getWidth() if it is not doing anything special. <br /><br />"
"android.text.BoringLayout.ellipsized (int start, int end) "," Callback for the ellipsizer to report what region it ellipsized. <br /><br />"
"android.text.BoringLayout.getLineDescent (int line) "," Return the descent of the specified line(0 getLineCount() - 1). <br /><br />"
"android.text.BoringLayout.getLineContainsTab (int line) "," Returns whether the specified line contains one or more characters that need to be handled specially, like tabs or emoji. <br /><br />"
"android.text.BoringLayout.Metrics.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.text.ClipboardManager.hasText () "," Returns true if the clipboard contains text; false otherwise. <br /><br />"
"android.text.ClipboardManager.CharSequence () "," Sets the contents of the clipboard to the specified text. <br /><br />"
"android.text.ClipboardManager.getText () "," Returns the text on the clipboard. <br /><br />"
"android.text.DynamicLayout.DIR_RIGHT_TO_LEFT (int line) "," Returns the primary directionality of the paragraph containing the specified line, either 1 for left-to-right lines, or -1 for right-to-left lines (see DIR_LEFT_TO_RIGHT, DIR_RIGHT_TO_LEFT). <br /><br />"
"android.text.DynamicLayout.getLineDirections (int line) "," Returns the directional run information for the specified line. <br /><br />"
"android.text.DynamicLayout.getLineTop (int line) "," Return the vertical position of the top of the specified line (0 getLineCount()). <br /><br />"
"android.text.DynamicLayout.getEllipsisCount (int line) "," Returns the number of characters to be ellipsized away, or 0 if no ellipsis is to take place. <br /><br />"
"android.text.DynamicLayout.getWidth () () "," Return the width to which this Layout is ellipsizing, or getWidth() if it is not doing anything special. <br /><br />"
"android.text.DynamicLayout.getTopPadding () "," Returns the (negative) number of extra pixels of ascent padding in the top line of the Layout. <br /><br />"
"android.text.DynamicLayout.getBottomPadding () "," Returns the number of extra pixels of descent padding in the bottom line of the Layout. <br /><br />"
"android.text.DynamicLayout.getLineDescent (int line) "," Return the descent of the specified line(0 getLineCount() - 1). <br /><br />"
"android.text.DynamicLayout.getEllipsisStart (int line) "," Return the offset of the first character to be ellipsized away, relative to the start of the line. <br /><br />"
"android.text.DynamicLayout.getLineStart (int line) "," Return the text offset of the beginning of the specified line ( 0 getLineCount()). <br /><br />"
"android.text.DynamicLayout.getLineCount () "," Return the number of lines of text in this layout. <br /><br />"
"android.text.DynamicLayout.getLineContainsTab (int line) "," Returns whether the specified line contains one or more characters that need to be handled specially, like tabs or emoji. <br /><br />"
"android.text.Editable.Factory.getInstance () "," Returns the standard Editable Factory. <br /><br />"
"android.text.Editable.Factory.CharSequence () "," Returns a new SpannedStringBuilder from the specified CharSequence. <br /><br />"
"android.text.Editable.InputFilter[] () "," Sets the series of filters that will be called in succession whenever the text of this Editable is changed, each of which has the opportunity to limit or transform the text that is being inserted. <br /><br />"
"android.text.Editable.delete (int st, int en) "," Convenience for replace(st, en, '', 0, 0) <br /><br />"
"android.text.Editable.clear () "," Convenience for replace(0, length(), '', 0, 0) <br /><br />"
"android.text.Editable.getFilters () "," Returns the array of input filters that are currently applied to changes to this Editable. <br /><br />"
"android.text.Editable.removeSpan (Object) () "," Removes all spans from the Editable, as if by calling removeSpan(Object) on each of them. <br /><br />"
"android.text.Editable.CharSequence () "," Convenience for replace(st, en, text, 0, text.length()) <br /><br />"
"android.text.Editable.append (char text) "," Convenience for append(String.valueOf(text)). <br /><br />"
"android.text.format.DateFormat.Date () "," Given a format string and a Date object, returns a CharSequence containing the requested date. <br /><br />"
"android.text.format.DateFormat.Context () "," Returns true if user preference is set to 24-hour format. <br /><br />"
"android.text.format.DateFormat.DateFormat () "," Returns a DateFormat object that can format the time according to the current locale and the user's 12-/24-hour clock preference. <br /><br />"
"android.text.format.DateFormat.String () "," Returns the best possible localized form of the given skeleton for the given locale. <br /><br />"
"android.text.format.DateFormat.Calendar () "," Given a format string and a Calendar object, returns a CharSequence containing the requested date. <br /><br />"
"android.text.format.DateFormat.CharSequence () "," Given a format string and a time in milliseconds since Jan 1, 1970 GMT, returns a CharSequence containing the requested date. <br /><br />"
"android.text.format.DateUtils.Context () "," Convenience function to return relative time string without preposition. <br /><br />"
"android.text.format.DateUtils.String () "," Formats a date or a time range according to the local conventions. <br /><br />"
"android.text.format.DateUtils.SimpleDateFormat (int month, int abbrev) "," This method was deprecated in API level 17. Use SimpleDateFormat instead. <br /><br />"
"android.text.format.DateUtils.formatSameDayTime (long then, long now, int dateStyle, int timeStyle) "," Format a date / time such that if the then is on the same day as now, it shows just the time and if it's a different day, it shows just the date. <br /><br />"
"android.text.format.DateUtils.isToday (long when) "," no description <br /><br />"
"android.text.format.DateUtils.SimpleDateFormat (int ampm) "," This method was deprecated in API level 17. Use SimpleDateFormat instead. <br /><br />"
"android.text.format.DateUtils.Formatter () "," Formats a date or a time range according to the local conventions. <br /><br />"
"android.text.format.DateUtils.getRelativeTimeSpanString (long time, long now, long minResolution) "," Returns a string describing 'time' as a time relative to 'now'. <br /><br />"
"android.text.format.DateUtils.getRelativeTimeSpanString (long time, long now, long minResolution, int flags) "," Returns a string describing 'time' as a time relative to 'now'. <br /><br />"
"android.text.format.DateUtils.getRelativeTimeSpanString (long startTime) "," Returns a string describing the elapsed time since startTime. <br /><br />"
"android.text.format.DateUtils.StringBuilder () "," Formats an elapsed time in a format like 'MM:SS' or 'H:MM:SS' (using a form suited to the current locale), similar to that used on the call-in-progress screen. <br /><br />"
"android.text.format.DateUtils.formatElapsedTime (long elapsedSeconds) "," Formats an elapsed time in the form 'MM:SS' or 'H:MM:SS' for display on the call-in-progress screen. <br /><br />"
"android.text.format.DateUtils.SimpleDateFormat (int dayOfWeek, int abbrev) "," This method was deprecated in API level 17. Use SimpleDateFormat instead. <br /><br />"
"android.text.format.Formatter.Context () "," Formats a content size to be in the form of bytes, kilobytes, megabytes, etc <br /><br />"
"android.text.format.Formatter.formatFileSize (Context, long) () "," Like formatFileSize(Context, long), but trying to generate shorter numbers (showing fewer digits of precision). <br /><br />"
"android.text.format.Formatter.getHostAddress () (int ipv4Address) "," This method was deprecated in API level 12. Use getHostAddress(), which supports both IPv4 and IPv6 addresses. This method does not support IPv6 addresses. <br /><br />"
"android.text.format.Time.String () "," Convert this time object so the time represented remains the same, but is instead located in a different timezone. <br /><br />"
"android.text.format.Time.getJulianDay (long millis, long gmtoff) "," Computes the Julian day number for a point in time in a particular timezone. <br /><br />"
"android.text.format.Time.getWeekNumber () "," Computes the week number according to ISO 8601. <br /><br />"
"android.text.format.Time.toMillis (boolean ignoreDst) "," Converts this time to milliseconds. <br /><br />"
"android.text.format.Time.getJulianMondayFromWeeksSinceEpoch (int week) "," Takes a number of weeks since the epoch and calculates the Julian day of the Monday for that week. <br /><br />"
"android.text.format.Time.set (int monthDay, int month, int year) "," Sets the date from the given fields. <br /><br />"
"android.text.format.Time.set (int second, int minute, int hour, int monthDay, int month, int year) "," Sets the fields. <br /><br />"
"android.text.format.Time.format2445 () "," Format according to RFC 2445 DATE-TIME type. <br /><br />"
"android.text.format.Time.setToNow () "," Sets the time of the given Time object to the current time. <br /><br />"
"android.text.format.Time.setJulianDay (int julianDay) "," Sets the time from the given Julian day number, which must be based on the same timezone that is set in this Time object. <br /><br />"
"android.text.format.Time.toString () "," Return the current time in YYYYMMDDTHHMMSS  format <br /><br />"
"android.text.format.Time.getActualMaximum (int field) "," Return the maximum possible value for the given field given the value of the other fields. <br /><br />"
"android.text.format.Time.EPOCH_JULIAN_DAY (int julianDay, int firstDayOfWeek) "," Returns the week since EPOCH_JULIAN_DAY (Jan 1, 1970) adjusted for first day of week. <br /><br />"
"android.text.format.Time.Time () "," Copy the value of that to this Time object. <br /><br />"
"android.text.format.Time.format3339 (boolean allDay) "," Return a string in the RFC 3339 format. <br /><br />"
"android.text.format.Time.set (long millis) "," Sets the fields in this Time object given the UTC milliseconds. <br /><br />"
"android.text.format.Time.getCurrentTimezone () "," Returns the timezone string that is currently set for the device. <br /><br />"
"android.text.format.Time.normalize (boolean ignoreDst) "," Ensures the values in each field are in range. <br /><br />"
"android.text.GetChars.getChars (int start, int end, char[] dest, int destoff) "," Exactly like String.getChars(): copy chars start through end - 1 from this CharSequence into dest beginning at offset destoff. <br /><br />"
"android.text.Html.ImageGetter.String () "," This methos is called when the HTML parser encounters an &lt;img&gt; tag. <br /><br />"
"android.text.Html.TagHandler.XMLReader () "," This method will be called whenn the HTML parser encounters a tag that it does not know how to interpret. <br /><br />"
"android.text.InputFilter.AllCaps.Spanned () "," This method is called when the buffer is going to replace the range dstart   dend of dest with the new text from the range start   end of source. <br /><br />"
"android.text.InputFilter.LengthFilter.getMax () "," no description <br /><br />"
"android.text.InputFilter.LengthFilter.Spanned () "," This method is called when the buffer is going to replace the range dstart   dend of dest with the new text from the range start   end of source. <br /><br />"
"android.text.Layout.getLineMax (int line) "," Gets the unsigned horizontal extent of the specified line, including leading margin indent, but excluding trailing whitespace. <br /><br />"
"android.text.Layout.getOffsetToRightOf (int offset) "," no description <br /><br />"
"android.text.Layout.getTopPadding () "," Returns the (negative) number of extra pixels of ascent padding in the top line of the Layout. <br /><br />"
"android.text.Layout.getBottomPadding () "," Returns the number of extra pixels of descent padding in the bottom line of the Layout. <br /><br />"
"android.text.Layout.getParagraphAlignment (int line) "," Get the alignment of the specified paragraph, taking into account markup attached to it. <br /><br />"
"android.text.Layout.increaseWidthTo (int wid) "," Increase the width of this layout to the specified width. <br /><br />"
"android.text.Layout.getEllipsisStart (int line) "," Return the offset of the first character to be ellipsized away, relative to the start of the line. <br /><br />"
"android.text.Layout.getLineStart (int line) "," Return the text offset of the beginning of the specified line ( 0 getLineCount()). <br /><br />"
"android.text.Layout.getOffsetForHorizontal (int line, float horiz) "," Get the character offset on the specified line whose position is closest to the specified horizontal position. <br /><br />"
"android.text.Layout.Rect () "," Return the baseline for the specified line (0 getLineCount() - 1) If bounds is not null, return the top, left, right, bottom extents of the specified line in it. <br /><br />"
"android.text.Layout.getLineDirections (int line) "," Returns the directional run information for the specified line. <br /><br />"
"android.text.Layout.getParagraphRight (int line) "," Get the right edge of the specified paragraph, inset by right margins. <br /><br />"
"android.text.Layout.getHeight () "," Return the total height of this layout. <br /><br />"
"android.text.Layout.getLineDescent (int line) "," Return the descent of the specified line(0 getLineCount() - 1). <br /><br />"
"android.text.Layout.getLineAscent (int line) "," Get the ascent of the text on the specified line. <br /><br />"
"android.text.Layout.getLineRight (int line) "," Get the rightmost position that should be exposed for horizontal scrolling on the specified line. <br /><br />"
"android.text.Layout.isRtlCharAt (int offset) "," Returns true if the character at offset is right to left (RTL). <br /><br />"
"android.text.Layout.getWidth () "," Return the width of this layout. <br /><br />"
"android.text.Layout.getOffsetToLeftOf (int offset) "," no description <br /><br />"
"android.text.Layout.getLineContainsTab (int line) "," Returns whether the specified line contains one or more characters that need to be handled specially, like tabs or emoji. <br /><br />"
"android.text.Layout.getSpacingAdd () "," Return the number of units of leading that are added to each line. <br /><br />"
"android.text.Layout.getLineForVertical (int vertical) "," Get the line number corresponding to the specified vertical position. <br /><br />"
"android.text.Layout.getParagraphLeft (int line) "," Get the left edge of the specified paragraph, inset by left margins. <br /><br />"
"android.text.Layout.getLineTop (int line) "," Return the vertical position of the top of the specified line (0 getLineCount()). <br /><br />"
"android.text.Layout.getEllipsisCount (int line) "," Returns the number of characters to be ellipsized away, or 0 if no ellipsis is to take place. <br /><br />"
"android.text.Layout.Path () "," Fills in the specified Path with a representation of a highlight between the specified offsets. <br /><br />"
"android.text.Layout.getLineBaseline (int line) "," Return the vertical position of the baseline of the specified line. <br /><br />"
"android.text.Layout.getSecondaryHorizontal (int offset) "," Get the secondary horizontal position for the specified text offset. <br /><br />"
"android.text.Layout.getAlignment () "," Return the base alignment of this layout. <br /><br />"
"android.text.Layout.Canvas () "," Draw this Layout on the specified Canvas. <br /><br />"
"android.text.Layout.getLineEnd (int line) "," Return the text offset after the last character on the specified line. <br /><br />"
"android.text.Layout.getLineWidth (int line) "," Gets the unsigned horizontal extent of the specified line, including leading margin indent and trailing whitespace. <br /><br />"
"android.text.Layout.CharSequence () "," Fills in the specified Path with a representation of a cursor at the specified offset. <br /><br />"
"android.text.Layout.getLineVisibleEnd (int line) "," Return the text offset after the last visible character (so whitespace is not counted) on the specified line. <br /><br />"
"android.text.Layout.getText () "," Return the text that is displayed by this Layout. <br /><br />"
"android.text.Layout.getLineCount () "," Return the number of lines of text in this layout. <br /><br />"
"android.text.Layout.getPaint () "," Return the base Paint properties for this layout. <br /><br />"
"android.text.Layout.TextPaint () "," Return how wide a layout must be in order to display the specified text with one line per paragraph. <br /><br />"
"android.text.Layout.Paint () "," Draw this Layout on the specified canvas, with the highlight path drawn between the background and the text. <br /><br />"
"android.text.Layout.getLineBottom (int line) "," Return the vertical position of the bottom of the specified line. <br /><br />"
"android.text.Layout.DIR_RIGHT_TO_LEFT (int line) "," Returns the primary directionality of the paragraph containing the specified line, either 1 for left-to-right lines, or -1 for right-to-left lines (see DIR_LEFT_TO_RIGHT, DIR_RIGHT_TO_LEFT). <br /><br />"
"android.text.Layout.getPrimaryHorizontal (int offset) "," Get the primary horizontal position for the specified text offset. <br /><br />"
"android.text.Layout.getWidth () () "," Return the width to which this Layout is ellipsizing, or getWidth() if it is not doing anything special. <br /><br />"
"android.text.Layout.getLineLeft (int line) "," Get the leftmost position that should be exposed for horizontal scrolling on the specified line. <br /><br />"
"android.text.Layout.getLineForOffset (int offset) "," Get the line number on which the specified text offset appears. <br /><br />"
"android.text.Layout.getSpacingMultiplier () "," Return what the text height is multiplied by to get the line height. <br /><br />"
"android.text.LoginFilter.PasswordFilterGMail.isAllowed (char c) "," Returns whether or not we allow character c. <br /><br />"
"android.text.LoginFilter.UsernameFilterGeneric.isAllowed (char c) "," Returns whether or not we allow character c. <br /><br />"
"android.text.LoginFilter.UsernameFilterGMail.isAllowed (char c) "," Returns whether or not we allow character c. <br /><br />"
"android.text.method.ArrowKeyMovementMethod.Spannable () "," no description <br /><br />"
"android.text.method.ArrowKeyMovementMethod.getInstance () "," no description <br /><br />"
"android.text.method.ArrowKeyMovementMethod.MotionEvent () "," no description <br /><br />"
"android.text.method.ArrowKeyMovementMethod.canSelectArbitrarily () "," Returns true if this movement method allows arbitrary selection of any text; false if it has no selection (like a movement method that only scrolls) or a constrained selection (for example limited to links. <br /><br />"
"android.text.method.BaseKeyListener.TextView () "," Performs the action that happens when you press the KEYCODE_FORWARD_DEL key in a TextView. <br /><br />"
"android.text.method.BaseKeyListener.KeyEvent () "," Base implementation handles ACTION_MULTIPLE KEYCODE_UNKNOWN by inserting the event's text into the content. <br /><br />"
"android.text.method.BaseMovementMethod.Spannable () "," no description <br /><br />"
"android.text.method.BaseMovementMethod.KeyEvent () "," no description <br /><br />"
"android.text.method.BaseMovementMethod.MotionEvent () "," no description <br /><br />"
"android.text.method.BaseMovementMethod.canSelectArbitrarily () "," Returns true if this movement method allows arbitrary selection of any text; false if it has no selection (like a movement method that only scrolls) or a constrained selection (for example limited to links. <br /><br />"
"android.text.method.CharacterPickerDialog.View () "," Handles clicks on the character buttons. <br /><br />"
"android.text.method.DateKeyListener.getInputType () "," no description <br /><br />"
"android.text.method.DateKeyListener.getInstance () "," no description <br /><br />"
"android.text.method.DateTimeKeyListener.getInputType () "," no description <br /><br />"
"android.text.method.DateTimeKeyListener.getInstance () "," no description <br /><br />"
"android.text.method.DialerKeyListener.getInputType () "," no description <br /><br />"
"android.text.method.DialerKeyListener.getInstance () "," no description <br /><br />"
"android.text.method.DigitsKeyListener.String () "," Returns a DigitsKeyListener that accepts only the characters that appear in the specified String. <br /><br />"
"android.text.method.DigitsKeyListener.getInputType () "," no description <br /><br />"
"android.text.method.DigitsKeyListener.getInstance () "," Returns a DigitsKeyListener that accepts the digits 0 through 9. <br /><br />"
"android.text.method.DigitsKeyListener.getInstance (boolean sign, boolean decimal) "," Returns a DigitsKeyListener that accepts the digits 0 through 9, plus the minus sign (only at the beginning) and/or decimal point (only one per field) if specified. <br /><br />"
"android.text.method.DigitsKeyListener.Spanned () "," This method is called when the buffer is going to replace the range dstart   dend of dest with the new text from the range start   end of source. <br /><br />"
"android.text.method.HideReturnsTransformationMethod.getInstance () "," no description <br /><br />"
"android.text.method.KeyListener.Editable () "," Remove the given shift states from the edited text. <br /><br />"
"android.text.method.KeyListener.KeyEvent () "," If the key listener wants to handle this key release, return true, otherwise return false and the caller (i.e.&nbsp;the widget host) will handle the key. <br /><br />"
"android.text.method.KeyListener.InputType () "," Return the type of text that this key listener is manipulating, as per InputType. <br /><br />"
"android.text.method.LinkMovementMethod.Spannable () "," no description <br /><br />"
"android.text.method.LinkMovementMethod.getInstance () "," no description <br /><br />"
"android.text.method.LinkMovementMethod.MotionEvent () "," no description <br /><br />"
"android.text.method.LinkMovementMethod.canSelectArbitrarily () "," Returns true if this movement method allows arbitrary selection of any text; false if it has no selection (like a movement method that only scrolls) or a constrained selection (for example limited to links. <br /><br />"
"android.text.method.MetaKeyKeyListener.Editable () "," no description <br /><br />"
"android.text.method.MetaKeyKeyListener.Spannable () "," Resets all meta state to inactive. <br /><br />"
"android.text.method.MetaKeyKeyListener.adjustMetaAfterKeypress (long state) "," Call this method after you handle a keypress so that the meta state will be reset to unshifted (if it is not still down) or primed to be reset to unshifted (once it is released). <br /><br />"
"android.text.method.MetaKeyKeyListener.getMetaState (long state, int meta) "," Gets the state of a particular meta key. <br /><br />"
"android.text.method.MetaKeyKeyListener.KeyEvent () "," Handles release of the meta keys. <br /><br />"
"android.text.method.MetaKeyKeyListener.resetLockedMeta (long state) "," Call this if you are a method that ignores the locked meta state (arrow keys, for example) and you handle a key. <br /><br />"
"android.text.method.MetaKeyKeyListener.getMetaState (long state) "," Gets the state of the meta keys. <br /><br />"
"android.text.method.MetaKeyKeyListener.CharSequence () "," Gets the state of a particular meta key. <br /><br />"
"android.text.method.MetaKeyKeyListener.Object () "," Returns true if this object is one that this class would use to keep track of the selecting meta state in the specified text. <br /><br />"
"android.text.method.MetaKeyKeyListener.clearMetaKeyState (long state, int which) "," Clears the state of the specified meta key if it is locked. <br /><br />"
"android.text.method.MovementMethod.Spannable () "," no description <br /><br />"
"android.text.method.MovementMethod.KeyEvent () "," no description <br /><br />"
"android.text.method.MovementMethod.MotionEvent () "," no description <br /><br />"
"android.text.method.MovementMethod.canSelectArbitrarily () "," Returns true if this movement method allows arbitrary selection of any text; false if it has no selection (like a movement method that only scrolls) or a constrained selection (for example limited to links. <br /><br />"
"android.text.method.MultiTapKeyListener.getInputType () "," no description <br /><br />"
"android.text.method.MultiTapKeyListener.KeyEvent () "," Handles presses of the meta keys. <br /><br />"
"android.text.method.MultiTapKeyListener.TextKeyListener.Capitalize () "," Returns a new or existing instance with the specified capitalization and correction properties. <br /><br />"
"android.text.method.MultiTapKeyListener.Object () "," This method is called to notify you that the specified object has been detached from the specified range of the text. <br /><br />"
"android.text.method.NumberKeyListener.KeyEvent () "," Handles presses of the meta keys. <br /><br />"
"android.text.method.NumberKeyListener.Spanned () "," This method is called when the buffer is going to replace the range dstart   dend of dest with the new text from the range start   end of source. <br /><br />"
"android.text.method.PasswordTransformationMethod.Rect () "," This method is called when the TextView that uses this TransformationMethod gains or loses focus. <br /><br />"
"android.text.method.PasswordTransformationMethod.Editable () "," This method is called to notify you that, somewhere within s, the text has been changed. <br /><br />"
"android.text.method.PasswordTransformationMethod.getInstance () "," no description <br /><br />"
"android.text.method.PasswordTransformationMethod.CharSequence () "," This method is called to notify you that, within s, the count characters beginning at start have just replaced old text that had length before. <br /><br />"
"android.text.method.PasswordTransformationMethod.View () "," Returns a CharSequence that is a transformation of the source text -- for example, replacing each character with a dot in a password field. <br /><br />"
"android.text.method.QwertyKeyListener.String () "," Marks the specified region of content as having contained original prior to AutoText replacement. <br /><br />"
"android.text.method.QwertyKeyListener.getInstanceForFullKeyboard () "," Gets an instance of the listener suitable for use with full keyboards. <br /><br />"
"android.text.method.QwertyKeyListener.getInputType () "," no description <br /><br />"
"android.text.method.QwertyKeyListener.KeyEvent () "," Handles presses of the meta keys. <br /><br />"
"android.text.method.QwertyKeyListener.TextKeyListener.Capitalize () "," Returns a new or existing instance with the specified capitalization and correction properties. <br /><br />"
"android.text.method.ReplacementTransformationMethod.Rect () "," This method is called when the TextView that uses this TransformationMethod gains or loses focus. <br /><br />"
"android.text.method.ReplacementTransformationMethod.getReplacement () () "," Returns a CharSequence that will mirror the contents of the source CharSequence but with the characters in getOriginal() replaced by ones from getReplacement(). <br /><br />"
"android.text.method.ScrollingMovementMethod.Spannable () "," no description <br /><br />"
"android.text.method.ScrollingMovementMethod.getInstance () "," no description <br /><br />"
"android.text.method.ScrollingMovementMethod.MotionEvent () "," no description <br /><br />"
"android.text.method.SingleLineTransformationMethod.getInstance () "," no description <br /><br />"
"android.text.method.TextKeyListener.Editable () "," Clear all the input state (autotext, autocap, multitap, undo) from the specified Editable, going beyond Editable.clear(), which just clears the text but not the input state. <br /><br />"
"android.text.method.TextKeyListener.getInputType () "," no description <br /><br />"
"android.text.method.TextKeyListener.getInstance () "," Returns a new or existing instance with no automatic capitalization or correction. <br /><br />"
"android.text.method.TextKeyListener.KeyEvent () "," Handles release of the meta keys. <br /><br />"
"android.text.method.TextKeyListener.CharSequence () "," Returns whether it makes sense to automatically capitalize at the specified position in the specified text, with the specified rules. <br /><br />"
"android.text.method.TextKeyListener.TextKeyListener.Capitalize () "," Returns a new or existing instance with the specified capitalization and correction properties. <br /><br />"
"android.text.method.TextKeyListener.release () "," no description <br /><br />"
"android.text.method.TextKeyListener.Object () "," This method is called to notify you that the specified object has been detached from the specified range of the text. <br /><br />"
"android.text.method.TimeKeyListener.getInputType () "," no description <br /><br />"
"android.text.method.TimeKeyListener.getInstance () "," no description <br /><br />"
"android.text.method.Touch.Layout () "," Scrolls the specified widget to the specified coordinates, except constrains the X scrolling position to the horizontal regions of the text that will be visible after scrolling to the specified Y position. <br /><br />"
"android.text.method.Touch.Spannable () "," no description <br /><br />"
"android.text.method.Touch.MotionEvent () "," Handles touch events for dragging. <br /><br />"
"android.text.method.TransformationMethod.Rect () "," This method is called when the TextView that uses this TransformationMethod gains or loses focus. <br /><br />"
"android.text.method.TransformationMethod.View () "," Returns a CharSequence that is a transformation of the source text -- for example, replacing each character with a dot in a password field. <br /><br />"
"android.text.ParcelableSpan.getSpanTypeId () "," Return a special type identifier for this span class. <br /><br />"
"android.text.Selection.Spannable () "," Set the selection anchor to start and the selection edge to stop. <br /><br />"
"android.text.Selection.Layout () "," Move the cursor to the buffer offset physically above the current offset, to the beginning if it is on the top line but not at the start, or return false if the cursor is already on the top line. <br /><br />"
"android.text.Selection.CharSequence () "," Return the offset of the selection anchor or cursor, or -1 if there is no selection or cursor. <br /><br />"
"android.text.Spannable.Factory.getInstance () "," Returns the standard Spannable Factory. <br /><br />"
"android.text.Spannable.Factory.CharSequence () "," Returns a new SpannableString from the specified CharSequence. <br /><br />"
"android.text.Spannable.Object () "," Attach the specified markup object to the range start end of the text, or move the object to that range if it was already attached elsewhere. <br /><br />"
"android.text.SpannableString.length () "," Returns the number of characters in this sequence. <br /><br />"
"android.text.SpannableString.charAt (int i) "," Returns the character at index. <br /><br />"
"android.text.SpannableString.subSequence (int start, int end) "," Returns a CharSequence from the start index (inclusive) to the end index (exclusive) of this sequence. <br /><br />"
"android.text.SpannableString.setSpan (Object, int, int, int) () "," Return the flags that were specified when setSpan(Object, int, int, int) was used to attach the specified markup object, or 0 if the specified object has not been attached. <br /><br />"
"android.text.SpannableString.getChars (int start, int end, char[] dest, int off) "," Exactly like String.getChars(): copy chars start through end - 1 from this CharSequence into dest beginning at offset destoff. <br /><br />"
"android.text.SpannableString.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.text.SpannableString.CharSequence () "," no description <br /><br />"
"android.text.SpannableString.Object () "," no description <br /><br />"
"android.text.SpannableString.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.text.SpannableString.Class () "," Return the first offset greater than or equal to start where a markup object of class type begins or ends, or limit if there are no starts or ends greater than or equal to start but less than limit. <br /><br />"
"android.text.SpannableStringBuilder.InputFilter[] () "," Sets the series of filters that will be called in succession whenever the text of this Editable is changed, each of which has the opportunity to limit or transform the text that is being inserted. <br /><br />"
"android.text.SpannableStringBuilder.length () "," Return the number of chars in the buffer. <br /><br />"
"android.text.SpannableStringBuilder.getFilters () "," Returns the array of input filters that are currently applied to changes to this Editable. <br /><br />"
"android.text.SpannableStringBuilder.removeSpan (Object) () "," Removes all spans from the Editable, as if by calling removeSpan(Object) on each of them. <br /><br />"
"android.text.SpannableStringBuilder.CharSequence () "," no description <br /><br />"
"android.text.SpannableStringBuilder.Object () "," Mark the specified range of text with the specified object. <br /><br />"
"android.text.SpannableStringBuilder.append (char text) "," Convenience for append(String.valueOf(text)). <br /><br />"
"android.text.SpannableStringBuilder.getChars (int start, int end, char[] dest, int destoff) "," Copy the specified range of chars from this buffer into the specified array, beginning at the specified offset. <br /><br />"
"android.text.SpannableStringBuilder.toString () "," Return a String containing a copy of the chars in this buffer. <br /><br />"
"android.text.SpannableStringBuilder.Class () "," Return the next offset after start but less than or equal to limit where a span of the specified type begins or ends. <br /><br />"
"android.text.SpannableStringBuilder.Paint () "," This method was deprecated in API level 12. This is an internal method, refrain from using it in your code <br /><br />"
"android.text.SpannableStringBuilder.subSequence (int start, int end) "," Return a new CharSequence containing a copy of the specified range of this buffer, including the overlapping spans. <br /><br />"
"android.text.SpannableStringBuilder.charAt (int where) "," Return the char at the specified offset within the buffer. <br /><br />"
"android.text.SpannableStringBuilder.clear () "," Convenience for replace(0, length(), '', 0, 0) <br /><br />"
"android.text.SpannableStringBuilder.delete (int start, int end) "," Convenience for replace(st, en, '', 0, 0) <br /><br />"
"android.text.SpannableStringBuilder.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.text.Spanned.setSpan (Object, int, int, int) () "," Return the flags that were specified when setSpan(Object, int, int, int) was used to attach the specified markup object, or 0 if the specified object has not been attached. <br /><br />"
"android.text.Spanned.Object () "," Return the beginning of the range of text to which the specified markup object is attached, or -1 if the object is not attached. <br /><br />"
"android.text.Spanned.Class () "," Return the first offset greater than or equal to start where a markup object of class type begins or ends, or limit if there are no starts or ends greater than or equal to start but less than limit. <br /><br />"
"android.text.SpannedString.length () "," Returns the number of characters in this sequence. <br /><br />"
"android.text.SpannedString.charAt (int i) "," Returns the character at index. <br /><br />"
"android.text.SpannedString.subSequence (int start, int end) "," Returns a CharSequence from the start index (inclusive) to the end index (exclusive) of this sequence. <br /><br />"
"android.text.SpannedString.setSpan (Object, int, int, int) () "," Return the flags that were specified when setSpan(Object, int, int, int) was used to attach the specified markup object, or 0 if the specified object has not been attached. <br /><br />"
"android.text.SpannedString.getChars (int start, int end, char[] dest, int off) "," Exactly like String.getChars(): copy chars start through end - 1 from this CharSequence into dest beginning at offset destoff. <br /><br />"
"android.text.SpannedString.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.text.SpannedString.CharSequence () "," no description <br /><br />"
"android.text.SpannedString.Object () "," Return the beginning of the range of text to which the specified markup object is attached, or -1 if the object is not attached. <br /><br />"
"android.text.SpannedString.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.text.SpannedString.Class () "," Return the first offset greater than or equal to start where a markup object of class type begins or ends, or limit if there are no starts or ends greater than or equal to start but less than limit. <br /><br />"
"android.text.SpanWatcher.Object () "," This method is called to notify you that the specified object has been detached from the specified range of the text. <br /><br />"
"android.text.StaticLayout.getLineForVertical (int vertical) "," Get the line number corresponding to the specified vertical position. <br /><br />"
"android.text.StaticLayout.getEllipsisCount (int line) "," Returns the number of characters to be ellipsized away, or 0 if no ellipsis is to take place. <br /><br />"
"android.text.StaticLayout.getLineTop (int line) "," Return the vertical position of the top of the specified line (0 getLineCount()). <br /><br />"
"android.text.StaticLayout.getTopPadding () "," Returns the (negative) number of extra pixels of ascent padding in the top line of the Layout. <br /><br />"
"android.text.StaticLayout.getBottomPadding () "," Returns the number of extra pixels of descent padding in the bottom line of the Layout. <br /><br />"
"android.text.StaticLayout.getEllipsisStart (int line) "," Return the offset of the first character to be ellipsized away, relative to the start of the line. <br /><br />"
"android.text.StaticLayout.getLineCount () "," Return the number of lines of text in this layout. <br /><br />"
"android.text.StaticLayout.getLineStart (int line) "," Return the text offset of the beginning of the specified line ( 0 getLineCount()). <br /><br />"
"android.text.StaticLayout.getLineDirections (int line) "," Returns the directional run information for the specified line. <br /><br />"
"android.text.StaticLayout.DIR_RIGHT_TO_LEFT (int line) "," Returns the primary directionality of the paragraph containing the specified line, either 1 for left-to-right lines, or -1 for right-to-left lines (see DIR_LEFT_TO_RIGHT, DIR_RIGHT_TO_LEFT). <br /><br />"
"android.text.StaticLayout.getWidth () () "," Return the width to which this Layout is ellipsizing, or getWidth() if it is not doing anything special. <br /><br />"
"android.text.StaticLayout.getLineDescent (int line) "," Return the descent of the specified line(0 getLineCount() - 1). <br /><br />"
"android.text.StaticLayout.getLineContainsTab (int line) "," Returns whether the specified line contains one or more characters that need to be handled specially, like tabs or emoji. <br /><br />"
"android.text.style.AbsoluteSizeSpan.getSpanTypeId () "," Return a special type identifier for this span class. <br /><br />"
"android.text.style.AbsoluteSizeSpan.getDip () "," no description <br /><br />"
"android.text.style.AbsoluteSizeSpan.getSize () "," no description <br /><br />"
"android.text.style.AbsoluteSizeSpan.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.text.style.AbsoluteSizeSpan.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.text.style.AbsoluteSizeSpan.TextPaint () "," no description <br /><br />"
"android.text.style.AlignmentSpan.Standard.getSpanTypeId () "," Return a special type identifier for this span class. <br /><br />"
"android.text.style.AlignmentSpan.Standard.getAlignment () "," no description <br /><br />"
"android.text.style.AlignmentSpan.Standard.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.text.style.AlignmentSpan.Standard.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.text.style.BackgroundColorSpan.getSpanTypeId () "," Return a special type identifier for this span class. <br /><br />"
"android.text.style.BackgroundColorSpan.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.text.style.BackgroundColorSpan.getBackgroundColor () "," no description <br /><br />"
"android.text.style.BackgroundColorSpan.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.text.style.BackgroundColorSpan.TextPaint () "," no description <br /><br />"
"android.text.style.BulletSpan.Layout () "," Renders the leading margin. <br /><br />"
"android.text.style.BulletSpan.getSpanTypeId () "," Return a special type identifier for this span class. <br /><br />"
"android.text.style.BulletSpan.getLeadingMargin (boolean first) "," Returns the amount by which to adjust the leading margin. <br /><br />"
"android.text.style.BulletSpan.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.text.style.BulletSpan.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.text.style.CharacterStyle.CharacterStyle () "," A given CharacterStyle can only applied to a single region of a given Spanned. <br /><br />"
"android.text.style.CharacterStyle.wrap (CharacterStyle) () "," Returns 'this' for most CharacterStyles, but for CharacterStyles that were generated by wrap(CharacterStyle), returns the underlying CharacterStyle. <br /><br />"
"android.text.style.CharacterStyle.TextPaint () "," no description <br /><br />"
"android.text.style.ClickableSpan.View () "," Performs the click action associated with this span. <br /><br />"
"android.text.style.ClickableSpan.TextPaint () "," Makes the text underlined and in the link color. <br /><br />"
"android.text.style.DrawableMarginSpan.Layout () "," Renders the leading margin. <br /><br />"
"android.text.style.DrawableMarginSpan.Paint.FontMetricsInt () "," no description <br /><br />"
"android.text.style.DrawableMarginSpan.getLeadingMargin (boolean first) "," Returns the amount by which to adjust the leading margin. <br /><br />"
"android.text.style.DynamicDrawableSpan.Paint.FontMetricsInt () "," no description <br /><br />"
"android.text.style.DynamicDrawableSpan.ALIGN_BASELINE () "," Returns the vertical alignment of this span, one of ALIGN_BOTTOM or ALIGN_BASELINE. <br /><br />"
"android.text.style.DynamicDrawableSpan.getDrawable () "," Your subclass must implement this method to provide the bitmap to be drawn. <br /><br />"
"android.text.style.DynamicDrawableSpan.Paint () "," no description <br /><br />"
"android.text.style.EasyEditSpan.getSpanTypeId () "," Return a special type identifier for this span class. <br /><br />"
"android.text.style.EasyEditSpan.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.text.style.EasyEditSpan.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.text.style.ForegroundColorSpan.getSpanTypeId () "," Return a special type identifier for this span class. <br /><br />"
"android.text.style.ForegroundColorSpan.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.text.style.ForegroundColorSpan.getForegroundColor () "," no description <br /><br />"
"android.text.style.ForegroundColorSpan.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.text.style.ForegroundColorSpan.TextPaint () "," no description <br /><br />"
"android.text.style.IconMarginSpan.Layout () "," Renders the leading margin. <br /><br />"
"android.text.style.IconMarginSpan.Paint.FontMetricsInt () "," no description <br /><br />"
"android.text.style.IconMarginSpan.getLeadingMargin (boolean first) "," Returns the amount by which to adjust the leading margin. <br /><br />"
"android.text.style.ImageSpan.getDrawable () "," Your subclass must implement this method to provide the bitmap to be drawn. <br /><br />"
"android.text.style.ImageSpan.getSource () "," Returns the source string that was saved during construction. <br /><br />"
"android.text.style.LeadingMarginSpan.LeadingMarginSpan2.getLeadingMarginLineCount () "," Returns the number of lines of the paragraph to which this object is attached that the 'first line' margin will apply to. <br /><br />"
"android.text.style.LeadingMarginSpan.Standard.Layout () "," Renders the leading margin. <br /><br />"
"android.text.style.LeadingMarginSpan.Standard.getSpanTypeId () "," Return a special type identifier for this span class. <br /><br />"
"android.text.style.LeadingMarginSpan.Standard.getLeadingMargin (boolean first) "," Returns the amount by which to adjust the leading margin. <br /><br />"
"android.text.style.LeadingMarginSpan.Standard.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.text.style.LeadingMarginSpan.Standard.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.text.style.LineBackgroundSpan.CharSequence () "," no description <br /><br />"
"android.text.style.LineHeightSpan.WithDensity.TextPaint () "," no description <br /><br />"
"android.text.style.LocaleSpan.getSpanTypeId () "," Return a special type identifier for this span class. <br /><br />"
"android.text.style.LocaleSpan.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.text.style.LocaleSpan.Locale () "," Returns the Locale. <br /><br />"
"android.text.style.LocaleSpan.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.text.style.LocaleSpan.TextPaint () "," no description <br /><br />"
"android.text.style.MaskFilterSpan.getMaskFilter () "," no description <br /><br />"
"android.text.style.MaskFilterSpan.TextPaint () "," no description <br /><br />"
"android.text.style.MetricAffectingSpan.wrap (CharacterStyle) () "," Returns 'this' for most MetricAffectingSpans, but for MetricAffectingSpans that were generated by wrap(CharacterStyle), returns the underlying MetricAffectingSpan. <br /><br />"
"android.text.style.MetricAffectingSpan.TextPaint () "," no description <br /><br />"
"android.text.style.QuoteSpan.Layout () "," Renders the leading margin. <br /><br />"
"android.text.style.QuoteSpan.getSpanTypeId () "," Return a special type identifier for this span class. <br /><br />"
"android.text.style.QuoteSpan.getLeadingMargin (boolean first) "," Returns the amount by which to adjust the leading margin. <br /><br />"
"android.text.style.QuoteSpan.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.text.style.QuoteSpan.getColor () "," no description <br /><br />"
"android.text.style.QuoteSpan.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.text.style.RasterizerSpan.getRasterizer () "," no description <br /><br />"
"android.text.style.RasterizerSpan.TextPaint () "," no description <br /><br />"
"android.text.style.RelativeSizeSpan.getSpanTypeId () "," Return a special type identifier for this span class. <br /><br />"
"android.text.style.RelativeSizeSpan.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.text.style.RelativeSizeSpan.getSizeChange () "," no description <br /><br />"
"android.text.style.RelativeSizeSpan.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.text.style.RelativeSizeSpan.TextPaint () "," no description <br /><br />"
"android.text.style.ReplacementSpan.Paint.FontMetricsInt () "," no description <br /><br />"
"android.text.style.ReplacementSpan.TextPaint () "," This method does nothing, since ReplacementSpans are measured explicitly instead of affecting Paint properties. <br /><br />"
"android.text.style.ReplacementSpan.Paint () "," no description <br /><br />"
"android.text.style.ScaleXSpan.getSpanTypeId () "," Return a special type identifier for this span class. <br /><br />"
"android.text.style.ScaleXSpan.getScaleX () "," no description <br /><br />"
"android.text.style.ScaleXSpan.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.text.style.ScaleXSpan.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.text.style.ScaleXSpan.TextPaint () "," no description <br /><br />"
"android.text.style.StrikethroughSpan.getSpanTypeId () "," Return a special type identifier for this span class. <br /><br />"
"android.text.style.StrikethroughSpan.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.text.style.StrikethroughSpan.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.text.style.StrikethroughSpan.TextPaint () "," no description <br /><br />"
"android.text.style.StyleSpan.getSpanTypeId () "," Return a special type identifier for this span class. <br /><br />"
"android.text.style.StyleSpan.Typeface () "," Returns the style constant defined in Typeface. <br /><br />"
"android.text.style.StyleSpan.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.text.style.StyleSpan.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.text.style.StyleSpan.TextPaint () "," no description <br /><br />"
"android.text.style.SubscriptSpan.getSpanTypeId () "," Return a special type identifier for this span class. <br /><br />"
"android.text.style.SubscriptSpan.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.text.style.SubscriptSpan.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.text.style.SubscriptSpan.TextPaint () "," no description <br /><br />"
"android.text.style.SuggestionSpan.getSuggestions () "," no description <br /><br />"
"android.text.style.SuggestionSpan.getSpanTypeId () "," Return a special type identifier for this span class. <br /><br />"
"android.text.style.SuggestionSpan.getLocale () "," no description <br /><br />"
"android.text.style.SuggestionSpan.setFlags (int flags) "," no description <br /><br />"
"android.text.style.SuggestionSpan.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.text.style.SuggestionSpan.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.text.style.SuggestionSpan.getFlags () "," no description <br /><br />"
"android.text.style.SuggestionSpan.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.text.style.SuggestionSpan.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.text.style.SuggestionSpan.TextPaint () "," no description <br /><br />"
"android.text.style.SuperscriptSpan.getSpanTypeId () "," Return a special type identifier for this span class. <br /><br />"
"android.text.style.SuperscriptSpan.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.text.style.SuperscriptSpan.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.text.style.SuperscriptSpan.TextPaint () "," no description <br /><br />"
"android.text.style.TabStopSpan.Standard.getTabStop () "," Returns the offset of the tab stop from the leading margin of the line. <br /><br />"
"android.text.style.TextAppearanceSpan.getTextColor () "," Returns the text color specified by this span, or null if it does not specify one. <br /><br />"
"android.text.style.TextAppearanceSpan.getLinkTextColor () "," Returns the link color specified by this span, or null if it does not specify one. <br /><br />"
"android.text.style.TextAppearanceSpan.getTextSize () "," Returns the text size specified by this span, or -1 if it does not specify one. <br /><br />"
"android.text.style.TextAppearanceSpan.getSpanTypeId () "," Return a special type identifier for this span class. <br /><br />"
"android.text.style.TextAppearanceSpan.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.text.style.TextAppearanceSpan.getFamily () "," Returns the typeface family specified by this span, or null if it does not specify one. <br /><br />"
"android.text.style.TextAppearanceSpan.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.text.style.TextAppearanceSpan.TextPaint () "," no description <br /><br />"
"android.text.style.TextAppearanceSpan.getTextStyle () "," Returns the text style specified by this span, or 0 if it does not specify one. <br /><br />"
"android.text.style.TtsSpan.Builder&lt;C&nbsp;extends&nbsp;android.text.style.TtsSpan.Builder&lt;?&gt;&gt;.String () "," Sets an argument to a string value. <br /><br />"
"android.text.style.TtsSpan.Builder&lt;C&nbsp;extends&nbsp;android.text.style.TtsSpan.Builder&lt;?&gt;&gt;.build () "," Returns a TtsSpan built from the parameters set by the setter methods. <br /><br />"
"android.text.style.TtsSpan.CardinalBuilder.ARG_NUMBER (long number) "," Convenience method that converts the number to a String and set it to the value for ARG_NUMBER. <br /><br />"
"android.text.style.TtsSpan.CardinalBuilder.ARG_NUMBER () "," Sets the ARG_NUMBER argument. <br /><br />"
"android.text.style.TtsSpan.DateBuilder.ARG_MONTH (int month) "," Sets the ARG_MONTH argument. <br /><br />"
"android.text.style.TtsSpan.DateBuilder.ARG_YEAR (int year) "," Sets the ARG_YEAR argument. <br /><br />"
"android.text.style.TtsSpan.DateBuilder.ARG_WEEKDAY (int weekday) "," Sets the ARG_WEEKDAY argument. <br /><br />"
"android.text.style.TtsSpan.DateBuilder.ARG_DAY (int day) "," Sets the ARG_DAY argument. <br /><br />"
"android.text.style.TtsSpan.DecimalBuilder.ARG_FRACTIONAL_PART () "," Sets the ARG_FRACTIONAL_PART argument. <br /><br />"
"android.text.style.TtsSpan.DecimalBuilder.ARG_FRACTIONAL_PART (double number, int minimumFractionDigits, int maximumFractionDigits) "," Convenience method takes a double and a maximum number of fractional digits, it sets the ARG_INTEGER_PART and ARG_FRACTIONAL_PART arguments. <br /><br />"
"android.text.style.TtsSpan.DecimalBuilder.ARG_INTEGER_PART () "," Sets the ARG_INTEGER_PART argument. <br /><br />"
"android.text.style.TtsSpan.DecimalBuilder.ARG_INTEGER_PART (long integerPart) "," Convenience method that converts the number to a String and sets it to the value for ARG_INTEGER_PART. <br /><br />"
"android.text.style.TtsSpan.DigitsBuilder.ARG_DIGITS () "," Sets the ARG_DIGITS argument. <br /><br />"
"android.text.style.TtsSpan.ElectronicBuilder.ARG_PROTOCOL () "," Sets the ARG_PROTOCOL argument. <br /><br />"
"android.text.style.TtsSpan.ElectronicBuilder.ARG_QUERY_STRING () "," Sets the ARG_QUERY_STRING argument. <br /><br />"
"android.text.style.TtsSpan.ElectronicBuilder.ARG_PORT (int port) "," Sets the ARG_PORT argument. <br /><br />"
"android.text.style.TtsSpan.ElectronicBuilder.ARG_PASSWORD () "," Sets the ARG_PASSWORD argument. <br /><br />"
"android.text.style.TtsSpan.ElectronicBuilder.ARG_DOMAIN () "," Sets the ARG_USERNAME and ARG_DOMAIN arguments, representing an email address. <br /><br />"
"android.text.style.TtsSpan.ElectronicBuilder.ARG_USERNAME () "," Sets the ARG_USERNAME argument. <br /><br />"
"android.text.style.TtsSpan.ElectronicBuilder.ARG_PATH () "," Sets the ARG_PATH argument. <br /><br />"
"android.text.style.TtsSpan.ElectronicBuilder.ARG_FRAGMENT_ID () "," Sets the ARG_FRAGMENT_ID argument. <br /><br />"
"android.text.style.TtsSpan.FractionBuilder.ARG_NUMERATOR () "," Sets the ARG_NUMERATOR argument. <br /><br />"
"android.text.style.TtsSpan.FractionBuilder.ARG_DENOMINATOR () "," Sets the ARG_DENOMINATOR argument. <br /><br />"
"android.text.style.TtsSpan.FractionBuilder.ARG_DENOMINATOR (long denominator) "," Convenience method that converts the denominator to a String and sets the argument ARG_DENOMINATOR. <br /><br />"
"android.text.style.TtsSpan.FractionBuilder.ARG_NUMBER (long integerPart) "," Convenience method that converts the integer to a String and sets the argument ARG_NUMBER. <br /><br />"
"android.text.style.TtsSpan.FractionBuilder.ARG_NUMERATOR (long numerator) "," Convenience method that converts the numerator to a String and sets the argument ARG_NUMERATOR. <br /><br />"
"android.text.style.TtsSpan.FractionBuilder.ARG_INTEGER_PART () "," Sets the ARG_INTEGER_PART argument. <br /><br />"
"android.text.style.TtsSpan.getArgs () "," Returns a bundle of the arguments set. <br /><br />"
"android.text.style.TtsSpan.getSpanTypeId () "," Return a special type identifier for this span class. <br /><br />"
"android.text.style.TtsSpan.getType () "," Returns the type. <br /><br />"
"android.text.style.TtsSpan.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.text.style.TtsSpan.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.text.style.TtsSpan.MeasureBuilder.ARG_FRACTIONAL_PART () "," Sets the ARG_FRACTIONAL_PART argument. <br /><br />"
"android.text.style.TtsSpan.MeasureBuilder.ARG_NUMERATOR () "," Sets the ARG_NUMERATOR argument. <br /><br />"
"android.text.style.TtsSpan.MeasureBuilder.ARG_DENOMINATOR () "," Sets the ARG_DENOMINATOR argument. <br /><br />"
"android.text.style.TtsSpan.MeasureBuilder.ARG_DENOMINATOR (long denominator) "," Convenience method that converts the denominator to a String and set it to the value for ARG_DENOMINATOR. <br /><br />"
"android.text.style.TtsSpan.MeasureBuilder.ARG_NUMBER (long number) "," Convenience method that converts the number to a String and set it to the value for ARG_NUMBER. <br /><br />"
"android.text.style.TtsSpan.MeasureBuilder.ARG_UNIT () "," Sets the ARG_UNIT argument. <br /><br />"
"android.text.style.TtsSpan.MeasureBuilder.ARG_NUMERATOR (long numerator) "," Convenience method that converts the numerator to a String and set it to the value for ARG_NUMERATOR. <br /><br />"
"android.text.style.TtsSpan.MeasureBuilder.ARG_INTEGER_PART () "," Sets the ARG_INTEGER_PART argument. <br /><br />"
"android.text.style.TtsSpan.MeasureBuilder.ARG_NUMBER () "," Sets the ARG_NUMBER argument. <br /><br />"
"android.text.style.TtsSpan.MeasureBuilder.ARG_INTEGER_PART (long integerPart) "," Convenience method that converts the integer part to a String and set it to the value for ARG_INTEGER_PART. <br /><br />"
"android.text.style.TtsSpan.MoneyBuilder.ARG_FRACTIONAL_PART () "," Sets the ARG_FRACTIONAL_PART argument. <br /><br />"
"android.text.style.TtsSpan.MoneyBuilder.ARG_CURRENCY () "," Sets the ARG_CURRENCY argument. <br /><br />"
"android.text.style.TtsSpan.MoneyBuilder.ARG_QUANTITY () "," Sets the ARG_QUANTITY argument. <br /><br />"
"android.text.style.TtsSpan.MoneyBuilder.ARG_INTEGER_PART () "," Sets the ARG_INTEGER_PART argument. <br /><br />"
"android.text.style.TtsSpan.MoneyBuilder.ARG_INTEGER_PART (long integerPart) "," Convenience method that converts the number to a String and set it to the value for ARG_INTEGER_PART. <br /><br />"
"android.text.style.TtsSpan.OrdinalBuilder.ARG_NUMBER (long number) "," Convenience method that converts the number to a String and sets it to the value for ARG_NUMBER. <br /><br />"
"android.text.style.TtsSpan.OrdinalBuilder.ARG_NUMBER () "," Sets the ARG_NUMBER argument. <br /><br />"
"android.text.style.TtsSpan.SemioticClassBuilder&lt;C&nbsp;extends&nbsp;android.text.style.TtsSpan.SemioticClassBuilder&lt;?&gt;&gt;.String () "," Sets the multiplicity information for this instance. <br /><br />"
"android.text.style.TtsSpan.TelephoneBuilder.ARG_NUMBER_PARTS () "," Sets the ARG_NUMBER_PARTS argument. <br /><br />"
"android.text.style.TtsSpan.TelephoneBuilder.ARG_COUNTRY_CODE () "," Sets the ARG_COUNTRY_CODE argument. <br /><br />"
"android.text.style.TtsSpan.TelephoneBuilder.ARG_EXTENSION () "," Sets the ARG_EXTENSION argument. <br /><br />"
"android.text.style.TtsSpan.TextBuilder.ARG_TEXT () "," Sets the ARG_TEXT argument, the text to be synthesized. <br /><br />"
"android.text.style.TtsSpan.TimeBuilder.ARG_MINUTES (int minutes) "," Sets the ARG_MINUTES argument. <br /><br />"
"android.text.style.TtsSpan.TimeBuilder.ARG_HOURS (int hours) "," Sets the ARG_HOURS argument. <br /><br />"
"android.text.style.TtsSpan.VerbatimBuilder.ARG_VERBATIM () "," Sets the ARG_VERBATIM argument. <br /><br />"
"android.text.style.TypefaceSpan.getSpanTypeId () "," Return a special type identifier for this span class. <br /><br />"
"android.text.style.TypefaceSpan.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.text.style.TypefaceSpan.getFamily () "," Returns the font family name. <br /><br />"
"android.text.style.TypefaceSpan.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.text.style.TypefaceSpan.TextPaint () "," no description <br /><br />"
"android.text.style.UnderlineSpan.getSpanTypeId () "," Return a special type identifier for this span class. <br /><br />"
"android.text.style.UnderlineSpan.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.text.style.UnderlineSpan.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.text.style.UnderlineSpan.TextPaint () "," no description <br /><br />"
"android.text.style.URLSpan.getSpanTypeId () "," Return a special type identifier for this span class. <br /><br />"
"android.text.style.URLSpan.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.text.style.URLSpan.getURL () "," no description <br /><br />"
"android.text.style.URLSpan.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.text.style.URLSpan.View () "," Performs the click action associated with this span. <br /><br />"
"android.text.TextDirectionHeuristic.isRtl (char[] array, int start, int count) "," Guess if a chars array is in the RTL direction or not. <br /><br />"
"android.text.TextDirectionHeuristic.CharSequence () "," Guess if a CharSequence is in the RTL direction or not. <br /><br />"
"android.text.TextPaint.TextPaint () "," Copy the fields from tp into this TextPaint, including the fields inherited from Paint. <br /><br />"
"android.text.TextUtils.EllipsizeCallback.ellipsize (CharSequence, TextPaint, float, TextUtils.TruncateAt) (int start, int end) "," This method is called to report that the specified region of text was ellipsized away by a call to ellipsize(CharSequence, TextPaint, float, TextUtils.TruncateAt). <br /><br />"
"android.text.TextUtils.Pattern () "," Splits a string on a pattern. <br /><br />"
"android.text.TextUtils.String () "," String.split() returns [''] when the string to be split is empty. <br /><br />"
"android.text.TextUtils.Spannable () "," Copies the spans from the region start...end in source to the region destoff...destoff+end-start in dest. <br /><br />"
"android.text.TextUtils.CharSequence... () "," Replace instances of '^1', '^2', etc. <br /><br />"
"android.text.TextUtils.TextUtils.EllipsizeCallback () "," Returns the original text if it fits in the specified width given the properties of the specified Paint, or, if it does not fit, a copy with ellipsis character added at the specified edge or center. <br /><br />"
"android.text.TextUtils.Parcel () "," Flatten a CharSequence and whatever styles can be copied across processes into the parcel. <br /><br />"
"android.text.TextUtils.Object[] () "," Returns a string containing the tokens joined by delimiters. <br /><br />"
"android.text.TextUtils.CharSequence () "," Create a new String object containing the given range of characters from the source string. <br /><br />"
"android.text.TextUtils.Locale () "," Return the layout direction for a given Locale <br /><br />"
"android.text.TextUtils.TextUtils.TruncateAt () "," Returns the original text if it fits in the specified width given the properties of the specified Paint, or, if it does not fit, a truncated copy with ellipsis character added at the specified edge or center. <br /><br />"
"android.text.TextUtils.isGraphic (char c) "," Returns whether this character is a printable character. <br /><br />"
"android.text.TextUtils.CharSequence[] () "," Return a new CharSequence in which each of the source strings is replaced by the corresponding element of the destinations. <br /><br />"
"android.text.TextUtils.trim () () "," Returns the length that the specified CharSequence would have if spaces and control characters were trimmed from the start and end, as by trim(). <br /><br />"
"android.text.TextUtils.Iterable () "," Returns a string containing the tokens joined by delimiters. <br /><br />"
"android.text.TextUtils.SimpleStringSplitter.String () "," Sets the string to split <br /><br />"
"android.text.TextUtils.SimpleStringSplitter.remove () "," Removes the last object returned by next from the collection. <br /><br />"
"android.text.TextUtils.SimpleStringSplitter.Iterator () "," Returns an Iterator for the elements in this object. <br /><br />"
"android.text.TextUtils.SimpleStringSplitter.hasNext () "," Returns true if there is at least one more element, false otherwise. <br /><br />"
"android.text.TextUtils.SimpleStringSplitter.next () "," Returns the next object and advances the iterator. <br /><br />"
"android.text.TextUtils.StringSplitter.String () "," no description <br /><br />"
"android.text.TextWatcher.Editable () "," This method is called to notify you that, somewhere within s, the text has been changed. <br /><br />"
"android.text.TextWatcher.CharSequence () "," This method is called to notify you that, within s, the count characters beginning at start have just replaced old text that had length before. <br /><br />"
"android.text.util.Linkify.String () "," Applies a regex to the text of a TextView turning the matches into links. <br /><br />"
"android.text.util.Linkify.Spannable () "," Scans the text of the provided Spannable and turns all occurrences of the link types indicated in the mask into clickable links. <br /><br />"
"android.text.util.Linkify.TextView () "," Scans the text of the provided TextView and turns all occurrences of the link types indicated in the mask into clickable links. <br /><br />"
"android.text.util.Linkify.Linkify.TransformFilter () "," Applies a regex to a Spannable turning the matches into links. <br /><br />"
"android.text.util.Linkify.MatchFilter.CharSequence () "," Examines the character span matched by the pattern and determines if the match should be turned into an actionable link. <br /><br />"
"android.text.util.Linkify.TransformFilter.String () "," Examines the matched text and either passes it through or uses the data in the Matcher state to produce a replacement. <br /><br />"
"android.text.util.Rfc822Token.getName () "," Returns the name part. <br /><br />"
"android.text.util.Rfc822Token.String () "," Changes the name to the specified name. <br /><br />"
"android.text.util.Rfc822Token.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.text.util.Rfc822Token.getAddress () "," Returns the address part. <br /><br />"
"android.text.util.Rfc822Token.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.text.util.Rfc822Token.getComment () "," Returns the comment part. <br /><br />"
"android.text.util.Rfc822Token.toString () "," Returns the name (with quoting added if necessary), the comment (in parentheses), and the address (in angle brackets). <br /><br />"
"android.text.util.Rfc822Tokenizer.CharSequence () "," This method will try to take a string like 'Foo Bar (something) &lt;foo\@google.com&gt;, blah\@google.com (something)' and convert it into one or more Rfc822Tokens. <br /><br />"
"android.text.util.Rfc822Tokenizer.Rfc822Token () "," This constructor will try to take a string like 'Foo Bar (something) &lt;foo\@google.com&gt;, blah\@google.com (something)' and convert it into one or more Rfc822Tokens, output into the supplied collection. <br /><br />"
"android.transition.ArcMotion.setMinimumHorizontalAngle (float angleInDegrees) "," Sets the minimum arc along the circle between two points aligned near horizontally. <br /><br />"
"android.transition.ArcMotion.getPath (float startX, float startY, float endX, float endY) "," Provide a Path to interpolate between two points (startX, startY) and (endX, endY). <br /><br />"
"android.transition.ArcMotion.getMinimumHorizontalAngle () "," Returns the minimum arc along the circle between two points aligned near horizontally. <br /><br />"
"android.transition.ArcMotion.setMaximumAngle (float angleInDegrees) "," Sets the maximum arc along the circle between two points. <br /><br />"
"android.transition.ArcMotion.getMaximumAngle () "," Returns the maximum arc along the circle between two points. <br /><br />"
"android.transition.ArcMotion.getMinimumVerticalAngle () "," Returns the minimum arc along the circle between two points aligned near vertically. <br /><br />"
"android.transition.ArcMotion.setMinimumVerticalAngle (float angleInDegrees) "," Sets the minimum arc along the circle between two points aligned near vertically. <br /><br />"
"android.transition.ChangeBounds.getResizeClip () "," Returns true when the ChangeBounds will resize by changing the clip bounds during the view animation or false when bounds are changed. <br /><br />"
"android.transition.ChangeBounds.TransitionValues () "," This method creates an animation that will be run for this transition given the information in the startValues and endValues structures captured earlier for the start and end scenes. <br /><br />"
"android.transition.ChangeBounds.ChangeTransform (boolean reparent) "," This method was deprecated in API level 21. Use ChangeTransform to handle transitions between different parents. <br /><br />"
"android.transition.ChangeBounds.captureStartValues (TransitionValues) () "," Returns the set of property names used stored in the TransitionValues object passed into captureStartValues(TransitionValues) that this transition cares about for the purposes of canceling overlapping animations. <br /><br />"
"android.transition.ChangeBounds.setResizeClip (boolean resizeClip) "," When resizeClip is true, ChangeBounds resizes the view using the clipBounds instead of changing the dimensions of the view during the animation. <br /><br />"
"android.transition.ChangeClipBounds.TransitionValues () "," This method creates an animation that will be run for this transition given the information in the startValues and endValues structures captured earlier for the start and end scenes. <br /><br />"
"android.transition.ChangeClipBounds.captureStartValues (TransitionValues) () "," Returns the set of property names used stored in the TransitionValues object passed into captureStartValues(TransitionValues) that this transition cares about for the purposes of canceling overlapping animations. <br /><br />"
"android.transition.ChangeImageTransform.ImageView.ScaleType () "," Creates an Animator for ImageViews moving, changing dimensions, and/or changing ImageView.ScaleType. <br /><br />"
"android.transition.ChangeImageTransform.TransitionValues () "," Captures the values in the start scene for the properties that this transition monitors. <br /><br />"
"android.transition.ChangeImageTransform.captureStartValues (TransitionValues) () "," Returns the set of property names used stored in the TransitionValues object passed into captureStartValues(TransitionValues) that this transition cares about for the purposes of canceling overlapping animations. <br /><br />"
"android.transition.ChangeTransform.setReparentWithOverlay (boolean reparentWithOverlay) "," Sets whether changes to parent should use an overlay or not. <br /><br />"
"android.transition.ChangeTransform.setReparent (boolean reparent) "," Sets whether parent changes will be tracked by the ChangeTransform. <br /><br />"
"android.transition.ChangeTransform.getReparent () "," Returns whether parent changes will be tracked by the ChangeTransform. <br /><br />"
"android.transition.ChangeTransform.TransitionValues () "," This method creates an animation that will be run for this transition given the information in the startValues and endValues structures captured earlier for the start and end scenes. <br /><br />"
"android.transition.ChangeTransform.captureStartValues (TransitionValues) () "," Returns the set of property names used stored in the TransitionValues object passed into captureStartValues(TransitionValues) that this transition cares about for the purposes of canceling overlapping animations. <br /><br />"
"android.transition.ChangeTransform.getReparentWithOverlay () "," Returns whether changes to parent should use an overlay or not. <br /><br />"
"android.transition.CircularPropagation.setPropagationSpeed (float propagationSpeed) "," Sets the speed at which transition propagation happens, relative to the duration of the Transition. <br /><br />"
"android.transition.CircularPropagation.TransitionValues () "," Called by Transition to alter the Animator start delay. <br /><br />"
"android.transition.Explode.TransitionValues () "," The default implementation of this method returns a null Animator. <br /><br />"
"android.transition.Fade.TransitionValues () "," The default implementation of this method returns a null Animator. <br /><br />"
"android.transition.PathMotion.getPath (float startX, float startY, float endX, float endY) "," Provide a Path to interpolate between two points (startX, startY) and (endX, endY). <br /><br />"
"android.transition.PatternPathMotion.getPath (float startX, float startY, float endX, float endY) "," Provide a Path to interpolate between two points (startX, startY) and (endX, endY). <br /><br />"
"android.transition.PatternPathMotion.Path () "," Sets the Path defining a pattern of motion between two coordinates. <br /><br />"
"android.transition.PatternPathMotion.getPatternPath () "," Returns the Path defining a pattern of motion between two coordinates. <br /><br />"
"android.transition.Scene.scene root () "," Exits this scene, if it is the current scene on the scene's scene root. <br /><br />"
"android.transition.Scene.Context () "," Returns a Scene described by the resource file associated with the given layoutId parameter. <br /><br />"
"android.transition.Scene.getSceneRoot () "," Gets the root of the scene, which is the root of the view hierarchy affected by changes due to this scene, and which will be animated when this scene is entered. <br /><br />"
"android.transition.Scene.Runnable () "," Scenes that are not defined with layout resources or hierarchies, or which need to perform additional steps after those hierarchies are changed to, should set an enter action, and possibly an exit action as well. <br /><br />"
"android.transition.Scene.enter () "," Enters this scene, which entails changing all values that are specified by this scene. <br /><br />"
"android.transition.SidePropagation.setPropagationSpeed (float propagationSpeed) "," Sets the speed at which transition propagation happens, relative to the duration of the Transition. <br /><br />"
"android.transition.SidePropagation.setSide (int side) "," Sets the side that is used to calculate the transition propagation. <br /><br />"
"android.transition.SidePropagation.TransitionValues () "," Called by Transition to alter the Animator start delay. <br /><br />"
"android.transition.Slide.TransitionValues () "," The default implementation of this method returns a null Animator. <br /><br />"
"android.transition.Slide.setSlideEdge (int slideEdge) "," Change the edge that Views appear and disappear from. <br /><br />"
"android.transition.Slide.getSlideEdge () "," Returns the edge that Views appear and disappear from. <br /><br />"
"android.transition.Transition.EpicenterCallback.Transition () "," Implementers must override to return the epicenter of the Transition in screen coordinates. <br /><br />"
"android.transition.Transition.Transition.EpicenterCallback () "," Sets the callback to use to find the epicenter of a Transition. <br /><br />"
"android.transition.Transition.setDuration (long duration) "," Sets the duration of this transition. <br /><br />"
"android.transition.Transition.Transition.TransitionListener () "," Removes a listener from the set listening to this animation. <br /><br />"
"android.transition.Transition.getPathMotion () "," Returns the algorithm object used to interpolate along two dimensions. <br /><br />"
"android.transition.Transition.setStartDelay (long startDelay) "," Sets the startDelay of this transition. <br /><br />"
"android.transition.Transition.excludeChildren (int targetId, boolean exclude) "," Whether to add the children of the given id to the list of targets to exclude from this transition. <br /><br />"
"android.transition.Transition.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.transition.Transition.getName () "," Returns the name of this Transition. <br /><br />"
"android.transition.Transition.TimeInterpolator () "," Sets the interpolator of this transition. <br /><br />"
"android.transition.Transition.TransitionPropagation () "," Sets the method for determining Animator start delays. <br /><br />"
"android.transition.Transition.TransitionValues () "," This method creates an animation that will be run for this transition given the information in the startValues and endValues structures captured earlier for the start and end scenes. <br /><br />"
"android.transition.Transition.canRemoveViews () "," no description <br /><br />"
"android.transition.Transition.getEpicenterCallback () "," Returns the callback used to find the epicenter of the Transition. <br /><br />"
"android.transition.Transition.PathMotion () "," Sets the algorithm used to calculate two-dimensional interpolation. <br /><br />"
"android.transition.Transition.captureStartValues (TransitionValues) () "," Returns the set of property names used stored in the TransitionValues object passed into captureStartValues(TransitionValues) that this transition cares about for the purposes of canceling overlapping animations. <br /><br />"
"android.transition.Transition.getDuration () "," Returns the duration set on this transition. <br /><br />"
"android.transition.Transition.removeTarget (int targetId) "," Removes the given targetId from the list of ids that this Transition is interested in animating. <br /><br />"
"android.transition.Transition.String () "," Removes the given targetName from the list of transitionNames that this Transition is interested in animating. <br /><br />"
"android.transition.Transition.getTargets () "," Returns the list of target views that this transition limits itself to tracking and animating. <br /><br />"
"android.transition.Transition.getTargetNames () "," Returns the list of target transitionNames that this transition limits itself to tracking and animating. <br /><br />"
"android.transition.Transition.getStartDelay () "," Returns the startDelay set on this transition. <br /><br />"
"android.transition.Transition.addTarget (int targetId) "," Adds the id of a target view that this Transition is interested in animating. <br /><br />"
"android.transition.Transition.View () "," Removes the given target from the list of targets that this Transition is interested in animating. <br /><br />"
"android.transition.Transition.Class () "," Removes the given target from the list of targets that this Transition is interested in animating. <br /><br />"
"android.transition.Transition.getTargetTypes () "," Returns the list of target transitionNames that this transition limits itself to tracking and animating. <br /><br />"
"android.transition.Transition.excludeTarget (int targetId, boolean exclude) "," Whether to add the given id to the list of target ids to exclude from this transition. <br /><br />"
"android.transition.Transition.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.transition.Transition.getInterpolator () "," Returns the interpolator set on this transition. <br /><br />"
"android.transition.Transition.setMatchOrder (int... matches) "," Sets the order in which Transition matches View start and end values. <br /><br />"
"android.transition.Transition.getTargetIds () "," Returns the list of target IDs that this transition limits itself to tracking and animating. <br /><br />"
"android.transition.Transition.TransitionListener.Transition () "," Notification about the start of the transition. <br /><br />"
"android.transition.TransitionInflater.Context () "," Obtains the TransitionInflater from the given context. <br /><br />"
"android.transition.TransitionInflater.Transition (int resource) "," Loads a Transition object from a resource <br /><br />"
"android.transition.TransitionInflater.TransitionManager () "," Loads a TransitionManager object from a resource <br /><br />"
"android.transition.TransitionManager.Scene () "," Change to the given scene, using the appropriate transition for this particular scene change (as specified to the TransitionManager, or the default if no such transition exists). <br /><br />"
"android.transition.TransitionManager.Transition () "," Sets a specific transition to occur when the given scene is entered. <br /><br />"
"android.transition.TransitionManager.ViewGroup () "," Convenience method to animate, using the default transition, to a new scene defined by all changes within the given scene root between calling this method and the next rendering frame. <br /><br />"
"android.transition.TransitionPropagation.TransitionValues () "," Called by Transition to alter the Animator start delay. <br /><br />"
"android.transition.TransitionPropagation.captureValues (TransitionValues) () "," Returns the set of property names stored in the TransitionValues object passed into captureValues(TransitionValues) that this transition propagation cares about for the purposes of preventing duplicate capturing of property values. <br /><br />"
"android.transition.TransitionSet.Transition.EpicenterCallback () "," Sets the callback to use to find the epicenter of a Transition. <br /><br />"
"android.transition.TransitionSet.removeTarget (int targetId) "," Removes the given targetId from the list of ids that this Transition is interested in animating. <br /><br />"
"android.transition.TransitionSet.String () "," Removes the given targetName from the list of transitionNames that this Transition is interested in animating. <br /><br />"
"android.transition.TransitionSet.setDuration (long duration) "," Setting a non-negative duration on a TransitionSet causes all of the child transitions (current and future) to inherit this duration. <br /><br />"
"android.transition.TransitionSet.Transition.TransitionListener () "," Removes a listener from the set listening to this animation. <br /><br />"
"android.transition.TransitionSet.getTransitionAt (int index) "," Returns the child Transition at the specified position in the TransitionSet. <br /><br />"
"android.transition.TransitionSet.Transition () "," Removes the specified child transition from this set. <br /><br />"
"android.transition.TransitionSet.setOrdering (int ordering) "," Sets the play order of this set's child transitions. <br /><br />"
"android.transition.TransitionSet.setStartDelay (long startDelay) "," Sets the startDelay of this transition. <br /><br />"
"android.transition.TransitionSet.addTarget (int targetId) "," Adds the id of a target view that this Transition is interested in animating. <br /><br />"
"android.transition.TransitionSet.View () "," Removes the given target from the list of targets that this Transition is interested in animating. <br /><br />"
"android.transition.TransitionSet.Class () "," Removes the given target from the list of targets that this Transition is interested in animating. <br /><br />"
"android.transition.TransitionSet.TransitionPropagation () "," Sets the method for determining Animator start delays. <br /><br />"
"android.transition.TransitionSet.TimeInterpolator () "," Sets the interpolator of this transition. <br /><br />"
"android.transition.TransitionSet.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.transition.TransitionSet.excludeTarget (int targetId, boolean exclude) "," Whether to add the given id to the list of target ids to exclude from this transition. <br /><br />"
"android.transition.TransitionSet.TransitionValues () "," Captures the values in the start scene for the properties that this transition monitors. <br /><br />"
"android.transition.TransitionSet.PathMotion () "," Sets the algorithm used to calculate two-dimensional interpolation. <br /><br />"
"android.transition.TransitionSet.getOrdering () "," Returns the ordering of this TransitionSet. <br /><br />"
"android.transition.TransitionSet.getTransitionCount () "," Returns the number of child transitions in the TransitionSet. <br /><br />"
"android.transition.TransitionValues.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.transition.TransitionValues.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.transition.TransitionValues.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.transition.Visibility.onAppear (ViewGroup, View, TransitionValues, TransitionValues) () "," The default implementation of this method calls onAppear(ViewGroup, View, TransitionValues, TransitionValues). <br /><br />"
"android.transition.Visibility.setMode (int mode) "," Changes the transition to support appearing and/or disappearing Views, depending on mode. <br /><br />"
"android.transition.Visibility.onDisappear (ViewGroup, View, TransitionValues, TransitionValues) () "," Subclasses should override this method or onDisappear(ViewGroup, View, TransitionValues, TransitionValues) if they need to create an Animator when targets disappear. <br /><br />"
"android.transition.Visibility.TransitionValues () "," The default implementation of this method returns a null Animator. <br /><br />"
"android.transition.Visibility.captureStartValues (TransitionValues) () "," Returns the set of property names used stored in the TransitionValues object passed into captureStartValues(TransitionValues) that this transition cares about for the purposes of canceling overlapping animations. <br /><br />"
"android.transition.Visibility.getMode () "," Returns whether appearing and/or disappearing Views are supported. <br /><br />"
"android.transition.VisibilityPropagation.TransitionValues () "," Returns the View's center y coordinate, relative to the screen, at the time the values were captured. <br /><br />"
"android.transition.VisibilityPropagation.getVisibility () () "," Returns getVisibility() for the View at the time the values were captured. <br /><br />"
"android.transition.VisibilityPropagation.captureValues (TransitionValues) () "," Returns the set of property names stored in the TransitionValues object passed into captureValues(TransitionValues) that this transition propagation cares about for the purposes of preventing duplicate capturing of property values. <br /><br />"
"android.util.ArrayMap&lt;K,&nbsp;V&gt;.put (Object, Object) () "," Perform a put(Object, Object) of all key/value pairs in map <br /><br />"
"android.util.ArrayMap&lt;K,&nbsp;V&gt;.Collection () "," Return a Collection for iterating over and interacting with all values in the array map. <br /><br />"
"android.util.ArrayMap&lt;K,&nbsp;V&gt;.keyAt (int index) "," Return the key at the given index in the array. <br /><br />"
"android.util.ArrayMap&lt;K,&nbsp;V&gt;.removeAt (int index) "," Remove the key/value mapping at the given index. <br /><br />"
"android.util.ArrayMap&lt;K,&nbsp;V&gt;.size () "," Return the number of items in this array map. <br /><br />"
"android.util.ArrayMap&lt;K,&nbsp;V&gt;.Object () "," Remove an existing key from the array map. <br /><br />"
"android.util.ArrayMap&lt;K,&nbsp;V&gt;.ensureCapacity (int minimumCapacity) "," Ensure the array map can hold at least minimumCapacity items. <br /><br />"
"android.util.ArrayMap&lt;K,&nbsp;V&gt;.Set () "," Return a Set for iterating over and interacting with all keys in the array map. <br /><br />"
"android.util.ArrayMap&lt;K,&nbsp;V&gt;.setValueAt (int index, V value) "," Set the value at a given index in the array. <br /><br />"
"android.util.ArrayMap&lt;K,&nbsp;V&gt;.toString () "," Returns a string containing a concise, human-readable description of this object. This implementation composes a string by iterating over its mappings. <br /><br />"
"android.util.ArrayMap&lt;K,&nbsp;V&gt;.clear () "," Make the array map empty. <br /><br />"
"android.util.ArrayMap&lt;K,&nbsp;V&gt;.valueAt (int index) "," Return the value at the given index in the array. <br /><br />"
"android.util.ArrayMap&lt;K,&nbsp;V&gt;.isEmpty () "," Return true if the array map contains no items. <br /><br />"
"android.util.ArrayMap&lt;K,&nbsp;V&gt;.put (K key, V value) "," Add a new value to the array map. <br /><br />"
"android.util.ArrayMap&lt;K,&nbsp;V&gt;.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.util.AtomicFile.delete () "," Delete the atomic file. <br /><br />"
"android.util.AtomicFile.startWrite () () "," Call when you have successfully finished writing to the stream returned by startWrite(). <br /><br />"
"android.util.AtomicFile.startWrite () "," Start a new write operation on the file. <br /><br />"
"android.util.AtomicFile.openRead () () "," A convenience for openRead() that also reads all of the file contents into a byte array which is returned. <br /><br />"
"android.util.AtomicFile.openRead () "," Open the atomic file for reading. <br /><br />"
"android.util.AtomicFile.getBaseFile () "," Return the path to the base file. <br /><br />"
"android.util.AttributeSet.String () "," Returns the value of the specified attribute as a string representation. <br /><br />"
"android.util.AttributeSet.getAttributeIntValue (int index, int defaultValue) "," Return the integer value of attribute at 'index'. <br /><br />"
"android.util.AttributeSet.getAttributeValue (int index) "," Returns the value of the specified attribute as a string representation. <br /><br />"
"android.util.AttributeSet.getIdAttribute () "," Return the value of the 'id' attribute or null if there is not one. <br /><br />"
"android.util.AttributeSet.getAttributeName (int index) "," Returns the name of the specified attribute. <br /><br />"
"android.util.AttributeSet.getAttributeUnsignedIntValue (int index, int defaultValue) "," Return the integer value of attribute at 'index' that is formatted as an unsigned value. <br /><br />"
"android.util.AttributeSet.getAttributeBooleanValue (int index, boolean defaultValue) "," Return the boolean value of attribute at 'index'. <br /><br />"
"android.util.AttributeSet.getIdAttributeResourceValue (int defaultValue) "," Return the integer value of the 'id' attribute or defaultValue if there is none. <br /><br />"
"android.util.AttributeSet.getAttributeFloatValue (int index, float defaultValue) "," Return the float value of attribute at 'index'. <br /><br />"
"android.util.AttributeSet.getAttributeCount () "," Returns the number of attributes available in the set. <br /><br />"
"android.util.AttributeSet.getAttributeNameResource (int index) "," Return the resource ID associated with the given attribute name. <br /><br />"
"android.util.AttributeSet.getClassAttribute () "," Return the value of the 'class' attribute or null if there is not one. <br /><br />"
"android.util.AttributeSet.String[] () "," Return the index of the value of attribute at 'index' in the list 'options'. <br /><br />"
"android.util.AttributeSet.getPositionDescription () "," Returns a description of the current position of the attribute set. <br /><br />"
"android.util.AttributeSet.getStyleAttribute () "," Return the value of the 'style' attribute or 0 if there is not one. <br /><br />"
"android.util.AttributeSet.getAttributeResourceValue (int index, int defaultValue) "," Return the value of attribute at 'index' as a resource identifier. <br /><br />"
"android.util.Base64.encodeToString (byte[] input, int flags) "," Base64-encode the given data and return a newly allocated String with the result. <br /><br />"
"android.util.Base64.String () "," Decode the Base64-encoded data in input and return the data in a new byte array. <br /><br />"
"android.util.Base64.decode (byte[] input, int offset, int len, int flags) "," Decode the Base64-encoded data in input and return the data in a new byte array. <br /><br />"
"android.util.Base64.encode (byte[] input, int flags) "," Base64-encode the given data and return a newly allocated byte[] with the result. <br /><br />"
"android.util.Base64.encodeToString (byte[] input, int offset, int len, int flags) "," Base64-encode the given data and return a newly allocated String with the result. <br /><br />"
"android.util.Base64.encode (byte[] input, int offset, int len, int flags) "," Base64-encode the given data and return a newly allocated byte[] with the result. <br /><br />"
"android.util.Base64.decode (byte[] input, int flags) "," Decode the Base64-encoded data in input and return the data in a new byte array. <br /><br />"
"android.util.Base64InputStream.read (byte[] b, int off, int len) "," Reads up to byteCount bytes from this stream and stores them in the byte array buffer starting at byteOffset. <br /><br />"
"android.util.Base64InputStream.skip (long n) "," Skips byteCount bytes in this stream. <br /><br />"
"android.util.Base64InputStream.close () "," Closes this stream. <br /><br />"
"android.util.Base64InputStream.read () "," Reads a single byte from the filtered stream and returns it as an integer in the range from 0 to 255. <br /><br />"
"android.util.Base64InputStream.available () "," Returns an estimated number of bytes that can be read or skipped without blocking for more input. <br /><br />"
"android.util.Base64InputStream.mark (int readlimit) "," Sets a mark position in this stream. <br /><br />"
"android.util.Base64InputStream.reset () "," Resets this stream to the last marked location. <br /><br />"
"android.util.Base64InputStream.markSupported () "," Indicates whether this stream supports mark() and reset(). <br /><br />"
"android.util.Base64OutputStream.write (byte[] b, int off, int len) "," Writes count bytes from the byte array buffer starting at offset to the target stream. <br /><br />"
"android.util.Base64OutputStream.write (int b) "," Writes one byte to the target stream. <br /><br />"
"android.util.Base64OutputStream.close () "," Closes this stream. <br /><br />"
"android.util.DebugUtils.Object () "," Filters objects against the ANDROID_OBJECT_FILTER environment variable. <br /><br />"
"android.util.DisplayMetrics.setToDefaults () "," no description <br /><br />"
"android.util.DisplayMetrics.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.util.DisplayMetrics.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.util.DisplayMetrics.DisplayMetrics () "," no description <br /><br />"
"android.util.DisplayMetrics.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.util.EventLog.Event.getTag () "," no description <br /><br />"
"android.util.EventLog.Event.getThreadId () "," no description <br /><br />"
"android.util.EventLog.Event.getData () "," no description <br /><br />"
"android.util.EventLog.Event.getTimeNanos () "," no description <br /><br />"
"android.util.EventLog.Event.getProcessId () "," no description <br /><br />"
"android.util.EventLogTags.String () "," no description <br /><br />"
"android.util.EventLogTags.get (int tag) "," no description <br /><br />"
"android.util.FloatMath.pow (float x, float y) "," Returns the closest float approximation of the result of raising x to the power of y. <br /><br />"
"android.util.FloatMath.hypot (float x, float y) "," Returns sqrt( x 2 +  y 2 ). <br /><br />"
"android.util.FloatMath.floor (float value) "," Returns the float conversion of the most positive (i.e. <br /><br />"
"android.util.FloatMath.exp (float value) "," Returns the closest float approximation of the raising 'e' to the power of the argument. <br /><br />"
"android.util.FloatMath.sqrt (float value) "," Returns the closest float approximation of the square root of the argument. <br /><br />"
"android.util.FloatMath.cos (float angle) "," Returns the closest float approximation of the cosine of the argument. <br /><br />"
"android.util.FloatMath.ceil (float value) "," Returns the float conversion of the most negative (i.e. <br /><br />"
"android.util.FloatMath.sin (float angle) "," Returns the closest float approximation of the sine of the argument. <br /><br />"
"android.util.JsonReader.Reader () "," Closes this JSON reader and the underlying Reader. <br /><br />"
"android.util.JsonReader.hasNext () "," Returns true if the current array or object has another element. <br /><br />"
"android.util.JsonReader.string () "," Returns the string value of the next token, consuming it. <br /><br />"
"android.util.JsonReader.setLenient (boolean lenient) "," Configure this parser to be be liberal in what it accepts. <br /><br />"
"android.util.JsonReader.double () "," Returns the double value of the next token, consuming it. <br /><br />"
"android.util.JsonReader.beginObject () "," Consumes the next token from the JSON stream and asserts that it is the beginning of a new object. <br /><br />"
"android.util.JsonReader.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.util.JsonReader.endArray () "," Consumes the next token from the JSON stream and asserts that it is the end of the current array. <br /><br />"
"android.util.JsonReader.endObject () "," Consumes the next token from the JSON stream and asserts that it is the end of the current array. <br /><br />"
"android.util.JsonReader.int () "," Returns the int value of the next token, consuming it. <br /><br />"
"android.util.JsonReader.skipValue () "," Skips the next value recursively. <br /><br />"
"android.util.JsonReader.beginArray () "," Consumes the next token from the JSON stream and asserts that it is the beginning of a new array. <br /><br />"
"android.util.JsonReader.isLenient () "," Returns true if this parser is liberal in what it accepts. <br /><br />"
"android.util.JsonReader.property name () "," Returns the next token, a property name, and consumes it. <br /><br />"
"android.util.JsonReader.long () "," Returns the long value of the next token, consuming it. <br /><br />"
"android.util.JsonReader.boolean () "," Returns the boolean value of the next token, consuming it. <br /><br />"
"android.util.JsonReader.peek () "," Returns the type of the next token without consuming it. <br /><br />"
"android.util.JsonReader.nextNull () "," Consumes the next token from the JSON stream and asserts that it is a literal null. <br /><br />"
"android.util.JsonWriter.String () "," Encodes value. <br /><br />"
"android.util.JsonWriter.value (long value) "," Encodes value. <br /><br />"
"android.util.JsonWriter.setLenient (boolean lenient) "," Configure this writer to relax its syntax rules. <br /><br />"
"android.util.JsonWriter.value (boolean value) "," Encodes value. <br /><br />"
"android.util.JsonWriter.beginObject () "," Begins encoding a new object. <br /><br />"
"android.util.JsonWriter.Number () "," Encodes value. <br /><br />"
"android.util.JsonWriter.endArray () "," Ends encoding the current array. <br /><br />"
"android.util.JsonWriter.endObject () "," Ends encoding the current object. <br /><br />"
"android.util.JsonWriter.Writer () "," Ensures all buffered data is written to the underlying Writer and flushes that writer. <br /><br />"
"android.util.JsonWriter.nullValue () "," Encodes null. <br /><br />"
"android.util.JsonWriter.value (double value) "," Encodes value. <br /><br />"
"android.util.JsonWriter.beginArray () "," Begins encoding a new array. <br /><br />"
"android.util.JsonWriter.isLenient () "," Returns true if this writer has relaxed syntax rules. <br /><br />"
"android.util.Log.String () "," What a Terrible Failure: Report a condition that should never happen. <br /><br />"
"android.util.Log.INFO () "," Send a INFO log message and log the exception. <br /><br />"
"android.util.Log.WARN () "," Send a WARN log message. <br /><br />"
"android.util.Log.Throwable () "," What a Terrible Failure: Report an exception that should never happen. <br /><br />"
"android.util.Log.VERBOSE () "," Send a VERBOSE log message. <br /><br />"
"android.util.Log.ERROR () "," Send a ERROR log message and log the exception. <br /><br />"
"android.util.Log.DEBUG () "," Send a DEBUG log message and log the exception. <br /><br />"
"android.util.LogPrinter.String () "," Write a line of text to the output. <br /><br />"
"android.util.LongSparseArray&lt;E&gt;.get (long key) "," Gets the Object mapped from the specified key, or null if no such mapping has been made. <br /><br />"
"android.util.LongSparseArray&lt;E&gt;.keyAt (int index) "," Given an index in the range 0...size()-1, returns the key from the indexth key-value mapping that this LongSparseArray stores. <br /><br />"
"android.util.LongSparseArray&lt;E&gt;.keyAt (int) (long key) "," Returns the index for which keyAt(int) would return the specified key, or a negative number if the specified key is not mapped. <br /><br />"
"android.util.LongSparseArray&lt;E&gt;.valueAt (int) (E value) "," Returns an index for which valueAt(int) would return the specified key, or a negative number if no keys map to the specified value. <br /><br />"
"android.util.LongSparseArray&lt;E&gt;.removeAt (int index) "," Removes the mapping at the specified index. <br /><br />"
"android.util.LongSparseArray&lt;E&gt;.size () "," Returns the number of key-value mappings that this LongSparseArray currently stores. <br /><br />"
"android.util.LongSparseArray&lt;E&gt;.delete (long key) "," Removes the mapping from the specified key, if there was any. <br /><br />"
"android.util.LongSparseArray&lt;E&gt;.get (long key, E valueIfKeyNotFound) "," Gets the Object mapped from the specified key, or the specified Object if no such mapping has been made. <br /><br />"
"android.util.LongSparseArray&lt;E&gt;.toString () "," Returns a string containing a concise, human-readable description of this object. This implementation composes a string by iterating over its mappings. <br /><br />"
"android.util.LongSparseArray&lt;E&gt;.delete (long) (long key) "," Alias for delete(long). <br /><br />"
"android.util.LongSparseArray&lt;E&gt;.clear () "," Removes all key-value mappings from this LongSparseArray. <br /><br />"
"android.util.LongSparseArray&lt;E&gt;.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.util.LongSparseArray&lt;E&gt;.valueAt (int index) "," Given an index in the range 0...size()-1, returns the value from the indexth key-value mapping that this LongSparseArray stores. <br /><br />"
"android.util.LongSparseArray&lt;E&gt;.append (long key, E value) "," Puts a key/value pair into the array, optimizing for the case where the key is greater than all existing keys in the array. <br /><br />"
"android.util.LongSparseArray&lt;E&gt;.setValueAt (int index, E value) "," Given an index in the range 0...size()-1, sets a new value for the indexth key-value mapping that this LongSparseArray stores. <br /><br />"
"android.util.LongSparseArray&lt;E&gt;.put (long key, E value) "," Adds a mapping from the specified key to the specified value, replacing the previous mapping from the specified key if there was one. <br /><br />"
"android.util.LruCache&lt;K,&nbsp;V&gt;.create (Object) () "," Returns the number of times create(Object) returned a value. <br /><br />"
"android.util.LruCache&lt;K,&nbsp;V&gt;.evictionCount () "," Returns the number of values that have been evicted. <br /><br />"
"android.util.LruCache&lt;K,&nbsp;V&gt;.remove (K key) "," Removes the entry for key if it exists. <br /><br />"
"android.util.LruCache&lt;K,&nbsp;V&gt;.get (K key) "," Returns the value for key if it exists in the cache or can be created by #create. <br /><br />"
"android.util.LruCache&lt;K,&nbsp;V&gt;.entryRemoved (boolean, K, V, V) () "," Clear the cache, calling entryRemoved(boolean, K, V, V) on each removed entry. <br /><br />"
"android.util.LruCache&lt;K,&nbsp;V&gt;.trimToSize (int maxSize) "," Remove the eldest entries until the total of remaining entries is at or below the requested size. <br /><br />"
"android.util.LruCache&lt;K,&nbsp;V&gt;.get (K) () "," Returns the number of times get(K) returned null or required a new value to be created. <br /><br />"
"android.util.LruCache&lt;K,&nbsp;V&gt;.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.util.LruCache&lt;K,&nbsp;V&gt;.snapshot () "," Returns a copy of the current contents of the cache, ordered from least recently accessed to most recently accessed. <br /><br />"
"android.util.LruCache&lt;K,&nbsp;V&gt;.resize (int maxSize) "," Sets the size of the cache. <br /><br />"
"android.util.LruCache&lt;K,&nbsp;V&gt;.put (K key, V value) "," Caches value for key. <br /><br />"
"android.util.LruCache&lt;K,&nbsp;V&gt;.put (K, V) () "," Returns the number of times put(K, V) was called. <br /><br />"
"android.util.LruCache&lt;K,&nbsp;V&gt;.sizeOf (K, V) () "," For caches that do not override sizeOf(K, V), this returns the number of entries in the cache. <br /><br />"
"android.util.MonthDisplayHelper.getRowOf (int day) "," no description <br /><br />"
"android.util.MonthDisplayHelper.getDigitsForRow (int row) "," no description <br /><br />"
"android.util.MonthDisplayHelper.nextMonth () "," Increment the month. <br /><br />"
"android.util.MonthDisplayHelper.getYear () "," no description <br /><br />"
"android.util.MonthDisplayHelper.getOffset () "," no description <br /><br />"
"android.util.MonthDisplayHelper.getMonth () "," no description <br /><br />"
"android.util.MonthDisplayHelper.getFirstDayOfMonth () "," no description <br /><br />"
"android.util.MonthDisplayHelper.getDayAt (int row, int column) "," no description <br /><br />"
"android.util.MonthDisplayHelper.previousMonth () "," Decrement the month. <br /><br />"
"android.util.MonthDisplayHelper.isWithinCurrentMonth (int row, int column) "," no description <br /><br />"
"android.util.MonthDisplayHelper.getWeekStartDay () "," no description <br /><br />"
"android.util.MonthDisplayHelper.getNumberOfDaysInMonth () "," no description <br /><br />"
"android.util.MonthDisplayHelper.getColumnOf (int day) "," no description <br /><br />"
"android.util.Pair&lt;F,&nbsp;S&gt;.create (A a, B b) "," Convenience method for creating an appropriately typed pair. <br /><br />"
"android.util.Pair&lt;F,&nbsp;S&gt;.hashCode () "," Compute a hash code using the hash codes of the underlying objects <br /><br />"
"android.util.Pair&lt;F,&nbsp;S&gt;.equals (Object) () "," Checks the two objects for equality by delegating to their respective equals(Object) methods. <br /><br />"
"android.util.Patterns.Matcher () "," Convenience method to return only the digits and plus signs in the matching string. <br /><br />"
"android.util.Printer.String () "," Write a line of text to the output. <br /><br />"
"android.util.PrintStreamPrinter.String () "," Write a line of text to the output. <br /><br />"
"android.util.PrintWriterPrinter.String () "," Write a line of text to the output. <br /><br />"
"android.util.Property&lt;T,&nbsp;V&gt;.getName () "," Returns the name for this property. <br /><br />"
"android.util.Property&lt;T,&nbsp;V&gt;.getType () "," Returns the type for this property. <br /><br />"
"android.util.Property&lt;T,&nbsp;V&gt;.readOnly () "," This factory method creates and returns a Property given the class and name parameters, where the 'name' parameter represents either:  a public getName() method on the class which takes no arguments, plus an optional public setName() method which takes a value of the same type returned by getName()  a public isName() method on the class which takes no arguments, plus an optional public setName() method which takes a value of the same type returned by isName()  a public name field on the class   If either of the get/is method alternatives is found on the class, but an appropriate setName() method is not found, the Property will be readOnly. <br /><br />"
"android.util.Property&lt;T,&nbsp;V&gt;.get (T object) "," Returns the current value that this property represents on the given object. <br /><br />"
"android.util.Property&lt;T,&nbsp;V&gt;.set (T object, V value) "," Sets the value on object which this property represents. <br /><br />"
"android.util.Property&lt;T,&nbsp;V&gt;.NoSuchPropertyException () "," Returns true if the set(Object, Object) method does not set the value on the target object (in which case the set() method should throw a NoSuchPropertyException exception). <br /><br />"
"android.util.Range&lt;T&nbsp;extends&nbsp;java.lang.Comparable&lt;?&nbsp;super&nbsp;T&gt;&gt;.extend (T value) "," Returns the smallest range that includes this range and the value. <br /><br />"
"android.util.Range&lt;T&nbsp;extends&nbsp;java.lang.Comparable&lt;?&nbsp;super&nbsp;T&gt;&gt;.clamp (T value) "," Clamps value to this range. <br /><br />"
"android.util.Range&lt;T&nbsp;extends&nbsp;java.lang.Comparable&lt;?&nbsp;super&nbsp;T&gt;&gt;.intersect (T lower, T upper) "," Returns the intersection of this range and the inclusive range specified by [lower, upper]. <br /><br />"
"android.util.Range&lt;T&nbsp;extends&nbsp;java.lang.Comparable&lt;?&nbsp;super&nbsp;T&gt;&gt;.Range () "," Returns the intersection of this range and another range. <br /><br />"
"android.util.Range&lt;T&nbsp;extends&nbsp;java.lang.Comparable&lt;?&nbsp;super&nbsp;T&gt;&gt;.extend (T lower, T upper) "," Returns the smallest range that includes this range and the inclusive range specified by [lower, upper]. <br /><br />"
"android.util.Range&lt;T&nbsp;extends&nbsp;java.lang.Comparable&lt;?&nbsp;super&nbsp;T&gt;&gt;.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.util.Range&lt;T&nbsp;extends&nbsp;java.lang.Comparable&lt;?&nbsp;super&nbsp;T&gt;&gt;.Object () "," Compare two ranges for equality. <br /><br />"
"android.util.Range&lt;T&nbsp;extends&nbsp;java.lang.Comparable&lt;?&nbsp;super&nbsp;T&gt;&gt;.getUpper () "," Get the upper endpoint. <br /><br />"
"android.util.Range&lt;T&nbsp;extends&nbsp;java.lang.Comparable&lt;?&nbsp;super&nbsp;T&gt;&gt;.create (T lower, T upper) "," Create a new immutable range, with the argument types inferred. <br /><br />"
"android.util.Range&lt;T&nbsp;extends&nbsp;java.lang.Comparable&lt;?&nbsp;super&nbsp;T&gt;&gt;.toString () "," Return the range as a string representation '[lower, upper]'. <br /><br />"
"android.util.Range&lt;T&nbsp;extends&nbsp;java.lang.Comparable&lt;?&nbsp;super&nbsp;T&gt;&gt;.getLower () "," Get the lower endpoint. <br /><br />"
"android.util.Range&lt;T&nbsp;extends&nbsp;java.lang.Comparable&lt;?&nbsp;super&nbsp;T&gt;&gt;.contains (T value) "," Checks if the value is within the bounds of this range. <br /><br />"
"android.util.Rational.shortValue () "," Returns the value of the specified number as a short. <br /><br />"
"android.util.Rational.String () "," Parses the specified string as a rational value. <br /><br />"
"android.util.Rational.isFinite () "," Indicates whether this rational represents a finite value. <br /><br />"
"android.util.Rational.getDenominator () "," Gets the denominator of the rational The denominator may return 0, in which case the rational may represent positive infinity (if the numerator was positive), negative infinity (if the numerator was negative), or NaN (if the numerator was 0). <br /><br />"
"android.util.Rational.isNaN () "," Indicates whether this rational is a Not-a-Number (NaN) value. <br /><br />"
"android.util.Rational.Object () "," Compare this Rational to another object and see if they are equal. <br /><br />"
"android.util.Rational.longValue () "," Returns the value of the specified number as a long. <br /><br />"
"android.util.Rational.toString () "," Return a string representation of this rational, e.g. <br /><br />"
"android.util.Rational.getNumerator () "," Gets the numerator of the rational. <br /><br />"
"android.util.Rational.floatValue () "," Returns the value of the specified number as a float. <br /><br />"
"android.util.Rational.Rational () "," Compare this rational to the specified rational to determine their natural order. <br /><br />"
"android.util.Rational.doubleValue () "," Returns the value of the specified number as a double. <br /><br />"
"android.util.Rational.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.util.Rational.isInfinite () "," Indicates whether this rational represents an infinite value. <br /><br />"
"android.util.Rational.intValue () "," Returns the value of the specified number as a int. <br /><br />"
"android.util.Rational.isZero () "," Indicates whether this rational represents a zero value. <br /><br />"
"android.util.Size.String () "," Parses the specified string as a size value. <br /><br />"
"android.util.Size.getHeight () "," Get the height of the size (in pixels). <br /><br />"
"android.util.Size.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.util.Size.Object () "," Check if this size is equal to another size. <br /><br />"
"android.util.Size.getWidth () "," Get the width of the size (in pixels). <br /><br />"
"android.util.Size.toString () "," Return the size represented as a string with the format 'WxH' <br /><br />"
"android.util.SizeF.String () "," Parses the specified string as a size value. <br /><br />"
"android.util.SizeF.getHeight () "," Get the height of the size (as an arbitrary unit). <br /><br />"
"android.util.SizeF.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.util.SizeF.Object () "," Check if this size is equal to another size. <br /><br />"
"android.util.SizeF.getWidth () "," Get the width of the size (as an arbitrary unit). <br /><br />"
"android.util.SizeF.toString () "," Return the size represented as a string with the format 'WxH' <br /><br />"
"android.util.SparseArray&lt;E&gt;.delete (int) (int key) "," Alias for delete(int). <br /><br />"
"android.util.SparseArray&lt;E&gt;.keyAt (int index) "," Given an index in the range 0...size()-1, returns the key from the indexth key-value mapping that this SparseArray stores. <br /><br />"
"android.util.SparseArray&lt;E&gt;.valueAt (int) (E value) "," Returns an index for which valueAt(int) would return the specified key, or a negative number if no keys map to the specified value. <br /><br />"
"android.util.SparseArray&lt;E&gt;.keyAt (int) (int key) "," Returns the index for which keyAt(int) would return the specified key, or a negative number if the specified key is not mapped. <br /><br />"
"android.util.SparseArray&lt;E&gt;.delete (int key) "," Removes the mapping from the specified key, if there was any. <br /><br />"
"android.util.SparseArray&lt;E&gt;.removeAt (int index) "," Removes the mapping at the specified index. <br /><br />"
"android.util.SparseArray&lt;E&gt;.size () "," Returns the number of key-value mappings that this SparseArray currently stores. <br /><br />"
"android.util.SparseArray&lt;E&gt;.append (int key, E value) "," Puts a key/value pair into the array, optimizing for the case where the key is greater than all existing keys in the array. <br /><br />"
"android.util.SparseArray&lt;E&gt;.toString () "," Returns a string containing a concise, human-readable description of this object. This implementation composes a string by iterating over its mappings. <br /><br />"
"android.util.SparseArray&lt;E&gt;.get (int key, E valueIfKeyNotFound) "," Gets the Object mapped from the specified key, or the specified Object if no such mapping has been made. <br /><br />"
"android.util.SparseArray&lt;E&gt;.clear () "," Removes all key-value mappings from this SparseArray. <br /><br />"
"android.util.SparseArray&lt;E&gt;.get (int key) "," Gets the Object mapped from the specified key, or null if no such mapping has been made. <br /><br />"
"android.util.SparseArray&lt;E&gt;.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.util.SparseArray&lt;E&gt;.valueAt (int index) "," Given an index in the range 0...size()-1, returns the value from the indexth key-value mapping that this SparseArray stores. <br /><br />"
"android.util.SparseArray&lt;E&gt;.setValueAt (int index, E value) "," Given an index in the range 0...size()-1, sets a new value for the indexth key-value mapping that this SparseArray stores. <br /><br />"
"android.util.SparseArray&lt;E&gt;.removeAtRange (int index, int size) "," Remove a range of mappings as a batch. <br /><br />"
"android.util.SparseArray&lt;E&gt;.put (int key, E value) "," Adds a mapping from the specified key to the specified value, replacing the previous mapping from the specified key if there was one. <br /><br />"
"android.util.SparseBooleanArray.valueAt (int) (boolean value) "," Returns an index for which valueAt(int) would return the specified key, or a negative number if no keys map to the specified value. <br /><br />"
"android.util.SparseBooleanArray.get (int key) "," Gets the boolean mapped from the specified key, or false if no such mapping has been made. <br /><br />"
"android.util.SparseBooleanArray.clear () "," Removes all key-value mappings from this SparseBooleanArray. <br /><br />"
"android.util.SparseBooleanArray.keyAt (int index) "," Given an index in the range 0...size()-1, returns the key from the indexth key-value mapping that this SparseBooleanArray stores. <br /><br />"
"android.util.SparseBooleanArray.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.util.SparseBooleanArray.append (int key, boolean value) "," Puts a key/value pair into the array, optimizing for the case where the key is greater than all existing keys in the array. <br /><br />"
"android.util.SparseBooleanArray.valueAt (int index) "," Given an index in the range 0...size()-1, returns the value from the indexth key-value mapping that this SparseBooleanArray stores. <br /><br />"
"android.util.SparseBooleanArray.keyAt (int) (int key) "," Returns the index for which keyAt(int) would return the specified key, or a negative number if the specified key is not mapped. <br /><br />"
"android.util.SparseBooleanArray.delete (int key) "," Removes the mapping from the specified key, if there was any. <br /><br />"
"android.util.SparseBooleanArray.size () "," Returns the number of key-value mappings that this SparseBooleanArray currently stores. <br /><br />"
"android.util.SparseBooleanArray.put (int key, boolean value) "," Adds a mapping from the specified key to the specified value, replacing the previous mapping from the specified key if there was one. <br /><br />"
"android.util.SparseBooleanArray.get (int key, boolean valueIfKeyNotFound) "," Gets the boolean mapped from the specified key, or the specified value if no such mapping has been made. <br /><br />"
"android.util.SparseBooleanArray.toString () "," Returns a string containing a concise, human-readable description of this object. This implementation composes a string by iterating over its mappings. <br /><br />"
"android.util.SparseIntArray.put (int key, int value) "," Adds a mapping from the specified key to the specified value, replacing the previous mapping from the specified key if there was one. <br /><br />"
"android.util.SparseIntArray.valueAt (int) (int value) "," Returns an index for which valueAt(int) would return the specified key, or a negative number if no keys map to the specified value. <br /><br />"
"android.util.SparseIntArray.keyAt (int index) "," Given an index in the range 0...size()-1, returns the key from the indexth key-value mapping that this SparseIntArray stores. <br /><br />"
"android.util.SparseIntArray.keyAt (int) (int key) "," Returns the index for which keyAt(int) would return the specified key, or a negative number if the specified key is not mapped. <br /><br />"
"android.util.SparseIntArray.delete (int key) "," Removes the mapping from the specified key, if there was any. <br /><br />"
"android.util.SparseIntArray.removeAt (int index) "," Removes the mapping at the given index. <br /><br />"
"android.util.SparseIntArray.size () "," Returns the number of key-value mappings that this SparseIntArray currently stores. <br /><br />"
"android.util.SparseIntArray.append (int key, int value) "," Puts a key/value pair into the array, optimizing for the case where the key is greater than all existing keys in the array. <br /><br />"
"android.util.SparseIntArray.toString () "," Returns a string containing a concise, human-readable description of this object. This implementation composes a string by iterating over its mappings. <br /><br />"
"android.util.SparseIntArray.clear () "," Removes all key-value mappings from this SparseIntArray. <br /><br />"
"android.util.SparseIntArray.get (int key) "," Gets the int mapped from the specified key, or 0 if no such mapping has been made. <br /><br />"
"android.util.SparseIntArray.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.util.SparseIntArray.valueAt (int index) "," Given an index in the range 0...size()-1, returns the value from the indexth key-value mapping that this SparseIntArray stores. <br /><br />"
"android.util.SparseIntArray.get (int key, int valueIfKeyNotFound) "," Gets the int mapped from the specified key, or the specified value if no such mapping has been made. <br /><br />"
"android.util.SparseLongArray.valueAt (int) (long value) "," Returns an index for which valueAt(int) would return the specified key, or a negative number if no keys map to the specified value. <br /><br />"
"android.util.SparseLongArray.get (int key) "," Gets the long mapped from the specified key, or 0 if no such mapping has been made. <br /><br />"
"android.util.SparseLongArray.clear () "," Removes all key-value mappings from this SparseIntArray. <br /><br />"
"android.util.SparseLongArray.append (int key, long value) "," Puts a key/value pair into the array, optimizing for the case where the key is greater than all existing keys in the array. <br /><br />"
"android.util.SparseLongArray.keyAt (int index) "," Given an index in the range 0...size()-1, returns the key from the indexth key-value mapping that this SparseLongArray stores. <br /><br />"
"android.util.SparseLongArray.get (int key, long valueIfKeyNotFound) "," Gets the long mapped from the specified key, or the specified value if no such mapping has been made. <br /><br />"
"android.util.SparseLongArray.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.util.SparseLongArray.valueAt (int index) "," Given an index in the range 0...size()-1, returns the value from the indexth key-value mapping that this SparseLongArray stores. <br /><br />"
"android.util.SparseLongArray.keyAt (int) (int key) "," Returns the index for which keyAt(int) would return the specified key, or a negative number if the specified key is not mapped. <br /><br />"
"android.util.SparseLongArray.removeAt (int index) "," Removes the mapping at the given index. <br /><br />"
"android.util.SparseLongArray.delete (int key) "," Removes the mapping from the specified key, if there was any. <br /><br />"
"android.util.SparseLongArray.size () "," Returns the number of key-value mappings that this SparseIntArray currently stores. <br /><br />"
"android.util.SparseLongArray.put (int key, long value) "," Adds a mapping from the specified key to the specified value, replacing the previous mapping from the specified key if there was one. <br /><br />"
"android.util.SparseLongArray.toString () "," Returns a string containing a concise, human-readable description of this object. This implementation composes a string by iterating over its mappings. <br /><br />"
"android.util.StateSet.stateSetMatches (int[] stateSpec, int[] stateSet) "," Return whether the stateSet matches the desired stateSpec. <br /><br />"
"android.util.StateSet.dump (int[] states) "," no description <br /><br />"
"android.util.StateSet.trimStateSet (int[] states, int newSize) "," no description <br /><br />"
"android.util.StateSet.stateSetMatches (int[] stateSpec, int state) "," Return whether the state matches the desired stateSpec. <br /><br />"
"android.util.StateSet.isWildCard (int[] stateSetOrSpec) "," Return whether the stateSetOrSpec is matched by all StateSets. <br /><br />"
"android.util.StringBuilderPrinter.String () "," Write a line of text to the output. <br /><br />"
"android.util.TimeUtils.String () "," Tries to return a time zone that would have had the specified offset and DST value at the specified moment in the specified country. <br /><br />"
"android.util.TimeUtils.getTimeZoneDatabaseVersion () "," Returns a String indicating the version of the time zone database currently in use. <br /><br />"
"android.util.TimingLogger.String () "," Clear and initialize a TimingLogger object that will log using the specific tag. <br /><br />"
"android.util.TimingLogger.dumpToLog () "," Dumps the timings to the log using Log.d(). <br /><br />"
"android.util.TimingLogger.reset () "," Clear and initialize a TimingLogger object that will log using the tag and label that was specified previously, either via the constructor or a call to reset(tag, label). <br /><br />"
"android.util.TypedValue.getFloat () "," Return the data for this value as a float. <br /><br />"
"android.util.TypedValue.complexToFloat (int complex) "," Retrieve the base value from a complex data integer. <br /><br />"
"android.util.TypedValue.coerceToString () "," Regardless of the actual type of the value, try to convert it to a string value. <br /><br />"
"android.util.TypedValue.TypedValue () "," no description <br /><br />"
"android.util.TypedValue.getFraction (float base, float pbase) "," Return the data for this value as a fraction. <br /><br />"
"android.util.TypedValue.complexToFraction (int data, float base, float pbase) "," Converts a complex data value holding a fraction to its final floating point value. <br /><br />"
"android.util.TypedValue.getComplexUnit () "," Return the complex unit type for this value. <br /><br />"
"android.util.TypedValue.DisplayMetrics () "," Return the data for this value as a dimension. <br /><br />"
"android.util.TypedValue.coerceToString () (int type, int data) "," Perform type conversion as per coerceToString() on an explicitly supplied type and data. <br /><br />"
"android.util.TypedValue.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.util.Xml.String () "," Finds an encoding by name. <br /><br />"
"android.util.Xml.newSerializer () "," Creates a new xml serializer. <br /><br />"
"android.util.Xml.XmlPullParser () "," Return an AttributeSet interface for use with the given XmlPullParser. <br /><br />"
"android.util.Xml.newPullParser () "," Returns a new pull parser with namespace support. <br /><br />"
"android.util.Xml.ContentHandler () "," Parses xml from the given reader and fires events on the given SAX handler. <br /><br />"
"android.view.AbsSavedState.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.view.AbsSavedState.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.view.AbsSavedState.getSuperState () "," no description <br /><br />"
"android.view.accessibility.AccessibilityEvent.getPackageName () "," Gets the package name of the source. <br /><br />"
"android.view.accessibility.AccessibilityEvent.AccessibilityRecord () "," Appends an AccessibilityRecord to the end of event records. <br /><br />"
"android.view.accessibility.AccessibilityEvent.getEventTime () "," Gets the time in which this event was sent. <br /><br />"
"android.view.accessibility.AccessibilityEvent.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.view.accessibility.AccessibilityEvent.setEventType (int eventType) "," Sets the event type. <br /><br />"
"android.view.accessibility.AccessibilityEvent.CharSequence () "," Sets the package name of the source. <br /><br />"
"android.view.accessibility.AccessibilityEvent.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.view.accessibility.AccessibilityEvent.getMovementGranularity () "," Gets the movement granularity that was traversed. <br /><br />"
"android.view.accessibility.AccessibilityEvent.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.view.accessibility.AccessibilityEvent.getRecordCount () "," Gets the number of records contained in the event. <br /><br />"
"android.view.accessibility.AccessibilityEvent.setEventTime (long eventTime) "," Sets the time in which this event was sent. <br /><br />"
"android.view.accessibility.AccessibilityEvent.setAction (int action) "," Sets the performed action that triggered this event. <br /><br />"
"android.view.accessibility.AccessibilityEvent.getEventType () "," Gets the event type. <br /><br />"
"android.view.accessibility.AccessibilityEvent.recycle () "," Recycles an instance back to be reused. <br /><br />"
"android.view.accessibility.AccessibilityEvent.obtain () "," Returns a cached instance if such is available or a new one is instantiated. <br /><br />"
"android.view.accessibility.AccessibilityEvent.getAction () "," Gets the performed action that triggered this event. <br /><br />"
"android.view.accessibility.AccessibilityEvent.AccessibilityEvent () "," Returns a cached instance if such is available or a new one is created. <br /><br />"
"android.view.accessibility.AccessibilityEvent.getRecord (int index) "," Gets the record at a given index. <br /><br />"
"android.view.accessibility.AccessibilityEvent.obtain (int eventType) "," Returns a cached instance if such is available or a new one is instantiated with its type property set. <br /><br />"
"android.view.accessibility.AccessibilityEvent.eventTypeToString (int eventType) "," Returns the string representation of an event type. <br /><br />"
"android.view.accessibility.AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED () "," Gets the bit mask of change types signaled by an TYPE_WINDOW_CONTENT_CHANGED event. <br /><br />"
"android.view.accessibility.AccessibilityEvent.setMovementGranularity (int granularity) "," Sets the movement granularity that was traversed. <br /><br />"
"android.view.accessibility.AccessibilityEvent.TYPE_WINDOW_CONTENT_CHANGED (int changeTypes) "," Sets the bit mask of node tree changes signaled by an TYPE_WINDOW_CONTENT_CHANGED event. <br /><br />"
"android.view.accessibility.AccessibilityEventSource.AccessibilityEvent (int eventType) "," Handles the request for sending an AccessibilityEvent given the event type. <br /><br />"
"android.view.accessibility.AccessibilityEventSource.AccessibilityEvent () "," Handles the request for sending an AccessibilityEvent. <br /><br />"
"android.view.accessibility.AccessibilityManager.AccessibilityStateChangeListener.onAccessibilityStateChanged (boolean enabled) "," Called when the accessibility enabled state changes. <br /><br />"
"android.view.accessibility.AccessibilityManager.TouchExplorationStateChangeListener.onTouchExplorationStateChanged (boolean enabled) "," Called when the touch exploration enabled state changes. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction.getId () "," Gets the id for this action. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction.getLabel () "," Gets the label for this action. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.CollectionInfo.obtain (int rowCount, int columnCount, boolean hierarchical, int selectionMode) "," Obtains a pooled instance. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.CollectionInfo.getColumnCount () "," Gets the number of columns. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.CollectionInfo.getSelectionMode () "," Gets the collection's selection mode. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.CollectionInfo.obtain (int rowCount, int columnCount, boolean hierarchical) "," Obtains a pooled instance. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.CollectionInfo.getRowCount () "," Gets the number of rows. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.CollectionInfo.isHierarchical () "," Gets if the collection is a hierarchically ordered. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo.obtain (int rowIndex, int rowSpan, int columnIndex, int columnSpan, boolean heading) "," Obtains a pooled instance. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo.getRowSpan () "," Gets the number of rows the item spans. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo.obtain (int rowIndex, int rowSpan, int columnIndex, int columnSpan, boolean heading, boolean selected) "," Obtains a pooled instance. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo.getColumnSpan () "," Gets the number of columns the item spans. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo.isSelected () "," Gets if the collection item is selected. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo.isHeading () "," Gets if the collection item is a heading. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo.getRowIndex () "," Gets the row index at which the item is located. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo.getColumnIndex () "," Gets the column index at which the item is located. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.setClickable (boolean clickable) "," Sets whether this node is clickable. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.isVisibleToUser () "," Sets whether this node is visible to the user. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.setChecked (boolean checked) "," Sets whether this node is checked. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.isFocused () "," Gets whether this node is focused. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.setTextSelection (int start, int end) "," Sets the text selection start and end. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.AccessibilityNodeInfo.RangeInfo () "," Sets the range info if this node is a range. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.setMaxTextLength (int max) "," Sets the maximum text length, or -1 for no limit. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.getTextSelectionEnd () "," Gets the text selection end. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.setScrollable (boolean scrollable) "," Sets if the node is scrollable. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.getTextSelectionStart () "," Gets the text selection start. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.setContentInvalid (boolean contentInvalid) "," Sets if the content of this node is invalid. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.setMovementGranularities (int granularities) "," Sets the movement granularities for traversing the text of this node. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.isEditable () "," Gets if the node is editable. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.setLongClickable (boolean longClickable) "," Sets whether this node is long clickable. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.getLabelFor () "," Gets the node info for which the view represented by this info serves as a label for accessibility purposes. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.focusSearch (int direction) "," Searches for the nearest view in the specified direction that can take the input focus. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.isAccessibilityFocused () "," Gets whether this node is accessibility focused. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.setEditable (boolean editable) "," Sets whether this node is editable. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.canOpenPopup () "," Gets if this node opens a popup or a dialog. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.setEnabled (boolean enabled) "," Sets whether this node is enabled. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.isFocusable () "," Gets whether this node is focusable. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.isContentInvalid () "," Gets if the content of this node is invalid. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.setVisibleToUser (boolean visibleToUser) "," Sets whether this node is visible to the user. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.isLongClickable () "," Gets whether this node is long clickable. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.getTraversalBefore () "," Gets the node before which this one is visited during traversal. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.setLiveRegion (int mode) "," Sets the node's live region mode. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.Parcel () "," Flatten this object in to a Parcel.  Note: After the instance is written to a parcel it is recycled. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.getChild (int index) "," Get the child at given index. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.AccessibilityNodeInfo.CollectionInfo () "," Sets the collection info if the node is a collection. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.getLiveRegion () "," Gets the node's live region mode. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.getRangeInfo () "," Gets the range info if this node is a range. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.getExtras () "," Gets an optional bundle with extra data. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.addAction (AccessibilityAction) (int action) "," This method was deprecated in API level 21. This has been deprecated for addAction(AccessibilityAction) <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.isScrollable () "," Gets if the node is scrollable. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.getActionList () "," Gets the actions that can be performed on the node. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.getWindow () "," Gets the window to which this node belongs. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.AccessibilityNodeInfo.CollectionItemInfo () "," Sets the collection item info if the node is a collection item. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.obtain () "," Returns a cached instance if such is available otherwise a new one. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.removeAction (AccessibilityAction) (int action) "," This method was deprecated in API level 21. Use removeAction(AccessibilityAction) <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.isPassword () "," Gets whether this node is a password. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.getContentDescription () "," Gets the content description of this node. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.isSelected () "," Gets whether this node is selected. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.getMaxTextLength () "," Returns the maximum text length for this node. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.setCheckable (boolean checkable) "," Sets whether this node is checkable. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.getClassName () "," Gets the class this node comes from. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.getPackageName () "," Gets the package this node comes from. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.setFocused (boolean focused) "," Sets whether this node is focused. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.isMultiLine () "," Gets if the node is a multi line editable text. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.getCollectionInfo () "," Gets the collection info if the node is a collection. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.setSelected (boolean selected) "," Sets whether this node is selected. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.InputType () "," Gets the input type of the source as defined by InputType. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.setDismissable (boolean dismissable) "," Sets if the node can be dismissed. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.AccessibilityNodeInfo.AccessibilityAction () "," Removes an action that can be performed on the node. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.Rect () "," Sets the node bounds in screen coordinates. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.AccessibilityNodeInfo () "," Returns a cached instance if such is available or a new one is create. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.getViewIdResourceName () "," Gets the fully qualified resource name of the source view's id. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.setAccessibilityFocused (boolean focused) "," Sets whether this node is accessibility focused. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.getError () "," Gets the error text of this node. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.isDismissable () "," Gets if the node can be dismissed. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.isChecked () "," Gets whether this node is checked. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.getTraversalAfter () "," Gets the node after which this one is visited in accessibility traversal. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.String () "," Sets the fully qualified resource name of the source view's id. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.getLabeledBy () "," Gets the node info which serves as the label of the view represented by this info for accessibility purposes. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.CharSequence () "," Sets the text of this node. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.View () "," Sets the node before which this one is visited during traversal. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.getText () "," Gets the text of this node. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.isClickable () "," Gets whether this node is clickable. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.setCanOpenPopup (boolean opensPopup) "," Sets if this node opens a popup or a dialog. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.refresh () "," Refreshes this info with the latest state of the view it represents. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.isEnabled () "," Gets whether this node is enabled. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.recycle () "," Return an instance back to be reused. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.getChildCount () "," Gets the number of children. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.setMultiLine (boolean multiLine) "," Sets if the node is a multi line editable text. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.setFocusable (boolean focusable) "," Sets whether this node is focusable. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.getCollectionItemInfo () "," Gets the collection item info if the node is a collection item. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.getParent () "," Gets the parent. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.getActionList () () "," This method was deprecated in API level 21. Use getActionList(). <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.Bundle () "," Performs an action on the node. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.getWindowId () "," Gets the id of the window from which the info comes from. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.performAction (int action) "," Performs an action on the node. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.setPassword (boolean password) "," Sets whether this node is a password. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.findFocus (int focus) "," Find the view that has the specified focus type. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.getMovementGranularities () "," Gets the movement granularities for traversing the text of this node. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.InputType (int inputType) "," Sets the input type of the source as defined by InputType. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.isCheckable () "," Gets whether this node is checkable. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.RangeInfo.getCurrent () "," Gets the current value. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.RangeInfo.getType () "," Gets the range type. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.RangeInfo.getMin () "," Gets the min value. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.RangeInfo.getMax () "," Gets the max value. <br /><br />"
"android.view.accessibility.AccessibilityNodeInfo.RangeInfo.obtain (int type, float min, float max, float current) "," Obtains a pooled instance. <br /><br />"
"android.view.accessibility.AccessibilityNodeProvider.AccessibilityNodeInfo () "," Finds AccessibilityNodeInfos by text. <br /><br />"
"android.view.accessibility.AccessibilityNodeProvider.Bundle () "," Performs an accessibility action on a virtual view, i.e. <br /><br />"
"android.view.accessibility.AccessibilityNodeProvider.findFocus (int focus) "," Find the virtual view, i.e. <br /><br />"
"android.view.accessibility.AccessibilityNodeProvider.AccessibilityNodeInfo (int virtualViewId) "," Returns an AccessibilityNodeInfo representing a virtual view, i.e. <br /><br />"
"android.view.accessibility.AccessibilityRecord.setToIndex (int toIndex) "," Sets the index of text selection end or the index of the last visible item when scrolling. <br /><br />"
"android.view.accessibility.AccessibilityRecord.getClassName () "," Gets the class name of the source. <br /><br />"
"android.view.accessibility.AccessibilityRecord.setItemCount (int itemCount) "," Sets the number of items that can be visited. <br /><br />"
"android.view.accessibility.AccessibilityRecord.AccessibilityRecord () "," Returns a cached instance if such is available or a new one is instantiated. <br /><br />"
"android.view.accessibility.AccessibilityRecord.setScrollY (int scrollY) "," Sets the scroll offset of the source top edge in pixels. <br /><br />"
"android.view.accessibility.AccessibilityRecord.setAddedCount (int addedCount) "," Sets the number of added characters. <br /><br />"
"android.view.accessibility.AccessibilityRecord.getScrollY () "," Gets the scroll offset of the source top edge in pixels. <br /><br />"
"android.view.accessibility.AccessibilityRecord.setScrollable (boolean scrollable) "," Sets if the source is scrollable. <br /><br />"
"android.view.accessibility.AccessibilityRecord.getScrollX () "," Gets the scroll offset of the source left edge in pixels. <br /><br />"
"android.view.accessibility.AccessibilityRecord.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.view.accessibility.AccessibilityRecord.AccessibilityNodeInfo () "," Gets the AccessibilityNodeInfo of the event source. <br /><br />"
"android.view.accessibility.AccessibilityRecord.setCurrentItemIndex (int currentItemIndex) "," Sets the index of the source in the list of items that can be visited. <br /><br />"
"android.view.accessibility.AccessibilityRecord.setRemovedCount (int removedCount) "," Sets the number of removed characters. <br /><br />"
"android.view.accessibility.AccessibilityRecord.Parcelable () "," Sets the Parcelable data of the event. <br /><br />"
"android.view.accessibility.AccessibilityRecord.setMaxScrollY (int maxScrollY) "," Sets the max scroll offset of the source top edge in pixels. <br /><br />"
"android.view.accessibility.AccessibilityRecord.isChecked () "," Gets if the source is checked. <br /><br />"
"android.view.accessibility.AccessibilityRecord.getBeforeText () "," Sets the text before a change. <br /><br />"
"android.view.accessibility.AccessibilityRecord.setPassword (boolean isPassword) "," Sets if the source is a password field. <br /><br />"
"android.view.accessibility.AccessibilityRecord.getFromIndex () "," Gets the index of the first character of the changed sequence, or the beginning of a text selection or the index of the first visible item when scrolling. <br /><br />"
"android.view.accessibility.AccessibilityRecord.setChecked (boolean isChecked) "," Sets if the source is checked. <br /><br />"
"android.view.accessibility.AccessibilityRecord.setScrollX (int scrollX) "," Sets the scroll offset of the source left edge in pixels. <br /><br />"
"android.view.accessibility.AccessibilityRecord.setMaxScrollX (int maxScrollX) "," Sets the max scroll offset of the source left edge in pixels. <br /><br />"
"android.view.accessibility.AccessibilityRecord.CharSequence () "," Sets the description of the source. <br /><br />"
"android.view.accessibility.AccessibilityRecord.getMaxScrollY () "," Gets the max scroll offset of the source top edge in pixels. <br /><br />"
"android.view.accessibility.AccessibilityRecord.setFromIndex (int fromIndex) "," Sets the index of the first character of the changed sequence or the beginning of a text selection or the index of the first visible item when scrolling. <br /><br />"
"android.view.accessibility.AccessibilityRecord.View () "," Sets the event source. <br /><br />"
"android.view.accessibility.AccessibilityRecord.getItemCount () "," Gets the number of items that can be visited. <br /><br />"
"android.view.accessibility.AccessibilityRecord.getText () "," Gets the text of the event. <br /><br />"
"android.view.accessibility.AccessibilityRecord.getToIndex () "," Gets the index of text selection end or the index of the last visible item when scrolling. <br /><br />"
"android.view.accessibility.AccessibilityRecord.isScrollable () "," Gets if the source is scrollable. <br /><br />"
"android.view.accessibility.AccessibilityRecord.getCurrentItemIndex () "," Gets the index of the source in the list of items the can be visited. <br /><br />"
"android.view.accessibility.AccessibilityRecord.getAddedCount () "," Gets the number of added characters. <br /><br />"
"android.view.accessibility.AccessibilityRecord.setEnabled (boolean isEnabled) "," Sets if the source is enabled. <br /><br />"
"android.view.accessibility.AccessibilityRecord.getRemovedCount () "," Gets the number of removed characters. <br /><br />"
"android.view.accessibility.AccessibilityRecord.isEnabled () "," Gets if the source is enabled. <br /><br />"
"android.view.accessibility.AccessibilityRecord.recycle () "," Return an instance back to be reused. <br /><br />"
"android.view.accessibility.AccessibilityRecord.isFullScreen () "," Gets if the source is taking the entire screen. <br /><br />"
"android.view.accessibility.AccessibilityRecord.obtain () "," Returns a cached instance if such is available or a new one is instantiated. <br /><br />"
"android.view.accessibility.AccessibilityRecord.getMaxScrollX () "," Gets the max scroll offset of the source left edge in pixels. <br /><br />"
"android.view.accessibility.AccessibilityRecord.isPassword () "," Gets if the source is a password field. <br /><br />"
"android.view.accessibility.AccessibilityRecord.getContentDescription () "," Gets the description of the source. <br /><br />"
"android.view.accessibility.AccessibilityRecord.getWindowId () "," Gets the id of the window from which the event comes from. <br /><br />"
"android.view.accessibility.AccessibilityRecord.setFullScreen (boolean isFullScreen) "," Sets if the source is taking the entire screen. <br /><br />"
"android.view.accessibility.AccessibilityWindowInfo.isFocused () "," Gets if this window has input focus. <br /><br />"
"android.view.accessibility.AccessibilityWindowInfo.AccessibilityWindowInfo () "," Returns a cached instance if such is available or a new one is created. <br /><br />"
"android.view.accessibility.AccessibilityWindowInfo.getType () "," Gets the type of the window. <br /><br />"
"android.view.accessibility.AccessibilityWindowInfo.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.view.accessibility.AccessibilityWindowInfo.getChild (int index) "," Gets the child window at a given index. <br /><br />"
"android.view.accessibility.AccessibilityWindowInfo.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.view.accessibility.AccessibilityWindowInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.view.accessibility.AccessibilityWindowInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.view.accessibility.AccessibilityWindowInfo.Rect () "," Gets the bounds of this window in the screen. <br /><br />"
"android.view.accessibility.AccessibilityWindowInfo.isAccessibilityFocused () "," Gets if this window has accessibility focus. <br /><br />"
"android.view.accessibility.AccessibilityWindowInfo.getId () "," Gets the unique window id. <br /><br />"
"android.view.accessibility.AccessibilityWindowInfo.recycle () "," Return an instance back to be reused. <br /><br />"
"android.view.accessibility.AccessibilityWindowInfo.obtain () "," Returns a cached instance if such is available or a new one is created. <br /><br />"
"android.view.accessibility.AccessibilityWindowInfo.getChildCount () "," Gets the number of child windows. <br /><br />"
"android.view.accessibility.AccessibilityWindowInfo.getLayer () "," Gets the layer which determines the Z-order of the window. <br /><br />"
"android.view.accessibility.AccessibilityWindowInfo.isActive () "," Gets if this window is active. <br /><br />"
"android.view.accessibility.AccessibilityWindowInfo.getRoot () "," Gets the root node in the window's hierarchy. <br /><br />"
"android.view.accessibility.AccessibilityWindowInfo.getParent () "," Gets the parent window if such. <br /><br />"
"android.view.accessibility.AccessibilityWindowInfo.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.view.accessibility.CaptioningManager.CaptioningChangeListener.onEnabledChanged (boolean enabled) "," Called when the captioning enabled state changes. <br /><br />"
"android.view.accessibility.CaptioningManager.CaptioningChangeListener.CaptioningManager.CaptionStyle () "," Called when the captioning user style changes. <br /><br />"
"android.view.accessibility.CaptioningManager.CaptioningChangeListener.Locale () "," Called when the captioning locale changes. <br /><br />"
"android.view.accessibility.CaptioningManager.CaptioningChangeListener.onFontScaleChanged (float fontScale) "," Called when the captioning font scaling factor changes. <br /><br />"
"android.view.accessibility.CaptioningManager.CaptionStyle.getTypeface () "," no description <br /><br />"
"android.view.accessibility.CaptioningManager.CaptionStyle.hasEdgeColor () "," no description <br /><br />"
"android.view.accessibility.CaptioningManager.CaptionStyle.hasEdgeType () "," no description <br /><br />"
"android.view.accessibility.CaptioningManager.CaptionStyle.hasBackgroundColor () "," no description <br /><br />"
"android.view.accessibility.CaptioningManager.CaptionStyle.hasWindowColor () "," no description <br /><br />"
"android.view.accessibility.CaptioningManager.CaptionStyle.hasForegroundColor () "," no description <br /><br />"
"android.view.ActionMode.Callback.ActionMode () "," Called when an action mode is about to be exited and destroyed. <br /><br />"
"android.view.ActionMode.Callback.Menu () "," Called to refresh an action mode's action menu whenever it is invalidated. <br /><br />"
"android.view.ActionMode.Callback.MenuItem () "," Called to report a user click on an action button. <br /><br />"
"android.view.ActionMode.getTag () "," Retrieve the tag object associated with this ActionMode. <br /><br />"
"android.view.ActionMode.getMenu () "," Returns the menu of actions that this action mode presents. <br /><br />"
"android.view.ActionMode.CharSequence () "," Set the title of the action mode. <br /><br />"
"android.view.ActionMode.setTitleOptionalHint (boolean titleOptional) "," Set whether or not the title/subtitle display for this action mode is optional. <br /><br />"
"android.view.ActionMode.Object () "," Set a tag object associated with this ActionMode. <br /><br />"
"android.view.ActionMode.setSubtitle (int resId) "," Set the subtitle of the action mode. <br /><br />"
"android.view.ActionMode.MenuInflater () "," Returns a MenuInflater with the ActionMode's context. <br /><br />"
"android.view.ActionMode.View () "," Set a custom view for this action mode. <br /><br />"
"android.view.ActionMode.setTitle (int resId) "," Set the title of the action mode. <br /><br />"
"android.view.ActionMode.getSubtitle () "," Returns the current subtitle of this action mode. <br /><br />"
"android.view.ActionMode.finish () "," Finish and close this action mode. <br /><br />"
"android.view.ActionMode.isTitleOptional () "," no description <br /><br />"
"android.view.ActionMode.getCustomView () "," Returns the current custom view for this action mode. <br /><br />"
"android.view.ActionMode.getTitle () "," Returns the current title of this action mode. <br /><br />"
"android.view.ActionMode.getTitleOptionalHint () "," no description <br /><br />"
"android.view.ActionMode.invalidate () "," Invalidate the action mode and refresh menu content. <br /><br />"
"android.view.ActionProvider.onPerformDefaultAction () "," Performs an optional default action. <br /><br />"
"android.view.ActionProvider.onCreateActionView (MenuItem) () "," This method was deprecated in API level 16. use onCreateActionView(MenuItem) <br /><br />"
"android.view.ActionProvider.isVisible () () "," If this ActionProvider is associated with an item in a menu, refresh the visibility of the item based on overridesItemVisibility() and isVisible(). <br /><br />"
"android.view.ActionProvider.hasSubMenu () "," Determines if this ActionProvider has a submenu associated with it. <br /><br />"
"android.view.ActionProvider.ActionProvider.VisibilityListener () "," Set a listener to be notified when this ActionProvider's overridden visibility changes. <br /><br />"
"android.view.ActionProvider.SubMenu () "," Called to prepare an associated submenu for the menu item backed by this ActionProvider. <br /><br />"
"android.view.ActionProvider.MenuItem () "," The result of this method determines whether or not isVisible() will be used by the MenuItem this ActionProvider is bound to help determine its visibility. <br /><br />"
"android.view.ActionProvider.VisibilityListener.onActionProviderVisibilityChanged (boolean isVisible) "," no description <br /><br />"
"android.view.animation.AccelerateDecelerateInterpolator.getInterpolation (float input) "," no description <br /><br />"
"android.view.animation.AccelerateInterpolator.getInterpolation (float input) "," no description <br /><br />"
"android.view.animation.AlphaAnimation.willChangeTransformationMatrix () "," Indicates whether or not this animation will affect the transformation matrix. <br /><br />"
"android.view.animation.AlphaAnimation.willChangeBounds () "," Indicates whether or not this animation will affect the bounds of the animated view. <br /><br />"
"android.view.animation.Animation.AnimationListener.Animation () "," Notifies the start of the animation. <br /><br />"
"android.view.animation.Animation.setStartOffset (long startOffset) "," When this animation should start relative to the start time. <br /><br />"
"android.view.animation.Animation.setBackgroundColor (int bg) "," Set background behind animation. <br /><br />"
"android.view.animation.Animation.getRepeatCount () "," Defines how many times the animation should repeat. <br /><br />"
"android.view.animation.Animation.isFillEnabled () "," If fillEnabled is true, this animation will apply the value of fillBefore. <br /><br />"
"android.view.animation.Animation.willChangeBounds () "," Indicates whether or not this animation will affect the bounds of the animated view. <br /><br />"
"android.view.animation.Animation.getFillBefore () "," If fillBefore is true, this animation will apply its transformation before the start time of the animation. <br /><br />"
"android.view.animation.Animation.setDuration (long durationMillis) "," How long this animation should last. <br /><br />"
"android.view.animation.Animation.getFillAfter () "," If fillAfter is true, this animation will apply its transformation after the end time of the animation. <br /><br />"
"android.view.animation.Animation.setFillBefore (boolean fillBefore) "," If fillBefore is true, this animation will apply its transformation before the start time of the animation. <br /><br />"
"android.view.animation.Animation.setRepeatCount (int repeatCount) "," Sets how many times the animation should be repeated. <br /><br />"
"android.view.animation.Animation.startNow () "," Convenience method to start the animation at the current time in milliseconds. <br /><br />"
"android.view.animation.Animation.getTransformation (long, Transformation) () "," Convenience method to start the animation the first time getTransformation(long, Transformation) is invoked. <br /><br />"
"android.view.animation.Animation.hasStarted () "," Indicates whether this animation has started or not. <br /><br />"
"android.view.animation.Animation.setZAdjustment (int zAdjustment) "," Set the Z ordering mode to use while running the animation. <br /><br />"
"android.view.animation.Animation.isInitialized () "," Whether or not the animation has been initialized. <br /><br />"
"android.view.animation.Animation.initialize (int width, int height, int parentWidth, int parentHeight) "," Initialize this animation with the dimensions of the object being animated as well as the objects parents. <br /><br />"
"android.view.animation.Animation.computeDurationHint () "," Compute a hint at how long the entire animation may last, in milliseconds. <br /><br />"
"android.view.animation.Animation.setRepeatMode (int repeatMode) "," Defines what this animation should do when it reaches the end. <br /><br />"
"android.view.animation.Animation.hasEnded () "," Indicates whether this animation has ended or not. <br /><br />"
"android.view.animation.Animation.setDetachWallpaper (boolean) () "," Return value of setDetachWallpaper(boolean). <br /><br />"
"android.view.animation.Animation.cancel () "," Cancel the animation. <br /><br />"
"android.view.animation.Animation.setDetachWallpaper (boolean detachWallpaper) "," If detachWallpaper is true, and this is a window animation of a window that has a wallpaper background, then the window will be detached from the wallpaper while it runs. <br /><br />"
"android.view.animation.Animation.getDuration () "," How long this animation should last <br /><br />"
"android.view.animation.Animation.getRepeatMode () "," Defines what this animation should do when it reaches the end. <br /><br />"
"android.view.animation.Animation.willChangeTransformationMatrix () "," Indicates whether or not this animation will affect the transformation matrix. <br /><br />"
"android.view.animation.Animation.getStartOffset () "," When this animation should start, relative to StartTime <br /><br />"
"android.view.animation.Animation.restrictDuration (long durationMillis) "," Ensure that the duration that this animation will run is not longer than durationMillis. <br /><br />"
"android.view.animation.Animation.getBackgroundColor () "," Returns the background color behind the animation. <br /><br />"
"android.view.animation.Animation.setZAdjustment (int) () "," Returns the Z ordering mode to use while running the animation as previously set by setZAdjustment(int). <br /><br />"
"android.view.animation.Animation.setStartTime (long startTimeMillis) "," When this animation should start. <br /><br />"
"android.view.animation.Animation.scaleCurrentDuration (float scale) "," How much to scale the duration by. <br /><br />"
"android.view.animation.Animation.Context () "," Sets the acceleration curve for this animation. <br /><br />"
"android.view.animation.Animation.Animation.AnimationListener () "," Binds an animation listener to this animation. <br /><br />"
"android.view.animation.Animation.getInterpolator () "," Gets the acceleration curve type for this animation. <br /><br />"
"android.view.animation.Animation.setFillEnabled (boolean fillEnabled) "," If fillEnabled is true, the animation will apply the value of fillBefore. <br /><br />"
"android.view.animation.Animation.setFillAfter (boolean fillAfter) "," If fillAfter is true, the transformation that this animation performed will persist when it is finished. <br /><br />"
"android.view.animation.Animation.Transformation () "," Gets the transformation to apply at a specified point in time. <br /><br />"
"android.view.animation.Animation.Interpolator () "," Sets the acceleration curve for this animation. <br /><br />"
"android.view.animation.Animation.reset () "," Reset the initialization state of this animation. <br /><br />"
"android.view.animation.Animation.getStartTime () "," When this animation should start. <br /><br />"
"android.view.animation.AnimationSet.setStartOffset (long startOffset) "," When this animation should start relative to the start time. <br /><br />"
"android.view.animation.AnimationSet.willChangeTransformationMatrix () "," Indicates whether or not this animation will affect the transformation matrix. <br /><br />"
"android.view.animation.AnimationSet.willChangeBounds () "," Indicates whether or not this animation will affect the bounds of the animated view. <br /><br />"
"android.view.animation.AnimationSet.Animation () "," Add a child animation to this animation set. <br /><br />"
"android.view.animation.AnimationSet.restrictDuration (long durationMillis) "," Ensure that the duration that this animation will run is not longer than durationMillis. <br /><br />"
"android.view.animation.AnimationSet.setDuration (long durationMillis) "," Sets the duration of every child animation. <br /><br />"
"android.view.animation.AnimationSet.setFillBefore (boolean fillBefore) "," If fillBefore is true, this animation will apply its transformation before the start time of the animation. <br /><br />"
"android.view.animation.AnimationSet.setStartTime (long startTimeMillis) "," Sets the start time of this animation and all child animations <br /><br />"
"android.view.animation.AnimationSet.scaleCurrentDuration (float scale) "," How much to scale the duration by. <br /><br />"
"android.view.animation.AnimationSet.getAnimations () "," no description <br /><br />"
"android.view.animation.AnimationSet.initialize (int width, int height, int parentWidth, int parentHeight) "," Initialize this animation with the dimensions of the object being animated as well as the objects parents. <br /><br />"
"android.view.animation.AnimationSet.computeDurationHint () "," The duration hint of an animation set is the maximum of the duration hints of all of its component animations. <br /><br />"
"android.view.animation.AnimationSet.Transformation () "," The transformation of an animation set is the concatenation of all of its component animations. <br /><br />"
"android.view.animation.AnimationSet.setFillAfter (boolean fillAfter) "," If fillAfter is true, the transformation that this animation performed will persist when it is finished. <br /><br />"
"android.view.animation.AnimationSet.setRepeatMode (int repeatMode) "," Defines what this animation should do when it reaches the end. <br /><br />"
"android.view.animation.AnimationSet.reset () "," Reset the initialization state of this animation. <br /><br />"
"android.view.animation.AnimationSet.getStartTime () "," When this animation should start. <br /><br />"
"android.view.animation.AnimationSet.getDuration () "," The duration of an AnimationSet is defined to be the duration of the longest child animation. <br /><br />"
"android.view.animation.AnimationUtils.Context () "," Make an animation for objects becoming invisible. <br /><br />"
"android.view.animation.AnimationUtils.LayoutAnimationController () "," Loads a LayoutAnimationController object from a resource <br /><br />"
"android.view.animation.AnimationUtils.Animation () "," Loads an Animation object from a resource <br /><br />"
"android.view.animation.AnimationUtils.Interpolator () "," Loads an Interpolator object from a resource <br /><br />"
"android.view.animation.AnimationUtils.currentAnimationTimeMillis () "," Returns the current animation time in milliseconds. <br /><br />"
"android.view.animation.AnticipateInterpolator.getInterpolation (float t) "," no description <br /><br />"
"android.view.animation.AnticipateOvershootInterpolator.getInterpolation (float t) "," no description <br /><br />"
"android.view.animation.BounceInterpolator.getInterpolation (float t) "," no description <br /><br />"
"android.view.animation.CycleInterpolator.getInterpolation (float input) "," no description <br /><br />"
"android.view.animation.DecelerateInterpolator.getInterpolation (float input) "," no description <br /><br />"
"android.view.animation.GridLayoutAnimationController.setDirection (int direction) "," Sets the direction of the animation. <br /><br />"
"android.view.animation.GridLayoutAnimationController.getRowDelay () "," Returns the delay by which the children's animation are offset from one row to the other. <br /><br />"
"android.view.animation.GridLayoutAnimationController.setDirectionPriority (int directionPriority) "," Specifies the direction priority of the animation. <br /><br />"
"android.view.animation.GridLayoutAnimationController.getDirection () "," Returns the direction of the animation. <br /><br />"
"android.view.animation.GridLayoutAnimationController.willOverlap () "," Indicates whether two children's animations will overlap. <br /><br />"
"android.view.animation.GridLayoutAnimationController.setRowDelay (float rowDelay) "," Sets the delay, as a fraction of the animation duration, by which the children's animations are offset from one row to the other. <br /><br />"
"android.view.animation.GridLayoutAnimationController.setColumnDelay (float columnDelay) "," Sets the delay, as a fraction of the animation duration, by which the children's animations are offset from one column to the other. <br /><br />"
"android.view.animation.GridLayoutAnimationController.getColumnDelay () "," Returns the delay by which the children's animation are offset from one column to the other. <br /><br />"
"android.view.animation.GridLayoutAnimationController.getDirectionPriority () "," Returns the direction priority for the animation. <br /><br />"
"android.view.animation.LayoutAnimationController.Animation () "," Sets the animation to be run on each child of the view group on which this layout animation controller is . <br /><br />"
"android.view.animation.LayoutAnimationController.start () "," Starts the animation. <br /><br />"
"android.view.animation.LayoutAnimationController.setOrder (int order) "," Sets the order used to compute the delay of each child's animation. <br /><br />"
"android.view.animation.LayoutAnimationController.View () "," Returns the animation to be applied to the specified view. <br /><br />"
"android.view.animation.LayoutAnimationController.Context () "," Sets the interpolator used to interpolate the delays between the children. <br /><br />"
"android.view.animation.LayoutAnimationController.isDone () "," Indicates whether the layout animation is over or not. <br /><br />"
"android.view.animation.LayoutAnimationController.setDelay (float delay) "," Sets the delay, as a fraction of the animation duration, by which the children's animations are offset. <br /><br />"
"android.view.animation.LayoutAnimationController.getInterpolator () "," Returns the interpolator used to interpolate the delays between the children. <br /><br />"
"android.view.animation.LayoutAnimationController.willOverlap () "," Indicates whether two children's animations will overlap. <br /><br />"
"android.view.animation.LayoutAnimationController.Interpolator () "," Sets the interpolator used to interpolate the delays between the children. <br /><br />"
"android.view.animation.LayoutAnimationController.getAnimation () "," Returns the animation applied to each child of the view group on which this controller is set. <br /><br />"
"android.view.animation.LayoutAnimationController.getOrder () "," Returns the order used to compute the delay of each child's animation. <br /><br />"
"android.view.animation.LayoutAnimationController.getDelay () "," Returns the delay by which the children's animation are offset. <br /><br />"
"android.view.animation.LinearInterpolator.getInterpolation (float input) "," no description <br /><br />"
"android.view.animation.OvershootInterpolator.getInterpolation (float t) "," no description <br /><br />"
"android.view.animation.PathInterpolator.getInterpolation (float t) "," Using the line in the Path in this interpolator that can be described as y = f(x), finds the y coordinate of the line given t as the x coordinate. <br /><br />"
"android.view.animation.RotateAnimation.initialize (int width, int height, int parentWidth, int parentHeight) "," Initialize this animation with the dimensions of the object being animated as well as the objects parents. <br /><br />"
"android.view.animation.ScaleAnimation.initialize (int width, int height, int parentWidth, int parentHeight) "," Initialize this animation with the dimensions of the object being animated as well as the objects parents. <br /><br />"
"android.view.animation.Transformation.clear () "," Reset the transformation to a state that leaves the object being animated in an unmodified state. <br /><br />"
"android.view.animation.Transformation.setAlpha (float alpha) "," Sets the degree of transparency <br /><br />"
"android.view.animation.Transformation.getMatrix () "," no description <br /><br />"
"android.view.animation.Transformation.Transformation () "," Clones the specified transformation. <br /><br />"
"android.view.animation.Transformation.toShortString () "," Return a string representation of the transformation in a compact form. <br /><br />"
"android.view.animation.Transformation.setTransformationType (int transformationType) "," Sets the transformation type. <br /><br />"
"android.view.animation.Transformation.getTransformationType () "," Indicates the nature of this transformation. <br /><br />"
"android.view.animation.Transformation.getAlpha () "," no description <br /><br />"
"android.view.animation.Transformation.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.view.animation.TranslateAnimation.initialize (int width, int height, int parentWidth, int parentHeight) "," Initialize this animation with the dimensions of the object being animated as well as the objects parents. <br /><br />"
"android.view.Choreographer.FrameCallback.doFrame (long frameTimeNanos) "," Called when a new display frame is being rendered. <br /><br />"
"android.view.CollapsibleActionView.onActionViewCollapsed () "," Called when this view is collapsed as an action view. <br /><br />"
"android.view.CollapsibleActionView.onActionViewExpanded () "," Called when this view is expanded as an action view. <br /><br />"
"android.view.ContextMenu.Drawable () "," Sets the context menu header's icon to the icon given in icon Drawable. <br /><br />"
"android.view.ContextMenu.setHeaderTitle (int titleRes) "," Sets the context menu header's title to the title given in titleRes resource identifier. <br /><br />"
"android.view.ContextMenu.CharSequence () "," Sets the context menu header's title to the title given in title. <br /><br />"
"android.view.ContextMenu.clearHeader () "," Clears the header of the context menu. <br /><br />"
"android.view.ContextMenu.setHeaderIcon (int iconRes) "," Sets the context menu header's icon to the icon given in iconRes resource id. <br /><br />"
"android.view.ContextMenu.View () "," Sets the header of the context menu to the View given in view. <br /><br />"
"android.view.ContextThemeWrapper.String () "," Return the handle to a system-level service by name. <br /><br />"
"android.view.ContextThemeWrapper.setTheme (int resid) "," Set the base theme for this context. <br /><br />"
"android.view.ContextThemeWrapper.getTheme () "," Return the Theme object associated with this Context. <br /><br />"
"android.view.ContextThemeWrapper.getResources () "," Return a Resources instance for your application's package. <br /><br />"
"android.view.ContextThemeWrapper.Configuration () "," Call to set an 'override configuration' on this context -- this is a configuration that replies one or more values of the standard configuration that is applied to the context. <br /><br />"
"android.view.Display.getSupportedRefreshRates () "," Get the supported refresh rates of this display in frames per second. <br /><br />"
"android.view.Display.getRefreshRate () "," Gets the refresh rate of this display in frames per second. <br /><br />"
"android.view.Display.getState () "," Gets the state of the display, such as whether it is on or off. <br /><br />"
"android.view.Display.getDisplayId () "," Gets the display id. <br /><br />"
"android.view.Display.getFlags () "," Returns a combination of flags that describe the capabilities of the display. <br /><br />"
"android.view.Display.getRotation () "," Returns the rotation of the screen from its 'natural' orientation. <br /><br />"
"android.view.Display.getRotation () () "," This method was deprecated in API level 8. use getRotation() <br /><br />"
"android.view.Display.RGBA_8888 () "," This method was deprecated in API level 17. This method is no longer supported. The result is always RGBA_8888. <br /><br />"
"android.view.Display.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.view.Display.getName () "," Gets the name of the display. <br /><br />"
"android.view.Display.Rect () "," Gets the size of the display as a rectangle, in pixels. <br /><br />"
"android.view.Display.getSize (Point) () "," This method was deprecated in API level 13. Use getSize(Point) instead. <br /><br />"
"android.view.Display.getPresentationDeadlineNanos () "," This is how far in advance a buffer must be queued for presentation at a given time. <br /><br />"
"android.view.Display.getAppVsyncOffsetNanos () "," Gets the app VSYNC offset, in nanoseconds. <br /><br />"
"android.view.Display.isValid () "," Returns true if this display is still valid, false if the display has been removed. <br /><br />"
"android.view.Display.Point () "," Gets the size of the display, in pixels. <br /><br />"
"android.view.Display.DisplayMetrics () "," Gets display metrics based on the real size of this display. <br /><br />"
"android.view.DragEvent.getX () "," Gets the X coordinate of the drag point. <br /><br />"
"android.view.DragEvent.getResult () "," Returns an indication of the result of the drag and drop operation. <br /><br />"
"android.view.DragEvent.getAction () "," Inspect the action value of this event. <br /><br />"
"android.view.DragEvent.Parcel () "," Creates a Parcel object from this DragEvent object. <br /><br />"
"android.view.DragEvent.getY () "," Gets the Y coordinate of the drag point. <br /><br />"
"android.view.DragEvent.startDrag () () "," Returns the local state object sent to the system as part of the call to startDrag(). <br /><br />"
"android.view.DragEvent.toString () "," Returns a string containing a concise, human-readable representation of this DragEvent object. <br /><br />"
"android.view.FocusFinder.Rect () "," Find the next view to take focus in root's descendants, searching from a particular rectangle in root's coordinates. <br /><br />"
"android.view.FocusFinder.getInstance () "," Get the focus finder for this thread. <br /><br />"
"android.view.FocusFinder.ViewGroup () "," Find the nearest touchable view to the specified view. <br /><br />"
"android.view.FocusFinder.View () "," Find the next view to take focus in root's descendants, starting from the view that currently is focused. <br /><br />"
"android.view.FrameStats.getFrameCount () "," Gets the number of frames for which there is data. <br /><br />"
"android.view.FrameStats.getFramePresentedTimeNano (int index) "," Get the time a frame at a given index was presented. <br /><br />"
"android.view.FrameStats.getEndTimeNano () "," Gets the end time of the interval for which these statistics apply. <br /><br />"
"android.view.FrameStats.getStartTimeNano () "," Gets the start time of the interval for which these statistics apply. <br /><br />"
"android.view.FrameStats.getRefreshPeriodNano () "," Gets the refresh period of the display hosting the window(s) for which these statistics apply. <br /><br />"
"android.view.GestureDetector.GestureDetector.OnDoubleTapListener () "," Sets the listener which will be called for double-tap and related gestures. <br /><br />"
"android.view.GestureDetector.GestureDetector.OnGestureListener () "," Analyzes the given motion event and if applicable triggers the appropriate callbacks on the GestureDetector.OnGestureListener supplied. <br /><br />"
"android.view.GestureDetector.setIsLongpressEnabled (boolean isLongpressEnabled) "," Set whether longpress is enabled, if this is enabled when a user presses and holds down you get a longpress event and nothing further. <br /><br />"
"android.view.GestureDetector.isLongpressEnabled () "," no description <br /><br />"
"android.view.GestureDetector.OnDoubleTapListener.MotionEvent () "," Notified when a single-tap occurs. <br /><br />"
"android.view.GestureDetector.OnGestureListener.MotionEvent () "," Notified when a tap occurs with the up MotionEvent that triggered it. <br /><br />"
"android.view.GestureDetector.SimpleOnGestureListener.MotionEvent () "," Notified when a tap occurs with the up MotionEvent that triggered it. <br /><br />"
"android.view.Gravity.Rect () "," Apply additional gravity behavior based on the overall 'display' that an object exists in. <br /><br />"
"android.view.Gravity.getAbsoluteGravity (int gravity, int layoutDirection) "," Convert script specific gravity to absolute horizontal value. <br /><br />"
"android.view.Gravity.isHorizontal (int gravity) "," Indicate whether the supplied gravity has an horizontal pull. <br /><br />"
"android.view.Gravity.isVertical (int gravity) "," Indicate whether the supplied gravity has a vertical pull. <br /><br />"
"android.view.InputDevice.getControllerNumber () "," The controller number for a given input device. <br /><br />"
"android.view.InputDevice.getDeviceIds () "," Gets the ids of all input devices in the system. <br /><br />"
"android.view.InputDevice.supportsSource (int source) "," Determines whether the input device supports the given source or sources. <br /><br />"
"android.view.InputDevice.MotionEvent (int axis) "," Gets information about the range of values for a particular MotionEvent axis. <br /><br />"
"android.view.InputDevice.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.view.InputDevice.getDevice (int id) "," Gets information about the input device with the specified id. <br /><br />"
"android.view.InputDevice.getKeyCharacterMap () "," Gets the key character map associated with this input device. <br /><br />"
"android.view.InputDevice.getMotionRanges () "," Gets the ranges for all axes supported by the device. <br /><br />"
"android.view.InputDevice.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.view.InputDevice.getDescriptor () "," Gets the input device descriptor, which is a stable identifier for an input device. <br /><br />"
"android.view.InputDevice.VIRTUAL_KEYBOARD () "," Returns true if the device is a virtual input device rather than a real one, such as the virtual keyboard (see VIRTUAL_KEYBOARD). <br /><br />"
"android.view.InputDevice.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.view.InputDevice.getProductId () "," Gets the product id for the given device, if available. <br /><br />"
"android.view.InputDevice.getName () "," Gets the name of this input device. <br /><br />"
"android.view.InputDevice.hasKeys (int... keys) "," Gets whether the device is capable of producing the list of keycodes. <br /><br />"
"android.view.InputDevice.getSources () "," Gets the input sources supported by this input device as a combined bitfield. <br /><br />"
"android.view.InputDevice.getId () "," Gets the input device id. <br /><br />"
"android.view.InputDevice.getVibrator () "," Gets the vibrator service associated with the device, if there is one. <br /><br />"
"android.view.InputDevice.getKeyboardType () "," Gets the keyboard type. <br /><br />"
"android.view.InputDevice.getVendorId () "," Gets the vendor id for the given device, if available. <br /><br />"
"android.view.InputDevice.MotionEvent (int axis, int source) "," Gets information about the range of values for a particular MotionEvent axis used by a particular source on the device. <br /><br />"
"android.view.InputDevice.MotionRange.getFuzz () "," Gets the error tolerance for input device measurements with respect to this axis. <br /><br />"
"android.view.InputDevice.MotionRange.getAxis () "," Gets the axis id. <br /><br />"
"android.view.InputDevice.MotionRange.getRange () "," Gets the range of the axis (difference between maximum and minimum). <br /><br />"
"android.view.InputDevice.MotionRange.isFromSource (int source) "," Determines whether the event is from the given source. <br /><br />"
"android.view.InputDevice.MotionRange.getMin () "," Gets the inclusive minimum value for the axis. <br /><br />"
"android.view.InputDevice.MotionRange.getMax () "," Gets the inclusive maximum value for the axis. <br /><br />"
"android.view.InputDevice.MotionRange.getFlat () "," Gets the extent of the center flat position with respect to this axis. <br /><br />"
"android.view.InputDevice.MotionRange.getResolution () "," Gets the resolution for input device measurements with respect to this axis. <br /><br />"
"android.view.InputDevice.MotionRange.getSource () "," Gets the source for which the axis is defined. <br /><br />"
"android.view.InputEvent.getDevice () "," Gets the device that this event came from. <br /><br />"
"android.view.InputEvent.isFromSource (int source) "," Determines whether the event is from the given source. <br /><br />"
"android.view.InputEvent.uptimeMillis () () "," Retrieve the time this event occurred, in the uptimeMillis() time base. <br /><br />"
"android.view.InputEvent.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.view.InputEvent.getDeviceId () "," Gets the id for the device that this event came from. <br /><br />"
"android.view.InputEvent.getSource () "," Gets the source of the event. <br /><br />"
"android.view.inputmethod.BaseInputConnection.performEditorAction (int actionCode) "," The default implementation turns this into the enter key. <br /><br />"
"android.view.inputmethod.BaseInputConnection.Spannable () "," no description <br /><br />"
"android.view.inputmethod.BaseInputConnection.setComposingRegion (int start, int end) "," Mark a certain region of text as composing text. <br /><br />"
"android.view.inputmethod.BaseInputConnection.getEditable () "," Return the target of edit operations. <br /><br />"
"android.view.inputmethod.BaseInputConnection.finishComposingText () "," The default implementation removes the composing state from the current editable text. <br /><br />"
"android.view.inputmethod.BaseInputConnection.requestCursorUpdates (int cursorUpdateMode) "," The default implementation does nothing. <br /><br />"
"android.view.inputmethod.BaseInputConnection.getSelectedText (int flags) "," The default implementation returns the text currently selected, or null if none is selected. <br /><br />"
"android.view.inputmethod.BaseInputConnection.performContextMenuAction (int id) "," The default implementation does nothing. <br /><br />"
"android.view.inputmethod.BaseInputConnection.CharSequence () "," The default implementation places the given text into the editable, replacing any existing composing text. <br /><br />"
"android.view.inputmethod.BaseInputConnection.deleteSurroundingText (int beforeLength, int afterLength) "," The default implementation performs the deletion around the current selection position of the editable text. <br /><br />"
"android.view.inputmethod.BaseInputConnection.CorrectionInfo () "," Default implementation does nothing and returns false. <br /><br />"
"android.view.inputmethod.BaseInputConnection.getCursorCapsMode (int reqModes) "," The default implementation uses TextUtils.getCapsMode to get the cursor caps mode for the current selection position in the editable text, unless in dummy mode in which case 0 is always returned. <br /><br />"
"android.view.inputmethod.BaseInputConnection.setSelection (int start, int end) "," The default implementation changes the selection position in the current editable text. <br /><br />"
"android.view.inputmethod.BaseInputConnection.getTextBeforeCursor (int length, int flags) "," The default implementation returns the given amount of text from the current cursor position in the buffer. <br /><br />"
"android.view.inputmethod.BaseInputConnection.KeyEvent () "," Provides standard implementation for sending a key event to the window attached to the input connection's view. <br /><br />"
"android.view.inputmethod.BaseInputConnection.getTextAfterCursor (int length, int flags) "," The default implementation returns the given amount of text from the current cursor position in the buffer. <br /><br />"
"android.view.inputmethod.BaseInputConnection.reportFullscreenMode (boolean enabled) "," Updates InputMethodManager with the current fullscreen mode. <br /><br />"
"android.view.inputmethod.BaseInputConnection.CompletionInfo () "," Default implementation does nothing and returns false. <br /><br />"
"android.view.inputmethod.BaseInputConnection.Bundle () "," The default implementation does nothing. <br /><br />"
"android.view.inputmethod.BaseInputConnection.ExtractedTextRequest () "," The default implementation always returns null. <br /><br />"
"android.view.inputmethod.BaseInputConnection.beginBatchEdit () "," Default implementation does nothing. <br /><br />"
"android.view.inputmethod.BaseInputConnection.endBatchEdit () "," Default implementation does nothing. <br /><br />"
"android.view.inputmethod.BaseInputConnection.MetaKeyKeyListener.clearMetaKeyState (long, int) (int states) "," Default implementation uses MetaKeyKeyListener.clearMetaKeyState(long, int) to clear the state. <br /><br />"
"android.view.inputmethod.CompletionInfo.getId () "," Return the abstract identifier for this completion, typically corresponding to the id associated with it in the original adapter. <br /><br />"
"android.view.inputmethod.CompletionInfo.Parcel () "," Used to package this object into a Parcel. <br /><br />"
"android.view.inputmethod.CompletionInfo.getLabel () "," Return the user-visible label for the completion, or null if the plain text should be shown. <br /><br />"
"android.view.inputmethod.CompletionInfo.getPosition () "," Return the original position of this completion, typically corresponding to its position in the original adapter. <br /><br />"
"android.view.inputmethod.CompletionInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.view.inputmethod.CompletionInfo.getText () "," Return the actual text associated with this completion. <br /><br />"
"android.view.inputmethod.CompletionInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.view.inputmethod.CorrectionInfo.getOldText () "," Return the text that has actually been typed by the user, and which has been corrected. <br /><br />"
"android.view.inputmethod.CorrectionInfo.getNewText () "," Return the new text that corrects what was typed by the user. <br /><br />"
"android.view.inputmethod.CorrectionInfo.getOffset () "," Return the offset position of this correction in the text. <br /><br />"
"android.view.inputmethod.CorrectionInfo.Parcel () "," Used to package this object into a Parcel. <br /><br />"
"android.view.inputmethod.CorrectionInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.view.inputmethod.CorrectionInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.view.inputmethod.CursorAnchorInfo.Builder.CursorAnchorInfo () "," Resets the internal state so that this instance can be reused to build another instance of CursorAnchorInfo. <br /><br />"
"android.view.inputmethod.CursorAnchorInfo.Builder.setSelectionRange (int newStart, int newEnd) "," Sets the text range of the selection. <br /><br />"
"android.view.inputmethod.CursorAnchorInfo.Builder.setInsertionMarkerLocation (float horizontalPosition, float lineTop, float lineBaseline, float lineBottom, int flags) "," Sets the location of the text insertion point (zero width cursor) as a rectangle in local coordinates. <br /><br />"
"android.view.inputmethod.CursorAnchorInfo.Builder.CharSequence () "," Sets the text range of the composing text. <br /><br />"
"android.view.inputmethod.CursorAnchorInfo.Builder.build () "," no description <br /><br />"
"android.view.inputmethod.CursorAnchorInfo.Builder.addCharacterBounds (int index, float left, float top, float right, float bottom, int flags) "," Adds the bounding box of the character specified with the index. <br /><br />"
"android.view.inputmethod.CursorAnchorInfo.Builder.Matrix () "," Sets the matrix that transforms local coordinates into screen coordinates. <br /><br />"
"android.view.inputmethod.CursorAnchorInfo.getComposingText () "," Returns the entire composing text. <br /><br />"
"android.view.inputmethod.CursorAnchorInfo.getInsertionMarkerFlags () "," Returns the flag of the insertion marker. <br /><br />"
"android.view.inputmethod.CursorAnchorInfo.getMatrix () () "," Returns the vertical top position of the insertion marker, in the local coordinates that will be transformed with getMatrix() when rendered on the screen. <br /><br />"
"android.view.inputmethod.CursorAnchorInfo.Parcel () "," Used to package this object into a Parcel. <br /><br />"
"android.view.inputmethod.CursorAnchorInfo.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.view.inputmethod.CursorAnchorInfo.RectF (int index) "," Returns a new instance of RectF that indicates the location of the character specified with the index. <br /><br />"
"android.view.inputmethod.CursorAnchorInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.view.inputmethod.CursorAnchorInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.view.inputmethod.CursorAnchorInfo.Matrix () "," Returns a new instance of Matrix that indicates the transformation matrix that is to be applied other positional data in this class. <br /><br />"
"android.view.inputmethod.CursorAnchorInfo.getComposingTextStart () "," Returns the index where the composing text starts. <br /><br />"
"android.view.inputmethod.CursorAnchorInfo.getSelectionStart () "," Returns the index where the selection starts. <br /><br />"
"android.view.inputmethod.CursorAnchorInfo.getCharacterBoundsFlags (int index) "," Returns the flags associated with the character bounds specified with the index. <br /><br />"
"android.view.inputmethod.CursorAnchorInfo.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.view.inputmethod.CursorAnchorInfo.getSelectionEnd () "," Returns the index where the selection ends. <br /><br />"
"android.view.inputmethod.EditorInfo.String () "," Write debug output of this object. <br /><br />"
"android.view.inputmethod.EditorInfo.makeCompatible (int targetSdkVersion) "," Ensure that the data in this EditorInfo is compatible with an application that was developed against the given target API version. <br /><br />"
"android.view.inputmethod.EditorInfo.Parcel () "," Used to package this object into a Parcel. <br /><br />"
"android.view.inputmethod.EditorInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.view.inputmethod.ExtractedText.Parcel () "," Used to package this object into a Parcel. <br /><br />"
"android.view.inputmethod.ExtractedText.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.view.inputmethod.ExtractedTextRequest.Parcel () "," Used to package this object into a Parcel. <br /><br />"
"android.view.inputmethod.ExtractedTextRequest.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.view.inputmethod.InputBinding.getConnectionToken () "," Return the token for the connection back to the application. <br /><br />"
"android.view.inputmethod.InputBinding.Parcel () "," Used to package this object into a Parcel. <br /><br />"
"android.view.inputmethod.InputBinding.getConnection () "," Return the connection for interacting back with the application. <br /><br />"
"android.view.inputmethod.InputBinding.getPid () "," Return the process id where this binding came from. <br /><br />"
"android.view.inputmethod.InputBinding.getUid () "," Return the user id of the client associated with this binding. <br /><br />"
"android.view.inputmethod.InputBinding.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.view.inputmethod.InputBinding.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.view.inputmethod.InputConnection.beginBatchEdit () () "," Tell the editor that you are done with a batch edit previously initiated with beginBatchEdit(). <br /><br />"
"android.view.inputmethod.InputConnection.setComposingRegion (int start, int end) "," Mark a certain region of text as composing text. <br /><br />"
"android.view.inputmethod.InputConnection.getTextAfterCursor (int n, int flags) "," Get n characters of text after the current cursor position. <br /><br />"
"android.view.inputmethod.InputConnection.finishComposingText () "," Have the text editor finish whatever composing text is currently active. <br /><br />"
"android.view.inputmethod.InputConnection.getTextBeforeCursor (int n, int flags) "," Get n characters of text before the current cursor position. <br /><br />"
"android.view.inputmethod.InputConnection.getSelectedText (int flags) "," Gets the selected text, if any. <br /><br />"
"android.view.inputmethod.InputConnection.performContextMenuAction (int id) "," Perform a context menu action on the field. <br /><br />"
"android.view.inputmethod.InputConnection.CharSequence () "," Replace the currently composing text with the given text, and set the new cursor position. <br /><br />"
"android.view.inputmethod.InputConnection.deleteSurroundingText (int beforeLength, int afterLength) "," Delete beforeLength characters of text before the current cursor position, and delete afterLength characters of text after the current cursor position, excluding the selection. <br /><br />"
"android.view.inputmethod.InputConnection.performEditorAction (int editorAction) "," Have the editor perform an action it has said it can do. <br /><br />"
"android.view.inputmethod.InputConnection.CorrectionInfo () "," Commit a correction automatically performed on the raw user's input. <br /><br />"
"android.view.inputmethod.InputConnection.getCursorCapsMode (int reqModes) "," Retrieve the current capitalization mode in effect at the current cursor position in the text. <br /><br />"
"android.view.inputmethod.InputConnection.setSelection (int start, int end) "," Set the selection of the text editor. <br /><br />"
"android.view.inputmethod.InputConnection.InputMethodManager#displayCompletions (View, CompletionInfo[]) () "," Commit a completion the user has selected from the possible ones previously reported to InputMethodSession#displayCompletions(CompletionInfo[]) or InputMethodManager#displayCompletions(View, CompletionInfo[]). <br /><br />"
"android.view.inputmethod.InputConnection.KeyEvent () "," Send a key event to the process that is currently attached through this input connection. <br /><br />"
"android.view.inputmethod.InputConnection.reportFullscreenMode (boolean enabled) "," Called by the IME to tell the client when it switches between fullscreen and normal modes. <br /><br />"
"android.view.inputmethod.InputConnection.clearMetaKeyStates (int states) "," Clear the given meta key pressed states in the given input connection. <br /><br />"
"android.view.inputmethod.InputConnection.updateCursorAnchorInfo (android.view.View, CursorAnchorInfo) (int cursorUpdateMode) "," Called by the input method to ask the editor for calling back updateCursorAnchorInfo(android.view.View, CursorAnchorInfo) to notify cursor/anchor locations. <br /><br />"
"android.view.inputmethod.InputConnection.Bundle () "," API to send private commands from an input method to its connected editor. <br /><br />"
"android.view.inputmethod.InputConnection.ExtractedTextRequest () "," Retrieve the current text in the input connection's editor, and monitor for any changes to it. <br /><br />"
"android.view.inputmethod.InputConnection.beginBatchEdit () "," Tell the editor that you are starting a batch of editor operations. <br /><br />"
"android.view.inputmethod.InputConnectionWrapper.beginBatchEdit () () "," Tell the editor that you are done with a batch edit previously initiated with beginBatchEdit(). <br /><br />"
"android.view.inputmethod.InputConnectionWrapper.setComposingRegion (int start, int end) "," Mark a certain region of text as composing text. <br /><br />"
"android.view.inputmethod.InputConnectionWrapper.getTextAfterCursor (int n, int flags) "," Get n characters of text after the current cursor position. <br /><br />"
"android.view.inputmethod.InputConnectionWrapper.finishComposingText () "," Have the text editor finish whatever composing text is currently active. <br /><br />"
"android.view.inputmethod.InputConnectionWrapper.getTextBeforeCursor (int n, int flags) "," Get n characters of text before the current cursor position. <br /><br />"
"android.view.inputmethod.InputConnectionWrapper.getSelectedText (int flags) "," Gets the selected text, if any. <br /><br />"
"android.view.inputmethod.InputConnectionWrapper.performContextMenuAction (int id) "," Perform a context menu action on the field. <br /><br />"
"android.view.inputmethod.InputConnectionWrapper.CharSequence () "," Replace the currently composing text with the given text, and set the new cursor position. <br /><br />"
"android.view.inputmethod.InputConnectionWrapper.deleteSurroundingText (int beforeLength, int afterLength) "," Delete beforeLength characters of text before the current cursor position, and delete afterLength characters of text after the current cursor position, excluding the selection. <br /><br />"
"android.view.inputmethod.InputConnectionWrapper.performEditorAction (int editorAction) "," Have the editor perform an action it has said it can do. <br /><br />"
"android.view.inputmethod.InputConnectionWrapper.CorrectionInfo () "," Commit a correction automatically performed on the raw user's input. <br /><br />"
"android.view.inputmethod.InputConnectionWrapper.getCursorCapsMode (int reqModes) "," Retrieve the current capitalization mode in effect at the current cursor position in the text. <br /><br />"
"android.view.inputmethod.InputConnectionWrapper.setSelection (int start, int end) "," Set the selection of the text editor. <br /><br />"
"android.view.inputmethod.InputConnectionWrapper.InputMethodManager#displayCompletions (View, CompletionInfo[]) () "," Commit a completion the user has selected from the possible ones previously reported to InputMethodSession#displayCompletions(CompletionInfo[]) or InputMethodManager#displayCompletions(View, CompletionInfo[]). <br /><br />"
"android.view.inputmethod.InputConnectionWrapper.KeyEvent () "," Send a key event to the process that is currently attached through this input connection. <br /><br />"
"android.view.inputmethod.InputConnectionWrapper.reportFullscreenMode (boolean enabled) "," Called by the IME to tell the client when it switches between fullscreen and normal modes. <br /><br />"
"android.view.inputmethod.InputConnectionWrapper.clearMetaKeyStates (int states) "," Clear the given meta key pressed states in the given input connection. <br /><br />"
"android.view.inputmethod.InputConnectionWrapper.updateCursorAnchorInfo (android.view.View, CursorAnchorInfo) (int cursorUpdateMode) "," Called by the input method to ask the editor for calling back updateCursorAnchorInfo(android.view.View, CursorAnchorInfo) to notify cursor/anchor locations. <br /><br />"
"android.view.inputmethod.InputConnectionWrapper.Bundle () "," API to send private commands from an input method to its connected editor. <br /><br />"
"android.view.inputmethod.InputConnectionWrapper.InputConnection () "," Change the target of the input connection. <br /><br />"
"android.view.inputmethod.InputConnectionWrapper.ExtractedTextRequest () "," Retrieve the current text in the input connection's editor, and monitor for any changes to it. <br /><br />"
"android.view.inputmethod.InputConnectionWrapper.beginBatchEdit () "," Tell the editor that you are starting a batch of editor operations. <br /><br />"
"android.view.inputmethod.InputMethod.IBinder () "," Called first thing after an input method is created, this supplies a unique token for the session it has with the system service. <br /><br />"
"android.view.inputmethod.InputMethod.EditorInfo () "," This method is called when the application starts to receive text and it is ready for this input method to process received events and send result text back to the application. <br /><br />"
"android.view.inputmethod.InputMethod.InputMethodSubtype () "," Notify that the input method subtype is being changed in the same input method. <br /><br />"
"android.view.inputmethod.InputMethod.bindInput (InputBinding) () "," Unbind an application environment, called when the information previously set by bindInput(InputBinding) is no longer valid for this input method. <br /><br />"
"android.view.inputmethod.InputMethod.createSession (android.view.inputmethod.InputMethod.SessionCallback) () "," Disable and destroy a session that was previously created with createSession(android.view.inputmethod.InputMethod.SessionCallback). <br /><br />"
"android.view.inputmethod.InputMethod.ResultReceiver () "," Request that any soft input part of the input method be shown to the user. <br /><br />"
"android.view.inputmethod.InputMethod.InputMethodSession () "," Control whether a particular input method session is active. <br /><br />"
"android.view.inputmethod.InputMethod.InputBinding () "," Bind a new application environment in to the input method, so that it can later start and stop input processing. <br /><br />"
"android.view.inputmethod.InputMethod.SessionCallback.InputMethodSession () "," no description <br /><br />"
"android.view.inputmethod.InputMethodInfo.String () "," no description <br /><br />"
"android.view.inputmethod.InputMethodInfo.getPackageName () "," Return the .apk package that implements this input method. <br /><br />"
"android.view.inputmethod.InputMethodInfo.PackageManager () "," Load the user-displayed label for this input method. <br /><br />"
"android.view.inputmethod.InputMethodInfo.getServiceInfo () "," Return the raw information about the Service implementing this input method. <br /><br />"
"android.view.inputmethod.InputMethodInfo.InputMethodInfo () "," Used to test whether the given parameter object is an InputMethodInfo and its Id is the same to this one. <br /><br />"
"android.view.inputmethod.InputMethodInfo.getSubtypeCount () "," Return the count of the subtypes of Input Method. <br /><br />"
"android.view.inputmethod.InputMethodInfo.getComponent () "," Return the component of the service that implements this input method. <br /><br />"
"android.view.inputmethod.InputMethodInfo.Parcel () "," Used to package this object into a Parcel. <br /><br />"
"android.view.inputmethod.InputMethodInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.view.inputmethod.InputMethodInfo.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.view.inputmethod.InputMethodInfo.getId () "," Return a unique ID for this input method. <br /><br />"
"android.view.inputmethod.InputMethodInfo.getSettingsActivity () "," Return the class name of an activity that provides a settings UI for the input method. <br /><br />"
"android.view.inputmethod.InputMethodInfo.getIsDefaultResourceId () "," Return the resource identifier of a resource inside of this input method's .apk that determines whether it should be considered a default input method for the system. <br /><br />"
"android.view.inputmethod.InputMethodInfo.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.view.inputmethod.InputMethodInfo.getSubtypeAt (int index) "," Return the Input Method's subtype at the specified index. <br /><br />"
"android.view.inputmethod.InputMethodInfo.getServiceName () "," Return the class name of the service component that implements this input method. <br /><br />"
"android.view.inputmethod.InputMethodManager.String () "," no description <br /><br />"
"android.view.inputmethod.InputMethodManager.CompletionInfo[] () "," no description <br /><br />"
"android.view.inputmethod.InputMethodManager.isAcceptingText () "," Return true if the currently served view is accepting full text edits. <br /><br />"
"android.view.inputmethod.InputMethodManager.ExtractedText () "," no description <br /><br />"
"android.view.inputmethod.InputMethodManager.hideSoftInputFromWindow (IBinder, int, ResultReceiver) () "," Synonym for hideSoftInputFromWindow(IBinder, int, ResultReceiver) without a result: request to hide the soft input window from the context of the window that is currently accepting input. <br /><br />"
"android.view.inputmethod.InputMethodManager.getInputMethodList () "," no description <br /><br />"
"android.view.inputmethod.InputMethodManager.getShortcutInputMethodsAndSubtypes () "," Returns a map of all shortcut input method info and their subtypes. <br /><br />"
"android.view.inputmethod.InputMethodManager.CursorAnchorInfo () "," Report positional change of the text insertion point and/or characters in the composition string. <br /><br />"
"android.view.inputmethod.InputMethodManager.getEnabledInputMethodList () "," no description <br /><br />"
"android.view.inputmethod.InputMethodManager.InputMethodInfo () "," Returns a list of enabled input method subtypes for the specified input method info. <br /><br />"
"android.view.inputmethod.InputMethodManager.InputMethodSubtype[] () "," Set additional input method subtypes. <br /><br />"
"android.view.inputmethod.InputMethodManager.toggleSoftInput (int showFlags, int hideFlags) "," no description <br /><br />"
"android.view.inputmethod.InputMethodManager.showSoftInput (View, int, ResultReceiver) () "," Synonym for showSoftInput(View, int, ResultReceiver) without a result receiver: explicitly request that the current input method's soft input area be shown to the user, if needed. <br /><br />"
"android.view.inputmethod.InputMethodManager.View () "," Notify the event when the user tapped or clicked the text view. <br /><br />"
"android.view.inputmethod.InputMethodManager.InputMethodSession.appPrivateCommand () () "," Call InputMethodSession.appPrivateCommand() on the current Input Method. <br /><br />"
"android.view.inputmethod.InputMethodManager.IBinder () "," This method toggles the input method window display. <br /><br />"
"android.view.inputmethod.InputMethodManager.isFullscreenMode () "," Allows you to discover whether the attached input method is running in fullscreen mode. <br /><br />"
"android.view.inputmethod.InputMethodManager.getCurrentInputMethodSubtype () "," Returns the current input method subtype. <br /><br />"
"android.view.inputmethod.InputMethodManager.InputMethodSubtype () "," Force switch to a new input method and subtype. <br /><br />"
"android.view.inputmethod.InputMethodManager.isActive () "," Return true if any view is currently active in the input method. <br /><br />"
"android.view.inputmethod.InputMethodManager.getLastInputMethodSubtype () "," no description <br /><br />"
"android.view.inputmethod.InputMethodManager.showInputMethodPicker () "," no description <br /><br />"
"android.view.inputmethod.InputMethodManager.ResultReceiver () "," Explicitly request that the current input method's soft input area be shown to the user, if needed. <br /><br />"
"android.view.inputmethod.InputMethodManager.updateCursorAnchorInfo (View, CursorAnchorInfo) () "," This method was deprecated in API level 21. Use updateCursorAnchorInfo(View, CursorAnchorInfo) instead. <br /><br />"
"android.view.inputmethod.InputMethodManager.requestCursorUpdates (int) () "," This method was deprecated in API level 21. Use requestCursorUpdates(int) instead. <br /><br />"
"android.view.inputmethod.InputMethodSession.EventCallback.finishedEvent (int seq, boolean handled) "," no description <br /><br />"
"android.view.inputmethod.InputMethodSubtype.String () "," The string of ExtraValue in subtype should be defined as follows: example: key0,key1=value1,key2,key3,key4=value4 <br /><br />"
"android.view.inputmethod.InputMethodSubtype.getNameResId () "," no description <br /><br />"
"android.view.inputmethod.InputMethodSubtype.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.view.inputmethod.InputMethodSubtype.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.view.inputmethod.InputMethodSubtype.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.view.inputmethod.InputMethodSubtype.getMode () "," no description <br /><br />"
"android.view.inputmethod.InputMethodSubtype.overridesImplicitlyEnabledSubtype () "," no description <br /><br />"
"android.view.inputmethod.InputMethodSubtype.getExtraValue () "," no description <br /><br />"
"android.view.inputmethod.InputMethodSubtype.getLocale () "," no description <br /><br />"
"android.view.inputmethod.InputMethodSubtype.ApplicationInfo () "," no description <br /><br />"
"android.view.inputmethod.InputMethodSubtype.isAuxiliary () "," no description <br /><br />"
"android.view.inputmethod.InputMethodSubtype.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.view.inputmethod.InputMethodSubtype.isAsciiCapable () "," no description <br /><br />"
"android.view.inputmethod.InputMethodSubtype.getIconResId () "," no description <br /><br />"
"android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder.setSubtypeIconResId (int subtypeIconResId) "," no description <br /><br />"
"android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder.String () "," no description <br /><br />"
"android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder.setIsAuxiliary (boolean isAuxiliary) "," no description <br /><br />"
"android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder.setSubtypeNameResId (int subtypeNameResId) "," no description <br /><br />"
"android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder.build () "," no description <br /><br />"
"android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder.setSubtypeId (int subtypeId) "," no description <br /><br />"
"android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder.setOverridesImplicitlyEnabledSubtype (boolean overridesImplicitlyEnabledSubtype) "," no description <br /><br />"
"android.view.inputmethod.InputMethodSubtype.InputMethodSubtypeBuilder.setIsAsciiCapable (boolean isAsciiCapable) "," no description <br /><br />"
"android.view.InputQueue.Callback.InputQueue () "," Called when the given InputQueue is no longer associated with the thread and thus not dispatching events. <br /><br />"
"android.view.KeyCharacterMap.load (int deviceId) "," Loads the key character maps for the keyboard with the specified device id. <br /><br />"
"android.view.KeyCharacterMap.deviceHasKeys (int[] keyCodes) "," Queries the framework about whether any physical keys exist on the any keyboard attached to the device that are capable of producing the given array of key codes. <br /><br />"
"android.view.KeyCharacterMap.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.view.KeyCharacterMap.getMatch (int keyCode, char[] chars, int metaState) "," Gets the first character in the character array that can be generated by the specified key code. <br /><br />"
"android.view.KeyCharacterMap.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.view.KeyCharacterMap.deviceHasKey (int keyCode) "," Queries the framework about whether any physical keys exist on the any keyboard attached to the device that are capable of producing the given key code. <br /><br />"
"android.view.KeyCharacterMap.getNumber (int keyCode) "," Gets the number or symbol associated with the key. <br /><br />"
"android.view.KeyCharacterMap.getEvents (char[] chars) "," Get an array of KeyEvent objects that if put into the input stream could plausibly generate the provided sequence of characters. <br /><br />"
"android.view.KeyCharacterMap.get (int keyCode, int metaState) "," Gets the Unicode character generated by the specified key and meta key state combination. <br /><br />"
"android.view.KeyCharacterMap.KEYCODE_SHIFT_LEFT () "," Gets a constant that describes the behavior of this keyboard's modifier keys such as KEYCODE_SHIFT_LEFT. <br /><br />"
"android.view.KeyCharacterMap.isPrintingKey (int keyCode) "," Returns true if the specified key produces a glyph. <br /><br />"
"android.view.KeyCharacterMap.getDisplayLabel (int keyCode) "," Gets the primary character for this key. <br /><br />"
"android.view.KeyCharacterMap.getDeadChar (int accent, int c) "," Get the character that is produced by combining the dead key producing accent with the key producing character c. <br /><br />"
"android.view.KeyCharacterMap.getMatch (int keyCode, char[] chars) "," Gets the first character in the character array that can be generated by the specified key code. <br /><br />"
"android.view.KeyCharacterMap.get (int, int) () "," This method was deprecated in API level 11. instead use getDisplayLabel(int), getNumber(int) or get(int, int). <br /><br />"
"android.view.KeyCharacterMap.getKeyboardType () "," Gets the keyboard type. <br /><br />"
"android.view.KeyEvent.Callback.KeyEvent () "," Called when a key up event has occurred. <br /><br />"
"android.view.KeyEvent.DispatcherState.KeyEvent () "," Keep track of the given event's key code as having performed an action with a long press, so no action should occur on the up. <br /><br />"
"android.view.KeyEvent.DispatcherState.reset () "," Reset back to initial state. <br /><br />"
"android.view.KeyEvent.DispatcherState.Object () "," Start tracking the key code associated with the given event. <br /><br />"
"android.view.KeyEvent.getMetaState () "," Returns the state of the meta keys. <br /><br />"
"android.view.KeyEvent.KEYCODE_UNKNOWN () "," For the special case of a ACTION_MULTIPLE event with key code of KEYCODE_UNKNOWN, this is a raw string of characters associated with the event. <br /><br />"
"android.view.KeyEvent.isShiftPressed () "," Returns the pressed state of the SHIFT meta key. <br /><br />"
"android.view.KeyEvent.getNumber () "," Gets the number or symbol associated with the key. <br /><br />"
"android.view.KeyEvent.isCtrlPressed () "," Returns the pressed state of the CTRL meta key. <br /><br />"
"android.view.KeyEvent.getUnicodeChar (int metaState) "," Gets the Unicode character generated by the specified key and meta key state combination. <br /><br />"
"android.view.KeyEvent.isSymPressed () "," Returns the pressed state of the SYM meta key. <br /><br />"
"android.view.KeyEvent.isAltPressed () "," Returns the pressed state of the ALT meta key. <br /><br />"
"android.view.KeyEvent.getModifiers () "," Returns the state of the modifier keys. <br /><br />"
"android.view.KeyEvent.KeyEvent.Callback () "," Deliver this key event to a KeyEvent.Callback interface. <br /><br />"
"android.view.KeyEvent.FLAG_CANCELED () "," For ACTION_UP events, indicates that the event has been canceled as per FLAG_CANCELED. <br /><br />"
"android.view.KeyEvent.getDisplayLabel () "," Gets the primary character for this key. <br /><br />"
"android.view.KeyEvent.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.view.KeyEvent.getFlags () "," Returns the flags for this key event. <br /><br />"
"android.view.KeyEvent.isNumLockOn () "," Returns the locked state of the NUM LOCK meta key. <br /><br />"
"android.view.KeyEvent.getMaxKeyCode () "," Returns the maximum keycode. <br /><br />"
"android.view.KeyEvent.onKeyDown (int, KeyEvent) () "," Call this during onKeyDown(int, KeyEvent) to have the system track the key through its final up (possibly including a long press). <br /><br />"
"android.view.KeyEvent.getScanCode () "," Retrieve the hardware key id of this key event. These values are not reliable and vary from device to device. <br /><br />"
"android.view.KeyEvent.keyCodeToString (int keyCode) "," Returns a string that represents the symbolic name of the specified keycode such as 'KEYCODE_A', 'KEYCODE_DPAD_UP', or an equivalent numeric constant such as '1001' if unknown. <br /><br />"
"android.view.KeyEvent.setSource (int source) "," Modifies the source of the event. <br /><br />"
"android.view.KeyEvent.getAction () "," Retrieve the action of this key event. <br /><br />"
"android.view.KeyEvent.getDeadChar (int accent, int c) "," Get the character that is produced by putting accent on the character c. <br /><br />"
"android.view.KeyEvent.hasNoModifiers () "," Returns true if no modifier keys are pressed. <br /><br />"
"android.view.KeyEvent.isSystem () "," Is this a system key? System keys can not be used for menu shortcuts. <br /><br />"
"android.view.KeyEvent.hasModifiers (int modifiers) "," Returns true if only the specified modifiers keys are pressed. <br /><br />"
"android.view.KeyEvent.getMatch (char[] chars, int metaState) "," Gets the first character in the character array that can be generated by the specified key code. <br /><br />"
"android.view.KeyEvent.getRepeatCount () "," Retrieve the repeat count of the event. <br /><br />"
"android.view.KeyEvent.normalizeMetaState (int metaState) "," Normalizes the specified meta state. <br /><br />"
"android.view.KeyEvent.metaStateHasModifiers (int metaState, int modifiers) "," Returns true if only the specified modifier keys are pressed according to the specified meta state. <br /><br />"
"android.view.KeyEvent.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.view.KeyEvent.isModifierKey (int keyCode) "," Returns true if this key code is a modifier key. <br /><br />"
"android.view.KeyEvent.getUnicodeChar (int) () "," This method was deprecated in API level 11. instead use getDisplayLabel(), getNumber() or getUnicodeChar(int). <br /><br />"
"android.view.KeyEvent.metaStateHasNoModifiers (int metaState) "," Returns true if no modifiers keys are pressed according to the specified meta state. <br /><br />"
"android.view.KeyEvent.isPrintingKey () "," Returns true if this key produces a glyph. <br /><br />"
"android.view.KeyEvent.uptimeMillis () () "," Retrieve the time this event occurred, in the uptimeMillis() time base. <br /><br />"
"android.view.KeyEvent.getDeviceId () "," Gets the id for the device that this event came from. <br /><br />"
"android.view.KeyEvent.FLAG_LONG_PRESS () "," For ACTION_DOWN events, indicates that the event has been canceled as per FLAG_LONG_PRESS. <br /><br />"
"android.view.KeyEvent.dispatch (Callback, DispatcherState, Object) () "," This method was deprecated in API level 5. Use dispatch(Callback, DispatcherState, Object) instead. <br /><br />"
"android.view.KeyEvent.String () "," Gets a keycode by its symbolic name such as 'KEYCODE_A' or an equivalent numeric constant such as '1001'. <br /><br />"
"android.view.KeyEvent.FLAG_TRACKING () "," For ACTION_UP events, indicates that the event is still being tracked from its initial down event as per FLAG_TRACKING. <br /><br />"
"android.view.KeyEvent.isScrollLockOn () "," Returns the locked state of the SCROLL LOCK meta key. <br /><br />"
"android.view.KeyEvent.isGamepadButton (int keyCode) "," Returns true if the specified keycode is a gamepad button. <br /><br />"
"android.view.KeyEvent.getUnicodeChar () "," Gets the Unicode character generated by the specified key and meta key state combination. <br /><br />"
"android.view.KeyEvent.getSource () "," Gets the source of the event. <br /><br />"
"android.view.KeyEvent.KeyCharacterMap () "," Gets the KeyCharacterMap associated with the keyboard device. <br /><br />"
"android.view.KeyEvent.KeyEvent () "," Create a new key event that is the same as the given one, but whose event time and repeat count are replaced with the given value. <br /><br />"
"android.view.KeyEvent.getKeyCode () "," Retrieve the key code of the key event. <br /><br />"
"android.view.KeyEvent.isCapsLockOn () "," Returns the locked state of the CAPS LOCK meta key. <br /><br />"
"android.view.KeyEvent.isFunctionPressed () "," Returns the pressed state of the FUNCTION meta key. <br /><br />"
"android.view.KeyEvent.isMetaPressed () "," Returns the pressed state of the META meta key. <br /><br />"
"android.view.KeyEvent.getModifierMetaStateMask () "," Gets a mask that includes all valid modifier key meta state bits. <br /><br />"
"android.view.KeyEvent.getMatch (char[] chars) "," Gets the first character in the character array that can be generated by the specified key code. <br /><br />"
"android.view.LayoutInflater.Factory.AttributeSet () "," Hook you can supply that is called when inflating from a LayoutInflater. <br /><br />"
"android.view.LayoutInflater.Factory2.onCreateView (String, Context, AttributeSet) () "," Version of onCreateView(String, Context, AttributeSet) that also supplies the parent that the view created view will be placed in. <br /><br />"
"android.view.LayoutInflater.Filter.Class () "," Hook to allow clients of the LayoutInflater to restrict the set of Views that are allowed to be inflated. <br /><br />"
"android.view.LayoutInflater.AttributeSet () "," Low-level function for instantiating a view by name. <br /><br />"
"android.view.LayoutInflater.Context () "," Obtains the LayoutInflater from the given context. <br /><br />"
"android.view.LayoutInflater.LayoutInflater.Factory2 () "," Like setFactory(LayoutInflater.Factory), but allows you to set a LayoutInflater.Factory2 interface. <br /><br />"
"android.view.LayoutInflater.LayoutInflater.Factory () "," Attach a custom Factory interface for creating views while using this LayoutInflater. <br /><br />"
"android.view.LayoutInflater.LayoutInflater.Filter () "," Sets the LayoutInflater.Filter to by this LayoutInflater. <br /><br />"
"android.view.LayoutInflater.ViewGroup () "," Inflate a new view hierarchy from the specified xml resource. <br /><br />"
"android.view.LayoutInflater.getFilter () "," no description <br /><br />"
"android.view.LayoutInflater.getContext () "," Return the context we are running in, for access to resources, class loader, etc. <br /><br />"
"android.view.Menu.MenuItem[] () "," Add a group of menu items corresponding to actions that can be performed for a particular Intent. <br /><br />"
"android.view.Menu.addSubMenu (int titleRes) "," Add a new sub-menu to the menu. <br /><br />"
"android.view.Menu.add (int titleRes) "," Add a new item to the menu. <br /><br />"
"android.view.Menu.removeGroup (int groupId) "," Remove all items in the given group. <br /><br />"
"android.view.Menu.close () "," Closes the menu, if open. <br /><br />"
"android.view.Menu.setGroupVisible (int group, boolean visible) "," Show or hide all menu items that are in the given group. <br /><br />"
"android.view.Menu.CharSequence () "," Add a new sub-menu to the menu. <br /><br />"
"android.view.Menu.size () "," Get the number of items in the menu. <br /><br />"
"android.view.Menu.add (int, int, int, CharSequence) (int groupId, int itemId, int order, int titleRes) "," Variation on add(int, int, int, CharSequence) that takes a string resource identifier instead of the string itself. <br /><br />"
"android.view.Menu.findItem (int id) "," Return the menu item with a particular identifier. <br /><br />"
"android.view.Menu.clear () "," Remove all existing items from the menu, leaving it empty as if it had just been created. <br /><br />"
"android.view.Menu.removeItem (int id) "," Remove the item with the given identifier. <br /><br />"
"android.view.Menu.KeyEvent () "," Execute the menu item action associated with the given shortcut character. <br /><br />"
"android.view.Menu.addSubMenu (int, int, int, CharSequence) (int groupId, int itemId, int order, int titleRes) "," Variation on addSubMenu(int, int, int, CharSequence) that takes a string resource identifier for the title instead of the string itself. <br /><br />"
"android.view.Menu.hasVisibleItems () "," Return whether the menu currently has item items that are visible. <br /><br />"
"android.view.Menu.setQwertyMode (boolean isQwerty) "," Control whether the menu should be running in qwerty mode (alphabetic shortcuts) or 12-key mode (numeric shortcuts). <br /><br />"
"android.view.Menu.setGroupCheckable (int group, boolean checkable, boolean exclusive) "," Control whether a particular group of items can show a check mark. <br /><br />"
"android.view.Menu.setGroupEnabled (int group, boolean enabled) "," Enable or disable all menu items that are in the given group. <br /><br />"
"android.view.Menu.getItem (int index) "," Gets the menu item at the given index. <br /><br />"
"android.view.Menu.performIdentifierAction (int id, int flags) "," Execute the menu item action associated with the given menu identifier. <br /><br />"
"android.view.MenuInflater.Menu () "," Inflate a menu hierarchy from the specified XML resource. <br /><br />"
"android.view.MenuItem.MenuItem.OnActionExpandListener () "," Set an MenuItem.OnActionExpandListener on this menu item to be notified when the associated action view is expanded or collapsed. <br /><br />"
"android.view.MenuItem.getNumericShortcut () "," Return the char for this menu item's numeric (12-key) shortcut. <br /><br />"
"android.view.MenuItem.getIntent () "," Return the Intent associated with this item. <br /><br />"
"android.view.MenuItem.setChecked (boolean checked) "," Control whether this item is shown with a check mark. <br /><br />"
"android.view.MenuItem.isVisible () "," Return the visibility of the menu item. <br /><br />"
"android.view.MenuItem.setTitle (int title) "," Change the title associated with this item. <br /><br />"
"android.view.MenuItem.setAlphabeticShortcut (char alphaChar) "," Change the alphabetic shortcut associated with this item. <br /><br />"
"android.view.MenuItem.hasSubMenu () "," Check whether this item has an associated sub-menu. <br /><br />"
"android.view.MenuItem.getMenuInfo () "," Gets the extra information linked to this menu item. <br /><br />"
"android.view.MenuItem.isActionViewExpanded () "," Returns true if this menu item's action view has been expanded. <br /><br />"
"android.view.MenuItem.Drawable () "," Change the icon associated with this item. <br /><br />"
"android.view.MenuItem.getGroupId () "," Return the group identifier that this menu item is part of. <br /><br />"
"android.view.MenuItem.setShortcut (char numericChar, char alphaChar) "," Change both the numeric and alphabetic shortcut associated with this item. <br /><br />"
"android.view.MenuItem.setNumericShortcut (char numericChar) "," Change the numeric shortcut associated with this item. <br /><br />"
"android.view.MenuItem.setEnabled (boolean enabled) "," Sets whether the menu item is enabled. <br /><br />"
"android.view.MenuItem.setActionView (int resId) "," Set an action view for this menu item. <br /><br />"
"android.view.MenuItem.setVisible (boolean visible) "," Sets the visibility of the menu item. <br /><br />"
"android.view.MenuItem.getTitle () "," Retrieve the current title of the item. <br /><br />"
"android.view.MenuItem.getItemId () "," Return the identifier for this menu item. <br /><br />"
"android.view.MenuItem.isChecked () "," Return whether the item is currently displaying a check mark. <br /><br />"
"android.view.MenuItem.setShowAsAction (int actionEnum) "," Sets how this item should display in the presence of an Action Bar. <br /><br />"
"android.view.MenuItem.getIcon () "," Returns the icon for this item as a Drawable (getting it from resources if it hasn't been loaded before). <br /><br />"
"android.view.MenuItem.setShowAsActionFlags (int actionEnum) "," Sets how this item should display in the presence of an Action Bar. <br /><br />"
"android.view.MenuItem.getSubMenu () "," Get the sub-menu to be invoked when this item is selected, if it has one. <br /><br />"
"android.view.MenuItem.CharSequence () "," Change the condensed title associated with this item. <br /><br />"
"android.view.MenuItem.setIcon (int iconRes) "," Change the icon associated with this item. <br /><br />"
"android.view.MenuItem.View () "," Set an action view for this menu item. <br /><br />"
"android.view.MenuItem.collapseActionView () "," Collapse the action view associated with this menu item. <br /><br />"
"android.view.MenuItem.MenuItem.OnMenuItemClickListener () "," Set a custom listener for invocation of this menu item. <br /><br />"
"android.view.MenuItem.isEnabled () "," Return the enabled state of the menu item. <br /><br />"
"android.view.MenuItem.getActionView () "," Returns the currently set action view for this menu item. <br /><br />"
"android.view.MenuItem.getTitleCondensed () "," Retrieve the current condensed title of the item. <br /><br />"
"android.view.MenuItem.getOrder () "," Return the category and order within the category of this item. <br /><br />"
"android.view.MenuItem.expandActionView () "," Expand the action view associated with this menu item. <br /><br />"
"android.view.MenuItem.Intent () "," Change the Intent associated with this item. <br /><br />"
"android.view.MenuItem.setCheckable (boolean checkable) "," Control whether this item can display a check mark. <br /><br />"
"android.view.MenuItem.getAlphabeticShortcut () "," Return the char for this menu item's alphabetic shortcut. <br /><br />"
"android.view.MenuItem.ActionProvider () "," Sets the ActionProvider responsible for creating an action view if the item is placed on the action bar. <br /><br />"
"android.view.MenuItem.isCheckable () "," Return whether the item can currently display a check mark. <br /><br />"
"android.view.MenuItem.OnActionExpandListener.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW () "," Called when a menu item with SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW is expanded. <br /><br />"
"android.view.MenuItem.OnMenuItemClickListener.MenuItem () "," Called when a menu item has been invoked. <br /><br />"
"android.view.MotionEvent.getToolMinor (int) () "," getToolMinor(int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />"
"android.view.MotionEvent.getMetaState () "," Returns the state of any meta / modifier keys that were in effect when the event was generated. <br /><br />"
"android.view.MotionEvent.getToolMajor (int) () "," getToolMajor(int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />"
"android.view.MotionEvent.getDownTime () "," Returns the time (in ms) when the user originally pressed down to start a stream of position events. <br /><br />"
"android.view.MotionEvent.getToolMinor (int) (int pointerIndex, int pos) "," Returns a historical tool minor axis coordinate, as per getToolMinor(int), that occurred between this event and the previous event for the given pointer. <br /><br />"
"android.view.MotionEvent.Matrix () "," Applies a transformation matrix to all of the points in the event. <br /><br />"
"android.view.MotionEvent.getPointerId (int) (int axis, int pointerIndex) "," Returns the value of the requested axis for the given pointer index (use getPointerId(int) to find the pointer identifier for this index). <br /><br />"
"android.view.MotionEvent.getHistoricalToolMajor (int, int) (int pos) "," getHistoricalToolMajor(int, int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />"
"android.view.MotionEvent.getHistoricalAxisValue (int, int, int) (int axis, int pos) "," getHistoricalAxisValue(int, int, int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />"
"android.view.MotionEvent.getActionMasked () "," Return the masked action being performed, without pointer index information. <br /><br />"
"android.view.MotionEvent.getToolType (int pointerIndex) "," Gets the tool type of a pointer for the given pointer index. <br /><br />"
"android.view.MotionEvent.getOrientation (int) () "," getOrientation(int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />"
"android.view.MotionEvent.getX (int) () "," getX(int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />"
"android.view.MotionEvent.getHistoricalX (int, int) (int pos) "," getHistoricalX(int, int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />"
"android.view.MotionEvent.getOrientation (int) (int pointerIndex, int pos) "," Returns a historical orientation coordinate, as per getOrientation(int), that occurred between this event and the previous event for the given pointer. <br /><br />"
"android.view.MotionEvent.getY (int) (int pointerIndex, int pos) "," Returns a historical Y coordinate, as per getY(int), that occurred between this event and the previous event for the given pointer. <br /><br />"
"android.view.MotionEvent.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.view.MotionEvent.getHistoricalPressure (int, int) (int pos) "," getHistoricalPressure(int, int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />"
"android.view.MotionEvent.getFlags () "," Gets the motion event flags. <br /><br />"
"android.view.MotionEvent.getTouchMajor (int) (int pointerIndex, int pos) "," Returns a historical touch major axis coordinate, as per getTouchMajor(int), that occurred between this event and the previous event for the given pointer. <br /><br />"
"android.view.MotionEvent.getHistoricalOrientation (int, int) (int pos) "," getHistoricalOrientation(int, int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />"
"android.view.MotionEvent.getXPrecision () "," Return the precision of the X coordinates being reported. <br /><br />"
"android.view.MotionEvent.getAxisValue (int, int) (int axis, int pointerIndex, int pos) "," Returns the historical value of the requested axis, as per getAxisValue(int, int), occurred between this event and the previous event for the given pointer. <br /><br />"
"android.view.MotionEvent.getHistoricalTouchMinor (int, int) (int pos) "," getHistoricalTouchMinor(int, int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />"
"android.view.MotionEvent.PointerCoords[] () "," Create a new MotionEvent, filling in all of the basic values that define the motion. <br /><br />"
"android.view.MotionEvent.setSource (int source) "," Modifies the source of the event. <br /><br />"
"android.view.MotionEvent.getAction () "," Return the kind of action being performed. <br /><br />"
"android.view.MotionEvent.getAxisValue (int) (int axis) "," getAxisValue(int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />"
"android.view.MotionEvent.actionToString (int action) "," Returns a string that represents the symbolic name of the specified unmasked action such as 'ACTION_DOWN', 'ACTION_POINTER_DOWN(3)' or an equivalent numeric constant such as '35' if unknown. <br /><br />"
"android.view.MotionEvent.setLocation (float x, float y) "," Set this event's location. <br /><br />"
"android.view.MotionEvent.getPressure (int) (int pointerIndex, int pos) "," Returns a historical pressure coordinate, as per getPressure(int), that occurred between this event and the previous event for the given pointer. <br /><br />"
"android.view.MotionEvent.addBatch (long eventTime, float x, float y, float pressure, float size, int metaState) "," Add a new movement to the batch of movements in this event. <br /><br />"
"android.view.MotionEvent.MotionEvent.PointerProperties () "," Populates a MotionEvent.PointerProperties object with pointer properties for the specified pointer index. <br /><br />"
"android.view.MotionEvent.getPressure (int) () "," getPressure(int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />"
"android.view.MotionEvent.getTouchMajor (int) () "," getTouchMajor(int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />"
"android.view.MotionEvent.MotionEvent.PointerCoords () "," Populates a MotionEvent.PointerCoords object with pointer coordinate data for the specified pointer index. <br /><br />"
"android.view.MotionEvent.getHistoricalY (int, int) (int pos) "," getHistoricalY(int, int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />"
"android.view.MotionEvent.MotionEvent () "," Create a new MotionEvent, copying from an existing one, but not including any historical point information. <br /><br />"
"android.view.MotionEvent.getYPrecision () "," Return the precision of the Y coordinates being reported. <br /><br />"
"android.view.MotionEvent.findPointerIndex (int pointerId) "," Given a pointer identifier, find the index of its data in the event. <br /><br />"
"android.view.MotionEvent.getTouchMinor (int) () "," getTouchMinor(int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />"
"android.view.MotionEvent.getRawX () "," Returns the original raw X coordinate of this event. <br /><br />"
"android.view.MotionEvent.uptimeMillis () (int pos) "," Returns the time that a historical movement occurred between this event and the previous event, in the uptimeMillis() time base. <br /><br />"
"android.view.MotionEvent.getActionMasked () () "," For ACTION_POINTER_DOWN or ACTION_POINTER_UP as returned by getActionMasked(), this returns the associated pointer index. <br /><br />"
"android.view.MotionEvent.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.view.MotionEvent.getPointerId (int) (int pointerIndex) "," Returns the Y coordinate of this event for the given pointer index (use getPointerId(int) to find the pointer identifier for this index). <br /><br />"
"android.view.MotionEvent.getEdgeFlags () "," Returns a bitfield indicating which edges, if any, were touched by this MotionEvent. <br /><br />"
"android.view.MotionEvent.getTouchMinor (int) (int pointerIndex, int pos) "," Returns a historical touch minor axis coordinate, as per getTouchMinor(int), that occurred between this event and the previous event for the given pointer. <br /><br />"
"android.view.MotionEvent.obtain (long downTime, long eventTime, int action, float x, float y, int metaState) "," Create a new MotionEvent, filling in a subset of the basic motion values. <br /><br />"
"android.view.MotionEvent.getRawY () "," Returns the original raw Y coordinate of this event. <br /><br />"
"android.view.MotionEvent.getButtonState () "," Gets the state of all buttons that are pressed such as a mouse or stylus button. <br /><br />"
"android.view.MotionEvent.getHistoricalTouchMajor (int, int) (int pos) "," getHistoricalTouchMajor(int, int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />"
"android.view.MotionEvent.getY (int) () "," getY(int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />"
"android.view.MotionEvent.isButtonPressed (int button) "," Checks if a mouse or stylus button (or combination of buttons) is pressed. <br /><br />"
"android.view.MotionEvent.getHistoricalToolMinor (int, int) (int pos) "," getHistoricalToolMinor(int, int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />"
"android.view.MotionEvent.uptimeMillis () () "," Retrieve the time this event occurred, in the uptimeMillis() time base. <br /><br />"
"android.view.MotionEvent.offsetLocation (float deltaX, float deltaY) "," Adjust this event's location. <br /><br />"
"android.view.MotionEvent.obtain (long, long, int, float, float, float, float, int, float, float, int, int) (long downTime, long eventTime, int action, int pointerCount, float x, float y, float pressure, float size, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags) "," This method was deprecated in API level 9. Use obtain(long, long, int, float, float, float, float, int, float, float, int, int) instead. <br /><br />"
"android.view.MotionEvent.getDeviceId () "," Gets the id for the device that this event came from. <br /><br />"
"android.view.MotionEvent.obtain (long, long, int, int, PointerProperties[], PointerCoords[], int, int, float, float, int, int, int, int) () "," This method was deprecated in API level 14. Use obtain(long, long, int, int, PointerProperties[], PointerCoords[], int, int, float, float, int, int, int, int) instead. <br /><br />"
"android.view.MotionEvent.String () "," Gets an axis by its symbolic name such as 'AXIS_X' or an equivalent numeric constant such as '42'. <br /><br />"
"android.view.MotionEvent.getPointerCount () "," The number of pointers of data contained in this event. <br /><br />"
"android.view.MotionEvent.getPointerCoords (int, MotionEvent.PointerCoords) () "," Populates a MotionEvent.PointerCoords object with historical pointer coordinate data, as per getPointerCoords(int, MotionEvent.PointerCoords), that occurred between this event and the previous event for the given pointer. <br /><br />"
"android.view.MotionEvent.getSize (int) () "," getSize(int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />"
"android.view.MotionEvent.axisToString (int axis) "," Returns a string that represents the symbolic name of the specified axis such as 'AXIS_X' or an equivalent numeric constant such as '42' if unknown. <br /><br />"
"android.view.MotionEvent.obtain (long downTime, long eventTime, int action, float x, float y, float pressure, float size, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags) "," Create a new MotionEvent, filling in all of the basic values that define the motion. <br /><br />"
"android.view.MotionEvent.getX (int) (int pointerIndex, int pos) "," Returns a historical X coordinate, as per getX(int), that occurred between this event and the previous event for the given pointer. <br /><br />"
"android.view.MotionEvent.getSource () "," Gets the source of the event. <br /><br />"
"android.view.MotionEvent.setAction (int action) "," Sets this event's action. <br /><br />"
"android.view.MotionEvent.setEdgeFlags (int flags) "," Sets the bitfield indicating which edges, if any, were touched by this MotionEvent. <br /><br />"
"android.view.MotionEvent.recycle () "," Recycle the MotionEvent, to be re-used by a later caller. <br /><br />"
"android.view.MotionEvent.getHistoricalSize (int, int) (int pos) "," getHistoricalSize(int, int) for the first pointer index (may be an arbitrary pointer identifier). <br /><br />"
"android.view.MotionEvent.getToolMajor (int) (int pointerIndex, int pos) "," Returns a historical tool major axis coordinate, as per getToolMajor(int), that occurred between this event and the previous event for the given pointer. <br /><br />"
"android.view.MotionEvent.getHistorySize () "," Returns the number of historical points in this event. <br /><br />"
"android.view.MotionEvent.getPointerId (int pointerIndex) "," Return the pointer identifier associated with a particular pointer data index is this event. <br /><br />"
"android.view.MotionEvent.getSize (int) (int pointerIndex, int pos) "," Returns a historical size coordinate, as per getSize(int), that occurred between this event and the previous event for the given pointer. <br /><br />"
"android.view.MotionEvent.PointerCoords.MotionEvent.PointerCoords () "," Copies the contents of another pointer coords object. <br /><br />"
"android.view.MotionEvent.PointerCoords.getAxisValue (int axis) "," Gets the value associated with the specified axis. <br /><br />"
"android.view.MotionEvent.PointerCoords.setAxisValue (int axis, float value) "," Sets the value associated with the specified axis. <br /><br />"
"android.view.MotionEvent.PointerCoords.clear () "," Clears the contents of this object. <br /><br />"
"android.view.MotionEvent.PointerProperties.clear () "," Resets the pointer properties to their initial values. <br /><br />"
"android.view.MotionEvent.PointerProperties.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.view.MotionEvent.PointerProperties.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.view.MotionEvent.PointerProperties.MotionEvent.PointerProperties () "," Copies the contents of another pointer properties object. <br /><br />"
"android.view.OrientationEventListener.onOrientationChanged (int orientation) "," Called when the orientation of the device has changed. <br /><br />"
"android.view.OrientationEventListener.canDetectOrientation () "," no description <br /><br />"
"android.view.OrientationEventListener.disable () "," Disables the OrientationEventListener. <br /><br />"
"android.view.OrientationEventListener.onOrientationChanged (int) () "," Enables the OrientationEventListener so it will monitor the sensor and call onOrientationChanged(int) when the device orientation changes. <br /><br />"
"android.view.OrientationListener.onSensorChanged (int sensor, float[] values) "," Called when sensor values have changed. <br /><br />"
"android.view.OrientationListener.onOrientationChanged (int) (int orientation) "," Look at onOrientationChanged(int) for method description and usage <br /><br />"
"android.view.OrientationListener.disable () "," Disables the OrientationListener. <br /><br />"
"android.view.OrientationListener.onAccuracyChanged (int sensor, int accuracy) "," Called when the accuracy of a sensor has changed. <br /><br />"
"android.view.OrientationListener.onOrientationChanged (int) () "," Enables the OrientationListener so it will monitor the sensor and call onOrientationChanged(int) when the device orientation changes. <br /><br />"
"android.view.ScaleGestureDetector.getScaleFactor () "," Return the scaling factor from the previous scale event to the current event. <br /><br />"
"android.view.ScaleGestureDetector.getCurrentSpan () "," Return the average distance between each of the pointers forming the gesture in progress through the focal point. <br /><br />"
"android.view.ScaleGestureDetector.getEventTime () "," Return the event time of the current event being processed. <br /><br />"
"android.view.ScaleGestureDetector.getPreviousSpanX () "," Return the previous average X distance between each of the pointers forming the gesture in progress through the focal point. <br /><br />"
"android.view.ScaleGestureDetector.ScaleGestureDetector.OnScaleGestureListener (boolean scales) "," Set whether the associated ScaleGestureDetector.OnScaleGestureListener should receive onScale callbacks when the user performs a doubleTap followed by a swipe. <br /><br />"
"android.view.ScaleGestureDetector.getPreviousSpan () "," Return the previous average distance between each of the pointers forming the gesture in progress through the focal point. <br /><br />"
"android.view.ScaleGestureDetector.isInProgress () "," Returns true if a scale gesture is in progress. <br /><br />"
"android.view.ScaleGestureDetector.getCurrentSpanX () "," Return the average X distance between each of the pointers forming the gesture in progress through the focal point. <br /><br />"
"android.view.ScaleGestureDetector.getFocusX () "," Get the X coordinate of the current gesture's focal point. <br /><br />"
"android.view.ScaleGestureDetector.getFocusY () "," Get the Y coordinate of the current gesture's focal point. <br /><br />"
"android.view.ScaleGestureDetector.ScaleGestureDetector.OnScaleGestureListener () "," Accepts MotionEvents and dispatches events to a ScaleGestureDetector.OnScaleGestureListener when appropriate. <br /><br />"
"android.view.ScaleGestureDetector.getPreviousSpanY () "," Return the previous average Y distance between each of the pointers forming the gesture in progress through the focal point. <br /><br />"
"android.view.ScaleGestureDetector.isQuickScaleEnabled () "," Return whether the quick scale gesture, in which the user performs a double tap followed by a swipe, should perform scaling. <br /><br />"
"android.view.ScaleGestureDetector.getCurrentSpanY () "," Return the average Y distance between each of the pointers forming the gesture in progress through the focal point. <br /><br />"
"android.view.ScaleGestureDetector.getTimeDelta () "," Return the time difference in milliseconds between the previous accepted scaling event and the current scaling event. <br /><br />"
"android.view.ScaleGestureDetector.OnScaleGestureListener.ScaleGestureDetector () "," Responds to the end of a scale gesture. <br /><br />"
"android.view.ScaleGestureDetector.SimpleOnScaleGestureListener.ScaleGestureDetector () "," Responds to the end of a scale gesture. <br /><br />"
"android.view.SoundEffectConstants.getContantForFocusDirection (int direction) "," Get the sonification constant for the focus directions. <br /><br />"
"android.view.SubMenu.Drawable () "," Change the icon associated with this submenu's item in its parent menu. <br /><br />"
"android.view.SubMenu.setHeaderTitle (int titleRes) "," Sets the submenu header's title to the title given in titleRes resource identifier. <br /><br />"
"android.view.SubMenu.CharSequence () "," Sets the submenu header's title to the title given in title. <br /><br />"
"android.view.SubMenu.clearHeader () "," Clears the header of the submenu. <br /><br />"
"android.view.SubMenu.setIcon (int iconRes) "," Change the icon associated with this submenu's item in its parent menu. <br /><br />"
"android.view.SubMenu.setHeaderIcon (int iconRes) "," Sets the submenu header's icon to the icon given in iconRes resource id. <br /><br />"
"android.view.SubMenu.MenuItem () "," Gets the MenuItem that represents this submenu in the parent menu. <br /><br />"
"android.view.SubMenu.View () "," Sets the header of the submenu to the View given in view. <br /><br />"
"android.view.Surface.Canvas () "," Posts the new contents of the Canvas to the surface and releases the Canvas. <br /><br />"
"android.view.Surface.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.view.Surface.isValid () "," Returns true if this object holds a valid surface. <br /><br />"
"android.view.Surface.release () "," Release the local reference to the server-side surface. <br /><br />"
"android.view.Surface.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.view.Surface.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.view.SurfaceHolder.Callback.SurfaceHolder () "," This is called immediately before a surface is being destroyed. <br /><br />"
"android.view.SurfaceHolder.Callback2.SurfaceHolder () "," Called when the application needs to redraw the content of its surface, after it is resized or for some other reason. <br /><br />"
"android.view.SurfaceHolder.setFormat (int format) "," Set the desired PixelFormat of the surface. <br /><br />"
"android.view.SurfaceHolder.SurfaceHolder.Callback () "," Removes a previously added Callback interface from this holder. <br /><br />"
"android.view.SurfaceHolder.lockCanvas () "," Start editing the pixels in the surface. <br /><br />"
"android.view.SurfaceHolder.setType (int type) "," This method was deprecated in API level 11. this is ignored, this value is set automatically when needed. <br /><br />"
"android.view.SurfaceHolder.lockCanvas () () "," Just like lockCanvas() but allows specification of a dirty rectangle. <br /><br />"
"android.view.SurfaceHolder.setSizeFromLayout () "," Allow the surface to resized based on layout of its container (this is the default). <br /><br />"
"android.view.SurfaceHolder.Canvas () "," Finish editing pixels in the surface. <br /><br />"
"android.view.SurfaceHolder.setFixedSize (int width, int height) "," Make the surface a fixed size. <br /><br />"
"android.view.SurfaceHolder.isCreating () "," Use this method to find out if the surface is in the process of being created from Callback methods. <br /><br />"
"android.view.SurfaceHolder.getSurfaceFrame () "," Retrieve the current size of the surface. <br /><br />"
"android.view.SurfaceHolder.setKeepScreenOn (boolean screenOn) "," Enable or disable option to keep the screen turned on while this surface is displayed. <br /><br />"
"android.view.SurfaceHolder.getSurface () "," Direct access to the surface object. <br /><br />"
"android.view.SurfaceView.setZOrderOnTop (boolean onTop) "," Control whether the surface view's surface is placed on top of its window. <br /><br />"
"android.view.SurfaceView.Region () "," This is used by the RootView to perform an optimization when the view hierarchy contains one or several SurfaceView. <br /><br />"
"android.view.SurfaceView.setZOrderMediaOverlay (boolean isMediaOverlay) "," Control whether the surface view's surface is placed on top of another regular surface view in the window (but still behind the window itself). <br /><br />"
"android.view.SurfaceView.setVisibility (int visibility) "," Set the enabled state of this view. <br /><br />"
"android.view.SurfaceView.setSecure (boolean isSecure) "," Control whether the surface view's content should be treated as secure, preventing it from appearing in screenshots or from being viewed on non-secure displays. <br /><br />"
"android.view.SurfaceView.Canvas () "," Manually render this view (and all of its children) to the given Canvas. <br /><br />"
"android.view.SurfaceView.getHolder () "," Return the SurfaceHolder providing access and control over this SurfaceView's underlying surface. <br /><br />"
"android.view.textservice.SentenceSuggestionsInfo.getSuggestionsInfoAt (int i) "," no description <br /><br />"
"android.view.textservice.SentenceSuggestionsInfo.getOffsetAt (int i) "," no description <br /><br />"
"android.view.textservice.SentenceSuggestionsInfo.Parcel () "," Used to package this object into a Parcel. <br /><br />"
"android.view.textservice.SentenceSuggestionsInfo.getLengthAt (int i) "," no description <br /><br />"
"android.view.textservice.SentenceSuggestionsInfo.getSuggestionsCount () "," no description <br /><br />"
"android.view.textservice.SentenceSuggestionsInfo.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.view.textservice.SpellCheckerInfo.getPackageName () "," Return the .apk package that implements this. <br /><br />"
"android.view.textservice.SpellCheckerInfo.PackageManager () "," Load the user-displayed label for this spell checker. <br /><br />"
"android.view.textservice.SpellCheckerInfo.getServiceInfo () "," Return the raw information about the Service implementing this spell checker. <br /><br />"
"android.view.textservice.SpellCheckerInfo.getId () "," Return a unique ID for this spell checker. <br /><br />"
"android.view.textservice.SpellCheckerInfo.getSubtypeCount () "," Return the count of the subtypes. <br /><br />"
"android.view.textservice.SpellCheckerInfo.getSettingsActivity () "," Return the class name of an activity that provides a settings UI. <br /><br />"
"android.view.textservice.SpellCheckerInfo.getComponent () "," Return the component of the service that implements. <br /><br />"
"android.view.textservice.SpellCheckerInfo.Parcel () "," Used to package this object into a Parcel. <br /><br />"
"android.view.textservice.SpellCheckerInfo.describeContents () "," Used to make this class parcelable. <br /><br />"
"android.view.textservice.SpellCheckerInfo.getSubtypeAt (int index) "," Return the subtype at the specified index. <br /><br />"
"android.view.textservice.SpellCheckerSession.isSessionDisconnected () "," no description <br /><br />"
"android.view.textservice.SpellCheckerSession.TextInfo[] () "," Get suggestions from the specified sentences <br /><br />"
"android.view.textservice.SpellCheckerSession.getSpellChecker () "," Get the spell checker service info this spell checker session has. <br /><br />"
"android.view.textservice.SpellCheckerSession.getSentenceSuggestions (TextInfo[], int) () "," This method was deprecated in API level 16. use getSentenceSuggestions(TextInfo[], int) instead <br /><br />"
"android.view.textservice.SpellCheckerSession.close () "," Finish this session and allow TextServicesManagerService to disconnect the bound spell checker. <br /><br />"
"android.view.textservice.SpellCheckerSession.cancel () "," Cancel pending and running spell check tasks <br /><br />"
"android.view.textservice.SpellCheckerSession.SpellCheckerSessionListener.getSentenceSuggestions (TextInfo[], int) () "," Callback for getSentenceSuggestions(TextInfo[], int) <br /><br />"
"android.view.textservice.SpellCheckerSession.SpellCheckerSessionListener.getSuggestions (TextInfo[], int, boolean) () "," Callback for getSuggestions(TextInfo, int) and getSuggestions(TextInfo[], int, boolean) <br /><br />"
"android.view.textservice.SpellCheckerSubtype.String () "," The string of ExtraValue in subtype should be defined as follows: example: key0,key1=value1,key2,key3,key4=value4 <br /><br />"
"android.view.textservice.SpellCheckerSubtype.getLocale () "," no description <br /><br />"
"android.view.textservice.SpellCheckerSubtype.getExtraValue () "," no description <br /><br />"
"android.view.textservice.SpellCheckerSubtype.ApplicationInfo () "," no description <br /><br />"
"android.view.textservice.SpellCheckerSubtype.getNameResId () "," no description <br /><br />"
"android.view.textservice.SpellCheckerSubtype.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.view.textservice.SpellCheckerSubtype.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.view.textservice.SpellCheckerSubtype.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.view.textservice.SpellCheckerSubtype.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.view.textservice.SuggestionsInfo.setCookieAndSequence (int cookie, int sequence) "," Set the cookie and the sequence of SuggestionsInfo which are set to TextInfo from a client application <br /><br />"
"android.view.textservice.SuggestionsInfo.Parcel () "," Used to package this object into a Parcel. <br /><br />"
"android.view.textservice.SuggestionsInfo.getSequence () "," no description <br /><br />"
"android.view.textservice.SuggestionsInfo.getCookie () "," no description <br /><br />"
"android.view.textservice.SuggestionsInfo.getSuggestionAt (int i) "," no description <br /><br />"
"android.view.textservice.SuggestionsInfo.getSuggestionsCount () "," no description <br /><br />"
"android.view.textservice.SuggestionsInfo.describeContents () "," Used to make this class parcelable. <br /><br />"
"android.view.textservice.SuggestionsInfo.getSuggestionsAttributes () "," no description <br /><br />"
"android.view.textservice.TextInfo.getCharSequence () "," no description <br /><br />"
"android.view.textservice.TextInfo.Parcel () "," Used to package this object into a Parcel. <br /><br />"
"android.view.textservice.TextInfo.getSequence () "," no description <br /><br />"
"android.view.textservice.TextInfo.getCookie () "," no description <br /><br />"
"android.view.textservice.TextInfo.describeContents () "," Used to make this class parcelable. <br /><br />"
"android.view.textservice.TextInfo.getText () "," no description <br /><br />"
"android.view.textservice.TextServicesManager.SpellCheckerSession.SpellCheckerSessionListener () "," Get a spell checker session for the specified spell checker <br /><br />"
"android.view.TextureView.LAYER_TYPE_HARDWARE () "," Always returns LAYER_TYPE_HARDWARE. <br /><br />"
"android.view.TextureView.setOpaque (boolean opaque) "," Indicates whether the content of this TextureView is opaque. <br /><br />"
"android.view.TextureView.Canvas () "," Finish editing pixels in the surface. <br /><br />"
"android.view.TextureView.Paint () "," The layer type of a TextureView is ignored since a TextureView is always considered to act as a hardware layer. <br /><br />"
"android.view.TextureView.Matrix () "," Sets the transform to associate with this texture view. <br /><br />"
"android.view.TextureView.TextureView.SurfaceTextureListener () "," Sets the TextureView.SurfaceTextureListener used to listen to surface texture events. <br /><br />"
"android.view.TextureView.lockCanvas () "," Start editing the pixels in the surface. <br /><br />"
"android.view.TextureView.isOpaque () "," Indicates whether this View is opaque. <br /><br />"
"android.view.TextureView.lockCanvas () () "," Just like lockCanvas() but allows specification of a dirty rectangle. <br /><br />"
"android.view.TextureView.Bitmap (int width, int height) "," Returns a Bitmap representation of the content of the associated surface texture. <br /><br />"
"android.view.TextureView.LAYER_TYPE_NONE () "," Updates the Paint object used with the current layer (used only if the current layer type is not set to LAYER_TYPE_NONE). <br /><br />"
"android.view.TextureView.SurfaceTexture () "," Set the SurfaceTexture for this view to use. <br /><br />"
"android.view.TextureView.buildLayer () "," Calling this method has no effect. <br /><br />"
"android.view.TextureView.Bitmap () "," Copies the content of this view's surface texture into the specified bitmap. <br /><br />"
"android.view.TextureView.SurfaceTextureListener.TextureView () "," Invoked when a TextureView's SurfaceTexture is ready for use. <br /><br />"
"android.view.TextureView.SurfaceTextureListener.updateTexImage () () "," Invoked when the specified SurfaceTexture is updated through updateTexImage(). <br /><br />"
"android.view.TextureView.SurfaceTextureListener.SurfaceTexture () "," Invoked when the SurfaceTexture's buffers size changed. <br /><br />"
"android.view.TouchDelegate.MotionEvent () "," Will forward touch events to the delegate view if the event is within the bounds specified in the constructor. <br /><br />"
"android.view.VelocityTracker.computeCurrentVelocity (int units, float maxVelocity) "," Compute the current velocity based on the points that have been collected. <br /><br />"
"android.view.VelocityTracker.getXVelocity (int id) "," Retrieve the last computed X velocity. <br /><br />"
"android.view.VelocityTracker.getXVelocity () "," Retrieve the last computed X velocity. <br /><br />"
"android.view.VelocityTracker.getYVelocity (int id) "," Retrieve the last computed Y velocity. <br /><br />"
"android.view.VelocityTracker.clear () "," Reset the velocity tracker back to its initial state. <br /><br />"
"android.view.VelocityTracker.MotionEvent () "," Add a user's movement to the tracker. <br /><br />"
"android.view.VelocityTracker.recycle () "," Return a VelocityTracker object back to be re-used by others. <br /><br />"
"android.view.VelocityTracker.obtain () "," Retrieve a new VelocityTracker object to watch the velocity of a motion. <br /><br />"
"android.view.VelocityTracker.getYVelocity () "," Retrieve the last computed Y velocity. <br /><br />"
"android.view.VelocityTracker.computeCurrentVelocity (int, float) (int units) "," Equivalent to invoking computeCurrentVelocity(int, float) with a maximum velocity of Float.MAX_VALUE. <br /><br />"
"android.view.View.AccessibilityDelegate.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about the host view. <br /><br />"
"android.view.View.AccessibilityDelegate.AccessibilityService () "," Gets the provider for managing a virtual view hierarchy rooted at this View and reported to AccessibilityServices that explore the window content. <br /><br />"
"android.view.View.AccessibilityDelegate.AccessibilityEvent () "," Sends an accessibility event. <br /><br />"
"android.view.View.AccessibilityDelegate.Bundle () "," Performs the specified accessibility action on the view. <br /><br />"
"android.view.View.AccessibilityDelegate.View () "," Sends an accessibility event of the given type. <br /><br />"
"android.view.View.DragShadowBuilder.Canvas () "," Draws the shadow image. <br /><br />"
"android.view.View.DragShadowBuilder.Point () "," Provides the metrics for the shadow image. <br /><br />"
"android.view.View.DragShadowBuilder.View.DragShadowBuilder (View) () "," Returns the View object that had been passed to the View.DragShadowBuilder(View) constructor. <br /><br />"
"android.view.View.isHardwareAccelerated () "," Indicates whether this view is attached to a hardware accelerated window or not. <br /><br />"
"android.view.View.setScrollBarDefaultDelayBeforeFade (int scrollBarDefaultDelayBeforeFade) "," Define the delay before scrollbars fade. <br /><br />"
"android.view.View.getTextDirection () "," Return the resolved text direction. <br /><br />"
"android.view.View.getResources () "," Returns the resources associated with this view. <br /><br />"
"android.view.View.isFocused () "," Returns true if this view has focus <br /><br />"
"android.view.View.setHasTransientState (boolean hasTransientState) "," Set whether this view is currently tracking transient state that the framework should attempt to preserve when possible. <br /><br />"
"android.view.View.isLaidOut () "," Returns true if this view has been through at least one layout since it was last attached to or detached from a window. <br /><br />"
"android.view.View.setFadingEdgeLength (int length) "," Set the size of the faded edge used to indicate that more content in this view is available. <br /><br />"
"android.view.View.setBackgroundTintList (ColorStateList) () "," Specifies the blending mode used to apply the tint specified by setBackgroundTintList(ColorStateList)} to the background drawable. <br /><br />"
"android.view.View.FOCUS_LEFT () "," Gets the id of the view to use when the next focus is FOCUS_LEFT. <br /><br />"
"android.view.View.setRotationX (float rotationX) "," Sets the degrees that the view is rotated around the horizontal axis through the pivot point. <br /><br />"
"android.view.View.fitSystemWindows (Rect) (boolean fitSystemWindows) "," Sets whether or not this view should account for system screen decorations such as the status bar and inset its content; that is, controlling whether the default implementation of fitSystemWindows(Rect) will be executed. <br /><br />"
"android.view.View.getPaddingTop () "," Returns the top padding of this view. <br /><br />"
"android.view.View.isInEditMode () "," Indicates whether this View is currently in edit mode. <br /><br />"
"android.view.View.Drawable () "," Unschedule any events associated with the given Drawable. <br /><br />"
"android.view.View.dispatchNestedPreScroll (int dx, int dy, int[] consumed, int[] offsetInWindow) "," Dispatch one step of a nested scroll in progress before this view consumes any portion of it. <br /><br />"
"android.view.View.postInvalidateDelayed (long delayMilliseconds) "," Cause an invalidate to happen on a subsequent cycle through the event loop. <br /><br />"
"android.view.View.performHapticFeedback (int feedbackConstant) "," BZZZTT!!1! Provide haptic feedback to the user for this view. <br /><br />"
"android.view.View.DragEvent () "," Detects if this View is enabled and has a drag event listener. <br /><br />"
"android.view.View.outline provider () "," Called to rebuild this View's Outline from its outline provider <br /><br />"
"android.view.View.scaled (float pivotX) "," Sets the x location of the point around which the view is rotated and scaled. <br /><br />"
"android.view.View.getVerticalScrollbarPosition () "," no description <br /><br />"
"android.view.View.setAccessibilityTraversalBefore (int beforeId) "," Sets the id of a view before which this one is visited in accessibility traversal. <br /><br />"
"android.view.View.isLongClickable () "," Indicates whether this view reacts to long click events or not. <br /><br />"
"android.view.View.getImportantForAccessibility () "," Gets the mode for determining whether this View is important for accessibility which is if it fires accessibility events and if it is reported to accessibility services that query the screen. <br /><br />"
"android.view.View.WindowId () "," Retrieve the WindowId for the window this view is currently attached to. <br /><br />"
"android.view.View.setTextAlignment (int textAlignment) "," Set the text alignment. <br /><br />"
"android.view.View.KeyEvent.DispatcherState () "," Return the global KeyEvent.DispatcherState for this view's window. <br /><br />"
"android.view.View.setVerticalScrollbarPosition (int position) "," Set the position of the vertical scroll bar. <br /><br />"
"android.view.View.cancelPendingInputEvents () () "," Called as the result of a call to cancelPendingInputEvents() on this view or a parent view. <br /><br />"
"android.view.View.setFitsSystemWindows (boolean) () "," Check for state of setFitsSystemWindows(boolean). <br /><br />"
"android.view.View.getParentForAccessibility () "," Gets the parent for accessibility purposes. <br /><br />"
"android.view.View.FOCUS_FORWARD (int nextFocusForwardId) "," Sets the id of the view to use when the next focus is FOCUS_FORWARD. <br /><br />"
"android.view.View.Object () "," Starts a drag and drop operation. <br /><br />"
"android.view.View.dispatchDrawableHotspotChanged (float x, float y) "," Dispatches drawableHotspotChanged to all of this View's children. <br /><br />"
"android.view.View.Paint () "," Specifies the type of layer backing this view. <br /><br />"
"android.view.View.findFocus () "," Find the view in the hierarchy rooted at this view that currently has focus. <br /><br />"
"android.view.View.FOCUS_RIGHT () "," Gets the id of the view to use when the next focus is FOCUS_RIGHT. <br /><br />"
"android.view.View.setHovered (boolean hovered) "," Sets whether the view is currently hovered. <br /><br />"
"android.view.View.isActivated () "," Indicates the activation state of this view. <br /><br />"
"android.view.View.cancelLongPress () "," Cancels a pending long press. <br /><br />"
"android.view.View.setRotation (float rotation) "," Sets the degrees that the view is rotated around the pivot point. <br /><br />"
"android.view.View.isSoundEffectsEnabled () "," no description <br /><br />"
"android.view.View.dispatchNestedScroll (int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[] offsetInWindow) "," Dispatch one step of a nested scroll in progress. <br /><br />"
"android.view.View.isSelected () "," Indicates the selection state of this view. <br /><br />"
"android.view.View.scaled (float pivotY) "," Sets the y location of the point around which the view is rotated and scaled. <br /><br />"
"android.view.View.isTextAlignmentResolved () "," no description <br /><br />"
"android.view.View.getDrawingCacheBackgroundColor () "," no description <br /><br />"
"android.view.View.MotionEvent () "," Request unbuffered dispatch of the given stream of MotionEvents to this View. <br /><br />"
"android.view.View.AccessibilityService () "," Gets the provider for managing a virtual view hierarchy rooted at this View and reported to AccessibilityServices that explore the window content. <br /><br />"
"android.view.View.elevation (float translationZ) "," Sets the depth location of this view relative to its elevation. <br /><br />"
"android.view.View.setY (float y) "," Sets the visual y position of this view, in pixels. <br /><br />"
"android.view.View.getAccessibilityTraversalBefore () "," Gets the id of a view before which this one is visited in accessibility traversal. <br /><br />"
"android.view.View.onHoverChanged (boolean hovered) "," Implement this method to handle hover state changes. <br /><br />"
"android.view.View.Rect () "," Sets a rectangular area on this view to which the view will be clipped when it is drawn. <br /><br />"
"android.view.View.getPaddingLeft () "," Returns the left padding of this view. <br /><br />"
"android.view.View.FOCUS_UP (int nextFocusUpId) "," Sets the id of the view to use when the next focus is FOCUS_UP. <br /><br />"
"android.view.View.getLocationOnScreen (int[] location) "," Computes the coordinates of this view on the screen. <br /><br />"
"android.view.View.playSoundEffect (int soundConstant) "," Play a sound effect for this view. <br /><br />"
"android.view.View.setNestedScrollingEnabled (boolean enabled) "," Enable or disable nested scrolling for this view. <br /><br />"
"android.view.View.elevation () "," The depth location of this view relative to its elevation. <br /><br />"
"android.view.View.showContextMenu () "," Bring up the context menu for this view. <br /><br />"
"android.view.View.String () "," Sets the name of the View to be used to identify Views in Transitions. <br /><br />"
"android.view.View.MEASURED_SIZE_MASK () "," Like getMeasuredWidthAndState(), but only returns the raw width component (that is the result is masked by MEASURED_SIZE_MASK). <br /><br />"
"android.view.View.invalidate (int l, int t, int r, int b) "," Mark the area defined by the rect (l,t,r,b) as needing to be drawn. <br /><br />"
"android.view.View.getFocusables (int direction) "," Find and return all focusable views that are descendants of this view, possibly including this view if it is focusable itself. <br /><br />"
"android.view.View.isFocusableInTouchMode () "," When a view is focusable, it may not want to take focus when in touch mode. <br /><br />"
"android.view.View.getPaddingStart () "," Returns the start padding of this view depending on its resolved layout direction. <br /><br />"
"android.view.View.View.OnLongClickListener () "," Register a callback to be invoked when this view is clicked and held. <br /><br />"
"android.view.View.View.OnApplyWindowInsetsListener () "," Set an View.OnApplyWindowInsetsListener to take over the policy for applying window insets to this view. <br /><br />"
"android.view.View.layout (int l, int t, int r, int b) "," Assign a size and position to a view and all of its descendants This is the second phase of the layout mechanism. <br /><br />"
"android.view.View.KEYCODE_ENTER () "," Default implementation of KeyEvent.Callback.onKeyUp(): perform clicking of the view when KEYCODE_DPAD_CENTER or KEYCODE_ENTER is released. <br /><br />"
"android.view.View.isClickable () "," Indicates whether this view reacts to click events or not. <br /><br />"
"android.view.View.getMeasuredHeightAndState () () "," Return only the state bits of getMeasuredWidthAndState() and getMeasuredHeightAndState(), combined into one integer. <br /><br />"
"android.view.View.computeScroll () "," Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary. <br /><br />"
"android.view.View.getScrollBarDefaultDelayBeforeFade () "," Returns the delay before scrollbars fade. <br /><br />"
"android.view.View.getTag (int key) "," Returns the tag associated with this view and the specified key. <br /><br />"
"android.view.View.isEnabled () "," Returns the enabled status for this view. <br /><br />"
"android.view.View.View.OnGenericMotionListener () "," Register a callback to be invoked when a generic motion event is sent to this view. <br /><br />"
"android.view.View.isVerticalScrollBarEnabled () "," Indicate whether the vertical scrollbar should be drawn or not. <br /><br />"
"android.view.View.isHovered () "," Returns true if the view is currently hovered. <br /><br />"
"android.view.View.getRight () "," Right position of this view relative to its parent. <br /><br />"
"android.view.View.ViewGroup.detachViewFromParent () "," This is called when a container is going to temporarily detach a child, with ViewGroup.detachViewFromParent. <br /><br />"
"android.view.View.getFilterTouchesWhenObscured () "," Gets whether the framework should discard touches when the view's window is obscured by another visible window. <br /><br />"
"android.view.View.getOnFocusChangeListener () "," Returns the focus-change callback registered for this view. <br /><br />"
"android.view.View.getHandler () "," no description <br /><br />"
"android.view.View.setPressed (boolean pressed) "," Sets the pressed state for this view. <br /><br />"
"android.view.View.setAccessibilityTraversalAfter (int afterId) "," Sets the id of a view after which this one is visited in accessibility traversal. <br /><br />"
"android.view.View.getAccessibilityTraversalAfter () "," Gets the id of a view after which this one is visited in accessibility traversal. <br /><br />"
"android.view.View.getZ () "," The visual z position of this view, in pixels. <br /><br />"
"android.view.View.KeyEvent.Callback.onKeyLongPress () () "," Default implementation of KeyEvent.Callback.onKeyLongPress(): always returns false (doesn't handle the event). <br /><br />"
"android.view.View.setAlpha (float alpha) "," Sets the opacity of the view. <br /><br />"
"android.view.View.setDrawingCacheQuality (int quality) "," Set the drawing cache quality of this view. <br /><br />"
"android.view.View.getVisibility () "," Returns the visibility status for this view. <br /><br />"
"android.view.View.hasOnClickListeners () "," Return whether this view has an attached OnClickListener. <br /><br />"
"android.view.View.hasTransientState () "," Indicates whether the view is currently tracking transient state that the app should not need to concern itself with saving and restoring, but that the framework should take special note to preserve when possible. <br /><br />"
"android.view.View.top (float translationY) "," Sets the vertical location of this view relative to its top position. <br /><br />"
"android.view.View.getBackgroundTintList () "," Return the tint applied to the background drawable, if specified. <br /><br />"
"android.view.View.setOverScrollMode (int overScrollMode) "," Set the over-scroll mode for this view. <br /><br />"
"android.view.View.setScrollbarFadingEnabled (boolean fadeScrollbars) "," Define whether scrollbars will fade when the view is not scrolling. <br /><br />"
"android.view.View.getLeft () "," Left position of this view relative to its parent. <br /><br />"
"android.view.View.setEnabled (boolean enabled) "," Set the enabled state of this view. <br /><br />"
"android.view.View.getDefaultSize (int size, int measureSpec) "," Utility to return a default size. <br /><br />"
"android.view.View.isFocusable () "," Returns whether this View is able to take focus. <br /><br />"
"android.view.View.stopNestedScroll () "," Stop a nested scroll in progress. <br /><br />"
"android.view.View.setId (int) () "," Generate a value suitable for use in setId(int). <br /><br />"
"android.view.View.getRotationX () "," The degrees that the view is rotated around the horizontal axis through the pivot point. <br /><br />"
"android.view.View.setVerticalFadingEdgeEnabled (boolean verticalFadingEdgeEnabled) "," Define whether the vertical edges should be faded when this view is scrolled vertically. <br /><br />"
"android.view.View.getHorizontalFadingEdgeLength () "," Returns the size of the horizontal faded edges used to indicate that more content in this view is visible. <br /><br />"
"android.view.View.getAnimation () "," Get the animation currently associated with this view. <br /><br />"
"android.view.View.setAccessibilityLiveRegion (int mode) "," Sets the live region mode for this view. <br /><br />"
"android.view.View.setSaveFromParentEnabled (boolean enabled) "," Controls whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent. <br /><br />"
"android.view.View.isDirty () "," True if this view has changed since the last time being drawn. <br /><br />"
"android.view.View.isHorizontalFadingEdgeEnabled () "," Indicate whether the horizontal edges are faded when the view is scrolled horizontally. <br /><br />"
"android.view.View.Drawable.jumpToCurrentState () () "," Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view. <br /><br />"
"android.view.View.getDrawableState () "," Return an array of resource IDs of the drawable states representing the current state of the view. <br /><br />"
"android.view.View.setX (float x) "," Sets the visual x position of this view, in pixels. <br /><br />"
"android.view.View.hasFocus () "," Returns true if this view has focus iteself, or is the ancestor of the view that has focus. <br /><br />"
"android.view.View.isHorizontalScrollBarEnabled () "," Indicate whether the horizontal scrollbar should be drawn or not. <br /><br />"
"android.view.View.willNotCacheDrawing () "," Returns whether or not this View can cache its drawing or not. <br /><br />"
"android.view.View.getId () "," Returns this view's identifier. <br /><br />"
"android.view.View.setHapticFeedbackEnabled (boolean hapticFeedbackEnabled) "," Set whether this view should have haptic feedback for events such as long presses. <br /><br />"
"android.view.View.Point () "," If some part of this view is not clipped by any of its parents, then return that area in r in global (root) coordinates. <br /><br />"
"android.view.View.getSolidColor () "," Override this if your view is known to always be drawn on top of a solid color background, and needs to draw fading edges. <br /><br />"
"android.view.View.setLeft (int left) "," Sets the left position of this view relative to its parent. <br /><br />"
"android.view.View.MEASURED_SIZE_MASK (int size, int measureSpec) "," Version of resolveSizeAndState(int, int, int) returning only the MEASURED_SIZE_MASK bits of the result. <br /><br />"
"android.view.View.VISIBLE () "," Returns the current visibility of the window this view is attached to (either GONE, INVISIBLE, or VISIBLE). <br /><br />"
"android.view.View.EditorInfo () "," Create a new InputConnection for an InputMethod to interact with the view. <br /><br />"
"android.view.View.scrollBy (int x, int y) "," Move the scrolled position of your view. <br /><br />"
"android.view.View.setSelected (boolean selected) "," Changes the selection state of this view. <br /><br />"
"android.view.View.getRotation () "," The degrees that the view is rotated around the pivot point. <br /><br />"
"android.view.View.isImportantForAccessibility () "," Computes whether this view should be exposed for accessibility. <br /><br />"
"android.view.View.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.view.View.isScrollContainer () "," Indicates whether this view is one of the set of scrollable containers in its window. <br /><br />"
"android.view.View.sendAccessibilityEvent (int eventType) "," Sends an accessibility event of the given type. <br /><br />"
"android.view.View.onCheckIsTextEditor () "," Check whether the called view is a text editor, in which case it would make sense to automatically display a soft input window for it. <br /><br />"
"android.view.View.View.OnTouchListener () "," Register a callback to be invoked when a touch event is sent to this view. <br /><br />"
"android.view.View.View.OnClickListener () "," Register a callback to be invoked when this view is clicked. <br /><br />"
"android.view.View.setBackground (Drawable) () "," This method was deprecated in API level 16. use setBackground(Drawable) instead <br /><br />"
"android.view.View.View.OnHoverListener () "," Register a callback to be invoked when a hover event is sent to this view. <br /><br />"
"android.view.View.View.OnFocusChangeListener () "," Register a callback to be invoked when focus of this view changed. <br /><br />"
"android.view.View.requestFocus (int direction) "," Call this to try to give focus to a specific view or to one of its descendants and give it a hint about what direction focus is heading. <br /><br />"
"android.view.View.Parcelable () "," Store this view hierarchy's frozen state into the given container. <br /><br />"
"android.view.View.setScrollX (int value) "," Set the horizontal scrolled position of your view. <br /><br />"
"android.view.View.Configuration () "," Dispatch a notification about a resource configuration change down the view hierarchy. <br /><br />"
"android.view.View.isLayoutRequested () "," Indicates whether or not this view's layout will be requested during the next hierarchy layout pass. <br /><br />"
"android.view.View.clearFocus () "," Called when this view wants to give up focus. <br /><br />"
"android.view.View.LAYER_TYPE_NONE () "," Updates the Paint object used with the current layer (used only if the current layer type is not set to LAYER_TYPE_NONE). <br /><br />"
"android.view.View.setClipToOutline (boolean clipToOutline) "," Sets whether the View's Outline should be used to clip the contents of the View. <br /><br />"
"android.view.View.setScaleY (float scaleY) "," Sets the amount that the view is scaled in Y around the pivot point, as a proportion of the view's unscaled width. <br /><br />"
"android.view.View.getDrawingCacheQuality () "," Returns the quality of the drawing cache. <br /><br />"
"android.view.View.getOverlay () "," Returns the overlay for this view, creating it if it does not yet exist. <br /><br />"
"android.view.View.getTouchables () "," Find and return all touchable views that are descendants of this view, possibly including this view if it is touchable itself. <br /><br />"
"android.view.View.forceLayout () "," Forces this view to be laid out during the next layout pass. <br /><br />"
"android.view.View.getWindowToken () "," Retrieve a unique token identifying the window this view is attached to. <br /><br />"
"android.view.View.getClipToOutline () "," Returns whether the Outline should be used to clip the contents of the View. <br /><br />"
"android.view.View.getBaseline () "," Return the offset of the widget's text baseline from the widget's top boundary. <br /><br />"
"android.view.View.Canvas () "," Manually render this view (and all of its children) to the given Canvas. <br /><br />"
"android.view.View.onSaveInstanceState () (boolean enabled) "," Controls whether the saving of this view's state is enabled (that is, whether its onSaveInstanceState() method will be called). <br /><br />"
"android.view.View.dispatchWindowFocusChanged (boolean hasFocus) "," Called when the window containing this view gains or loses window focus. <br /><br />"
"android.view.View.isPressed () "," Indicates whether the view is currently in pressed state. <br /><br />"
"android.view.View.getElevation () "," The base elevation of this view relative to its parent, in pixels. <br /><br />"
"android.view.View.hasNestedScrollingParent () "," Returns true if this view has a nested scrolling parent. <br /><br />"
"android.view.View.View.OnKeyListener () "," Register a callback to be invoked when a hardware key is pressed in this view. <br /><br />"
"android.view.View.View () "," Sets the View description. <br /><br />"
"android.view.View.performHapticFeedback (int) (int feedbackConstant, int flags) "," BZZZTT!!1! Like performHapticFeedback(int), with additional options. <br /><br />"
"android.view.View.ViewGroup.LayoutParams () "," Set the layout parameters associated with this view. <br /><br />"
"android.view.View.setFocusable (boolean focusable) "," Set whether this view can receive the focus. <br /><br />"
"android.view.View.dispatchWindowVisibilityChanged (int visibility) "," Dispatch a window visibility change down the view hierarchy. <br /><br />"
"android.view.View.onStartTemporaryDetach () () "," Called after onStartTemporaryDetach() when the container is done changing the view. <br /><br />"
"android.view.View.getParent () "," Gets the parent of this view. <br /><br />"
"android.view.View.getViewTreeObserver () "," Returns the ViewTreeObserver for this view's hierarchy. <br /><br />"
"android.view.View.getTop () "," Top position of this view relative to its parent. <br /><br />"
"android.view.View.invalidate () "," Invalidate the whole view. <br /><br />"
"android.view.View.postInvalidateOnAnimation () "," Cause an invalidate to happen on the next animation time step, typically the next display frame. <br /><br />"
"android.view.View.onApplyWindowInsets (WindowInsets) () "," Ask that a new dispatch of onApplyWindowInsets(WindowInsets) be performed. <br /><br />"
"android.view.View.setClickable (boolean clickable) "," Enables or disables click events for this view. <br /><br />"
"android.view.View.onRtlPropertiesChanged (int layoutDirection) "," Called when any RTL property (layout direction or text direction or text alignment) has been changed. <br /><br />"
"android.view.View.setRight (int right) "," Sets the right position of this view relative to its parent. <br /><br />"
"android.view.View.getPaddingRight () "," Returns the right padding of this view. <br /><br />"
"android.view.View.getTag () "," Returns this view's tag. <br /><br />"
"android.view.View.isShown () "," Returns the visibility of this view and all of its ancestors <br /><br />"
"android.view.View.isAttachedToWindow () "," Returns true if this view is currently attached to a window. <br /><br />"
"android.view.View.ViewGroup () "," Inflate a view from an XML resource. <br /><br />"
"android.view.View.getScrollX () "," Return the scrolled left position of this view. <br /><br />"
"android.view.View.setId (int id) "," Sets the identifier for this view. <br /><br />"
"android.view.View.setRotationY (float rotationY) "," Sets the degrees that the view is rotated around the vertical axis through the pivot point. <br /><br />"
"android.view.View.postInvalidateOnAnimation (int left, int top, int right, int bottom) "," Cause an invalidate of the specified area to happen on the next animation time step, typically the next display frame. <br /><br />"
"android.view.View.startNestedScroll (int axes) "," Begin a nestable scroll operation along the given axes. <br /><br />"
"android.view.View.setMinimumHeight (int minHeight) "," Sets the minimum height of the view. <br /><br />"
"android.view.View.getVerticalScrollbarWidth () "," Returns the width of the vertical scrollbar. <br /><br />"
"android.view.View.setLongClickable (boolean longClickable) "," Enables or disables long click events for this view. <br /><br />"
"android.view.View.getHeight () "," Return the height of your view. <br /><br />"
"android.view.View.ContextMenu () "," Show the context menu for this view. <br /><br />"
"android.view.View.left (float translationX) "," Sets the horizontal location of this view relative to its left position. <br /><br />"
"android.view.View.focusSearch (int direction) "," Find the nearest view in the specified direction that can take focus. <br /><br />"
"android.view.View.requestFocus () "," Call this to try to give focus to a specific view or to one of its descendants. <br /><br />"
"android.view.View.callOnClick () "," Directly call any attached OnClickListener. <br /><br />"
"android.view.View.onSaveInstanceState () () "," Indicates whether this view will save its state (that is, whether its onSaveInstanceState() method will be called). <br /><br />"
"android.view.View.getLayoutDirection () "," Returns the resolved layout direction for this view. <br /><br />"
"android.view.View.isHapticFeedbackEnabled () "," no description <br /><br />"
"android.view.View.View.OnAttachStateChangeListener () "," Remove a listener for attach state changes. <br /><br />"
"android.view.View.View.OnLayoutChangeListener () "," Remove a listener for layout changes. <br /><br />"
"android.view.View.StateListAnimator () "," Attaches the provided StateListAnimator to this View. <br /><br />"
"android.view.View.getRotationY () "," The degrees that the view is rotated around the vertical axis through the pivot point. <br /><br />"
"android.view.View.getMatrix () "," The transform matrix of this view, which is calculated based on the current rotation, scale, and pivot properties. <br /><br />"
"android.view.View.View.OnSystemUiVisibilityChangeListener () "," Set a listener to receive callbacks when the visibility of the system bar changes. <br /><br />"
"android.view.View.setScrollBarFadeDuration (int scrollBarFadeDuration) "," Define the scrollbar fade duration. <br /><br />"
"android.view.View.setDrawingCacheEnabled (boolean enabled) "," Enables or disables the drawing cache. <br /><br />"
"android.view.View.hasOverlappingRendering () "," Returns whether this View has content which overlaps. <br /><br />"
"android.view.View.performLongClick () "," Call this view's OnLongClickListener, if it is defined. <br /><br />"
"android.view.View.getWindowSystemUiVisibility () (int visible) "," Override to find out when the window's requested system UI visibility has changed, that is the value returned by getWindowSystemUiVisibility(). <br /><br />"
"android.view.View.dispatchPopulateAccessibilityEvent (AccessibilityEvent) () "," Called from dispatchPopulateAccessibilityEvent(AccessibilityEvent) giving a chance to this View to populate the accessibility event with its text content. <br /><br />"
"android.view.View.isDrawingCacheEnabled () "," Indicates whether the drawing cache is enabled for this view. <br /><br />"
"android.view.View.setWillNotDraw (boolean willNotDraw) "," If this view doesn't do any drawing on its own, set this flag to allow further optimizations. <br /><br />"
"android.view.View.setPaddingRelative (int, int, int, int) () "," Return if the padding as been set thru relative values setPaddingRelative(int, int, int, int) or thru <br /><br />"
"android.view.View.getMinimumHeight () "," Returns the minimum height of the view. <br /><br />"
"android.view.View.measure (int widthMeasureSpec, int heightMeasureSpec) "," This is called to find out how big a view should be. <br /><br />"
"android.view.View.cancelPendingInputEvents () "," Cancel any deferred high-level input events that were previously posted to the event queue. <br /><br />"
"android.view.View.FOCUS_FORWARD () "," Gets the id of the view to use when the next focus is FOCUS_FORWARD. <br /><br />"
"android.view.View.FOCUS_DOWN (int nextFocusDownId) "," Sets the id of the view to use when the next focus is FOCUS_DOWN. <br /><br />"
"android.view.View.TouchDelegate () "," Sets the TouchDelegate for this View. <br /><br />"
"android.view.View.refreshDrawableState () "," Call this to force a view to update its drawable state. <br /><br />"
"android.view.View.getTransitionName () "," Returns the name of the View to be used to identify Views in Transitions. <br /><br />"
"android.view.View.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.view.View.getOverScrollMode () "," Returns the over-scroll mode for this view. <br /><br />"
"android.view.View.getPaddingBottom () "," Returns the bottom padding of this view. <br /><br />"
"android.view.View.getScrollBarSize () "," Returns the scrollbar size. <br /><br />"
"android.view.View.setScrollBarStyle (int style) "," Specify the style of the scrollbars. <br /><br />"
"android.view.View.setMinimumWidth (int minWidth) "," Sets the minimum width of the view. <br /><br />"
"android.view.View.getRootView () "," Finds the topmost view in the current view hierarchy. <br /><br />"
"android.view.View.getWidth () "," Return the width of the your view. <br /><br />"
"android.view.View.isNestedScrollingEnabled () "," Returns true if nested scrolling is enabled for this view. <br /><br />"
"android.view.View.setPadding (int left, int top, int right, int bottom) "," Sets the padding. <br /><br />"
"android.view.View.getDrawingCache (boolean autoScale) "," Returns the bitmap in which this view drawing is cached. <br /><br />"
"android.view.View.getMinimumWidth () "," Returns the minimum width of the view. <br /><br />"
"android.view.View.setVisibility (int visibility) "," Set the enabled state of this view. <br /><br />"
"android.view.View.getScaleX () "," The amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width. <br /><br />"
"android.view.View.setSoundEffectsEnabled (boolean soundEffectsEnabled) "," Set whether this view should have sound effects enabled for events such as clicking and touching. <br /><br />"
"android.view.View.CharSequence () "," Finds the Views that contain given text. <br /><br />"
"android.view.View.FOCUS_RIGHT (int nextFocusRightId) "," Sets the id of the view to use when the next focus is FOCUS_RIGHT. <br /><br />"
"android.view.View.getAccessibilityLiveRegion () "," Gets the live region mode for this View. <br /><br />"
"android.view.View.setActivated (boolean activated) "," Changes the activated state of this view. <br /><br />"
"android.view.View.getX () "," The visual x position of this view, in pixels. <br /><br />"
"android.view.View.View.OnDragListener () "," Register a drag event listener callback object for this View. <br /><br />"
"android.view.View.FOCUS_UP () "," Gets the id of the view to use when the next focus is FOCUS_UP. <br /><br />"
"android.view.View.InputMethodManager () "," Called by the InputMethodManager when a view who is not the current input connection target is trying to make a call on the manager. <br /><br />"
"android.view.View.KeyEvent () "," Called on the focused view when a key shortcut event is not handled. <br /><br />"
"android.view.View.getStateListAnimator () "," Returns the current StateListAnimator if exists. <br /><br />"
"android.view.View.postInvalidateDelayed (long delayMilliseconds, int left, int top, int right, int bottom) "," Cause an invalidate of the specified area to happen on a subsequent cycle through the event loop. <br /><br />"
"android.view.View.setWillNotCacheDrawing (boolean willNotCacheDrawing) "," When a View's drawing cache is enabled, drawing is redirected to an offscreen bitmap. <br /><br />"
"android.view.View.getY () "," The visual y position of this view, in pixels. <br /><br />"
"android.view.View.getBackground () "," Gets the background drawable <br /><br />"
"android.view.View.isInTouchMode () "," Returns whether the device is currently in touch mode. <br /><br />"
"android.view.View.Bundle () "," Performs the specified accessibility action on the view. <br /><br />"
"android.view.View.bringToFront () "," Change the view's z order in the tree, so it's on top of other sibling views. <br /><br />"
"android.view.View.buildLayer () "," Forces this view's layer to be created and this view to be rendered into its layer. <br /><br />"
"android.view.View.dispatchNestedFling (float velocityX, float velocityY, boolean consumed) "," Dispatch a fling to a nested scrolling parent. <br /><br />"
"android.view.View.requestFocusFromTouch () "," Call this to try to give focus to a specific view or to one of its descendants. <br /><br />"
"android.view.View.canScrollVertically (int direction) "," Check if this view can be scrolled vertically in a certain direction. <br /><br />"
"android.view.View.setZ (float z) "," Sets the visual z position of this view, in pixels. <br /><br />"
"android.view.View.isVerticalFadingEdgeEnabled () "," Indicate whether the vertical edges are faded when the view is scrolled horizontally. <br /><br />"
"android.view.View.getLayerType () "," Indicates what type of layer is currently associated with this view. <br /><br />"
"android.view.View.getScrollY () "," Return the scrolled top position of this view. <br /><br />"
"android.view.View.setSystemUiVisibility (int) () "," Returns the last setSystemUiVisibility(int) that this view has requested. <br /><br />"
"android.view.View.willNotDraw () "," Returns whether or not this View draws on its own. <br /><br />"
"android.view.View.top () "," The vertical location of this view relative to its top position. <br /><br />"
"android.view.View.getVerticalFadingEdgeLength () "," Returns the size of the vertical faded edges used to indicate that more content in this view is visible. <br /><br />"
"android.view.View.getApplicationWindowToken () "," Retrieve a unique token identifying the top-level 'real' window of the window that this view is attached to. <br /><br />"
"android.view.View.canResolveTextAlignment () "," Check if text alignment resolution can be done. <br /><br />"
"android.view.View.ColorStateList () "," Applies a tint to the background drawable. <br /><br />"
"android.view.View.requestApplyInsets () () "," This method was deprecated in API level 20. Use requestApplyInsets() for newer platform versions. <br /><br />"
"android.view.View.getLabelFor () "," Gets the id of a view for which this view serves as a label for accessibility purposes. <br /><br />"
"android.view.View.isAccessibilityFocused () "," Returns whether this View is accessibility focused. <br /><br />"
"android.view.View.getTouchDelegate () "," Gets the TouchDelegate for this View. <br /><br />"
"android.view.View.View.AccessibilityDelegate () "," Sets a delegate for implementing accessibility support via composition as opposed to inheritance. <br /><br />"
"android.view.View.setOnSystemUiVisibilityChangeListener (View.OnSystemUiVisibilityChangeListener) (int visibility) "," Dispatch callbacks to setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener) down the view hierarchy. <br /><br />"
"android.view.View.clipBounds () "," Returns a copy of the current clipBounds. <br /><br />"
"android.view.View.getBottom () "," Bottom position of this view relative to its parent. <br /><br />"
"android.view.View.offsetTopAndBottom (int offset) "," Offset this view's vertical location by the specified number of pixels. <br /><br />"
"android.view.View.ActionMode.Callback () "," Start an action mode. <br /><br />"
"android.view.View.isLayoutDirectionResolved () "," no description <br /><br />"
"android.view.View.onWindowFocusChanged (boolean hasWindowFocus) "," Called when the window containing this view gains or loses focus. <br /><br />"
"android.view.View.startDrag () () "," Handles drag events sent by the system following a call to startDrag(). <br /><br />"
"android.view.View.resolveSizeAndState (int size, int measureSpec, int childMeasuredState) "," Utility to reconcile a desired size and state, with constraints imposed by a MeasureSpec. <br /><br />"
"android.view.View.getAlpha () "," The opacity of the view. <br /><br />"
"android.view.View.clearAnimation () "," Cancels any animations for this view. <br /><br />"
"android.view.View.KEEP_SCREEN_ON (boolean keepScreenOn) "," Controls whether the screen should remain on, modifying the value of KEEP_SCREEN_ON. <br /><br />"
"android.view.View.getContext () "," Returns the context the view is running in, through which it can access the current theme, resources, etc. <br /><br />"
"android.view.View.buildDrawingCache () "," Calling this method is equivalent to calling buildDrawingCache(false). <br /><br />"
"android.view.View.canResolveLayoutDirection () "," Check if layout direction resolution can be done. <br /><br />"
"android.view.View.performClick () "," Call this view's OnClickListener, if it is defined. <br /><br />"
"android.view.View.requestLayout () "," Call this when something has changed which has invalidated the layout of this view. <br /><br />"
"android.view.View.isScrollbarFadingEnabled () "," Returns true if scrollbars will fade when this view is not scrolling <br /><br />"
"android.view.View.drawableHotspotChanged (float x, float y) "," This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. <br /><br />"
"android.view.View.ViewOutlineProvider () "," Sets the ViewOutlineProvider of the view, which generates the Outline that defines the shape of the shadow it casts, and enables outline clipping. <br /><br />"
"android.view.View.setBottom (int bottom) "," Sets the bottom position of this view relative to its parent. <br /><br />"
"android.view.View.getDrawingTime () "," Return the time at which the drawing of the view hierarchy started. <br /><br />"
"android.view.View.setSystemUiVisibility (int visibility) "," Request that the visibility of the status bar or other screen/window decorations be changed. <br /><br />"
"android.view.View.getLayoutParams () "," Get the LayoutParams associated with this view. <br /><br />"
"android.view.View.animate () "," This method returns a ViewPropertyAnimator object, which can be used to animate specific properties on this View. <br /><br />"
"android.view.View.setFocusableInTouchMode (boolean focusableInTouchMode) "," Set whether this view can receive focus while in touch mode. <br /><br />"
"android.view.View.isSaveFromParentEnabled () "," Indicates whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent. <br /><br />"
"android.view.View.setImportantForAccessibility (int mode) "," Sets how to determine whether this view is important for accessibility which is if it fires accessibility events and if it is reported to accessibility services that query the screen. <br /><br />"
"android.view.View.postInvalidate () "," Cause an invalidate to happen on a subsequent cycle through the event loop. <br /><br />"
"android.view.View.postInvalidate (int left, int top, int right, int bottom) "," Cause an invalidate of the specified area to happen on a subsequent cycle through the event loop. <br /><br />"
"android.view.View.canResolveTextDirection () "," Check if text direction resolution can be done. <br /><br />"
"android.view.View.getMeasuredState () (int curState, int newState) "," Merge two states as returned by getMeasuredState(). <br /><br />"
"android.view.View.buildDrawingCache (boolean autoScale) "," Forces the drawing cache to be built if the drawing cache is invalid. <br /><br />"
"android.view.View.AccessibilityEvent () "," This method behaves exactly as sendAccessibilityEvent(int) but takes as an argument an empty AccessibilityEvent and does not perform a check whether accessibility is enabled. <br /><br />"
"android.view.View.getScrollBarStyle () "," Returns the current scrollbar style. <br /><br />"
"android.view.View.isDuplicateParentStateEnabled () "," Indicates whether this duplicates its drawable state from its parent. <br /><br />"
"android.view.View.hasWindowFocus () "," Returns true if this view is in a window that currently has window focus. <br /><br />"
"android.view.View.View.OnCreateContextMenuListener () "," Register a callback to be invoked when the context menu for this view is being built. <br /><br />"
"android.view.View.setHorizontalScrollBarEnabled (boolean horizontalScrollBarEnabled) "," Define whether the horizontal scrollbar should be drawn or not. <br /><br />"
"android.view.View.FOCUS_LEFT (int nextFocusLeftId) "," Sets the id of the view to use when the next focus is FOCUS_LEFT. <br /><br />"
"android.view.View.setFilterTouchesWhenObscured (boolean enabled) "," Sets whether the framework should discard touches when the view's window is obscured by another visible window. <br /><br />"
"android.view.View.destroyDrawingCache () "," Frees the resources used by the drawing cache. <br /><br />"
"android.view.View.Animation () "," Start the specified animation now. <br /><br />"
"android.view.View.getCameraDistance () "," Gets the distance along the Z axis from the camera to this view. <br /><br />"
"android.view.View.KEEP_SCREEN_ON () "," Returns whether the screen should remain on, corresponding to the current value of KEEP_SCREEN_ON. <br /><br />"
"android.view.View.setElevation (float elevation) "," Sets the base elevation of this view, in pixels. <br /><br />"
"android.view.View.dispatchNestedPreFling (float velocityX, float velocityY) "," Dispatch a fling to a nested scrolling parent before it is processed by this view. <br /><br />"
"android.view.View.FOCUS_DOWN () "," Gets the id of the view to use when the next focus is FOCUS_DOWN. <br /><br />"
"android.view.View.isTextDirectionResolved () "," no description <br /><br />"
"android.view.View.canScrollHorizontally (int direction) "," Check if this view can be scrolled horizontally in a certain direction. <br /><br />"
"android.view.View.hasFocusable () () "," Returns true if this view is focusable or if it contains a reachable View for which hasFocusable() returns true. <br /><br />"
"android.view.View.setTextDirection (int textDirection) "," Set the text direction. <br /><br />"
"android.view.View.isOpaque () "," Indicates whether this View is opaque. <br /><br />"
"android.view.View.dispatchDisplayHint (int hint) "," Dispatch a hint about whether this view is displayed. <br /><br />"
"android.view.View.setScrollBarSize (int scrollBarSize) "," Define the scrollbar size. <br /><br />"
"android.view.View.setScaleX (float scaleX) "," Sets the amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width. <br /><br />"
"android.view.View.getDisplay () "," Gets the logical display to which the view's window has been attached. <br /><br />"
"android.view.View.WindowInsets () "," Called when the view should apply WindowInsets according to its internal policy. <br /><br />"
"android.view.View.getLocationInWindow (int[] location) "," Computes the coordinates of this view in its window. <br /><br />"
"android.view.View.getPaddingEnd () "," Returns the end padding of this view depending on its resolved layout direction. <br /><br />"
"android.view.View.setDuplicateParentStateEnabled (boolean enabled) "," Enables or disables the duplication of the parent's state into this view. <br /><br />"
"android.view.View.measure (int, int) () "," Return the full width measurement information for this view as computed by the most recent call to measure(int, int). <br /><br />"
"android.view.View.scaled () "," The y location of the point around which the view is rotated and scaled. <br /><br />"
"android.view.View.setScrollY (int value) "," Set the vertical scrolled position of your view. <br /><br />"
"android.view.View.setCameraDistance (float distance) "," Sets the distance along the Z axis (orthogonal to the X/Y plane on which views are drawn) from the camera to this view. <br /><br />"
"android.view.View.setBackgroundColor (int color) "," Sets the background color for this view. <br /><br />"
"android.view.View.setLabelFor (int id) "," Sets the id of a view for which this view serves as a label for accessibility purposes. <br /><br />"
"android.view.View.getTextAlignment () "," Return the resolved text alignment. <br /><br />"
"android.view.View.offsetLeftAndRight (int offset) "," Offset this view's horizontal location by the specified amount of pixels. <br /><br />"
"android.view.View.setScrollContainer (boolean isScrollContainer) "," Change whether this view is one of the set of scrollable containers in its window. <br /><br />"
"android.view.View.setHorizontalFadingEdgeEnabled (boolean horizontalFadingEdgeEnabled) "," Define whether the horizontal edges should be faded when this view is scrolled horizontally. <br /><br />"
"android.view.View.setPaddingRelative (int start, int top, int end, int bottom) "," Sets the relative padding. <br /><br />"
"android.view.View.isInLayout () "," Returns whether the view hierarchy is currently undergoing a layout pass. <br /><br />"
"android.view.View.scrollTo (int x, int y) "," Set the scrolled position of your view. <br /><br />"
"android.view.View.onWindowSystemUiVisibilityChanged (int) (int visible) "," Dispatch callbacks to onWindowSystemUiVisibilityChanged(int) down the view hierarchy. <br /><br />"
"android.view.View.KeyEvent.Callback.onKeyMultiple () () "," Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event). <br /><br />"
"android.view.View.left () "," The horizontal location of this view relative to its left position. <br /><br />"
"android.view.View.getBackgroundTintMode () "," Return the blending mode used to apply the tint to the background drawable, if specified. <br /><br />"
"android.view.View.getWindowSystemUiVisibility () "," Returns the current system UI visibility that is currently set for the entire window. <br /><br />"
"android.view.View.getScrollBarFadeDuration () "," Returns the scrollbar fade duration. <br /><br />"
"android.view.View.setVerticalScrollBarEnabled (boolean verticalScrollBarEnabled) "," Define whether the vertical scrollbar should be drawn or not. <br /><br />"
"android.view.View.onScreenStateChanged (int screenState) "," This method is called whenever the state of the screen this view is attached to changes. <br /><br />"
"android.view.View.getDrawingCache () "," Calling this method is equivalent to calling getDrawingCache(false). <br /><br />"
"android.view.View.setDrawingCacheBackgroundColor (int color) "," Setting a solid background color for the drawing cache's bitmaps will improve performance and memory usage. <br /><br />"
"android.view.View.setBackgroundResource (int resid) "," Set the background to a given resource. <br /><br />"
"android.view.View.setTop (int top) "," Sets the top position of this view relative to its parent. <br /><br />"
"android.view.View.setLayoutDirection (int layoutDirection) "," Set the layout direction for this view. <br /><br />"
"android.view.View.getScaleY () "," The amount that the view is scaled in y around the pivot point, as a proportion of the view's unscaled height. <br /><br />"
"android.view.View.findViewById (int id) "," Look for a child view with the given id. <br /><br />"
"android.view.View.Runnable () "," Cancels a scheduled action on a drawable. <br /><br />"
"android.view.View.MeasureSpec.getSize (int measureSpec) "," Extracts the size from the supplied measure specification. <br /><br />"
"android.view.View.MeasureSpec.toString (int measureSpec) "," Returns a String representation of the specified measure specification. <br /><br />"
"android.view.View.MeasureSpec.getMode (int measureSpec) "," Extracts the mode from the supplied measure specification. <br /><br />"
"android.view.View.MeasureSpec.makeMeasureSpec (int size, int mode) "," Creates a measure specification based on the supplied size and mode. <br /><br />"
"android.view.View.OnApplyWindowInsetsListener.onApplyWindowInsets () "," When set on a View, this listener method will be called instead of the view's own onApplyWindowInsets method. <br /><br />"
"android.view.View.OnAttachStateChangeListener.View () "," Called when the view is detached from a window. <br /><br />"
"android.view.View.OnClickListener.View () "," Called when a view has been clicked. <br /><br />"
"android.view.View.OnCreateContextMenuListener.ContextMenu.ContextMenuInfo () "," Called when the context menu for this view is being built. <br /><br />"
"android.view.View.OnDragListener.DragEvent () "," Called when a drag event is dispatched to a view. <br /><br />"
"android.view.View.OnFocusChangeListener.View () "," Called when the focus state of a view has changed. <br /><br />"
"android.view.View.OnGenericMotionListener.MotionEvent () "," Called when a generic motion event is dispatched to a view. <br /><br />"
"android.view.View.OnHoverListener.MotionEvent () "," Called when a hover event is dispatched to a view. <br /><br />"
"android.view.View.OnKeyListener.KeyEvent () "," Called when a hardware key is dispatched to a view. <br /><br />"
"android.view.View.OnLayoutChangeListener.View () "," Called when the layout bounds of a view changes due to layout processing. <br /><br />"
"android.view.View.OnLongClickListener.View () "," Called when a view has been clicked and held. <br /><br />"
"android.view.View.OnSystemUiVisibilityChangeListener.setSystemUiVisibility (int) (int visibility) "," Called when the status bar changes visibility because of a call to setSystemUiVisibility(int). <br /><br />"
"android.view.View.OnTouchListener.MotionEvent () "," Called when a touch event is dispatched to a view. <br /><br />"
"android.view.ViewAnimationUtils.View () "," Returns an Animator which can animate a clipping circle. <br /><br />"
"android.view.ViewConfiguration.getScaledWindowTouchSlop () () "," This method was deprecated in API level 3. Use getScaledWindowTouchSlop() instead. <br /><br />"
"android.view.ViewConfiguration.getScaledMaximumDrawingCacheSize () "," The maximum drawing cache size expressed in bytes. <br /><br />"
"android.view.ViewConfiguration.getScrollFriction () "," The amount of friction applied to scrolls and flings. <br /><br />"
"android.view.ViewConfiguration.getScaledPagingTouchSlop () "," no description <br /><br />"
"android.view.ViewConfiguration.getJumpTapTimeout () "," no description <br /><br />"
"android.view.ViewConfiguration.getKeyRepeatTimeout () "," no description <br /><br />"
"android.view.ViewConfiguration.getPressedStateDuration () "," no description <br /><br />"
"android.view.ViewConfiguration.getScaledMaximumDrawingCacheSize () () "," This method was deprecated in API level 3. Use getScaledMaximumDrawingCacheSize() instead. <br /><br />"
"android.view.ViewConfiguration.getScaledMaximumFlingVelocity () () "," This method was deprecated in API level 4. Use getScaledMaximumFlingVelocity() instead. <br /><br />"
"android.view.ViewConfiguration.getScaledFadingEdgeLength () "," no description <br /><br />"
"android.view.ViewConfiguration.getZoomControlsTimeout () "," The amount of time that the zoom controls should be displayed on the screen expressed in milliseconds. <br /><br />"
"android.view.ViewConfiguration.getTapTimeout () "," no description <br /><br />"
"android.view.ViewConfiguration.getScaledDoubleTapSlop () "," no description <br /><br />"
"android.view.ViewConfiguration.getScrollDefaultDelay () "," no description <br /><br />"
"android.view.ViewConfiguration.getScaledScrollBarSize () () "," This method was deprecated in API level 3. Use getScaledScrollBarSize() instead. <br /><br />"
"android.view.ViewConfiguration.getScaledOverscrollDistance () "," no description <br /><br />"
"android.view.ViewConfiguration.getScaledTouchSlop () () "," This method was deprecated in API level 3. Use getScaledTouchSlop() instead. <br /><br />"
"android.view.ViewConfiguration.getDoubleTapTimeout () "," no description <br /><br />"
"android.view.ViewConfiguration.getScaledFadingEdgeLength () () "," This method was deprecated in API level 3. Use getScaledFadingEdgeLength() instead. <br /><br />"
"android.view.ViewConfiguration.getScaledTouchSlop () "," no description <br /><br />"
"android.view.ViewConfiguration.getKeyRepeatDelay () "," no description <br /><br />"
"android.view.ViewConfiguration.getScaledMinimumFlingVelocity () () "," This method was deprecated in API level 3. Use getScaledMinimumFlingVelocity() instead. <br /><br />"
"android.view.ViewConfiguration.getScaledEdgeSlop () "," no description <br /><br />"
"android.view.ViewConfiguration.getScaledOverflingDistance () "," no description <br /><br />"
"android.view.ViewConfiguration.getScaledMinimumFlingVelocity () "," no description <br /><br />"
"android.view.ViewConfiguration.getScaledScrollBarSize () "," no description <br /><br />"
"android.view.ViewConfiguration.getScaledWindowTouchSlop () "," no description <br /><br />"
"android.view.ViewConfiguration.getLongPressTimeout () "," no description <br /><br />"
"android.view.ViewConfiguration.Context () "," Returns a configuration for the specified context. <br /><br />"
"android.view.ViewConfiguration.getScaledEdgeSlop () () "," This method was deprecated in API level 3. Use getScaledEdgeSlop() instead. <br /><br />"
"android.view.ViewConfiguration.getScrollBarFadeDuration () "," no description <br /><br />"
"android.view.ViewConfiguration.getGlobalActionKeyTimeout () "," This method was deprecated in API level 20. This timeout should not be used by applications <br /><br />"
"android.view.ViewConfiguration.hasPermanentMenuKey () "," Report if the device has a permanent menu key available to the user. <br /><br />"
"android.view.ViewConfiguration.getScaledMaximumFlingVelocity () "," no description <br /><br />"
"android.view.ViewDebug.ViewDebug.HierarchyTraceType () "," This method was deprecated in API level 16. This method is now unused and invoking it is a no-op <br /><br />"
"android.view.ViewDebug.stopRecyclerTracing () "," This method was deprecated in API level 16. This method is now unused and invoking it is a no-op <br /><br />"
"android.view.ViewDebug.stopHierarchyTracing () "," This method was deprecated in API level 16. This method is now unused and invoking it is a no-op <br /><br />"
"android.view.ViewDebug.ViewDebug.RecyclerTraceType () "," This method was deprecated in API level 16. This method is now unused and invoking it is a no-op <br /><br />"
"android.view.ViewDebug.Object () "," Dump view info for id based instrument test generation (and possibly further data analysis). <br /><br />"
"android.view.ViewDebug.View () "," This method was deprecated in API level 16. This method is now unused and invoking it is a no-op <br /><br />"
"android.view.ViewGroup.AttributeSet () "," Returns a new set of layout parameters based on the supplied attributes set. <br /><br />"
"android.view.ViewGroup.LayoutAnimationController () "," Sets the layout animation controller used to animate the group's children after the first layout. <br /><br />"
"android.view.ViewGroup.removeAllViewsInLayout () "," Called by a ViewGroup subclass to remove child views from itself, when it must first know its size on screen before it can calculate how many child views it will render. <br /><br />"
"android.view.ViewGroup.removeViewAt (int index) "," Removes the view at the specified position in the group. <br /><br />"
"android.view.ViewGroup.ViewGroup.OnHierarchyChangeListener () "," Register a callback to be invoked when a child is added to or removed from this view. <br /><br />"
"android.view.ViewGroup.hasTransientState () "," Indicates whether the view is currently tracking transient state that the app should not need to concern itself with saving and restoring, but that the framework should take special note to preserve when possible. <br /><br />"
"android.view.ViewGroup.getPersistentDrawingCache () "," Returns an integer indicating what types of drawing caches are kept in memory. <br /><br />"
"android.view.ViewGroup.getTouchscreenBlocksFocus () "," Check whether this ViewGroup should ignore focus requests for itself and its children. <br /><br />"
"android.view.ViewGroup.getNestedScrollAxes () "," Return the current axes of nested scrolling for this ViewGroup. <br /><br />"
"android.view.ViewGroup.setDescendantFocusability (int focusability) "," Set the descendant focusability of this view group. <br /><br />"
"android.view.ViewGroup.DragEvent () "," Detects if this View is enabled and has a drag event listener. <br /><br />"
"android.view.ViewGroup.setDuplicateParentStateEnabled (boolean) (float x, float y) "," Dispatches drawable hotspot changes to child views that meet at least one of the following criteria:  Returns false from both isClickable() and isLongClickable() Requests duplication of parent state via setDuplicateParentStateEnabled(boolean) <br /><br />"
"android.view.ViewGroup.LAYOUT_MODE_OPTICAL_BOUNDS () "," Returns the basis of alignment during layout operations on this ViewGroup: either LAYOUT_MODE_CLIP_BOUNDS or LAYOUT_MODE_OPTICAL_BOUNDS. <br /><br />"
"android.view.ViewGroup.setMotionEventSplittingEnabled (boolean split) "," Enable or disable the splitting of MotionEvents to multiple children during touch event dispatch. <br /><br />"
"android.view.ViewGroup.ActionMode.Callback () "," Start an action mode for the specified view. <br /><br />"
"android.view.ViewGroup.isMotionEventSplittingEnabled () "," Returns true if MotionEvents dispatched to this ViewGroup can be split to multiple children. <br /><br />"
"android.view.ViewGroup.Region () "," This is used by the RootView to perform an optimization when the view hierarchy contains one or several SurfaceView. <br /><br />"
"android.view.ViewGroup.addStatesFromChildren () "," Returns whether this ViewGroup's drawable states also include its children's drawable states. <br /><br />"
"android.view.ViewGroup.getClipToPadding () "," Returns whether this ViewGroup will clip its children to its padding, if padding is present. <br /><br />"
"android.view.ViewGroup.startLayoutAnimation () "," Runs the layout animation. <br /><br />"
"android.view.ViewGroup.getLayoutAnimation () "," Returns the layout animation controller used to animate the group's children. <br /><br />"
"android.view.ViewGroup.Drawable.jumpToCurrentState () () "," Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view. <br /><br />"
"android.view.ViewGroup.hasFocus () "," Returns true if this view has or contains focus <br /><br />"
"android.view.ViewGroup.removeViewsInLayout (int start, int count) "," Removes a range of views during layout. <br /><br />"
"android.view.ViewGroup.findFocus () "," Find the view in the hierarchy rooted at this view that currently has focus. <br /><br />"
"android.view.ViewGroup.Animation.AnimationListener () "," Specifies the animation listener to which layout animation events must be sent. <br /><br />"
"android.view.ViewGroup.setAnimationCacheEnabled (boolean enabled) "," Enables or disables the children's drawing cache during a layout animation. <br /><br />"
"android.view.ViewGroup.removeAllViews () "," Call this method to remove all child views from the ViewGroup. <br /><br />"
"android.view.ViewGroup.AccessibilityEvent () "," Called by a child to request from its parent to send an AccessibilityEvent. <br /><br />"
"android.view.ViewGroup.dispatchSetSelected (boolean selected) "," Dispatch setSelected to all of this View's children. <br /><br />"
"android.view.ViewGroup.addStatesFromChildren () () "," If addStatesFromChildren() is true, refreshes this group's drawable state (to include the states from its children). <br /><br />"
"android.view.ViewGroup.getLayoutAnimationListener () "," Returns the animation listener to which layout animation events are sent. <br /><br />"
"android.view.ViewGroup.dispatchDraw (android.graphics.Canvas) () "," Note: do not invoke this method from draw(android.graphics.Canvas), onDraw(android.graphics.Canvas), dispatchDraw(android.graphics.Canvas) or any related method. <br /><br />"
"android.view.ViewGroup.Point () "," Compute the visible part of a rectangular region defined in terms of a child view's coordinates. <br /><br />"
"android.view.ViewGroup.getChildMeasureSpec (int spec, int padding, int childDimension) "," Does the hard part of measureChildren: figuring out the MeasureSpec to pass to a particular child. <br /><br />"
"android.view.ViewGroup.clearDisappearingChildren () "," Removes any pending animations for views that have been removed. <br /><br />"
"android.view.ViewGroup.setTransitionGroup (boolean isTransitionGroup) "," Changes whether or not this ViewGroup should be treated as a single entity during Activity Transitions. <br /><br />"
"android.view.ViewGroup.MotionEvent () "," Implement this method to intercept all touch screen motion events. <br /><br />"
"android.view.ViewGroup.removeViews (int start, int count) "," Removes the specified range of views from the group. <br /><br />"
"android.view.ViewGroup.getDescendantFocusability () "," Gets the descendant focusability of this view group. <br /><br />"
"android.view.ViewGroup.setClipChildren (boolean clipChildren) "," By default, children are clipped to their bounds before drawing. <br /><br />"
"android.view.ViewGroup.setOnSystemUiVisibilityChangeListener (View.OnSystemUiVisibilityChangeListener) (int visible) "," Dispatch callbacks to setOnSystemUiVisibilityChangeListener(View.OnSystemUiVisibilityChangeListener) down the view hierarchy. <br /><br />"
"android.view.ViewGroup.setAddStatesFromChildren (boolean addsStates) "," Sets whether this ViewGroup's drawable states also include its children's drawable states. <br /><br />"
"android.view.ViewGroup.onInterceptTouchEvent (MotionEvent) (boolean disallowIntercept) "," Called when a child does not want this parent and its ancestors to intercept touch events with onInterceptTouchEvent(MotionEvent). <br /><br />"
"android.view.ViewGroup.Rect () "," Called when a child of this group wants a particular rectangle to be positioned onto the screen. <br /><br />"
"android.view.ViewGroup.hasFocusable () () "," Returns true if this view is focusable or if it contains a reachable View for which hasFocusable() returns true. <br /><br />"
"android.view.ViewGroup.getFocusedChild () "," Returns the focused child of this view, if any. <br /><br />"
"android.view.ViewGroup.getChildAt (int index) "," Returns the view at the specified position in the group. <br /><br />"
"android.view.ViewGroup.setLayoutMode (int layoutMode) "," Sets the basis of alignment during the layout of this ViewGroup. <br /><br />"
"android.view.ViewGroup.dispatchDisplayHint (int hint) "," Dispatch a hint about whether this view is displayed. <br /><br />"
"android.view.ViewGroup.WindowInsets () "," Request to apply the given window insets to this view or another view in its subtree. <br /><br />"
"android.view.ViewGroup.Configuration () "," Dispatch a notification about a resource configuration change down the view hierarchy. <br /><br />"
"android.view.ViewGroup.clearFocus () "," Called when this view wants to give up focus. <br /><br />"
"android.view.ViewGroup.dispatchSetActivated (boolean activated) "," Dispatch setActivated to all of this View's children. <br /><br />"
"android.view.ViewGroup.startViewTransition (View) () "," This method should always be called following an earlier call to startViewTransition(View). <br /><br />"
"android.view.ViewGroup.getOverlay () "," Returns the ViewGroupOverlay for this view group, creating it if it does not yet exist. <br /><br />"
"android.view.ViewGroup.isTransitionGroup () "," Returns true if this ViewGroup should be considered as a single entity for removal when executing an Activity transition. <br /><br />"
"android.view.ViewGroup.shouldDelayChildPressedState () "," Return true if the pressed state should be delayed for children or descendants of this ViewGroup. <br /><br />"
"android.view.ViewGroup.getDescendantFocusability () () "," Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from. Looks for a view to give focus to respecting the setting specified by getDescendantFocusability(). <br /><br />"
"android.view.ViewGroup.scheduleLayoutAnimation () "," Schedules the layout animation to be played after the next layout pass of this view group. <br /><br />"
"android.view.ViewGroup.onWindowSystemUiVisibilityChanged (int) (int visible) "," Dispatch callbacks to onWindowSystemUiVisibilityChanged(int) down the view hierarchy. <br /><br />"
"android.view.ViewGroup.dispatchWindowFocusChanged (boolean hasFocus) "," Called when the window containing this view gains or loses window focus. <br /><br />"
"android.view.ViewGroup.CharSequence () "," Finds the Views that contain given text. <br /><br />"
"android.view.ViewGroup.layout (int l, int t, int r, int b) "," Assign a size and position to a view and all of its descendants This is the second phase of the layout mechanism. <br /><br />"
"android.view.ViewGroup.getLayoutTransition () "," Gets the LayoutTransition object for this ViewGroup. <br /><br />"
"android.view.ViewGroup.setPersistentDrawingCache (int drawingCacheToKeep) "," Indicates what types of drawing caches should be kept in memory after they have been created. <br /><br />"
"android.view.ViewGroup.LayoutTransition () "," Sets the LayoutTransition object for this ViewGroup. <br /><br />"
"android.view.ViewGroup.View () "," This method tells the ViewGroup that the given View object, which should have this ViewGroup as its parent, should be kept around (re-displayed when the ViewGroup draws its children) even if it is removed from its parent. <br /><br />"
"android.view.ViewGroup.setClipToPadding (boolean clipToPadding) "," Sets whether this ViewGroup will clip its children to its padding, if padding is present. <br /><br />"
"android.view.ViewGroup.isAnimationCacheEnabled () "," Indicates whether the children's drawing cache is used during a layout animation. <br /><br />"
"android.view.ViewGroup.setTouchscreenBlocksFocus (boolean touchscreenBlocksFocus) "," Set whether this ViewGroup should ignore focus requests for itself and its children. <br /><br />"
"android.view.ViewGroup.isAlwaysDrawnWithCacheEnabled () "," Indicates whether this ViewGroup will always try to draw its children using their drawing cache. <br /><br />"
"android.view.ViewGroup.ViewGroup.LayoutParams () ","  <br /><br />"
"android.view.ViewGroup.setAlwaysDrawnWithCacheEnabled (boolean always) "," Indicates whether this ViewGroup will always try to draw its children using their drawing cache. <br /><br />"
"android.view.ViewGroup.KeyEvent () "," Dispatches a key shortcut event. <br /><br />"
"android.view.ViewGroup.getChildCount () "," Returns the number of children in the group. <br /><br />"
"android.view.ViewGroup.dispatchWindowVisibilityChanged (int visibility) "," Dispatch a window visibility change down the view hierarchy. <br /><br />"
"android.view.ViewGroup.Bundle () "," React to an accessibility action delegated by a target descendant view before the target processes it. Subclasses should always call super.onNestedPrePerformAccessibilityAction <br /><br />"
"android.view.ViewGroup.getClipChildren () "," Returns whether this group's children are clipped to their bounds before drawing. <br /><br />"
"android.view.ViewGroup.LayoutParams.resolveLayoutDirection (int layoutDirection) "," Resolve layout parameters depending on the layout direction. <br /><br />"
"android.view.ViewGroup.MarginLayoutParams.getLayoutDirection () "," Retuns the layout direction. <br /><br />"
"android.view.ViewGroup.MarginLayoutParams.getMarginEnd () "," Returns the end margin in pixels. <br /><br />"
"android.view.ViewGroup.MarginLayoutParams.setMarginStart (int start) "," Sets the relative start margin. <br /><br />"
"android.view.ViewGroup.MarginLayoutParams.getMarginStart () "," Returns the start margin in pixels. <br /><br />"
"android.view.ViewGroup.MarginLayoutParams.isMarginRelative () "," Check if margins are relative. <br /><br />"
"android.view.ViewGroup.MarginLayoutParams.setLayoutDirection (int layoutDirection) "," Set the layout direction <br /><br />"
"android.view.ViewGroup.MarginLayoutParams.setMargins (int left, int top, int right, int bottom) "," Sets the margins, in pixels. <br /><br />"
"android.view.ViewGroup.MarginLayoutParams.setMarginEnd (int end) "," Sets the relative end margin. <br /><br />"
"android.view.ViewGroup.MarginLayoutParams.requestLayout () (int layoutDirection) "," This will be called by requestLayout(). <br /><br />"
"android.view.ViewGroup.OnHierarchyChangeListener.View () "," Called when a child is removed from a parent view. <br /><br />"
"android.view.ViewGroupOverlay.View () "," Removes the specified View from the overlay. <br /><br />"
"android.view.ViewManager.ViewGroup.LayoutParams () "," no description <br /><br />"
"android.view.ViewManager.View () "," no description <br /><br />"
"android.view.ViewOutlineProvider.Outline () "," Called to get the provider to populate the Outline. <br /><br />"
"android.view.ViewOverlay.Drawable () "," Removes the specified Drawable from the overlay. <br /><br />"
"android.view.ViewOverlay.clear () "," Removes all content from the overlay. <br /><br />"
"android.view.ViewParent.getLayoutDirection () "," Return this view parent layout direction. <br /><br />"
"android.view.ViewParent.canResolveLayoutDirection () "," Tells if this view parent can resolve the layout direction. <br /><br />"
"android.view.ViewParent.getTextDirection () "," Return this view parent text direction. <br /><br />"
"android.view.ViewParent.getTextAlignment () "," Return this view parent text alignment. <br /><br />"
"android.view.ViewParent.View.fitSystemWindows (Rect) () "," Ask that a new dispatch of View.fitSystemWindows(Rect) be performed. <br /><br />"
"android.view.ViewParent.requestLayout () "," Called when something has changed which has invalidated the layout of a child of this view parent. <br /><br />"
"android.view.ViewParent.getParentForAccessibility () "," Gets the parent of a given View for accessibility. <br /><br />"
"android.view.ViewParent.View () "," Bring up a context menu for the specified view or its ancestors. <br /><br />"
"android.view.ViewParent.onInterceptTouchEvent (MotionEvent) (boolean disallowIntercept) "," Called when a child does not want this parent and its ancestors to intercept touch events with onInterceptTouchEvent(MotionEvent). <br /><br />"
"android.view.ViewParent.isTextDirectionResolved () "," Tells if this view parent text direction is resolved. <br /><br />"
"android.view.ViewParent.Rect () "," Called when a child of this group wants a particular rectangle to be positioned onto the screen. <br /><br />"
"android.view.ViewParent.canResolveTextAlignment () "," Tells if this view parent can resolve the text alignment. <br /><br />"
"android.view.ViewParent.ContextMenu () "," Have the parent populate the specified context menu if it has anything to add (and then recurse on its parent). <br /><br />"
"android.view.ViewParent.canResolveTextDirection () "," Tells if this view parent can resolve the text direction. <br /><br />"
"android.view.ViewParent.AccessibilityEvent () "," Called by a child to request from its parent to send an AccessibilityEvent. <br /><br />"
"android.view.ViewParent.getParent () "," Returns the parent if it exists, or null. <br /><br />"
"android.view.ViewParent.isLayoutRequested () "," Indicates whether layout was requested on this view parent. <br /><br />"
"android.view.ViewParent.ActionMode.Callback () "," Start an action mode for the specified view. <br /><br />"
"android.view.ViewParent.Bundle () "," React to an accessibility action delegated by a target descendant view before the target processes it. <br /><br />"
"android.view.ViewParent.isLayoutDirectionResolved () "," Tells if this view parent layout direction is resolved. <br /><br />"
"android.view.ViewParent.Point () "," Compute the visible part of a rectangular region defined in terms of a child view's coordinates. <br /><br />"
"android.view.ViewParent.isTextAlignmentResolved () "," Tells if this view parent text alignment is resolved. <br /><br />"
"android.view.ViewPropertyAnimator.translationZ (float value) "," This method will cause the View's translationZ property to be animated to the specified value. <br /><br />"
"android.view.ViewPropertyAnimator.setDuration (long duration) "," Sets the duration for the underlying animator that animates the requested properties. <br /><br />"
"android.view.ViewPropertyAnimator.scaleXBy (float value) "," This method will cause the View's scaleX property to be animated by the specified value. <br /><br />"
"android.view.ViewPropertyAnimator.translationX (float value) "," This method will cause the View's translationX property to be animated to the specified value. <br /><br />"
"android.view.ViewPropertyAnimator.rotationX (float value) "," This method will cause the View's rotationX property to be animated to the specified value. <br /><br />"
"android.view.ViewPropertyAnimator.alphaBy (float value) "," This method will cause the View's alpha property to be animated by the specified value. <br /><br />"
"android.view.ViewPropertyAnimator.setStartDelay (long startDelay) "," Sets the startDelay for the underlying animator that animates the requested properties. <br /><br />"
"android.view.ViewPropertyAnimator.Animator.AnimatorListener () "," Sets a listener for events in the underlying Animators that run the property animations. <br /><br />"
"android.view.ViewPropertyAnimator.scaleY (float value) "," This method will cause the View's scaleY property to be animated to the specified value. <br /><br />"
"android.view.ViewPropertyAnimator.TimeInterpolator () "," Sets the interpolator for the underlying animator that animates the requested properties. <br /><br />"
"android.view.ViewPropertyAnimator.y (float value) "," This method will cause the View's y property to be animated to the specified value. <br /><br />"
"android.view.ViewPropertyAnimator.cancel () "," Cancels all property animations that are currently running or pending. <br /><br />"
"android.view.ViewPropertyAnimator.translationYBy (float value) "," This method will cause the View's translationY property to be animated by the specified value. <br /><br />"
"android.view.ViewPropertyAnimator.translationZBy (float value) "," This method will cause the View's translationZ property to be animated by the specified value. <br /><br />"
"android.view.ViewPropertyAnimator.getDuration () "," Returns the current duration of property animations. <br /><br />"
"android.view.ViewPropertyAnimator.LAYER_TYPE_HARDWARE () "," The View associated with this ViewPropertyAnimator will have its layer type set to LAYER_TYPE_HARDWARE for the duration of the next animation. <br /><br />"
"android.view.ViewPropertyAnimator.scaleYBy (float value) "," This method will cause the View's scaleY property to be animated by the specified value. <br /><br />"
"android.view.ViewPropertyAnimator.translationXBy (float value) "," This method will cause the View's translationX property to be animated by the specified value. <br /><br />"
"android.view.ViewPropertyAnimator.rotation (float value) "," This method will cause the View's rotation property to be animated to the specified value. <br /><br />"
"android.view.ViewPropertyAnimator.rotationYBy (float value) "," This method will cause the View's rotationY property to be animated by the specified value. <br /><br />"
"android.view.ViewPropertyAnimator.start () "," Starts the currently pending property animations immediately. <br /><br />"
"android.view.ViewPropertyAnimator.rotationXBy (float value) "," This method will cause the View's rotationX property to be animated by the specified value. <br /><br />"
"android.view.ViewPropertyAnimator.getStartDelay () "," Returns the current startDelay of property animations. <br /><br />"
"android.view.ViewPropertyAnimator.z (float value) "," This method will cause the View's z property to be animated to the specified value. <br /><br />"
"android.view.ViewPropertyAnimator.yBy (float value) "," This method will cause the View's y property to be animated by the specified value. <br /><br />"
"android.view.ViewPropertyAnimator.xBy (float value) "," This method will cause the View's x property to be animated by the specified value. <br /><br />"
"android.view.ViewPropertyAnimator.rotationBy (float value) "," This method will cause the View's rotation property to be animated by the specified value. <br /><br />"
"android.view.ViewPropertyAnimator.scaleX (float value) "," This method will cause the View's scaleX property to be animated to the specified value. <br /><br />"
"android.view.ViewPropertyAnimator.translationY (float value) "," This method will cause the View's translationY property to be animated to the specified value. <br /><br />"
"android.view.ViewPropertyAnimator.alpha (float value) "," This method will cause the View's alpha property to be animated to the specified value. <br /><br />"
"android.view.ViewPropertyAnimator.x (float value) "," This method will cause the View's x property to be animated to the specified value. <br /><br />"
"android.view.ViewPropertyAnimator.zBy (float value) "," This method will cause the View's z property to be animated by the specified value. <br /><br />"
"android.view.ViewPropertyAnimator.rotationY (float value) "," This method will cause the View's rotationY property to be animated to the specified value. <br /><br />"
"android.view.ViewPropertyAnimator.getInterpolator () "," Returns the timing interpolator that this animation uses. <br /><br />"
"android.view.ViewPropertyAnimator.ValueAnimator.AnimatorUpdateListener () "," Sets a listener for update events in the underlying ValueAnimator that runs the property animations. <br /><br />"
"android.view.ViewPropertyAnimator.Runnable () "," Specifies an action to take place when the next animation runs. <br /><br />"
"android.view.ViewStub.getLayoutResource () () "," Inflates the layout resource identified by getLayoutResource() and replaces this StubbedView in its parent by the inflated layout resource. <br /><br />"
"android.view.ViewStub.inflate () () "," Set LayoutInflater to use in inflate(), or null to use the default. <br /><br />"
"android.view.ViewStub.getInflatedId () "," Returns the id taken by the inflated view. <br /><br />"
"android.view.ViewStub.ViewStub.OnInflateListener () "," Specifies the inflate listener to be notified after this ViewStub successfully inflated its layout resource. <br /><br />"
"android.view.ViewStub.Canvas () "," Manually render this view (and all of its children) to the given Canvas. <br /><br />"
"android.view.ViewStub.setInflatedId (int inflatedId) "," Defines the id taken by the inflated view. <br /><br />"
"android.view.ViewStub.inflate () (int visibility) "," When visibility is set to VISIBLE or INVISIBLE, inflate() is invoked and this StubbedView is replaced in its parent by the inflated layout resource. <br /><br />"
"android.view.ViewStub.inflate () (int layoutResource) "," Specifies the layout resource to inflate when this StubbedView becomes visible or invisible or when inflate() is invoked. <br /><br />"
"android.view.ViewStub.OnInflateListener.View () "," Invoked after a ViewStub successfully inflated its layout resource. <br /><br />"
"android.view.ViewTreeObserver.OnDrawListener.onDraw () "," Callback method to be invoked when the view tree is about to be drawn. <br /><br />"
"android.view.ViewTreeObserver.OnGlobalFocusChangeListener.View () "," Callback method to be invoked when the focus changes in the view tree. <br /><br />"
"android.view.ViewTreeObserver.OnGlobalLayoutListener.onGlobalLayout () "," Callback method to be invoked when the global layout state or the visibility of views within the view tree changes <br /><br />"
"android.view.ViewTreeObserver.OnPreDrawListener.onPreDraw () "," Callback method to be invoked when the view tree is about to be drawn. <br /><br />"
"android.view.ViewTreeObserver.OnScrollChangedListener.onScrollChanged () "," Callback method to be invoked when something in the view tree has been scrolled. <br /><br />"
"android.view.ViewTreeObserver.OnTouchModeChangeListener.onTouchModeChanged (boolean isInTouchMode) "," Callback method to be invoked when the touch mode changes. <br /><br />"
"android.view.ViewTreeObserver.OnWindowAttachListener.onWindowAttached () "," Callback method to be invoked when the view hierarchy is attached to a window <br /><br />"
"android.view.ViewTreeObserver.OnWindowAttachListener.onWindowDetached () "," Callback method to be invoked when the view hierarchy is detached from a window <br /><br />"
"android.view.ViewTreeObserver.OnWindowFocusChangeListener.onWindowFocusChanged (boolean hasFocus) "," Callback method to be invoked when the window focus changes in the view tree. <br /><br />"
"android.view.Window.Callback.WindowManager.LayoutParams () "," This is called whenever the current window attributes change. <br /><br />"
"android.view.Window.Callback.onSearchRequested () "," Called when the user signals the desire to start a search. <br /><br />"
"android.view.Window.Callback.onDetachedFromWindow () "," Called when the window has been attached to the window manager. <br /><br />"
"android.view.Window.Callback.onWindowFocusChanged (boolean hasFocus) "," This hook is called whenever the window focus changes. <br /><br />"
"android.view.Window.Callback.onAttachedToWindow () "," Called when the window has been attached to the window manager. <br /><br />"
"android.view.Window.Callback.KeyEvent () "," Called to process a key shortcut event. <br /><br />"
"android.view.Window.Callback.MotionEvent () "," Called to process trackball events. <br /><br />"
"android.view.Window.Callback.onCreatePanelView (int featureId) "," Instantiate the view to display in the panel for 'featureId'. <br /><br />"
"android.view.Window.Callback.ActionMode () "," Called when an action mode has been started. <br /><br />"
"android.view.Window.Callback.AccessibilityEvent () "," Called to process population of AccessibilityEvents. <br /><br />"
"android.view.Window.Callback.ActionMode.Callback () "," Called when an action mode is being started for this window. <br /><br />"
"android.view.Window.Callback.MenuItem () "," Called when a panel's menu item has been selected by the user. <br /><br />"
"android.view.Window.Callback.Menu () "," Prepare a panel to be displayed. <br /><br />"
"android.view.Window.Callback.Window.addContentView () "," This hook is called whenever the content view of the screen changes (due to a call to Window.setContentView or Window.addContentView). <br /><br />"
"android.view.Window.getExitTransition () "," Returns the Transition that will be used to move Views out of the scene when starting a new Activity. <br /><br />"
"android.view.Window.getSharedElementEnterTransition () "," Returns the Transition that will be used for shared elements transferred into the content Scene. <br /><br />"
"android.view.Window.getCallback () "," Return the current Callback interface for this window. <br /><br />"
"android.view.Window.setContentView (View, android.view.ViewGroup.LayoutParams) () "," Convenience for setContentView(View, android.view.ViewGroup.LayoutParams) set the screen content to an explicit view. <br /><br />"
"android.view.Window.performContextMenuIdentifierAction (int id, int flags) "," no description <br /><br />"
"android.view.Window.TransitionManager () "," Set the TransitionManager to use for default transitions in this window. <br /><br />"
"android.view.Window.FLAG_DIM_BEHIND (float amount) "," Set the amount of dim behind the window when using FLAG_DIM_BEHIND. <br /><br />"
"android.view.Window.setFeatureDrawableResource (int featureId, int resId) "," Set the value for a drawable feature of this window, from a resource identifier. <br /><br />"
"android.view.Window.setExitTransition (android.transition.Transition) (boolean allow) "," Controls how the transition set in setExitTransition(android.transition.Transition) overlaps with the exit transition of the called Activity when reentering after if finishes. <br /><br />"
"android.view.Window.Drawable () "," Set an explicit Drawable value for feature of this window. <br /><br />"
"android.view.Window.peekDecorView () "," Retrieve the current decor view, but only if it has already been created; otherwise returns null. <br /><br />"
"android.view.Window.setLogo (int resId) "," Set the logo for this window. <br /><br />"
"android.view.Window.setIcon (int resId) "," Set the primary icon for this window. <br /><br />"
"android.view.Window.onCreate (Bundle) (int id) "," Finds a view that was identified by the id attribute from the XML that was processed in onCreate(Bundle). <br /><br />"
"android.view.Window.getContext () "," Return the Context this window policy is running in, for retrieving resources and other information. <br /><br />"
"android.view.Window.setTransitionBackgroundFadeDuration (long fadeDurationMillis) "," Sets the duration, in milliseconds, of the window background fade when transitioning into or away from an Activity when called with an Activity Transition. <br /><br />"
"android.view.Window.takeKeyEvents (boolean get) "," Request that key events come to this activity. <br /><br />"
"android.view.Window.setChildInt (int featureId, int value) "," no description <br /><br />"
"android.view.Window.setFlags (int, int) (int flags) "," Convenience function to clear the flag bits as specified in flags, as per setFlags(int, int). <br /><br />"
"android.view.Window.setUiOptions (int uiOptions) "," Set extra options that will influence the UI for this window. <br /><br />"
"android.view.Window.getDecorView () "," Retrieve the top-level window decor view (containing the standard window frame/decorations and the client's content inside of that), which can be added as a window to the window manager. <br /><br />"
"android.view.Window.performPanelIdentifierAction (int featureId, int id, int flags) "," no description <br /><br />"
"android.view.Window.setFormat (int format) "," Set the format of window, as per the PixelFormat types. <br /><br />"
"android.view.Window.WindowManager.LayoutParams () "," Specify custom window attributes. <br /><br />"
"android.view.Window.getWindowManager () "," Return the window manager allowing this Window to display its own windows. <br /><br />"
"android.view.Window.setEnterTransition (android.transition.Transition) () "," Returns how the transition set in setEnterTransition(android.transition.Transition) overlaps with the exit transition of the calling Activity. <br /><br />"
"android.view.Window.makeActive () "," no description <br /><br />"
"android.view.Window.saveHierarchyState () "," no description <br /><br />"
"android.view.Window.getEnterTransition () "," Returns the transition used to move Views into the initial scene. <br /><br />"
"android.view.Window.isActive () "," no description <br /><br />"
"android.view.Window.setSharedElementsUseOverlay (boolean sharedElementsUseOverlay) "," Sets whether or not shared elements should use an Overlay during shared element transitions. <br /><br />"
"android.view.Window.getContainer () "," Return the container for this Window. <br /><br />"
"android.view.Window.setFeatureDrawableAlpha (int featureId, int alpha) "," Set a custom alpha value for the given drawable feature, controlling how much the background is visible through it. <br /><br />"
"android.view.Window.setEnterTransition (android.transition.Transition) (boolean allow) "," Controls how the transition set in setEnterTransition(android.transition.Transition) overlaps with the exit transition of the calling Activity. <br /><br />"
"android.view.Window.requestFeature (int featureId) "," Enable extended screen features. <br /><br />"
"android.view.Window.MotionEvent () "," Used by custom windows, such as Dialog, to pass the trackball event further down the view hierarchy. <br /><br />"
"android.view.Window.windowIsFloating () "," Return whether this window is being displayed with a floating style (based on the windowIsFloating attribute in the style/theme). <br /><br />"
"android.view.Window.MediaController () "," Sets a MediaController to send media keys and volume changes to. <br /><br />"
"android.view.Window.WindowManager.LayoutParams.windowAnimations (int resId) "," Specify custom animations to use for the window, as per WindowManager.LayoutParams.windowAnimations. <br /><br />"
"android.view.Window.setNavigationBarColor (int color) "," Sets the color of the navigation bar to . <br /><br />"
"android.view.Window.setElevation (float elevation) "," Sets the window elevation. <br /><br />"
"android.view.Window.getCurrentFocus () "," Return the view in this Window that currently has focus, or null if there are none. <br /><br />"
"android.view.Window.SurfaceHolder.Callback2 () "," Take ownership of this window's surface. <br /><br />"
"android.view.Window.setGravity (int gravity) "," Set the gravity of the window, as per the Gravity constants. <br /><br />"
"android.view.Window.WindowManager.LayoutParams (int flags, int mask) "," Set the flags of the window, as per the WindowManager.LayoutParams flags. <br /><br />"
"android.view.Window.setType (int type) "," Set the type of the window, as per the WindowManager.LayoutParams types. <br /><br />"
"android.view.Window.setBackgroundDrawableResource (int resId) "," Change the background of this window to a Drawable resource. <br /><br />"
"android.view.Window.closeAllPanels () "," no description <br /><br />"
"android.view.Window.Scene () "," Retrieve the Scene representing this window's current content. <br /><br />"
"android.view.Window.LayoutInflater () "," Quick access to the LayoutInflater instance that this Window retrieved from its Context. <br /><br />"
"android.view.Window.getReenterTransition () "," Returns the Transition that will be used to move Views in to the scene when returning from a previously-started Activity. <br /><br />"
"android.view.Window.hasChildren () "," no description <br /><br />"
"android.view.Window.Configuration () "," Should be called when the configuration is changed. <br /><br />"
"android.view.Window.Window () "," Set the container for this window. <br /><br />"
"android.view.Window.setVolumeControlStream (int streamType) "," no description <br /><br />"
"android.view.Window.setTitleColor (int textColor) "," no description <br /><br />"
"android.view.Window.setClipToOutline (boolean clipToOutline) "," Sets whether window content should be clipped to the outline of the window background. <br /><br />"
"android.view.Window.setLocalFocus (boolean hasFocus, boolean inTouchMode) "," Set focus locally. <br /><br />"
"android.view.Window.setContentView (View, android.view.ViewGroup.LayoutParams) (int layoutResID) "," Convenience for setContentView(View, android.view.ViewGroup.LayoutParams) to set the screen content from a layout resource. <br /><br />"
"android.view.Window.finishAfterTransition () () "," Sets the Transition that will be used to move Views out of the scene when the Window is preparing to close, for example after a call to finishAfterTransition(). <br /><br />"
"android.view.Window.WindowManager.LayoutParams.softInputMode (int mode) "," Specify an explicit soft input mode to use for the window, as per WindowManager.LayoutParams.softInputMode. <br /><br />"
"android.view.Window.Uri () "," Set the value for a drawable feature of this window, from a URI. <br /><br />"
"android.view.Window.String () "," Set the window manager for use by this Window to, for example, display panels. <br /><br />"
"android.view.Window.getSharedElementExitTransition () "," Returns the Transition to use for shared elements in the launching Window prior to transferring to the launched Activity's Window. <br /><br />"
"android.view.Window.Window.Callback () "," Set the Callback interface for this window, used to intercept key events and other dynamic operations in the window. <br /><br />"
"android.view.Window.setFeatureInt (int featureId, int value) "," Set the integer value for a feature. <br /><br />"
"android.view.Window.InputEvent () "," Inject an event to window locally. <br /><br />"
"android.view.Window.setStatusBarColor (int color) "," Sets the color of the status bar to . <br /><br />"
"android.view.Window.getSharedElementReenterTransition () "," Returns the Transition that will be used for shared elements reentering from a started Activity after it has returned the shared element to it start location. <br /><br />"
"android.view.Window.Transition () "," Sets the Transition that will be used for shared elements transferred back to a calling Activity. <br /><br />"
"android.view.Window.invalidatePanelMenu (int featureId) "," no description <br /><br />"
"android.view.Window.CharSequence () "," no description <br /><br />"
"android.view.Window.getSharedElementsUseOverlay () "," Returns true when shared elements should use an Overlay during shared element transitions or false when they should animate as part of the normal View hierarchy. <br /><br />"
"android.view.Window.getNavigationBarColor () "," no description <br /><br />"
"android.view.Window.InputQueue.Callback () "," Take ownership of this window's InputQueue. <br /><br />"
"android.view.Window.Context () "," Return the feature bits set by default on a window. <br /><br />"
"android.view.Window.getAttributes () "," Retrieve the current window attributes associated with this panel. <br /><br />"
"android.view.Window.ViewGroup.LayoutParams () "," Set the screen content to an explicit view. <br /><br />"
"android.view.Window.setExitTransition (android.transition.Transition) () "," Returns how the transition set in setExitTransition(android.transition.Transition) overlaps with the exit transition of the called Activity when reentering after if finishes. <br /><br />"
"android.view.Window.closePanel (int featureId) "," no description <br /><br />"
"android.view.Window.getStatusBarColor () "," no description <br /><br />"
"android.view.Window.KeyEvent () "," no description <br /><br />"
"android.view.Window.getSharedElementReturnTransition () "," Returns the Transition that will be used for shared elements transferred back to a calling Activity. <br /><br />"
"android.view.Window.hasFeature (int feature) "," Query for the availability of a certain feature. <br /><br />"
"android.view.Window.setLayout (int width, int height) "," Set the width and height layout parameters of the window. <br /><br />"
"android.view.Window.getTransitionBackgroundFadeDuration () "," Returns the duration, in milliseconds, of the window background fade when transitioning into or away from an Activity when called with an Activity Transition. <br /><br />"
"android.view.Window.Bundle () "," no description <br /><br />"
"android.view.Window.setUiOptions (int uiOptions, int mask) "," Set extra options that will influence the UI for this window. <br /><br />"
"android.view.Window.getVolumeControlStream () "," no description <br /><br />"
"android.view.WindowAnimationFrameStats.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.view.WindowAnimationFrameStats.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.view.WindowAnimationFrameStats.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.view.WindowContentFrameStats.getFramePostedTimeNano (int index) "," Get the time a frame at a given index was posted by the producer (e.g. <br /><br />"
"android.view.WindowContentFrameStats.getFrameReadyTimeNano (int index) "," Get the time a frame at a given index was ready for presentation. <br /><br />"
"android.view.WindowContentFrameStats.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.view.WindowContentFrameStats.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.view.WindowContentFrameStats.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.view.WindowId.FocusObserver.WindowId () "," Called when one of the monitored windows loses input focus. <br /><br />"
"android.view.WindowId.isFocused () "," Retrieve the current focus state of the associated window. <br /><br />"
"android.view.WindowId.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.view.WindowId.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.view.WindowId.WindowId.FocusObserver () "," Stop monitoring changes in the focus state of the window. <br /><br />"
"android.view.WindowId.Object () "," Comparison operator on two IntentSender objects, such that true is returned then they both represent the same operation from the same package. <br /><br />"
"android.view.WindowId.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.view.WindowId.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.view.WindowInsets.consumeStableInsets () "," Returns a copy of this WindowInsets with the stable insets fully consumed. <br /><br />"
"android.view.WindowInsets.hasStableInsets () "," Returns true if this WindowInsets has nonzero stable insets. <br /><br />"
"android.view.WindowInsets.isRound () "," Returns true if the associated window has a round shape. <br /><br />"
"android.view.WindowInsets.hasSystemWindowInsets () "," Returns true if this WindowInsets has nonzero system window insets. <br /><br />"
"android.view.WindowInsets.consumeSystemWindowInsets () "," Returns a copy of this WindowInsets with the system window insets fully consumed. <br /><br />"
"android.view.WindowInsets.getStableInsetRight () "," Returns the right stable inset in pixels. <br /><br />"
"android.view.WindowInsets.hasInsets () "," Returns true if this WindowInsets has any nonzero insets. <br /><br />"
"android.view.WindowInsets.isConsumed () "," Check if these insets have been fully consumed. <br /><br />"
"android.view.WindowInsets.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.view.WindowInsets.getStableInsetTop () "," Returns the top stable inset in pixels. <br /><br />"
"android.view.WindowInsets.Rect () "," Returns a copy of this WindowInsets with selected system window insets replaced with new values. <br /><br />"
"android.view.WindowInsets.getStableInsetBottom () "," Returns the bottom stable inset in pixels. <br /><br />"
"android.view.WindowInsets.getSystemWindowInsetLeft () "," Returns the left system window inset in pixels. <br /><br />"
"android.view.WindowInsets.getSystemWindowInsetBottom () "," Returns the bottom system window inset in pixels. <br /><br />"
"android.view.WindowInsets.getSystemWindowInsetTop () "," Returns the top system window inset in pixels. <br /><br />"
"android.view.WindowInsets.getSystemWindowInsetRight () "," Returns the right system window inset in pixels. <br /><br />"
"android.view.WindowInsets.getStableInsetLeft () "," Returns the left stable inset in pixels. <br /><br />"
"android.view.WindowInsets.replaceSystemWindowInsets (int left, int top, int right, int bottom) "," Returns a copy of this WindowInsets with selected system window insets replaced with new values. <br /><br />"
"android.view.WindowManager.LayoutParams.WindowManager.LayoutParams () "," no description <br /><br />"
"android.view.WindowManager.LayoutParams.mayUseInputMethod (int flags) "," Given a particular set of window manager flags, determine whether such a window may be a target for an input method when it has focus. <br /><br />"
"android.view.WindowManager.LayoutParams.String () "," Returns a String representation of this set of layout parameters. <br /><br />"
"android.view.WindowManager.LayoutParams.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.view.WindowManager.LayoutParams.CharSequence () "," no description <br /><br />"
"android.view.WindowManager.LayoutParams.getTitle () "," no description <br /><br />"
"android.view.WindowManager.LayoutParams.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.view.WindowManager.LayoutParams.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.webkit.ClientCertRequest.ignore () "," Ignore the request for now. <br /><br />"
"android.webkit.ClientCertRequest.getPrincipals () "," Returns the acceptable certificate issuers for the certificate matching the private key (can be null). <br /><br />"
"android.webkit.ClientCertRequest.getHost () "," Returns the host name of the server requesting the certificate. <br /><br />"
"android.webkit.ClientCertRequest.getPort () "," Returns the port number of the server requesting the certificate. <br /><br />"
"android.webkit.ClientCertRequest.X509Certificate[] () "," Proceed with the specified private key and client certificate chain. <br /><br />"
"android.webkit.ClientCertRequest.cancel () "," Cancel this request. <br /><br />"
"android.webkit.ClientCertRequest.getKeyTypes () "," Returns the acceptable types of asymmetric keys (can be null). <br /><br />"
"android.webkit.ConsoleMessage.message () "," no description <br /><br />"
"android.webkit.ConsoleMessage.lineNumber () "," no description <br /><br />"
"android.webkit.ConsoleMessage.messageLevel () "," no description <br /><br />"
"android.webkit.ConsoleMessage.sourceId () "," no description <br /><br />"
"android.webkit.CookieManager.String () "," Sets a cookie for the given URL. <br /><br />"
"android.webkit.CookieManager.getInstance () "," Gets the singleton CookieManager instance. <br /><br />"
"android.webkit.CookieManager.WebView () "," Sets whether the WebView should allow third party cookies to be set. <br /><br />"
"android.webkit.CookieManager.hasCookies () "," Gets whether there are stored cookies. <br /><br />"
"android.webkit.CookieManager.removeSessionCookies (ValueCallback) () "," This method was deprecated in API level 21. use removeSessionCookies(ValueCallback) instead. <br /><br />"
"android.webkit.CookieManager.flush () "," Ensures all cookies currently accessible through the getCookie API are written to persistent storage. <br /><br />"
"android.webkit.CookieManager.removeAllCookies (ValueCallback) () "," This method was deprecated in API level 21. Use removeAllCookies(ValueCallback) instead. <br /><br />"
"android.webkit.CookieManager.removeExpiredCookie () "," This method was deprecated in API level 21. The WebView handles removing expired cookies automatically. <br /><br />"
"android.webkit.CookieManager.Boolean () "," Sets a cookie for the given URL. <br /><br />"
"android.webkit.CookieManager.WebView (boolean accept) "," Sets whether the application's WebView instances should send and accept cookies for file scheme URLs. <br /><br />"
"android.webkit.CookieSyncManager.Context () "," Create a singleton CookieSyncManager within a context <br /><br />"
"android.webkit.CookieSyncManager.flush () () "," This method is deprecated. Use flush() instead. <br /><br />"
"android.webkit.CookieSyncManager.CookieSyncManager () "," Singleton access to a CookieSyncManager. <br /><br />"
"android.webkit.CookieSyncManager.stopSync () "," This method is deprecated. Calling stopSync is no longer useful as the WebView automatically syncs cookies. <br /><br />"
"android.webkit.CookieSyncManager.run () "," Starts executing the active part of the class' code. <br /><br />"
"android.webkit.CookieSyncManager.resetSync () "," This method is deprecated. Calling resetSync is no longer necessary as the WebView automatically syncs cookies. <br /><br />"
"android.webkit.CookieSyncManager.startSync () "," This method is deprecated. Calling startSync is no longer necessary as the WebView automatically syncs cookies. <br /><br />"
"android.webkit.DateSorter.getBoundary (int index) "," no description <br /><br />"
"android.webkit.DateSorter.getLabel (int index) "," no description <br /><br />"
"android.webkit.DateSorter.getIndex (long time) "," no description <br /><br />"
"android.webkit.DownloadListener.String () "," Notify the host application that a file should be downloaded <br /><br />"
"android.webkit.GeolocationPermissions.Callback.String () "," Sets the Geolocation permission state for the supplied origin. <br /><br />"
"android.webkit.HttpAuthHandler.String () "," Instructs the WebView to proceed with the authentication with the given credentials. <br /><br />"
"android.webkit.HttpAuthHandler.useHttpAuthUsernamePassword () "," Gets whether the credentials stored for the current host (i.e. <br /><br />"
"android.webkit.HttpAuthHandler.cancel () "," Instructs the WebView to cancel the authentication request. <br /><br />"
"android.webkit.JsPromptResult.String () "," Handle a confirmation response from the user. <br /><br />"
"android.webkit.JsResult.confirm () "," Handle a confirmation response from the user. <br /><br />"
"android.webkit.JsResult.cancel () "," Handle the result if the user cancelled the dialog. <br /><br />"
"android.webkit.MimeTypeMap.String () "," Return true if the given MIME type has an entry in the map. <br /><br />"
"android.webkit.MimeTypeMap.getSingleton () "," Get the singleton instance of MimeTypeMap. <br /><br />"
"android.webkit.PermissionRequest.getResources () "," Call this method to get the resources the web page is trying to access. <br /><br />"
"android.webkit.PermissionRequest.String[] () "," Call this method to grant origin the permission to access the given resources. <br /><br />"
"android.webkit.PermissionRequest.getOrigin () "," Call this method to get the origin of the web page which is trying to access the restricted resources. <br /><br />"
"android.webkit.PermissionRequest.deny () "," Call this method to deny the request. <br /><br />"
"android.webkit.PluginStub.Context () "," Return a custom full-screen view to be displayed when the user requests a plugin display as full-screen. <br /><br />"
"android.webkit.SslErrorHandler.proceed () "," Proceed with the SSL certificate. <br /><br />"
"android.webkit.SslErrorHandler.cancel () "," Cancel this request and all pending requests for the WebView that had the error. <br /><br />"
"android.webkit.URLUtil.String () "," Strips the url of the anchor. <br /><br />"
"android.webkit.URLUtil.decode (byte[] url) "," no description <br /><br />"
"android.webkit.ValueCallback&lt;T&gt;.onReceiveValue (T value) "," Invoked when the value is available. <br /><br />"
"android.webkit.WebBackForwardList.getSize () "," Get the total size of the back/forward list. <br /><br />"
"android.webkit.WebBackForwardList.getItemAtIndex (int index) "," Get the history item at the given index. <br /><br />"
"android.webkit.WebBackForwardList.getCurrentIndex () "," Get the index of the current history item. <br /><br />"
"android.webkit.WebBackForwardList.getCurrentItem () "," Return the current history item. <br /><br />"
"android.webkit.WebChromeClient.CustomViewCallback.onCustomViewHidden () "," Invoked when the host application dismisses the custom view. <br /><br />"
"android.webkit.WebChromeClient.FileChooserParams.isCaptureEnabled () "," Returns preference for a live media captured value (e.g. <br /><br />"
"android.webkit.WebChromeClient.FileChooserParams.getFilenameHint () "," The file name of a default selection if specified, or null. <br /><br />"
"android.webkit.WebChromeClient.FileChooserParams.createIntent () "," Creates an intent that would start a file picker for file selection. <br /><br />"
"android.webkit.WebChromeClient.FileChooserParams.getAcceptTypes () "," Returns an array of acceptable MIME types. <br /><br />"
"android.webkit.WebChromeClient.FileChooserParams.getTitle () "," Returns the title to use for this file selector, or null. <br /><br />"
"android.webkit.WebChromeClient.FileChooserParams.Intent () "," Parse the result returned by the file picker activity. <br /><br />"
"android.webkit.WebChromeClient.FileChooserParams.getMode () "," Returns file chooser mode. <br /><br />"
"android.webkit.WebChromeClient.String () "," Notify the host application of the url for an apple-touch-icon. <br /><br />"
"android.webkit.WebChromeClient.ConsoleMessage () "," Report a JavaScript console message to the host application. <br /><br />"
"android.webkit.WebChromeClient.WebView () "," Request display and focus for this WebView. <br /><br />"
"android.webkit.WebChromeClient.Message () "," Request the host application to create a new window. <br /><br />"
"android.webkit.WebChromeClient.WebStorage.QuotaUpdater () "," This method was deprecated in API level 19. This method is no longer called; WebView now uses the HTML5 / JavaScript Quota Management API. <br /><br />"
"android.webkit.WebChromeClient.JsResult () "," Tell the client to display a confirm dialog to the user. <br /><br />"
"android.webkit.WebChromeClient.WebChromeClient.FileChooserParams () "," Tell the client to show a file chooser. <br /><br />"
"android.webkit.WebChromeClient.onConsoleMessage (ConsoleMessage) () "," This method was deprecated in API level 8. Use onConsoleMessage(ConsoleMessage) instead. <br /><br />"
"android.webkit.WebChromeClient.JsPromptResult () "," Tell the client to display a prompt dialog to the user. <br /><br />"
"android.webkit.WebChromeClient.onHideCustomView () "," Notify the host application that the current page would like to hide its custom view. <br /><br />"
"android.webkit.WebChromeClient.getDefaultVideoPoster () "," When not playing, video elements are represented by a 'poster' image. <br /><br />"
"android.webkit.WebChromeClient.onJsTimeout () "," This method was deprecated in API level 17. This method is no longer supported and will not be invoked. <br /><br />"
"android.webkit.WebChromeClient.WebChromeClient.CustomViewCallback () "," This method was deprecated in API level 18. This method supports the obsolete plugin mechanism, and will not be invoked in future <br /><br />"
"android.webkit.WebChromeClient.getVideoLoadingProgressView () "," When the user starts to playback a video element, it may take time for enough data to be buffered before the first frames can be rendered. <br /><br />"
"android.webkit.WebChromeClient.GeolocationPermissions.Callback () "," Notify the host application that web content from the specified origin is attempting to use the Geolocation API, but no permission state is currently set for that origin. <br /><br />"
"android.webkit.WebChromeClient.String[] () "," Obtains a list of all visited history items, used for link coloring <br /><br />"
"android.webkit.WebChromeClient.onGeolocationPermissionsShowPrompt () () "," Notify the host application that a request for Geolocation permissions, made with a previous call to onGeolocationPermissionsShowPrompt() has been canceled. <br /><br />"
"android.webkit.WebChromeClient.PermissionRequest () "," Notify the host application that the given permission request has been canceled. <br /><br />"
"android.webkit.WebChromeClient.Bitmap () "," Notify the host application of a new favicon for the current page. <br /><br />"
"android.webkit.WebHistoryItem.getFavicon () "," Return the favicon of this history item or null if no favicon was found. <br /><br />"
"android.webkit.WebHistoryItem.getTitle () "," Return the document title of this history item. <br /><br />"
"android.webkit.WebHistoryItem.getOriginalUrl () "," Return the original url of this history item. <br /><br />"
"android.webkit.WebHistoryItem.getUrl () "," Return the url of this history item. <br /><br />"
"android.webkit.WebIconDatabase.String () "," Retain the icon for the given page url. <br /><br />"
"android.webkit.WebIconDatabase.removeAllIcons () "," Removes all the icons in the database. <br /><br />"
"android.webkit.WebIconDatabase.getInstance () "," Get the global instance of WebIconDatabase. <br /><br />"
"android.webkit.WebIconDatabase.close () "," Close the shared instance of the icon database. <br /><br />"
"android.webkit.WebIconDatabase.WebIconDatabase.IconListener () "," Request the Bitmap representing the icon for the given page url. <br /><br />"
"android.webkit.WebIconDatabase.IconListener.Bitmap () "," Called when the icon has been retrieved from the database and the result is non-null. <br /><br />"
"android.webkit.WebResourceRequest.hasGesture () "," Gets whether a gesture (such as a click) was associated with the request. <br /><br />"
"android.webkit.WebResourceRequest.isForMainFrame () "," Gets whether the request was made for the main frame. <br /><br />"
"android.webkit.WebResourceRequest.getRequestHeaders () "," Gets the headers associated with the request. <br /><br />"
"android.webkit.WebResourceRequest.getMethod () "," Gets the method associated with the request, for example 'GET'. <br /><br />"
"android.webkit.WebResourceRequest.getUrl () "," Gets the URL for which the resource request was made. <br /><br />"
"android.webkit.WebResourceResponse.String () "," Sets the resource response's status code and reason phrase. <br /><br />"
"android.webkit.WebResourceResponse.getData () "," Gets the input stream that provides the resource response's data. <br /><br />"
"android.webkit.WebResourceResponse.getStatusCode () "," Gets the resource response's status code. <br /><br />"
"android.webkit.WebResourceResponse.getMimeType () "," Gets the resource response's MIME type. <br /><br />"
"android.webkit.WebResourceResponse.getEncoding () "," Gets the resource response's encoding. <br /><br />"
"android.webkit.WebResourceResponse.InputStream () "," Sets the input stream that provides the resource response's data. <br /><br />"
"android.webkit.WebResourceResponse.getReasonPhrase () "," Gets the description of the resource response's status code. <br /><br />"
"android.webkit.WebResourceResponse.getResponseHeaders () "," Gets the headers for the resource response. <br /><br />"
"android.webkit.WebSettings.setSaveFormData (boolean save) "," Sets whether the WebView should save form data. <br /><br />"
"android.webkit.WebSettings.setAppCacheMaxSize (long appCacheMaxSize) "," This method was deprecated in API level 18. In future quota will be managed automatically. <br /><br />"
"android.webkit.WebSettings.setEnableSmoothTransition (boolean enable) "," This method was deprecated in API level 17. This method is now obsolete, and will become a no-op in future. <br /><br />"
"android.webkit.WebSettings.getLoadsImagesAutomatically () "," Gets whether the WebView loads image resources. <br /><br />"
"android.webkit.WebSettings.getUserAgentString () "," Gets the WebView's user-agent string. <br /><br />"
"android.webkit.WebSettings.requestFocus (int, android.graphics.Rect) (boolean flag) "," Tells the WebView whether it needs to set a node to have focus when requestFocus(int, android.graphics.Rect) is called. <br /><br />"
"android.webkit.WebSettings.getStandardFontFamily () "," Gets the standard font family name. <br /><br />"
"android.webkit.WebSettings.getCacheMode () "," Gets the current setting for overriding the cache mode. <br /><br />"
"android.webkit.WebSettings.setAppCacheEnabled (boolean flag) "," Sets whether the Application Caches API should be enabled. <br /><br />"
"android.webkit.WebSettings.WebSettings.ZoomDensity () "," This method was deprecated in API level 19. This method is no longer supported, see the function documentation for recommended alternatives. <br /><br />"
"android.webkit.WebSettings.setMixedContentMode (int mode) "," Configures the WebView's behavior when a secure origin attempts to load a resource from an insecure origin. <br /><br />"
"android.webkit.WebSettings.setMinimumLogicalFontSize (int size) "," Sets the minimum logical font size. <br /><br />"
"android.webkit.WebSettings.setDefaultFontSize (int size) "," Sets the default font size. <br /><br />"
"android.webkit.WebSettings.getDefaultTextEncodingName () "," Gets the default text encoding name. <br /><br />"
"android.webkit.WebSettings.getSansSerifFontFamily () "," Gets the sans-serif font family name. <br /><br />"
"android.webkit.WebSettings.getDisplayZoomControls () "," Gets whether the WebView displays on-screen zoom controls when using the built-in zoom mechanisms. <br /><br />"
"android.webkit.WebSettings.setLoadsImagesAutomatically (boolean flag) "," Sets whether the WebView should load image resources. <br /><br />"
"android.webkit.WebSettings.setTextZoom (int) () "," This method was deprecated in API level 14. Use setTextZoom(int) instead. <br /><br />"
"android.webkit.WebSettings.getTextZoom () () "," This method was deprecated in API level 14. Use getTextZoom() instead. <br /><br />"
"android.webkit.WebSettings.WebSettings.RenderPriority () "," This method was deprecated in API level 18. It is not recommended to adjust thread priorities, and this will not be supported in future versions. <br /><br />"
"android.webkit.WebSettings.setSupportMultipleWindows (boolean support) "," Sets whether the WebView whether supports multiple windows. <br /><br />"
"android.webkit.WebSettings.setBlockNetworkImage (boolean flag) "," Sets whether the WebView should not load image resources from the network (resources accessed via http and https URI schemes). <br /><br />"
"android.webkit.WebSettings.getLoadWithOverviewMode () "," Gets whether this WebView loads pages in overview mode. <br /><br />"
"android.webkit.WebSettings.setAllowContentAccess (boolean allow) "," Enables or disables content URL access within WebView. <br /><br />"
"android.webkit.WebSettings.setAllowFileAccessFromFileURLs (boolean flag) "," Sets whether JavaScript running in the context of a file scheme URL should be allowed to access content from other file scheme URLs. <br /><br />"
"android.webkit.WebSettings.getDefaultFixedFontSize () "," Gets the default fixed font size. <br /><br />"
"android.webkit.WebSettings.setDomStorageEnabled (boolean flag) "," Sets whether the DOM storage API is enabled. <br /><br />"
"android.webkit.WebSettings.setJavaScriptCanOpenWindowsAutomatically (boolean flag) "," Tells JavaScript to open windows automatically. <br /><br />"
"android.webkit.WebSettings.getDomStorageEnabled () "," Gets whether the DOM Storage APIs are enabled. <br /><br />"
"android.webkit.WebSettings.getBlockNetworkImage () "," Gets whether the WebView does not load image resources from the network. <br /><br />"
"android.webkit.WebSettings.getFantasyFontFamily () "," Gets the fantasy font family name. <br /><br />"
"android.webkit.WebSettings.getLightTouchEnabled () "," This method was deprecated in API level 18. This setting is obsolete. <br /><br />"
"android.webkit.WebSettings.setSavePassword (boolean save) "," This method was deprecated in API level 18. Saving passwords in WebView will not be supported in future versions. <br /><br />"
"android.webkit.WebSettings.getFixedFontFamily () "," Gets the fixed font family name. <br /><br />"
"android.webkit.WebSettings.getMediaPlaybackRequiresUserGesture () "," Gets whether the WebView requires a user gesture to play media. <br /><br />"
"android.webkit.WebSettings.getMinimumFontSize () "," Gets the minimum font size. <br /><br />"
"android.webkit.WebSettings.getDefaultFontSize () "," Gets the default font size. <br /><br />"
"android.webkit.WebSettings.getBlockNetworkLoads () "," Gets whether the WebView does not load any resources from the network. <br /><br />"
"android.webkit.WebSettings.getSaveFormData () "," Gets whether the WebView saves form data. <br /><br />"
"android.webkit.WebSettings.enableSmoothTransition () "," This method was deprecated in API level 17. This method is now obsolete, and will become a no-op in future. <br /><br />"
"android.webkit.WebSettings.getCursiveFontFamily () "," Gets the cursive font family name. <br /><br />"
"android.webkit.WebSettings.getMinimumLogicalFontSize () "," Gets the minimum logical font size. <br /><br />"
"android.webkit.WebSettings.setAllowUniversalAccessFromFileURLs (boolean flag) "," Sets whether JavaScript running in the context of a file scheme URL should be allowed to access content from any origin. <br /><br />"
"android.webkit.WebSettings.setCacheMode (int mode) "," Overrides the way the cache is used. <br /><br />"
"android.webkit.WebSettings.getLayoutAlgorithm () "," Gets the current layout algorithm. <br /><br />"
"android.webkit.WebSettings.getPluginState () "," This method was deprecated in API level 18. Plugins will not be supported in future, and should not be used. <br /><br />"
"android.webkit.WebSettings.setJavaScriptEnabled (boolean flag) "," Tells the WebView to enable JavaScript execution. <br /><br />"
"android.webkit.WebSettings.getUseWideViewPort () "," Gets whether the WebView supports the 'viewport' HTML meta tag or will use a wide viewport. <br /><br />"
"android.webkit.WebSettings.JELLY_BEAN (boolean enabled) "," This method was deprecated in API level 18. From JELLY_BEAN this setting is obsolete and has no effect. <br /><br />"
"android.webkit.WebSettings.getAllowFileAccess () "," Gets whether this WebView supports file access. <br /><br />"
"android.webkit.WebSettings.setBuiltInZoomControls (boolean enabled) "," Sets whether the WebView should use its built-in zoom mechanisms. <br /><br />"
"android.webkit.WebSettings.setBlockNetworkLoads (boolean flag) "," Sets whether the WebView should not load resources from the network. <br /><br />"
"android.webkit.WebSettings.setSupportZoom (boolean support) "," Sets whether the WebView should support zooming using its on-screen zoom controls and gestures. <br /><br />"
"android.webkit.WebSettings.getAllowUniversalAccessFromFileURLs () "," Gets whether JavaScript running in the context of a file scheme URL can access content from any origin. <br /><br />"
"android.webkit.WebSettings.setLoadWithOverviewMode (boolean overview) "," Sets whether the WebView loads pages in overview mode, that is, zooms out the content to fit on screen by width. <br /><br />"
"android.webkit.WebSettings.setDisplayZoomControls (boolean enabled) "," Sets whether the WebView should display on-screen zoom controls when using the built-in zoom mechanisms. <br /><br />"
"android.webkit.WebSettings.setDatabaseEnabled (boolean flag) "," Sets whether the database storage API is enabled. <br /><br />"
"android.webkit.WebSettings.getJavaScriptEnabled () "," Gets whether JavaScript is enabled. <br /><br />"
"android.webkit.WebSettings.getBuiltInZoomControls () "," Gets whether the zoom mechanisms built into WebView are being used. <br /><br />"
"android.webkit.WebSettings.getDatabasePath () "," This method was deprecated in API level 19. Database paths are managed by the implementation this method is obsolete. <br /><br />"
"android.webkit.WebSettings.supportMultipleWindows () "," Gets whether the WebView supports multiple windows. <br /><br />"
"android.webkit.WebSettings.getAllowContentAccess () "," Gets whether this WebView supports content URL access. <br /><br />"
"android.webkit.WebSettings.String () "," Sets the WebView's user-agent string. <br /><br />"
"android.webkit.WebSettings.setMediaPlaybackRequiresUserGesture (boolean require) "," Sets whether the WebView requires a user gesture to play media. <br /><br />"
"android.webkit.WebSettings.setDefaultFixedFontSize (int size) "," Sets the default fixed font size. <br /><br />"
"android.webkit.WebSettings.getJavaScriptCanOpenWindowsAutomatically () "," Gets whether JavaScript can open windows automatically. <br /><br />"
"android.webkit.WebSettings.getSerifFontFamily () "," Gets the serif font family name. <br /><br />"
"android.webkit.WebSettings.getAllowFileAccessFromFileURLs () "," Gets whether JavaScript running in the context of a file scheme URL can access content from other file scheme URLs. <br /><br />"
"android.webkit.WebSettings.setMinimumFontSize (int size) "," Sets the minimum font size. <br /><br />"
"android.webkit.WebSettings.supportZoom () "," Gets whether the WebView supports zoom. <br /><br />"
"android.webkit.WebSettings.getTextZoom () "," Gets the text zoom of the page in percent. <br /><br />"
"android.webkit.WebSettings.WebSettings.LayoutAlgorithm () "," Sets the underlying layout algorithm. <br /><br />"
"android.webkit.WebSettings.setUseWideViewPort (boolean use) "," Sets whether the WebView should enable support for the 'viewport' HTML meta tag or should use a wide viewport. <br /><br />"
"android.webkit.WebSettings.getDatabaseEnabled () "," Gets whether the database storage API is enabled. <br /><br />"
"android.webkit.WebSettings.setAllowFileAccess (boolean allow) "," Enables or disables file access within WebView. <br /><br />"
"android.webkit.WebSettings.Context () "," Returns the default User-Agent used by a WebView. <br /><br />"
"android.webkit.WebSettings.getSavePassword () "," This method was deprecated in API level 18. Saving passwords in WebView will not be supported in future versions. <br /><br />"
"android.webkit.WebSettings.setGeolocationEnabled (boolean flag) "," Sets whether Geolocation is enabled. <br /><br />"
"android.webkit.WebSettings.getMixedContentMode () "," Gets the current behavior of the WebView with regard to loading insecure content from a secure origin. <br /><br />"
"android.webkit.WebSettings.setTextZoom (int textZoom) "," Sets the text zoom of the page in percent. <br /><br />"
"android.webkit.WebSettings.WebSettings.PluginState () "," This method was deprecated in API level 18. Plugins will not be supported in future, and should not be used. <br /><br />"
"android.webkit.WebSettings.getDefaultZoom () "," This method was deprecated in API level 19. Will only return the default value. <br /><br />"
"android.webkit.WebStorage.Origin.getUsage () "," Gets the total amount of storage currently being used by this origin, for all JavaScript storage APIs, in bytes. <br /><br />"
"android.webkit.WebStorage.Origin.getOrigin () "," Gets the string representation of this origin. <br /><br />"
"android.webkit.WebStorage.Origin.getQuota () "," Gets the quota for this origin, for the Web SQL Database API, in bytes. <br /><br />"
"android.webkit.WebStorage.QuotaUpdater.updateQuota (long newQuota) "," Provides a new quota, specified in bytes. <br /><br />"
"android.webkit.WebView.FindListener.onFindResultReceived (int activeMatchOrdinal, int numberOfMatches, boolean isDoneCounting) "," Notifies the listener about progress made by a find operation. <br /><br />"
"android.webkit.WebView.HitTestResult.getType () "," Gets the type of the hit test result. <br /><br />"
"android.webkit.WebView.HitTestResult.getExtra () "," Gets additional type-dependant information about the result. <br /><br />"
"android.webkit.WebView.destroy () "," Destroys the internal state of this WebView. <br /><br />"
"android.webkit.WebView.clearSslPreferences () "," Clears the SSL preferences table stored in response to proceeding with SSL certificate errors. <br /><br />"
"android.webkit.WebView.zoomOut () "," Performs zoom out in this WebView. <br /><br />"
"android.webkit.WebView.setVerticalScrollbarOverlay (boolean overlay) "," Specifies whether the vertical scrollbar has overlay style. <br /><br />"
"android.webkit.WebView.setInitialScale (int scaleInPercent) "," Sets the initial scale for this WebView. <br /><br />"
"android.webkit.WebView.setHorizontalScrollbarOverlay (boolean overlay) "," Specifies whether the horizontal scrollbar has overlay style. <br /><br />"
"android.webkit.WebView.onPause () "," Pauses any extra processing associated with this WebView and its associated DOM, plugins, JavaScript etc. <br /><br />"
"android.webkit.WebView.getProgress () "," Gets the progress for the current page. <br /><br />"
"android.webkit.WebView.overlayVerticalScrollbar () "," Gets whether vertical scrollbar has overlay style. <br /><br />"
"android.webkit.WebView.setMapTrackballToArrowKeys (boolean setMap) "," This method was deprecated in API level 17. Only the default case, true, will be supported in a future version. <br /><br />"
"android.webkit.WebView.getHitTestResult () "," Gets a HitTestResult based on the current cursor node. <br /><br />"
"android.webkit.WebView.clearCache (boolean includeDiskFiles) "," Clears the resource cache. <br /><br />"
"android.webkit.WebView.findAllAsync (String) (boolean forward) "," Highlights and scrolls to the next match found by findAllAsync(String), wrapping around page boundaries as necessary. <br /><br />"
"android.webkit.WebView.getTitle () "," Gets the title for the current page. <br /><br />"
"android.webkit.WebView.onWindowFocusChanged (boolean hasWindowFocus) "," Called when the window containing this view gains or loses focus. <br /><br />"
"android.webkit.WebView.onResume () "," Resumes a WebView after a previous call to onPause(). <br /><br />"
"android.webkit.WebView.canGoBackOrForward (int steps) "," Gets whether the page can go back or forward the given number of steps. <br /><br />"
"android.webkit.WebView.WebView.PictureListener () "," This method was deprecated in API level 12. This method is now obsolete. <br /><br />"
"android.webkit.WebView.clearView () "," This method was deprecated in API level 18. Use WebView.loadUrl('about:blank') to reliably reset the view state and release page resources (including any running JavaScript). <br /><br />"
"android.webkit.WebView.freeMemory () "," This method was deprecated in API level 19. Memory caches are automatically dropped when no longer needed, and in response to system memory pressure. <br /><br />"
"android.webkit.WebView.enableSlowWholeDocumentDraw () "," For apps targeting the L release, WebView has a new default behavior that reduces memory footprint and increases performance by intelligently choosing the portion of the HTML document that needs to be drawn. <br /><br />"
"android.webkit.WebView.canGoForward () "," Gets whether this WebView has a forward history item. <br /><br />"
"android.webkit.WebView.isPrivateBrowsingEnabled () "," Gets whether private browsing is enabled in this WebView. <br /><br />"
"android.webkit.WebView.pageUp (boolean top) "," Scrolls the contents of this WebView up by half the view size. <br /><br />"
"android.webkit.WebView.getUrl () "," Gets the URL for the current page. <br /><br />"
"android.webkit.WebView.setOverScrollMode (int mode) "," Set the over-scroll mode for this view. <br /><br />"
"android.webkit.WebView.Paint () "," Specifies the type of layer backing this view. <br /><br />"
"android.webkit.WebView.performLongClick () "," Call this view's OnLongClickListener, if it is defined. <br /><br />"
"android.webkit.WebView.WebChromeClient () "," Sets the chrome handler. <br /><br />"
"android.webkit.WebView.WebViewClient () "," Sets the WebViewClient that will receive various notifications and requests. <br /><br />"
"android.webkit.WebView.clearHistory () "," Tells this WebView to clear its internal back/forward list. <br /><br />"
"android.webkit.WebView.getContentHeight () "," Gets the height of the HTML content. <br /><br />"
"android.webkit.WebView.onScaleChanged (WebView, float, float) () "," This method was deprecated in API level 17. This method is prone to inaccuracy due to race conditions between the web rendering and UI threads; prefer onScaleChanged(WebView, float, float). <br /><br />"
"android.webkit.WebView.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.webkit.WebView.getOriginalUrl () "," Gets the original URL for the current page. <br /><br />"
"android.webkit.WebView.goBack () "," Goes back in the history of this WebView. <br /><br />"
"android.webkit.WebView.flingScroll (int vx, int vy) "," no description <br /><br />"
"android.webkit.WebView.createPrintDocumentAdapter (String) () "," This method was deprecated in API level 21. Use createPrintDocumentAdapter(String) which requires user to provide a print document name. <br /><br />"
"android.webkit.WebView.EditorInfo () "," Create a new InputConnection for an InputMethod to interact with the view. <br /><br />"
"android.webkit.WebView.MotionEvent () "," Implement this method to handle trackball motion events. <br /><br />"
"android.webkit.WebView.AccessibilityService () "," Gets the provider for managing a virtual view hierarchy rooted at this View and reported to AccessibilityServices that explore the window content. <br /><br />"
"android.webkit.WebView.goBackOrForward (int steps) "," Goes to the history item that is the number of steps away from the current item. <br /><br />"
"android.webkit.WebView.getCertificate () "," Gets the SSL certificate for the main top-level page or null if there is no certificate (the site is not secure). <br /><br />"
"android.webkit.WebView.resumeTimers () "," Resumes all layout, parsing, and JavaScript timers for all WebViews. <br /><br />"
"android.webkit.WebView.Rect () "," Called when a child of this group wants a particular rectangle to be positioned onto the screen. <br /><br />"
"android.webkit.WebView.clearFormData () "," Removes the autocomplete popup from the currently focused form field, if present. <br /><br />"
"android.webkit.WebView.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.webkit.WebView.getFavicon () "," Gets the favicon for the current page. <br /><br />"
"android.webkit.WebView.canGoBack () "," Gets whether this WebView has a back history item. <br /><br />"
"android.webkit.WebView.zoomBy (float zoomFactor) "," Performs a zoom operation in this WebView. <br /><br />"
"android.webkit.WebView.copyBackForwardList () "," Gets the WebBackForwardList for this WebView. <br /><br />"
"android.webkit.WebView.setScrollBarStyle (int style) "," Specify the style of the scrollbars. <br /><br />"
"android.webkit.WebView.overlayHorizontalScrollbar () "," Gets whether horizontal scrollbar has overlay style. <br /><br />"
"android.webkit.WebView.SslCertificate () "," This method was deprecated in API level 17. Calling this function has no useful effect, and will be ignored in future releases. <br /><br />"
"android.webkit.WebView.setBackgroundColor (int color) "," Sets the background color for this view. <br /><br />"
"android.webkit.WebView.String () "," This method was deprecated in API level 18. This method does not work reliably on all Android versions; implementing a custom find dialog using WebView.findAllAsync() provides a more robust solution. <br /><br />"
"android.webkit.WebView.saveWebArchive (String) () "," This method was deprecated in API level 19. Use onDraw(Canvas) to obtain a bitmap snapshot of the WebView, or saveWebArchive(String) to save the content to a file. <br /><br />"
"android.webkit.WebView.shouldDelayChildPressedState () "," Return true if the pressed state should be delayed for children or descendants of this ViewGroup. <br /><br />"
"android.webkit.WebView.getDescendantFocusability () () "," Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from. Looks for a view to give focus to respecting the setting specified by getDescendantFocusability(). <br /><br />"
"android.webkit.WebView.Message () "," Requests the URL of the image last touched by the user. <br /><br />"
"android.webkit.WebView.WebView.FindListener () "," Registers the listener to be notified as find-on-page operations progress. <br /><br />"
"android.webkit.WebView.reload () "," Reloads the current URL. <br /><br />"
"android.webkit.WebView.invokeZoomPicker () "," Invokes the graphical zoom picker widget for this WebView. <br /><br />"
"android.webkit.WebView.onSaveInstanceState (Bundle) () "," Saves the state of this WebView used in onSaveInstanceState(Bundle). <br /><br />"
"android.webkit.WebView.KeyEvent.Callback.onKeyMultiple () () "," Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event). <br /><br />"
"android.webkit.WebView.setNetworkAvailable (boolean networkUp) "," Informs WebView of the network state. <br /><br />"
"android.webkit.WebView.findAllAsync (String) () "," This method was deprecated in API level 16. findAllAsync(String) is preferred. <br /><br />"
"android.webkit.WebView.View () "," This method was deprecated in API level 3. WebView should not have implemented ViewTreeObserver.OnGlobalFocusChangeListener. This method does nothing now. <br /><br />"
"android.webkit.WebView.KEYCODE_ENTER () "," Default implementation of KeyEvent.Callback.onKeyUp(): perform clicking of the view when KEYCODE_DPAD_CENTER or KEYCODE_ENTER is released. <br /><br />"
"android.webkit.WebView.computeScroll () "," Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary. <br /><br />"
"android.webkit.WebView.ViewGroup.LayoutParams () "," Set the layout parameters associated with this view. <br /><br />"
"android.webkit.WebView.DownloadListener () "," Registers the interface to be used when content can not be handled by the rendering engine, and should be downloaded instead. <br /><br />"
"android.webkit.WebView.zoomIn () "," Performs zoom in in this WebView. <br /><br />"
"android.webkit.WebView.pageDown (boolean bottom) "," Scrolls the contents of this WebView down by half the page size. <br /><br />"
"android.webkit.WebView.KeyEvent () "," Dispatch a key event to the next view on the focus path. <br /><br />"
"android.webkit.WebView.setWebContentsDebuggingEnabled (boolean enabled) "," Enables debugging of web contents (HTML / CSS / JavaScript) loaded into any WebViews of this application. <br /><br />"
"android.webkit.WebView.stopLoading () "," Stops the current load. <br /><br />"
"android.webkit.WebView.ViewGroup.detachViewFromParent () "," This is called when a container is going to temporarily detach a child, with ViewGroup.detachViewFromParent. <br /><br />"
"android.webkit.WebView.onStartTemporaryDetach () () "," Called after onStartTemporaryDetach() when the container is done changing the view. <br /><br />"
"android.webkit.WebView.pauseTimers () "," Pauses all layout, parsing, and JavaScript timers for all WebViews. <br /><br />"
"android.webkit.WebView.Bundle () "," Restores the state of this WebView from the given Bundle. <br /><br />"
"android.webkit.WebView.goForward () "," Goes forward in the history of this WebView. <br /><br />"
"android.webkit.WebView.Runnable () "," Clears the client certificate preferences stored in response to proceeding/cancelling client cert requests. <br /><br />"
"android.webkit.WebView.getSettings () "," Gets the WebSettings object used to control the settings for this WebView. <br /><br />"
"android.webkit.WebView.PictureListener.Picture () "," This method was deprecated in API level 12. Deprecated due to internal changes. <br /><br />"
"android.webkit.WebView.WebViewTransport.getWebView () "," Gets the WebView object. <br /><br />"
"android.webkit.WebView.WebViewTransport.WebView () "," Sets the WebView to the transportation object. <br /><br />"
"android.webkit.WebViewClient.String () "," Give the host application a chance to take over the control when a new url is about to be loaded in the current WebView. <br /><br />"
"android.webkit.WebViewClient.shouldInterceptRequest (WebView, WebResourceRequest) () "," This method was deprecated in API level 21. Use shouldInterceptRequest(WebView, WebResourceRequest) instead. <br /><br />"
"android.webkit.WebViewClient.WebResourceRequest () "," Notify the host application of a resource request and allow the application to return the data. <br /><br />"
"android.webkit.WebViewClient.WebView () "," Notify the host application that the scale applied to the WebView has changed. <br /><br />"
"android.webkit.WebViewClient.KeyEvent () "," Give the host application a chance to handle the key event synchronously. <br /><br />"
"android.webkit.WebViewClient.ClientCertRequest () "," Notify the host application to handle a SSL client certificate request. <br /><br />"
"android.webkit.WebViewClient.Message () "," This method was deprecated in API level 8. This method is no longer called. When the WebView encounters a redirect loop, it will cancel the load. <br /><br />"
"android.webkit.WebViewClient.InputEvent () "," Notify the host application that a input event was not handled by the WebView. <br /><br />"
"android.webkit.WebViewClient.SslError () "," Notify the host application that an SSL error occurred while loading a resource. <br /><br />"
"android.webkit.WebViewClient.Bitmap () "," Notify the host application that a page has started loading. <br /><br />"
"android.webkit.WebViewDatabase.hasHttpAuthUsernamePassword () "," Gets whether there are any saved credentials for HTTP authentication. <br /><br />"
"android.webkit.WebViewDatabase.Context () "," no description <br /><br />"
"android.webkit.WebViewDatabase.clearUsernamePassword () "," This method was deprecated in API level 18. Saving passwords in WebView will not be supported in future versions. <br /><br />"
"android.webkit.WebViewDatabase.clearFormData () "," Clears any saved data for web forms. <br /><br />"
"android.webkit.WebViewDatabase.clearHttpAuthUsernamePassword () "," Clears any saved credentials for HTTP authentication. <br /><br />"
"android.webkit.WebViewDatabase.hasUsernamePassword () "," This method was deprecated in API level 18. Saving passwords in WebView will not be supported in future versions. <br /><br />"
"android.webkit.WebViewDatabase.hasFormData () "," Gets whether there is any saved data for web forms. <br /><br />"
"android.webkit.WebViewFragment.getWebView () "," Gets the WebView. <br /><br />"
"android.webkit.WebViewFragment.onPause () "," Called when the fragment is visible to the user and actively running. <br /><br />"
"android.webkit.WebViewFragment.onDestroyView () "," Called when the WebView has been detached from the fragment. <br /><br />"
"android.webkit.WebViewFragment.onDestroy () "," Called when the fragment is no longer in use. <br /><br />"
"android.webkit.WebViewFragment.Bundle () "," Called to instantiate the view. <br /><br />"
"android.webkit.WebViewFragment.onResume () "," Called when the fragment is no longer resumed. <br /><br />"
"android.widget.AbsListView.ListAdapter () "," Sets the adapter that provides the data and the views to represent the data in this widget. <br /><br />"
"android.widget.AbsListView.AttributeSet () "," Returns a new set of layout parameters based on the supplied attributes set. <br /><br />"
"android.widget.AbsListView.AbsListView.RecyclerListener () "," Sets the recycler listener to be notified whenever a View is set aside in the recycler for later reuse. <br /><br />"
"android.widget.AbsListView.onRtlPropertiesChanged (int layoutDirection) "," Called when any RTL property (layout direction or text direction or text alignment) has been changed. <br /><br />"
"android.widget.AbsListView.ActionMode () "," Set a AbsListView.MultiChoiceModeListener that will manage the lifecycle of the selection ActionMode. <br /><br />"
"android.widget.AbsListView.getListPaddingBottom () "," List padding is the maximum of the normal view's padding and the padding of the selector. <br /><br />"
"android.widget.AbsListView.onGlobalLayout () "," Callback method to be invoked when the global layout state or the visibility of views within the view tree changes <br /><br />"
"android.widget.AbsListView.isItemChecked (int position) "," Returns the checked state of the specified position. <br /><br />"
"android.widget.AbsListView.getVerticalScrollbarWidth () "," Returns the width of the vertical scrollbar. <br /><br />"
"android.widget.AbsListView.setSelector (int resID) "," Set a Drawable that should be used to highlight the currently selected item. <br /><br />"
"android.widget.AbsListView.smoothScrollToPosition (int position) "," Smoothly scroll to the specified adapter position. <br /><br />"
"android.widget.AbsListView.Drawable () "," If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying. <br /><br />"
"android.widget.AbsListView.smoothScrollToPosition (int position, int boundPosition) "," Smoothly scroll to the specified adapter position. <br /><br />"
"android.widget.AbsListView.AbsListView.OnScrollListener () "," Set the listener that will receive notifications every time the list scrolls. <br /><br />"
"android.widget.AbsListView.getListPaddingRight () "," List padding is the maximum of the normal view's padding and the padding of the selector. <br /><br />"
"android.widget.AbsListView.pointToPosition (int x, int y) "," Maps a point to a position in the list. <br /><br />"
"android.widget.AbsListView.getCheckedItemPositions () "," Returns the set of checked items in the list. <br /><br />"
"android.widget.AbsListView.setDuplicateParentStateEnabled (boolean) (float x, float y) "," Dispatches drawable hotspot changes to child views that meet at least one of the following criteria:  Returns false from both isClickable() and isLongClickable() Requests duplication of parent state via setDuplicateParentStateEnabled(boolean) <br /><br />"
"android.widget.AbsListView.smoothScrollToPositionFromTop (int position, int offset, int duration) "," Smoothly scroll to the specified adapter position. <br /><br />"
"android.widget.AbsListView.smoothScrollBy (int distance, int duration) "," Smoothly scroll by distance pixels over duration milliseconds. <br /><br />"
"android.widget.AbsListView.onWindowFocusChanged (boolean hasWindowFocus) "," Called when the window containing this view gains or loses focus. <br /><br />"
"android.widget.AbsListView.setTextFilterEnabled (boolean textFilterEnabled) "," Enables or disables the type filter window. <br /><br />"
"android.widget.AbsListView.onSaveInstanceState () () "," Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState(). <br /><br />"
"android.widget.AbsListView.Editable () "," For our text watcher that is associated with the text filter. <br /><br />"
"android.widget.AbsListView.getCheckedItemCount () "," Returns the number of items currently selected. <br /><br />"
"android.widget.AbsListView.setVerticalScrollbarPosition (int position) "," Set the position of the vertical scroll bar. <br /><br />"
"android.widget.AbsListView.isTextFilterEnabled () "," Indicates whether type filtering is enabled for this view <br /><br />"
"android.widget.AbsListView.setScrollingCacheEnabled (boolean enabled) "," Enables or disables the children's drawing cache during a scroll. <br /><br />"
"android.widget.AbsListView.setFriction (float friction) "," The amount of friction applied to flings. <br /><br />"
"android.widget.AbsListView.requestLayout () "," Call this when something has changed which has invalidated the layout of this view. <br /><br />"
"android.widget.AbsListView.cancelPendingInputEvents () () "," Called as the result of a call to cancelPendingInputEvents() on this view or a parent view. <br /><br />"
"android.widget.AbsListView.setFastScrollEnabled (boolean enabled) "," Specifies whether fast scrolling is enabled or disabled. <br /><br />"
"android.widget.AbsListView.onFilterComplete (int count) "," Notifies the end of a filtering operation. <br /><br />"
"android.widget.AbsListView.Drawable.jumpToCurrentState () () "," Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view. <br /><br />"
"android.widget.AbsListView.getTextFilter () "," Returns the list's text filter, if available. <br /><br />"
"android.widget.AbsListView.getListPaddingLeft () "," List padding is the maximum of the normal view's padding and the padding of the selector. <br /><br />"
"android.widget.AbsListView.getTranscriptMode () "," Returns the current transcript mode. <br /><br />"
"android.widget.AbsListView.hasTextFilter () "," Returns if the ListView currently has a text filter. <br /><br />"
"android.widget.AbsListView.onRemoteAdapterDisconnected () "," Called back when the adapter disconnects from the RemoteViewsService. <br /><br />"
"android.widget.AbsListView.setOverScrollMode (int mode) "," Set the over-scroll mode for this view. <br /><br />"
"android.widget.AbsListView.setSelectionFromTop (int position, int y) "," Sets the selected item and positions the selection y pixels from the top edge of the ListView. <br /><br />"
"android.widget.AbsListView.setDrawSelectorOnTop (boolean onTop) "," Controls whether the selection highlight drawable should be drawn on top of the item or behind it. <br /><br />"
"android.widget.AbsListView.onTouchModeChanged (boolean isInTouchMode) "," Callback method to be invoked when the touch mode changes. <br /><br />"
"android.widget.AbsListView.getSelectedView () "," no description <br /><br />"
"android.widget.AbsListView.setSmoothScrollbarEnabled (boolean enabled) "," When smooth scrollbar is enabled, the position and size of the scrollbar thumb is computed based on the number of visible pixels in the visible items. <br /><br />"
"android.widget.AbsListView.setItemChecked (int position, boolean value) "," Sets the checked state of the specified position. <br /><br />"
"android.widget.AbsListView.setFastScrollAlwaysVisible (boolean alwaysShow) "," Set whether or not the fast scroller should always be shown in place of the standard scroll bars. <br /><br />"
"android.widget.AbsListView.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.AbsListView.isFastScrollEnabled () "," Returns true if the fast scroller is enabled. <br /><br />"
"android.widget.AbsListView.getSolidColor () "," Override this if your view is known to always be drawn on top of a solid color background, and needs to draw fading edges. <br /><br />"
"android.widget.AbsListView.clearChoices () "," Clear any choices previously set <br /><br />"
"android.widget.AbsListView.scrollListBy (int y) "," Scrolls the list items within the view by a specified number of pixels. <br /><br />"
"android.widget.AbsListView.EditorInfo () "," Return an InputConnection for editing of the filter text. <br /><br />"
"android.widget.AbsListView.setCacheColorHint (int color) "," When set to a non-zero value, the cache color hint indicates that this list is always drawn on top of a solid, single-color, opaque background. <br /><br />"
"android.widget.AbsListView.MotionEvent () "," Implement this method to handle touch screen motion events. <br /><br />"
"android.widget.AbsListView.invalidateViews () "," Causes all the views to be rebuilt and redrawn. <br /><br />"
"android.widget.AbsListView.smoothScrollToPositionFromTop (int position, int offset) "," Smoothly scroll to the specified adapter position. <br /><br />"
"android.widget.AbsListView.getCacheColorHint () "," When set to a non-zero value, the cache color hint indicates that this list is always drawn on top of a solid, single-color, opaque background <br /><br />"
"android.widget.AbsListView.onInterceptTouchEvent (MotionEvent) (boolean disallowIntercept) "," Called when a child does not want this parent and its ancestors to intercept touch events with onInterceptTouchEvent(MotionEvent). <br /><br />"
"android.widget.AbsListView.onSaveInstanceState () "," Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. <br /><br />"
"android.widget.AbsListView.Rect () "," When a view has focus and the user navigates away from it, the next view is searched for starting from the rectangle filled in by this method. <br /><br />"
"android.widget.AbsListView.isSmoothScrollbarEnabled () "," Returns the current state of the fast scroll feature. <br /><br />"
"android.widget.AbsListView.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about a particular item in the list. <br /><br />"
"android.widget.AbsListView.sendAccessibilityEvent (int eventType) "," Sends an accessibility event of the given type. <br /><br />"
"android.widget.AbsListView.pointToRowId (int x, int y) "," Maps a point to a the rowId of the item which intersects that point. <br /><br />"
"android.widget.AbsListView.getCheckedItemPosition () "," Returns the currently checked item. <br /><br />"
"android.widget.AbsListView.isStackFromBottom () "," Indicates whether the content of this view is pinned to, or stacked from, the bottom edge. <br /><br />"
"android.widget.AbsListView.canScrollList (int direction) "," Check if the items in the list can be scrolled in a certain direction. <br /><br />"
"android.widget.AbsListView.deferNotifyDataSetChanged () "," This defers a notifyDataSetChanged on the pending RemoteViewsAdapter if it has not connected yet. <br /><br />"
"android.widget.AbsListView.onRemoteAdapterConnected () "," Called back when the adapter connects to the RemoteViewsService. <br /><br />"
"android.widget.AbsListView.setVelocityScale (float scale) "," Sets a scale factor for the fling velocity. <br /><br />"
"android.widget.AbsListView.setScrollBarStyle (int style) "," Specify the style of the scrollbars. <br /><br />"
"android.widget.AbsListView.fling (int velocityY) "," Initiate a fling with the given velocity. <br /><br />"
"android.widget.AbsListView.String () "," Sets the initial value for the text filter. <br /><br />"
"android.widget.AbsListView.isFastScrollAlwaysVisible () "," Returns true if the fast scroller is set to always show on this view. <br /><br />"
"android.widget.AbsListView.clearTextFilter () "," Clear the text filter. <br /><br />"
"android.widget.AbsListView.Canvas () "," Manually render this view (and all of its children) to the given Canvas. <br /><br />"
"android.widget.AbsListView.CharSequence () "," For our text watcher that is associated with the text filter. <br /><br />"
"android.widget.AbsListView.setStackFromBottom (boolean stackFromBottom) "," When stack from bottom is set to true, the list fills its content starting from the bottom of the view. <br /><br />"
"android.widget.AbsListView.View () "," Bring up a context menu for the specified view or its ancestors. <br /><br />"
"android.widget.AbsListView.KEYCODE_ENTER () "," Default implementation of KeyEvent.Callback.onKeyUp(): perform clicking of the view when KEYCODE_DPAD_CENTER or KEYCODE_ENTER is released. <br /><br />"
"android.widget.AbsListView.getChoiceMode () "," no description <br /><br />"
"android.widget.AbsListView.setChoiceMode (int choiceMode) "," Defines the choice behavior for the List. <br /><br />"
"android.widget.AbsListView.setFastScrollStyle (int styleResId) "," Specifies the style of the fast scroller decorations. <br /><br />"
"android.widget.AbsListView.getCheckedItemIds () "," Returns the set of checked items ids. <br /><br />"
"android.widget.AbsListView.setTranscriptMode (int mode) "," Puts the list or grid into transcript mode. <br /><br />"
"android.widget.AbsListView.Bundle () "," Performs the specified accessibility action on the view. <br /><br />"
"android.widget.AbsListView.isScrollingCacheEnabled () "," Indicates whether the children's drawing cache is used during a scroll. <br /><br />"
"android.widget.AbsListView.Intent () "," Sets up this AbsListView to use a remote views adapter which connects to a RemoteViewsService through the specified intent. <br /><br />"
"android.widget.AbsListView.getListPaddingTop () "," List padding is the maximum of the normal view's padding and the padding of the selector. <br /><br />"
"android.widget.AbsListView.MultiChoiceModeListener.ActionMode () "," Called when an item is checked or unchecked during selection mode. <br /><br />"
"android.widget.AbsListView.OnScrollListener.AbsListView () "," Callback method to be invoked while the list view or grid view is being scrolled. <br /><br />"
"android.widget.AbsListView.RecyclerListener.View () "," Indicates that the specified View was moved into the recycler's scrap heap. <br /><br />"
"android.widget.AbsListView.SelectionBoundsAdjuster.Rect () "," Called to allow the list item to adjust the bounds shown for its selection. <br /><br />"
"android.widget.AbsoluteLayout.AttributeSet () "," Returns a new set of layout parameters based on the supplied attributes set. <br /><br />"
"android.widget.AbsoluteLayout.shouldDelayChildPressedState () "," Return true if the pressed state should be delayed for children or descendants of this ViewGroup. <br /><br />"
"android.widget.AbsoluteLayout.LayoutParams.String () "," Returns a String representation of this set of layout parameters. <br /><br />"
"android.widget.AbsSeekBar.getSplitTrack () "," Returns whether the track should be split by the thumb. <br /><br />"
"android.widget.AbsSeekBar.onRtlPropertiesChanged (int layoutDirection) "," Called when any RTL property (layout direction or text direction or text alignment) has been changed. <br /><br />"
"android.widget.AbsSeekBar.MotionEvent () "," Implement this method to handle touch screen motion events. <br /><br />"
"android.widget.AbsSeekBar.drawableHotspotChanged (float x, float y) "," This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. <br /><br />"
"android.widget.AbsSeekBar.getKeyProgressIncrement () "," Returns the amount of progress changed via the arrow keys. <br /><br />"
"android.widget.AbsSeekBar.getThumb () "," Return the drawable used to represent the scroll thumb - the component that the user can drag back and forth indicating the current value by its position. <br /><br />"
"android.widget.AbsSeekBar.getThumbOffset () "," no description <br /><br />"
"android.widget.AbsSeekBar.Drawable.jumpToCurrentState () () "," Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view. <br /><br />"
"android.widget.AbsSeekBar.setKeyProgressIncrement (int increment) "," Sets the amount of progress changed via the arrow keys. <br /><br />"
"android.widget.AbsSeekBar.KEYCODE_ENTER () "," Default implementation of KeyEvent.Callback.onKeyDown(): perform press of the view when KEYCODE_DPAD_CENTER or KEYCODE_ENTER is released, if the view is enabled and clickable. <br /><br />"
"android.widget.AbsSeekBar.setThumbOffset (int thumbOffset) "," Sets the thumb offset that allows the thumb to extend out of the range of the track. <br /><br />"
"android.widget.AbsSeekBar.setThumbTintList (ColorStateList) () "," Specifies the blending mode used to apply the tint specified by setThumbTintList(ColorStateList)} to the thumb drawable. <br /><br />"
"android.widget.AbsSeekBar.getThumbTintList () "," Returns the tint applied to the thumb drawable, if specified. <br /><br />"
"android.widget.AbsSeekBar.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.AbsSeekBar.ColorStateList () "," Applies a tint to the thumb drawable. <br /><br />"
"android.widget.AbsSeekBar.Drawable () "," Sets the thumb that will be drawn at the end of the progress meter within the SeekBar. <br /><br />"
"android.widget.AbsSeekBar.getThumbTintMode () "," Returns the blending mode used to apply the tint to the thumb drawable, if specified. <br /><br />"
"android.widget.AbsSeekBar.setSplitTrack (boolean splitTrack) "," Specifies whether the track should be split by the thumb. <br /><br />"
"android.widget.AbsSeekBar.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.AbsSeekBar.Bundle () "," Performs the specified accessibility action on the view. <br /><br />"
"android.widget.AbsSeekBar.setMax (int max) "," Set the range of the progress bar to 0... <br /><br />"
"android.widget.AbsSpinner.onSaveInstanceState () "," Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. <br /><br />"
"android.widget.AbsSpinner.onSaveInstanceState () () "," Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState(). <br /><br />"
"android.widget.AbsSpinner.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.AbsSpinner.getSelectedView () "," no description <br /><br />"
"android.widget.AbsSpinner.requestLayout () "," Override to prevent spamming ourselves with layout requests as we place views <br /><br />"
"android.widget.AbsSpinner.getAdapter () "," Returns the adapter currently associated with this widget. <br /><br />"
"android.widget.AbsSpinner.pointToPosition (int x, int y) "," Maps a point to a position in the list. <br /><br />"
"android.widget.AbsSpinner.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.AbsSpinner.SpinnerAdapter () "," The Adapter is used to provide the data which backs this Spinner. <br /><br />"
"android.widget.AbsSpinner.getCount () "," no description <br /><br />"
"android.widget.AbsSpinner.setSelection (int position) "," Sets the currently selected item. <br /><br />"
"android.widget.AbsSpinner.setSelection (int position, boolean animate) "," Jump directly to a specific item in the adapter data. <br /><br />"
"android.widget.ActionMenuView.isOverflowMenuShowing () "," Check whether the overflow menu is currently showing. <br /><br />"
"android.widget.ActionMenuView.getPopupTheme () "," no description <br /><br />"
"android.widget.ActionMenuView.AttributeSet () "," Returns a new set of layout parameters based on the supplied attributes set. <br /><br />"
"android.widget.ActionMenuView.onDetachedFromWindow () "," This is called when the view is detached from a window. <br /><br />"
"android.widget.ActionMenuView.showOverflowMenu () "," Show the overflow items from the associated menu. <br /><br />"
"android.widget.ActionMenuView.dismissPopupMenus () "," Dismiss any popups associated with this menu view. <br /><br />"
"android.widget.ActionMenuView.setPopupTheme (int resId) "," Specifies the theme to use when inflating popup menus. <br /><br />"
"android.widget.ActionMenuView.hideOverflowMenu () "," Hide the overflow items from the associated menu. <br /><br />"
"android.widget.ActionMenuView.getMenu () "," Returns the Menu object that this ActionMenuView is currently presenting. <br /><br />"
"android.widget.ActionMenuView.ActionMenuView.OnMenuItemClickListener () "," no description <br /><br />"
"android.widget.ActionMenuView.Configuration () "," Called when the current configuration of the resources being used by the application have changed. <br /><br />"
"android.widget.ActionMenuView.View () "," Dispatches an AccessibilityEvent to the View first and then to its children for adding their text content to the event. <br /><br />"
"android.widget.ActionMenuView.OnMenuItemClickListener.MenuItem () "," This method will be invoked when a menu item is clicked if the item itself did not already handle the event. <br /><br />"
"android.widget.Adapter.getItem (int position) "," Get the data item associated with the specified position in the data set. <br /><br />"
"android.widget.Adapter.getView (int, View, ViewGroup) () "," Returns the number of types of Views that will be created by getView(int, View, ViewGroup). <br /><br />"
"android.widget.Adapter.registerDataSetObserver (DataSetObserver) () "," Unregister an observer that has previously been registered with this adapter via registerDataSetObserver(DataSetObserver). <br /><br />"
"android.widget.Adapter.DataSetObserver () "," Register an observer that is called when changes happen to the data used by this adapter. <br /><br />"
"android.widget.Adapter.isEmpty () "," no description <br /><br />"
"android.widget.Adapter.getCount () "," How many items are in the data set represented by this Adapter. <br /><br />"
"android.widget.Adapter.hasStableIds () "," Indicates whether the item ids are stable across changes to the underlying data. <br /><br />"
"android.widget.Adapter.ViewGroup () "," Get a View that displays the data at the specified position in the data set. <br /><br />"
"android.widget.Adapter.getView (int, View, ViewGroup) (int position) "," Get the type of View that will be created by getView(int, View, ViewGroup) for the specified item. <br /><br />"
"android.widget.Adapter.getItemId (int position) "," Get the row id associated with the specified position in the list. <br /><br />"
"android.widget.AdapterView&lt;T&nbsp;extends&nbsp;android.widget.Adapter&gt;.AdapterView.OnItemClickListener () "," Register a callback to be invoked when an item in this AdapterView has been clicked. <br /><br />"
"android.widget.AdapterView&lt;T&nbsp;extends&nbsp;android.widget.Adapter&gt;.getOnItemSelectedListener () "," no description <br /><br />"
"android.widget.AdapterView&lt;T&nbsp;extends&nbsp;android.widget.Adapter&gt;.getItemIdAtPosition (int position) "," no description <br /><br />"
"android.widget.AdapterView&lt;T&nbsp;extends&nbsp;android.widget.Adapter&gt;.getCount () "," no description <br /><br />"
"android.widget.AdapterView&lt;T&nbsp;extends&nbsp;android.widget.Adapter&gt;.getSelectedItem () "," no description <br /><br />"
"android.widget.AdapterView&lt;T&nbsp;extends&nbsp;android.widget.Adapter&gt;.removeViewAt (int index) "," This method is not supported and throws an UnsupportedOperationException when called. <br /><br />"
"android.widget.AdapterView&lt;T&nbsp;extends&nbsp;android.widget.Adapter&gt;.getOnItemLongClickListener () "," no description <br /><br />"
"android.widget.AdapterView&lt;T&nbsp;extends&nbsp;android.widget.Adapter&gt;.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.AdapterView&lt;T&nbsp;extends&nbsp;android.widget.Adapter&gt;.getSelectedItemPosition () "," Return the position of the currently selected item within the adapter's data set <br /><br />"
"android.widget.AdapterView&lt;T&nbsp;extends&nbsp;android.widget.Adapter&gt;.AdapterView.OnItemSelectedListener () "," Register a callback to be invoked when an item in this AdapterView has been selected. <br /><br />"
"android.widget.AdapterView&lt;T&nbsp;extends&nbsp;android.widget.Adapter&gt;.View.OnClickListener () "," Register a callback to be invoked when this view is clicked. <br /><br />"
"android.widget.AdapterView&lt;T&nbsp;extends&nbsp;android.widget.Adapter&gt;.getEmptyView () "," When the current adapter is empty, the AdapterView can display a special view called the empty view. <br /><br />"
"android.widget.AdapterView&lt;T&nbsp;extends&nbsp;android.widget.Adapter&gt;.getSelectedItemId () "," no description <br /><br />"
"android.widget.AdapterView&lt;T&nbsp;extends&nbsp;android.widget.Adapter&gt;.setFocusableInTouchMode (boolean focusable) "," Set whether this view can receive focus while in touch mode. <br /><br />"
"android.widget.AdapterView&lt;T&nbsp;extends&nbsp;android.widget.Adapter&gt;.getItemAtPosition (int position) "," Gets the data associated with the specified position in the list. <br /><br />"
"android.widget.AdapterView&lt;T&nbsp;extends&nbsp;android.widget.Adapter&gt;.getLastVisiblePosition () "," Returns the position within the adapter's data set for the last item displayed on screen. <br /><br />"
"android.widget.AdapterView&lt;T&nbsp;extends&nbsp;android.widget.Adapter&gt;.getOnItemClickListener () "," no description <br /><br />"
"android.widget.AdapterView&lt;T&nbsp;extends&nbsp;android.widget.Adapter&gt;.getFirstVisiblePosition () "," Returns the position within the adapter's data set for the first item displayed on screen. <br /><br />"
"android.widget.AdapterView&lt;T&nbsp;extends&nbsp;android.widget.Adapter&gt;.setSelection (int position) "," Sets the currently selected item. <br /><br />"
"android.widget.AdapterView&lt;T&nbsp;extends&nbsp;android.widget.Adapter&gt;.View () "," Sets the view to show if the adapter is empty <br /><br />"
"android.widget.AdapterView&lt;T&nbsp;extends&nbsp;android.widget.Adapter&gt;.getSelectedView () "," no description <br /><br />"
"android.widget.AdapterView&lt;T&nbsp;extends&nbsp;android.widget.Adapter&gt;.setAdapter (T adapter) "," Sets the adapter that provides the data and the views to represent the data in this widget. <br /><br />"
"android.widget.AdapterView&lt;T&nbsp;extends&nbsp;android.widget.Adapter&gt;.ViewGroup.LayoutParams () "," This method is not supported and throws an UnsupportedOperationException when called. <br /><br />"
"android.widget.AdapterView&lt;T&nbsp;extends&nbsp;android.widget.Adapter&gt;.getAdapter () "," Returns the adapter currently associated with this widget. <br /><br />"
"android.widget.AdapterView&lt;T&nbsp;extends&nbsp;android.widget.Adapter&gt;.AdapterView.OnItemLongClickListener () "," Register a callback to be invoked when an item in this AdapterView has been clicked and held <br /><br />"
"android.widget.AdapterView&lt;T&nbsp;extends&nbsp;android.widget.Adapter&gt;.setFocusable (boolean focusable) "," Set whether this view can receive the focus. <br /><br />"
"android.widget.AdapterView&lt;T&nbsp;extends&nbsp;android.widget.Adapter&gt;.AccessibilityEvent () "," Called when a child has requested sending an AccessibilityEvent and gives an opportunity to its parent to augment the event. <br /><br />"
"android.widget.AdapterView&lt;T&nbsp;extends&nbsp;android.widget.Adapter&gt;.removeAllViews () "," This method is not supported and throws an UnsupportedOperationException when called. <br /><br />"
"android.widget.AdapterView.OnItemClickListener.View () "," Callback method to be invoked when an item in this AdapterView has been clicked. <br /><br />"
"android.widget.AdapterView.OnItemLongClickListener.View () "," Callback method to be invoked when an item in this view has been clicked and held. <br /><br />"
"android.widget.AdapterView.OnItemSelectedListener.AdapterView () "," Callback method to be invoked when the selection disappears from this view. <br /><br />"
"android.widget.AdapterView.OnItemSelectedListener.View () "," Callback method to be invoked when an item in this view has been selected. <br /><br />"
"android.widget.AdapterViewAnimator.Adapter () "," Sets the adapter that provides the data and the views to represent the data in this widget. <br /><br />"
"android.widget.AdapterViewAnimator.setAnimateFirstView (boolean animate) "," Indicates whether the current View should be animated the first time the ViewAnimation is displayed. <br /><br />"
"android.widget.AdapterViewAnimator.showPrevious () "," Manually shows the previous child. <br /><br />"
"android.widget.AdapterViewAnimator.MotionEvent () "," Implement this method to handle touch screen motion events. <br /><br />"
"android.widget.AdapterViewAnimator.AppWidgetHost () "," Called by an AppWidgetHost in order to advance the current view when it is being used within an app widget. <br /><br />"
"android.widget.AdapterViewAnimator.onSaveInstanceState () "," Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. <br /><br />"
"android.widget.AdapterViewAnimator.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.AdapterViewAnimator.getOutAnimation () "," Returns the current animation used to animate a View that exits the screen. <br /><br />"
"android.widget.AdapterViewAnimator.getCurrentView () "," Returns the View corresponding to the currently displayed child. <br /><br />"
"android.widget.AdapterViewAnimator.deferNotifyDataSetChanged () "," This defers a notifyDataSetChanged on the pending RemoteViewsAdapter if it has not connected yet. <br /><br />"
"android.widget.AdapterViewAnimator.onRemoteAdapterConnected () "," Called back when the adapter connects to the RemoteViewsService. <br /><br />"
"android.widget.AdapterViewAnimator.setDisplayedChild (int whichChild) "," Sets which child view will be displayed. <br /><br />"
"android.widget.AdapterViewAnimator.advance () () "," Called by an AppWidgetHost to indicate that it will be automatically advancing the views of this AdapterViewAnimator by calling advance() at some point in the future. <br /><br />"
"android.widget.AdapterViewAnimator.onSaveInstanceState () () "," Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState(). <br /><br />"
"android.widget.AdapterViewAnimator.ObjectAnimator () "," Specifies the animation used to animate a View that exit the screen. <br /><br />"
"android.widget.AdapterViewAnimator.getBaseline () "," Return the offset of the widget's text baseline from the widget's top boundary. <br /><br />"
"android.widget.AdapterViewAnimator.onRemoteAdapterDisconnected () "," Called back when the adapter disconnects from the RemoteViewsService. <br /><br />"
"android.widget.AdapterViewAnimator.setSelection (int position) "," Sets the currently selected item. <br /><br />"
"android.widget.AdapterViewAnimator.getInAnimation () "," Returns the current animation used to animate a View that enters the screen. <br /><br />"
"android.widget.AdapterViewAnimator.getSelectedView () "," no description <br /><br />"
"android.widget.AdapterViewAnimator.Context () "," Specifies the animation used to animate a View that exit the screen. <br /><br />"
"android.widget.AdapterViewAnimator.getAdapter () "," Returns the adapter currently associated with this widget. <br /><br />"
"android.widget.AdapterViewAnimator.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.AdapterViewAnimator.showNext () "," Manually shows the next child. <br /><br />"
"android.widget.AdapterViewAnimator.Intent () "," Sets up this AdapterViewAnimator to use a remote views adapter which connects to a RemoteViewsService through the specified intent. <br /><br />"
"android.widget.AdapterViewAnimator.getDisplayedChild () "," Returns the index of the currently displayed child view. <br /><br />"
"android.widget.AdapterViewFlipper.Adapter () "," Sets the adapter that provides the data and the views to represent the data in this widget. <br /><br />"
"android.widget.AdapterViewFlipper.startFlipping () () "," Returns true if this view automatically calls startFlipping() when it becomes attached to a window. <br /><br />"
"android.widget.AdapterViewFlipper.startFlipping () "," Start a timer to cycle through child views <br /><br />"
"android.widget.AdapterViewFlipper.showPrevious () "," Manually shows the previous child. <br /><br />"
"android.widget.AdapterViewFlipper.getFlipInterval () "," Returns the flip interval, in milliseconds. <br /><br />"
"android.widget.AdapterViewFlipper.startFlipping () (boolean autoStart) "," Set if this view automatically calls startFlipping() when it becomes attached to a window. <br /><br />"
"android.widget.AdapterViewFlipper.stopFlipping () "," No more flips <br /><br />"
"android.widget.AdapterViewFlipper.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.AdapterViewFlipper.setFlipInterval (int flipInterval) "," How long to wait before flipping to the next view. <br /><br />"
"android.widget.AdapterViewFlipper.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.AdapterViewFlipper.isFlipping () "," Returns true if the child views are flipping. <br /><br />"
"android.widget.AdapterViewFlipper.showNext () "," Manually shows the next child. <br /><br />"
"android.widget.AdapterViewFlipper.advance () () "," Called by an AppWidgetHost to indicate that it will be automatically advancing the views of this AdapterViewFlipper by calling advance() at some point in the future. <br /><br />"
"android.widget.Advanceable.fyiWillBeAdvancedByHostKThx () "," Called by the AppWidgetHost once before it begins to call advance(), allowing the collection to do any required setup. <br /><br />"
"android.widget.Advanceable.advance () "," Advances this collection, eg. <br /><br />"
"android.widget.AlphabetIndexer.getSectionForPosition (int position) "," Returns the section index for a given position in the list by querying the item and comparing it with all items in the section array. <br /><br />"
"android.widget.AlphabetIndexer.Cursor () "," Sets a new cursor as the data set and resets the cache of indices. <br /><br />"
"android.widget.AlphabetIndexer.getPositionForSection (int sectionIndex) "," Performs a binary search or cache lookup to find the first row that matches a given section's starting letter. <br /><br />"
"android.widget.AlphabetIndexer.getSections () "," Returns the section array constructed from the alphabet provided in the constructor. <br /><br />"
"android.widget.ArrayAdapter&lt;T&gt;.remove (T object) "," Removes the specified object from the array. <br /><br />"
"android.widget.ArrayAdapter&lt;T&gt;.Comparator () "," Sorts the content of this adapter using the specified comparator. <br /><br />"
"android.widget.ArrayAdapter&lt;T&gt;.Collection () "," Adds the specified Collection at the end of the array. <br /><br />"
"android.widget.ArrayAdapter&lt;T&gt;.getCount () ","  <br /><br />"
"android.widget.ArrayAdapter&lt;T&gt;.ViewGroup () ","  <br /><br />"
"android.widget.ArrayAdapter&lt;T&gt;.addAll (T... items) "," Adds the specified items at the end of the array. <br /><br />"
"android.widget.ArrayAdapter&lt;T&gt;.View () "," Get a View that displays in the drop down popup the data at the specified position in the data set. <br /><br />"
"android.widget.ArrayAdapter&lt;T&gt;.add (T object) "," Adds the specified object at the end of the array. <br /><br />"
"android.widget.ArrayAdapter&lt;T&gt;.getItemId (int position) ","  <br /><br />"
"android.widget.ArrayAdapter&lt;T&gt;.getItem (int position) ","  <br /><br />"
"android.widget.ArrayAdapter&lt;T&gt;.notifyDataSetChanged () (boolean notifyOnChange) "," Control whether methods that change the list ( add(T), insert(T, int), remove(T), clear()) automatically call notifyDataSetChanged(). <br /><br />"
"android.widget.ArrayAdapter&lt;T&gt;.Context () "," Creates a new ArrayAdapter from external resources. <br /><br />"
"android.widget.ArrayAdapter&lt;T&gt;.clear () "," Remove all elements from the list. <br /><br />"
"android.widget.ArrayAdapter&lt;T&gt;.insert (T object, int index) "," Inserts the specified object at the specified index in the array. <br /><br />"
"android.widget.ArrayAdapter&lt;T&gt;.getFilter () "," Returns a filter that can be used to constrain data with a filtering pattern. <br /><br />"
"android.widget.ArrayAdapter&lt;T&gt;.getPosition (T item) "," Returns the position of the specified item in the array. <br /><br />"
"android.widget.ArrayAdapter&lt;T&gt;.setDropDownViewResource (int resource) "," Sets the layout resource to create the drop down views. <br /><br />"
"android.widget.ArrayAdapter&lt;T&gt;.notifyDataSetChanged () "," Notifies the attached observers that the underlying data has been changed and any View reflecting the data set should refresh itself. <br /><br />"
"android.widget.ArrayAdapter&lt;T&gt;.getContext () "," Returns the context associated with this array adapter. <br /><br />"
"android.widget.AutoCompleteTextView.AdapterView.OnItemClickListener () "," Sets the listener that will be notified when the user clicks an item in the drop down list. <br /><br />"
"android.widget.AutoCompleteTextView.setDropDownHeight (int height) "," Sets the current height for the auto-complete drop down list. <br /><br />"
"android.widget.AutoCompleteTextView.getOnItemSelectedListener () "," Returns the listener that is notified whenever the user selects an item in the drop down list. <br /><br />"
"android.widget.AutoCompleteTextView.dismissDropDown () "," Closes the drop down if present on screen. <br /><br />"
"android.widget.AutoCompleteTextView.getDropDownHeight () "," Returns the current height for the auto-complete drop down list. <br /><br />"
"android.widget.AutoCompleteTextView.setDropDownWidth (int width) "," Sets the current width for the auto-complete drop down list. <br /><br />"
"android.widget.AutoCompleteTextView.isPopupShowing () "," Indicates whether the popup menu is showing. <br /><br />"
"android.widget.AutoCompleteTextView.getDropDownAnchor () "," Returns the id for the view that the auto-complete drop down list is anchored to. <br /><br />"
"android.widget.AutoCompleteTextView.getDropDownWidth () "," Returns the current width for the auto-complete drop down list. <br /><br />"
"android.widget.AutoCompleteTextView.isPerformingCompletion () "," Identifies whether the view is currently performing a text completion, so subclasses can decide whether to respond to text changed events. <br /><br />"
"android.widget.AutoCompleteTextView.setDropDownBackgroundResource (int id) "," Sets the background of the auto-complete drop-down list. <br /><br />"
"android.widget.AutoCompleteTextView.Drawable () "," Sets the background of the auto-complete drop-down list. <br /><br />"
"android.widget.AutoCompleteTextView.performCompletion () "," Performs the text completion by converting the selected item from the drop down list into a string, replacing the text box's content with this string and finally dismissing the drop down menu. <br /><br />"
"android.widget.AutoCompleteTextView.AdapterView.OnItemSelectedListener () "," Sets the listener that will be notified when the user selects an item in the drop down list. <br /><br />"
"android.widget.AutoCompleteTextView.View.OnClickListener () "," Register a callback to be invoked when this view is clicked. <br /><br />"
"android.widget.AutoCompleteTextView.setDropDownHorizontalOffset (int offset) "," Sets the horizontal offset used for the auto-complete drop-down list. <br /><br />"
"android.widget.AutoCompleteTextView.setValidator (AutoCompleteTextView.Validator) () "," Returns the Validator set with setValidator(AutoCompleteTextView.Validator), or null if it was not set. <br /><br />"
"android.widget.AutoCompleteTextView.onWindowFocusChanged (boolean hasWindowFocus) "," Called when the window containing this view gains or loses focus. <br /><br />"
"android.widget.AutoCompleteTextView.AutoCompleteTextView.Validator () "," Sets the validator used to perform text validation. <br /><br />"
"android.widget.AutoCompleteTextView.getDropDownHorizontalOffset () "," Gets the horizontal offset used for the auto-complete drop-down list. <br /><br />"
"android.widget.AutoCompleteTextView.setDropDownAnchor (int id) "," Sets the view to which the auto-complete drop down list should anchor. <br /><br />"
"android.widget.AutoCompleteTextView.getOnItemSelectedListener () () "," This method was deprecated in API level 3. Use getOnItemSelectedListener() intead <br /><br />"
"android.widget.AutoCompleteTextView.getThreshold () "," Returns the number of characters the user must type before the drop down list is shown. <br /><br />"
"android.widget.AutoCompleteTextView.getDropDownBackground () "," Gets the background of the auto-complete drop-down list. <br /><br />"
"android.widget.AutoCompleteTextView.onFilterComplete (int count) "," Notifies the end of a filtering operation. <br /><br />"
"android.widget.AutoCompleteTextView.performValidation () "," If a validator was set on this view and the current string is not valid, ask the validator to fix it. <br /><br />"
"android.widget.AutoCompleteTextView.getOnItemClickListener () "," Returns the listener that is notified whenever the user clicks an item in the drop down list. <br /><br />"
"android.widget.AutoCompleteTextView.InputConnection.commitCompletion () () "," Called by the framework in response to a text completion from the current input method, provided by it calling InputConnection.commitCompletion(). <br /><br />"
"android.widget.AutoCompleteTextView.CharSequence () "," Sets the optional hint text that is displayed at the bottom of the the matching list. <br /><br />"
"android.widget.AutoCompleteTextView.getCompletionHint () "," Gets the optional hint text displayed at the bottom of the the matching list. <br /><br />"
"android.widget.AutoCompleteTextView.getThreshold () () "," Returns true if the amount of text in the field meets or exceeds the getThreshold() requirement. <br /><br />"
"android.widget.AutoCompleteTextView.KEYCODE_ENTER () "," Default implementation of KeyEvent.Callback.onKeyUp(): perform clicking of the view when KEYCODE_DPAD_CENTER or KEYCODE_ENTER is released. <br /><br />"
"android.widget.AutoCompleteTextView.setText (CharSequence) () "," Like setText(CharSequence), except that it can disable filtering. <br /><br />"
"android.widget.AutoCompleteTextView.showDropDown () "," Displays the drop down on screen. <br /><br />"
"android.widget.AutoCompleteTextView.getOnItemClickListener () () "," This method was deprecated in API level 3. Use getOnItemClickListener() intead <br /><br />"
"android.widget.AutoCompleteTextView.setAdapter (T adapter) "," Changes the list of data used for auto completion. <br /><br />"
"android.widget.AutoCompleteTextView.getDropDownVerticalOffset () "," Gets the vertical offset used for the auto-complete drop-down list. <br /><br />"
"android.widget.AutoCompleteTextView.setDropDownVerticalOffset (int offset) "," Sets the vertical offset used for the auto-complete drop-down list. <br /><br />"
"android.widget.AutoCompleteTextView.clearListSelection () "," Clear the list selection. <br /><br />"
"android.widget.AutoCompleteTextView.AutoCompleteTextView.OnDismissListener () "," Set a listener that will be invoked whenever the AutoCompleteTextView's list of completions is dismissed. <br /><br />"
"android.widget.AutoCompleteTextView.KeyEvent () "," Handle a key event before it is processed by any input method associated with the view hierarchy. <br /><br />"
"android.widget.AutoCompleteTextView.getAdapter () "," Returns a filterable list adapter used for auto completion. <br /><br />"
"android.widget.AutoCompleteTextView.setListSelection (int position) "," Set the position of the dropdown view selection. <br /><br />"
"android.widget.AutoCompleteTextView.setThreshold (int threshold) "," Specifies the minimum number of characters the user has to type in the edit box before the drop down list is shown. <br /><br />"
"android.widget.AutoCompleteTextView.getListSelection () "," Get the position of the dropdown view selection, if there is one. <br /><br />"
"android.widget.AutoCompleteTextView.OnDismissListener.onDismiss () "," This method will be invoked whenever the AutoCompleteTextView's list of completion options has been dismissed and is no longer available for user interaction. <br /><br />"
"android.widget.AutoCompleteTextView.Validator.CharSequence () "," Validates the specified text. <br /><br />"
"android.widget.BaseAdapter.getView (int, View, ViewGroup) () "," Returns the number of types of Views that will be created by getView(int, View, ViewGroup). <br /><br />"
"android.widget.BaseAdapter.isEnabled (int position) "," Returns true if the item at the specified position is not a separator. <br /><br />"
"android.widget.BaseAdapter.registerDataSetObserver (DataSetObserver) () "," Unregister an observer that has previously been registered with this adapter via registerDataSetObserver(DataSetObserver). <br /><br />"
"android.widget.BaseAdapter.DataSetObserver () "," Register an observer that is called when changes happen to the data used by this adapter. <br /><br />"
"android.widget.BaseAdapter.isEmpty () "," no description <br /><br />"
"android.widget.BaseAdapter.hasStableIds () "," Indicates whether the item ids are stable across changes to the underlying data. <br /><br />"
"android.widget.BaseAdapter.notifyDataSetInvalidated () "," Notifies the attached observers that the underlying data is no longer valid or available. <br /><br />"
"android.widget.BaseAdapter.getView (int, View, ViewGroup) (int position) "," Get the type of View that will be created by getView(int, View, ViewGroup) for the specified item. <br /><br />"
"android.widget.BaseAdapter.View () "," Get a View that displays in the drop down popup the data at the specified position in the data set. <br /><br />"
"android.widget.BaseAdapter.areAllItemsEnabled () "," Indicates whether all the items in this adapter are enabled. <br /><br />"
"android.widget.BaseAdapter.notifyDataSetChanged () "," Notifies the attached observers that the underlying data has been changed and any View reflecting the data set should refresh itself. <br /><br />"
"android.widget.BaseExpandableListAdapter.onGroupExpanded (int groupPosition) "," Called when a group is expanded. <br /><br />"
"android.widget.BaseExpandableListAdapter.getChildView (int, int, boolean, View, ViewGroup) () "," Returns the number of types of child Views that will be created by getChildView(int, int, boolean, View, ViewGroup) . <br /><br />"
"android.widget.BaseExpandableListAdapter.onGroupCollapsed (int groupPosition) "," Called when a group is collapsed. <br /><br />"
"android.widget.BaseExpandableListAdapter.getChildView (int, int, boolean, View, ViewGroup) (int groupPosition, int childPosition) "," Get the type of child View that will be created by getChildView(int, int, boolean, View, ViewGroup) for the specified child item. <br /><br />"
"android.widget.BaseExpandableListAdapter.getGroupView (int, boolean, View, ViewGroup) (int groupPosition) "," Get the type of group View that will be created by getGroupView(int, boolean, View, ViewGroup) . <br /><br />"
"android.widget.BaseExpandableListAdapter.getGroupView (int, boolean, View, ViewGroup) () "," Returns the number of types of group Views that will be created by getGroupView(int, boolean, View, ViewGroup) . <br /><br />"
"android.widget.BaseExpandableListAdapter.notifyDataSetInvalidated () "," no description <br /><br />"
"android.widget.BaseExpandableListAdapter.areAllItemsEnabled () "," no description <br /><br />"
"android.widget.BaseExpandableListAdapter.getCombinedGroupId (long groupId) "," Override this method if you foresee a clash in IDs based on this scheme:  Base implementation returns a long:   bit 0: Whether this ID points to a child (unset) or group (set), so for this method this bit will be 0. <br /><br />"
"android.widget.BaseExpandableListAdapter.DataSetObserver () "," no description <br /><br />"
"android.widget.BaseExpandableListAdapter.isEmpty () ","  <br /><br />"
"android.widget.BaseExpandableListAdapter.getCombinedChildId (long groupId, long childId) "," Override this method if you foresee a clash in IDs based on this scheme:  Base implementation returns a long:   bit 0: Whether this ID points to a child (unset) or group (set), so for this method this bit will be 1. <br /><br />"
"android.widget.BaseExpandableListAdapter.notifyDataSetChanged () "," no description <br /><br />"
"android.widget.Button.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.Button.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.CalendarView.setShowWeekNumber (boolean showWeekNumber) "," Sets whether to show the week number. <br /><br />"
"android.widget.CalendarView.getDefault () (long date, boolean animate, boolean center) "," Sets the selected date in milliseconds since January 1, 1970 00:00:00 in getDefault() time zone. <br /><br />"
"android.widget.CalendarView.getDefault () (long minDate) "," Sets the minimal date supported by this CalendarView in milliseconds since January 1, 1970 00:00:00 in getDefault() time zone. <br /><br />"
"android.widget.CalendarView.setFirstDayOfWeek (int firstDayOfWeek) "," Sets the first day of week. <br /><br />"
"android.widget.CalendarView.getDefault () (long maxDate) "," Sets the maximal date supported by this CalendarView in milliseconds since January 1, 1970 00:00:00 in getDefault() time zone. <br /><br />"
"android.widget.CalendarView.getShowWeekNumber () "," Gets whether to show the week number. <br /><br />"
"android.widget.CalendarView.getShownWeekCount () "," Gets the number of weeks to be shown. <br /><br />"
"android.widget.CalendarView.getUnfocusedMonthDateColor () "," Gets the color for the dates in a not focused month. <br /><br />"
"android.widget.CalendarView.getDateTextAppearance () "," Gets the text appearance for the calendar dates. <br /><br />"
"android.widget.CalendarView.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.CalendarView.Drawable () "," Sets the drawable for the vertical bar shown at the beginning and at the end of the selected date. <br /><br />"
"android.widget.CalendarView.setWeekSeparatorLineColor (int color) "," Sets the color for the separator line between weeks. <br /><br />"
"android.widget.CalendarView.setSelectedDateVerticalBar (int resourceId) "," Sets the drawable for the vertical bar shown at the beginning and at the end of the selected date. <br /><br />"
"android.widget.CalendarView.getFocusedMonthDateColor () "," Gets the color for the dates in the focused month. <br /><br />"
"android.widget.CalendarView.setDateTextAppearance (int resourceId) "," Sets the text appearance for the calendar dates. <br /><br />"
"android.widget.CalendarView.getDefault () () "," Gets the minimal date supported by this CalendarView in milliseconds since January 1, 1970 00:00:00 in getDefault() time zone. <br /><br />"
"android.widget.CalendarView.getWeekDayTextAppearance () "," Gets the text appearance for the week day abbreviation of the calendar header. <br /><br />"
"android.widget.CalendarView.getDefault () (long date) "," Sets the selected date in milliseconds since January 1, 1970 00:00:00 in getDefault() time zone. <br /><br />"
"android.widget.CalendarView.setUnfocusedMonthDateColor (int color) "," Sets the color for the dates of a not focused month. <br /><br />"
"android.widget.CalendarView.setWeekNumberColor (int color) "," Sets the color for the week numbers. <br /><br />"
"android.widget.CalendarView.setFocusedMonthDateColor (int color) "," Sets the color for the dates of the focused month. <br /><br />"
"android.widget.CalendarView.CalendarView.OnDateChangeListener () "," Sets the listener to be notified upon selected date change. <br /><br />"
"android.widget.CalendarView.setShownWeekCount (int count) "," Sets the number of weeks to be shown. <br /><br />"
"android.widget.CalendarView.setSelectedWeekBackgroundColor (int color) "," Sets the background color for the selected week. <br /><br />"
"android.widget.CalendarView.getWeekNumberColor () "," Gets the color for the week numbers. <br /><br />"
"android.widget.CalendarView.getWeekSeparatorLineColor () "," Gets the color for the separator line between weeks. <br /><br />"
"android.widget.CalendarView.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.CalendarView.setWeekDayTextAppearance (int resourceId) "," Sets the text appearance for the week day abbreviation of the calendar header. <br /><br />"
"android.widget.CalendarView.getFirstDayOfWeek () "," Gets the first day of week. <br /><br />"
"android.widget.CalendarView.getSelectedWeekBackgroundColor () "," Gets the background color for the selected week. <br /><br />"
"android.widget.CalendarView.getSelectedDateVerticalBar () "," Gets the drawable for the vertical bar shown at the beginning and at the end of the selected date. <br /><br />"
"android.widget.CalendarView.OnDateChangeListener.CalendarView () "," Called upon change of the selected day. <br /><br />"
"android.widget.Checkable.toggle () "," Change the checked state of the view to the inverse of its current state <br /><br />"
"android.widget.Checkable.setChecked (boolean checked) "," Change the checked state of the view <br /><br />"
"android.widget.Checkable.isChecked () "," no description <br /><br />"
"android.widget.CheckBox.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.CheckBox.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.CheckedTextView.toggle () "," Change the checked state of the view to the inverse of its current state <br /><br />"
"android.widget.CheckedTextView.onRtlPropertiesChanged (int layoutDirection) "," Called when any RTL property (layout direction or text direction or text alignment) has been changed. <br /><br />"
"android.widget.CheckedTextView.setChecked (boolean checked) "," Changes the checked state of this text view. <br /><br />"
"android.widget.CheckedTextView.setVisibility (int visibility) "," Set the enabled state of this view. <br /><br />"
"android.widget.CheckedTextView.getCheckMarkTintMode () "," Returns the blending mode used to apply the tint to the check mark drawable, if specified. <br /><br />"
"android.widget.CheckedTextView.drawableHotspotChanged (float x, float y) "," This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. <br /><br />"
"android.widget.CheckedTextView.Drawable.jumpToCurrentState () () "," Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view. <br /><br />"
"android.widget.CheckedTextView.setCheckMarkTintList (ColorStateList) () "," Specifies the blending mode used to apply the tint specified by setCheckMarkTintList(ColorStateList) to the check mark drawable. <br /><br />"
"android.widget.CheckedTextView.getCheckMarkDrawable () "," Gets the checkmark drawable <br /><br />"
"android.widget.CheckedTextView.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.CheckedTextView.ColorStateList () "," Applies a tint to the check mark drawable. <br /><br />"
"android.widget.CheckedTextView.getCheckMarkTintList () "," Returns the tint applied to the check mark drawable, if specified. <br /><br />"
"android.widget.CheckedTextView.Drawable () "," Set the checkmark to a given Drawable. <br /><br />"
"android.widget.CheckedTextView.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.CheckedTextView.isChecked () "," no description <br /><br />"
"android.widget.CheckedTextView.setCheckMarkDrawable (int resid) "," Set the checkmark to a given Drawable, identified by its resourece id. <br /><br />"
"android.widget.Chronometer.String () "," Sets the format string used for display. <br /><br />"
"android.widget.Chronometer.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.Chronometer.stop () "," Stop counting up. <br /><br />"
"android.widget.Chronometer.getOnChronometerTickListener () "," no description <br /><br />"
"android.widget.Chronometer.Chronometer.OnChronometerTickListener () "," Sets the listener to be called when the chronometer changes. <br /><br />"
"android.widget.Chronometer.setBase (long base) "," Set the time that the count-up timer is in reference to. <br /><br />"
"android.widget.Chronometer.setBase (long) () "," Return the base time as set through setBase(long). <br /><br />"
"android.widget.Chronometer.start () "," Start counting up. <br /><br />"
"android.widget.Chronometer.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.Chronometer.setFormat (String) () "," Returns the current format string as set through setFormat(String). <br /><br />"
"android.widget.Chronometer.OnChronometerTickListener.Chronometer () "," Notification that the chronometer has changed. <br /><br />"
"android.widget.CompoundButton.onSaveInstanceState () () "," Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState(). <br /><br />"
"android.widget.CompoundButton.toggle () "," Change the checked state of the view to the inverse of its current state <br /><br />"
"android.widget.CompoundButton.setChecked (boolean checked) "," Changes the checked state of this button. <br /><br />"
"android.widget.CompoundButton.setButtonTintList (ColorStateList) () "," Specifies the blending mode used to apply the tint specified by setButtonTintList(ColorStateList)} to the button drawable. <br /><br />"
"android.widget.CompoundButton.performClick () "," Call this view's OnClickListener, if it is defined. <br /><br />"
"android.widget.CompoundButton.CompoundButton.OnCheckedChangeListener () "," Register a callback to be invoked when the checked state of this button changes. <br /><br />"
"android.widget.CompoundButton.drawableHotspotChanged (float x, float y) "," This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. <br /><br />"
"android.widget.CompoundButton.Drawable.jumpToCurrentState () () "," Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view. <br /><br />"
"android.widget.CompoundButton.getButtonTintMode () "," no description <br /><br />"
"android.widget.CompoundButton.setButtonDrawable (int resid) "," Set the button graphic to a given Drawable, identified by its resource id. <br /><br />"
"android.widget.CompoundButton.onSaveInstanceState () "," Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. <br /><br />"
"android.widget.CompoundButton.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.CompoundButton.ColorStateList () "," Applies a tint to the button drawable. <br /><br />"
"android.widget.CompoundButton.Drawable () "," Set the button graphic to a given Drawable <br /><br />"
"android.widget.CompoundButton.getButtonTintList () "," no description <br /><br />"
"android.widget.CompoundButton.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.CompoundButton.getCompoundPaddingLeft () "," Returns the left padding of the view, plus space for the left Drawable if any. <br /><br />"
"android.widget.CompoundButton.getCompoundPaddingRight () "," Returns the right padding of the view, plus space for the right Drawable if any. <br /><br />"
"android.widget.CompoundButton.isChecked () "," no description <br /><br />"
"android.widget.CompoundButton.OnCheckedChangeListener.CompoundButton () "," Called when the checked state of a compound button has changed. <br /><br />"
"android.widget.CursorAdapter.getItem (int position) "," no description <br /><br />"
"android.widget.CursorAdapter.Cursor () "," Swap in a new Cursor, returning the old Cursor. <br /><br />"
"android.widget.CursorAdapter.getCursor () "," Returns the cursor. <br /><br />"
"android.widget.CursorAdapter.FilterQueryProvider () "," Sets the query filter provider used to filter the current Cursor. <br /><br />"
"android.widget.CursorAdapter.getCount () "," no description <br /><br />"
"android.widget.CursorAdapter.CharSequence () "," Runs a query with the specified constraint. <br /><br />"
"android.widget.CursorAdapter.hasStableIds () "," Indicates whether the item ids are stable across changes to the underlying data. <br /><br />"
"android.widget.CursorAdapter.ViewGroup () "," Makes a new view to hold the data pointed to by cursor. <br /><br />"
"android.widget.CursorAdapter.getFilter () "," Returns a filter that can be used to constrain data with a filtering pattern. <br /><br />"
"android.widget.CursorAdapter.View () "," Get a View that displays in the drop down popup the data at the specified position in the data set. <br /><br />"
"android.widget.CursorAdapter.getFilterQueryProvider () "," Returns the query filter provider used for filtering. <br /><br />"
"android.widget.CursorAdapter.getItemId (int position) "," no description <br /><br />"
"android.widget.CursorTreeAdapter.getChildId (int groupPosition, int childPosition) "," no description <br /><br />"
"android.widget.CursorTreeAdapter.onGroupCollapsed (int groupPosition) "," Called when a group is collapsed. <br /><br />"
"android.widget.CursorTreeAdapter.getCursor () "," no description <br /><br />"
"android.widget.CursorTreeAdapter.FilterQueryProvider () "," no description <br /><br />"
"android.widget.CursorTreeAdapter.getChild (int groupPosition, int childPosition) "," no description <br /><br />"
"android.widget.CursorTreeAdapter.CharSequence () "," no description <br /><br />"
"android.widget.CursorTreeAdapter.ViewGroup () "," no description <br /><br />"
"android.widget.CursorTreeAdapter.hasStableIds () "," no description <br /><br />"
"android.widget.CursorTreeAdapter.notifyDataSetInvalidated () "," no description <br /><br />"
"android.widget.CursorTreeAdapter.getFilterQueryProvider () "," no description <br /><br />"
"android.widget.CursorTreeAdapter.getGroupCount () "," no description <br /><br />"
"android.widget.CursorTreeAdapter.Cursor () "," Sets the group Cursor. <br /><br />"
"android.widget.CursorTreeAdapter.getGroupId (int groupPosition) "," no description <br /><br />"
"android.widget.CursorTreeAdapter.notifyDataSetChanged (boolean releaseCursors) "," Notifies a data set change, but with the option of not releasing any cached cursors. <br /><br />"
"android.widget.CursorTreeAdapter.getChildrenCount (int groupPosition) "," no description <br /><br />"
"android.widget.CursorTreeAdapter.getFilter () "," Returns a filter that can be used to constrain data with a filtering pattern. <br /><br />"
"android.widget.CursorTreeAdapter.getGroup (int groupPosition) "," no description <br /><br />"
"android.widget.CursorTreeAdapter.isChildSelectable (int groupPosition, int childPosition) "," no description <br /><br />"
"android.widget.CursorTreeAdapter.notifyDataSetChanged () "," no description <br /><br />"
"android.widget.DatePicker.updateDate (int year, int month, int dayOfMonth) "," Update the current date. <br /><br />"
"android.widget.DatePicker.getSpinnersShown () "," Gets whether the spinners are shown. <br /><br />"
"android.widget.DatePicker.getDefault () (long minDate) "," Sets the minimal date supported by this NumberPicker in milliseconds since January 1, 1970 00:00:00 in getDefault() time zone. <br /><br />"
"android.widget.DatePicker.getDefault () () "," Gets the minimal date supported by this DatePicker in milliseconds since January 1, 1970 00:00:00 in getDefault() time zone. <br /><br />"
"android.widget.DatePicker.getDefault () (long maxDate) "," Sets the maximal date supported by this DatePicker in milliseconds since January 1, 1970 00:00:00 in getDefault() time zone. <br /><br />"
"android.widget.DatePicker.setFirstDayOfWeek (int firstDayOfWeek) "," Sets the first day of week. <br /><br />"
"android.widget.DatePicker.getMonth () "," no description <br /><br />"
"android.widget.DatePicker.getDayOfMonth () "," no description <br /><br />"
"android.widget.DatePicker.View () "," Dispatches an AccessibilityEvent to the View first and then to its children for adding their text content to the event. <br /><br />"
"android.widget.DatePicker.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.DatePicker.setSpinnersShown (boolean shown) "," Sets whether the spinners are shown. <br /><br />"
"android.widget.DatePicker.dispatchPopulateAccessibilityEvent (AccessibilityEvent) () "," Called from dispatchPopulateAccessibilityEvent(AccessibilityEvent) giving a chance to this View to populate the accessibility event with its text content. <br /><br />"
"android.widget.DatePicker.CalendarView (boolean shown) "," Sets whether the CalendarView is shown. <br /><br />"
"android.widget.DatePicker.isEnabled () "," Returns the enabled status for this view. <br /><br />"
"android.widget.DatePicker.getYear () "," no description <br /><br />"
"android.widget.DatePicker.DatePicker.OnDateChangedListener () "," Initialize the state. <br /><br />"
"android.widget.DatePicker.setEnabled (boolean enabled) "," Set the enabled state of this view. <br /><br />"
"android.widget.DatePicker.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.DatePicker.getFirstDayOfWeek () "," Gets the first day of week. <br /><br />"
"android.widget.DatePicker.CalendarView () "," Gets whether the CalendarView is shown. <br /><br />"
"android.widget.DatePicker.OnDateChangedListener.DatePicker () "," Called upon a date change. <br /><br />"
"android.widget.DialerFilter.TextWatcher () "," no description <br /><br />"
"android.widget.DialerFilter.String () "," no description <br /><br />"
"android.widget.DialerFilter.getFilterText () "," no description <br /><br />"
"android.widget.DialerFilter.isQwertyKeyboard () "," no description <br /><br />"
"android.widget.DialerFilter.clearText () "," Clears both the digits and the filter text. <br /><br />"
"android.widget.DialerFilter.getDigits () "," no description <br /><br />"
"android.widget.DialerFilter.getLetters () "," no description <br /><br />"
"android.widget.DialerFilter.setMode (int newMode) "," Change the mode of the widget. <br /><br />"
"android.widget.DialerFilter.KEYCODE_ENTER () "," Default implementation of KeyEvent.Callback.onKeyUp(): perform clicking of the view when KEYCODE_DPAD_CENTER or KEYCODE_ENTER is released. <br /><br />"
"android.widget.DialerFilter.getMode () "," no description <br /><br />"
"android.widget.DigitalClock.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.DigitalClock.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.EdgeEffect.finish () "," Immediately finish the current animation. <br /><br />"
"android.widget.EdgeEffect.onRelease () "," Call when the object is released after being pulled. <br /><br />"
"android.widget.EdgeEffect.isFinished () "," Reports if this EdgeEffect's animation is finished. <br /><br />"
"android.widget.EdgeEffect.setSize (int width, int height) "," Set the size of this edge effect in pixels. <br /><br />"
"android.widget.EdgeEffect.onPull (float deltaDistance) "," A view should call this when content is pulled away from an edge by the user. <br /><br />"
"android.widget.EdgeEffect.Canvas () "," Draw into the provided canvas. <br /><br />"
"android.widget.EdgeEffect.onPull (float deltaDistance, float displacement) "," A view should call this when content is pulled away from an edge by the user. <br /><br />"
"android.widget.EdgeEffect.getColor () "," Return the color of this edge effect in argb. <br /><br />"
"android.widget.EdgeEffect.setColor (int color) "," Set the color of this edge effect in argb. <br /><br />"
"android.widget.EdgeEffect.input size () "," Return the maximum height that the edge effect will be drawn at given the original input size. <br /><br />"
"android.widget.EdgeEffect.onAbsorb (int velocity) "," Call when the effect absorbs an impact at the given velocity. <br /><br />"
"android.widget.EditText.TextUtils.TruncateAt () "," Causes words in the text that are longer than the view is wide to be ellipsized instead of broken in the middle. <br /><br />"
"android.widget.EditText.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.EditText.setSelection (Spannable, int) (int index) "," Convenience for setSelection(Spannable, int). <br /><br />"
"android.widget.EditText.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.EditText.extendSelection (Spannable, int) (int index) "," Convenience for extendSelection(Spannable, int). <br /><br />"
"android.widget.EditText.selectAll (Spannable) () "," Convenience for selectAll(Spannable). <br /><br />"
"android.widget.EditText.Bundle () "," Performs the specified accessibility action on the view. <br /><br />"
"android.widget.EditText.getText () "," Return the text the TextView is displaying. <br /><br />"
"android.widget.EditText.setSelection (Spannable, int, int) (int start, int stop) "," Convenience for setSelection(Spannable, int, int). <br /><br />"
"android.widget.EditText.setText (CharSequence) () "," Sets the text that this TextView is to display (see setText(CharSequence)) and also sets whether it is stored in a styleable/spannable buffer and whether it is editable. <br /><br />"
"android.widget.ExpandableListAdapter.getChildId (int groupPosition, int childPosition) "," Gets the ID for the given child within the given group. <br /><br />"
"android.widget.ExpandableListAdapter.onGroupExpanded (int groupPosition) "," Called when a group is expanded. <br /><br />"
"android.widget.ExpandableListAdapter.onGroupCollapsed (int groupPosition) "," Called when a group is collapsed. <br /><br />"
"android.widget.ExpandableListAdapter.getChild (int groupPosition, int childPosition) "," Gets the data associated with the given child within the given group. <br /><br />"
"android.widget.ExpandableListAdapter.ViewGroup () "," Gets a View that displays the given group. <br /><br />"
"android.widget.ExpandableListAdapter.hasStableIds () "," Indicates whether the child and group IDs are stable across changes to the underlying data. <br /><br />"
"android.widget.ExpandableListAdapter.areAllItemsEnabled () "," no description <br /><br />"
"android.widget.ExpandableListAdapter.getGroupCount () "," Gets the number of groups. <br /><br />"
"android.widget.ExpandableListAdapter.getCombinedGroupId (long groupId) "," Gets an ID for a group that is unique across any item (either group or child) that is in this list. <br /><br />"
"android.widget.ExpandableListAdapter.getGroupId (int groupPosition) "," Gets the ID for the group at the given position. <br /><br />"
"android.widget.ExpandableListAdapter.DataSetObserver () "," no description <br /><br />"
"android.widget.ExpandableListAdapter.isEmpty () "," no description <br /><br />"
"android.widget.ExpandableListAdapter.getChildrenCount (int groupPosition) "," Gets the number of children in a specified group. <br /><br />"
"android.widget.ExpandableListAdapter.getGroup (int groupPosition) "," Gets the data associated with the given group. <br /><br />"
"android.widget.ExpandableListAdapter.isChildSelectable (int groupPosition, int childPosition) "," Whether the child at the specified position is selectable. <br /><br />"
"android.widget.ExpandableListAdapter.getCombinedChildId (long groupId, long childId) "," Gets an ID for a child that is unique across any item (either group or child) that is in this list. <br /><br />"
"android.widget.ExpandableListView.AdapterView.OnItemClickListener () "," Register a callback to be invoked when an item has been clicked and the caller prefers to receive a ListView-style position instead of a group and/or child position. <br /><br />"
"android.widget.ExpandableListView.getExpandableListAdapter () "," Gets the adapter that provides data to this view. <br /><br />"
"android.widget.ExpandableListView.onRtlPropertiesChanged (int layoutDirection) "," Called when any RTL property (layout direction or text direction or text alignment) has been changed. <br /><br />"
"android.widget.ExpandableListView.setSelectedGroup (int groupPosition) "," Sets the selection to the specified group. <br /><br />"
"android.widget.ExpandableListView.ExpandableListView.OnGroupCollapseListener () "," no description <br /><br />"
"android.widget.ExpandableListView.isGroupExpanded (int groupPosition) "," Whether the given group is currently expanded. <br /><br />"
"android.widget.ExpandableListView.getSelectedPosition () "," Gets the position of the currently selected group or child (along with its type). <br /><br />"
"android.widget.ExpandableListView.ExpandableListAdapter () "," Sets the adapter that provides data to this view. <br /><br />"
"android.widget.ExpandableListView.ExpandableListView.OnGroupClickListener () "," no description <br /><br />"
"android.widget.ExpandableListView.setIndicatorBounds (int left, int right) "," Sets the drawing bounds for the indicators (at minimum, the group indicator is affected by this; the child indicator is affected by this if the child indicator bounds are set to inherit). <br /><br />"
"android.widget.ExpandableListView.onSaveInstanceState () "," Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. <br /><br />"
"android.widget.ExpandableListView.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.ExpandableListView.collapseGroup (int groupPos) "," Collapse a group in the grouped list view <br /><br />"
"android.widget.ExpandableListView.Drawable () "," Sets the indicator to be drawn next to a group. <br /><br />"
"android.widget.ExpandableListView.getPackedPositionForChild (int groupPosition, int childPosition) "," Returns the packed position representation of a child's position. <br /><br />"
"android.widget.ExpandableListView.ExpandableListView.OnGroupExpandListener () "," no description <br /><br />"
"android.widget.ExpandableListView.getPackedPositionForGroup (int groupPosition) "," Returns the packed position representation of a group's position. <br /><br />"
"android.widget.ExpandableListView.setIndicatorBoundsRelative (int start, int end) "," Sets the relative drawing bounds for the indicators (at minimum, the group indicator is affected by this; the child indicator is affected by this if the child indicator bounds are set to inherit). <br /><br />"
"android.widget.ExpandableListView.setChildIndicatorBoundsRelative (int start, int end) "," Sets the relative drawing bounds for the child indicator. <br /><br />"
"android.widget.ExpandableListView.getPackedPositionGroup (long packedPosition) "," Gets the group position from a packed position. <br /><br />"
"android.widget.ExpandableListView.onSaveInstanceState () () "," Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState(). <br /><br />"
"android.widget.ExpandableListView.getFlatListPosition (long packedPosition) "," Converts a group and/or child position to a flat list position. <br /><br />"
"android.widget.ExpandableListView.expandGroup (int groupPos) "," Expand a group in the grouped list view <br /><br />"
"android.widget.ExpandableListView.setChildIndicatorBounds (int left, int right) "," Sets the drawing bounds for the child indicator. <br /><br />"
"android.widget.ExpandableListView.expandGroup (int groupPos, boolean animate) "," Expand a group in the grouped list view <br /><br />"
"android.widget.ExpandableListView.View () "," Call the OnItemClickListener, if it is defined. <br /><br />"
"android.widget.ExpandableListView.getExpandableListAdapter () () "," This method should not be used, use getExpandableListAdapter(). <br /><br />"
"android.widget.ExpandableListView.setAdapter (ExpandableListAdapter) () "," This overloaded method should not be used, instead use setAdapter(ExpandableListAdapter). <br /><br />"
"android.widget.ExpandableListView.ExpandableListView.OnChildClickListener () "," no description <br /><br />"
"android.widget.ExpandableListView.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.ExpandableListView.getExpandableListPosition (int flatListPosition) "," Converts a flat list position (the raw position of an item (child or group) in the list) to a group and/or child position (represented in a packed position). <br /><br />"
"android.widget.ExpandableListView.getPackedPositionType (long packedPosition) "," Gets the type of a packed position. <br /><br />"
"android.widget.ExpandableListView.getPackedPositionType (long) (long packedPosition) "," Gets the child position from a packed position that is of PACKED_POSITION_TYPE_CHILD type (use getPackedPositionType(long)). <br /><br />"
"android.widget.ExpandableListView.setSelectedChild (int groupPosition, int childPosition, boolean shouldExpandGroup) "," Sets the selection to the specified child. <br /><br />"
"android.widget.ExpandableListView.getSelectedId () "," Gets the ID of the currently selected group or child. <br /><br />"
"android.widget.ExpandableListView.OnChildClickListener.View () "," Callback method to be invoked when a child in this expandable list has been clicked. <br /><br />"
"android.widget.ExpandableListView.OnGroupClickListener.View () "," Callback method to be invoked when a group in this expandable list has been clicked. <br /><br />"
"android.widget.ExpandableListView.OnGroupCollapseListener.onGroupCollapse (int groupPosition) "," Callback method to be invoked when a group in this expandable list has been collapsed. <br /><br />"
"android.widget.ExpandableListView.OnGroupExpandListener.onGroupExpand (int groupPosition) "," Callback method to be invoked when a group in this expandable list has been expanded. <br /><br />"
"android.widget.Filter.FilterListener.onFilterComplete (int count) "," Notifies the end of a filtering operation. <br /><br />"
"android.widget.Filter.CharSequence () "," Starts an asynchronous filtering operation. <br /><br />"
"android.widget.Filter.Object () "," Converts a value from the filtered set into a CharSequence. <br /><br />"
"android.widget.Filter.Filter.FilterListener () "," Starts an asynchronous filtering operation. <br /><br />"
"android.widget.Filterable.getFilter () "," Returns a filter that can be used to constrain data with a filtering pattern. <br /><br />"
"android.widget.FilterQueryProvider.CharSequence () "," Runs a query with the specified constraint. <br /><br />"
"android.widget.FrameLayout.Region () "," This is used by the RootView to perform an optimization when the view hierarchy contains one or several SurfaceView. <br /><br />"
"android.widget.FrameLayout.AttributeSet () "," Returns a new set of layout parameters based on the supplied attributes set. <br /><br />"
"android.widget.FrameLayout.getForegroundTintMode () "," no description <br /><br />"
"android.widget.FrameLayout.getMeasureAllChildren () "," Determines whether all children, or just those in the VISIBLE or INVISIBLE state, are considered when measuring. <br /><br />"
"android.widget.FrameLayout.shouldDelayChildPressedState () "," Return true if the pressed state should be delayed for children or descendants of this ViewGroup. <br /><br />"
"android.widget.FrameLayout.setVisibility (int visibility) "," Set the enabled state of this view. <br /><br />"
"android.widget.FrameLayout.setForegroundTintList (ColorStateList) () "," Specifies the blending mode used to apply the tint specified by setForegroundTintList(ColorStateList)} to the foreground drawable. <br /><br />"
"android.widget.FrameLayout.Canvas () "," Manually render this view (and all of its children) to the given Canvas. <br /><br />"
"android.widget.FrameLayout.drawableHotspotChanged (float x, float y) "," This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. <br /><br />"
"android.widget.FrameLayout.Drawable.jumpToCurrentState () () "," Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view. <br /><br />"
"android.widget.FrameLayout.setForegroundGravity (int foregroundGravity) "," Describes how the foreground is positioned. <br /><br />"
"android.widget.FrameLayout.setMeasureAllChildren (boolean measureAll) "," Sets whether to consider all children, or just those in the VISIBLE or INVISIBLE state, when measuring. <br /><br />"
"android.widget.FrameLayout.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.FrameLayout.ColorStateList () "," Applies a tint to the foreground drawable. <br /><br />"
"android.widget.FrameLayout.getForeground () "," Returns the drawable used as the foreground of this FrameLayout. <br /><br />"
"android.widget.FrameLayout.getForegroundTintList () "," no description <br /><br />"
"android.widget.FrameLayout.Drawable () "," Supply a Drawable that is to be rendered on top of all of the child views in the frame layout. <br /><br />"
"android.widget.FrameLayout.setMeasureAllChildren () () "," This method was deprecated in API level 14. This method is deprecated in favor of getMeasureAllChildren(), which was renamed for consistency with setMeasureAllChildren(). <br /><br />"
"android.widget.FrameLayout.getForegroundGravity () "," Describes how the foreground is positioned. <br /><br />"
"android.widget.FrameLayout.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.Gallery.AttributeSet () "," Returns a new set of layout parameters based on the supplied attributes set. <br /><br />"
"android.widget.Gallery.MotionEvent () "," Implement this method to handle touch screen motion events. <br /><br />"
"android.widget.Gallery.View () "," Bring up a context menu for the specified view or its ancestors. <br /><br />"
"android.widget.Gallery.KEYCODE_ENTER () "," Default implementation of KeyEvent.Callback.onKeyUp(): perform clicking of the view when KEYCODE_DPAD_CENTER or KEYCODE_ENTER is released. <br /><br />"
"android.widget.Gallery.getOnItemSelectedListener () (boolean shouldCallback) "," Whether or not to callback on any getOnItemSelectedListener() while the items are being flinged. <br /><br />"
"android.widget.Gallery.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.Gallery.setGravity (int gravity) "," Describes how the child views are aligned. <br /><br />"
"android.widget.Gallery.setAnimationDuration (int animationDurationMillis) "," Sets how long the transition animation should run when a child view changes position. <br /><br />"
"android.widget.Gallery.KeyEvent () "," Handles left, right, and clicking <br /><br />"
"android.widget.Gallery.setUnselectedAlpha (float unselectedAlpha) "," Sets the alpha of items that are not selected in the Gallery. <br /><br />"
"android.widget.Gallery.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.Gallery.setSpacing (int spacing) "," Sets the spacing between items in a Gallery <br /><br />"
"android.widget.Gallery.dispatchSetSelected (boolean selected) "," Dispatch setSelected to all of this View's children. <br /><br />"
"android.widget.Gallery.Bundle () "," Performs the specified accessibility action on the view. <br /><br />"
"android.widget.Gallery.showContextMenu () "," Bring up the context menu for this view. <br /><br />"
"android.widget.GridLayout.UNDEFINED (int start, int size) "," Return a Spec, spec, where:   spec.span = [start, start + size]    To leave the start index undefined, use the value UNDEFINED. <br /><br />"
"android.widget.GridLayout.spec (int start, float weight) "," Equivalent to: spec(start, 1, weight). <br /><br />"
"android.widget.GridLayout.AttributeSet () "," Returns a new set of layout parameters based on the supplied attributes set. <br /><br />"
"android.widget.GridLayout.GridLayout.Alignment () "," Equivalent to: spec(start, size, alignment, 0f). <br /><br />"
"android.widget.GridLayout.GridLayout.LayoutParams (int start, int size, float weight) "," Equivalent to: spec(start, 1, default_alignment, weight) - where default_alignment is specified in GridLayout.LayoutParams. <br /><br />"
"android.widget.GridLayout.getOrientation () "," Returns the current orientation. <br /><br />"
"android.widget.GridLayout.setRowOrderPreserved (boolean rowOrderPreserved) "," When this property is true, GridLayout is forced to place the row boundaries so that their associated grid indices are in ascending order in the view. <br /><br />"
"android.widget.GridLayout.setColumnOrderPreserved (boolean columnOrderPreserved) "," When this property is true, GridLayout is forced to place the column boundaries so that their associated grid indices are in ascending order in the view. <br /><br />"
"android.widget.GridLayout.getAlignmentMode () "," Returns the alignment mode. <br /><br />"
"android.widget.GridLayout.requestLayout () "," Call this when something has changed which has invalidated the layout of this view. <br /><br />"
"android.widget.GridLayout.UNDEFINED (int start) "," Return a Spec, spec, where:   spec.span = [start, start + 1]    To leave the start index undefined, use the value UNDEFINED. <br /><br />"
"android.widget.GridLayout.getUseDefaultMargins () "," Returns whether or not this GridLayout will allocate default margins when no corresponding layout parameters are defined. <br /><br />"
"android.widget.GridLayout.setOrientation (int orientation) "," GridLayout uses the orientation property for two purposes:   To control the 'direction' in which default row/column indices are generated when they are not specified in a component's layout parameters. <br /><br />"
"android.widget.GridLayout.getColumnCount () "," Returns the current number of columns. <br /><br />"
"android.widget.GridLayout.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.GridLayout.setUseDefaultMargins (boolean useDefaultMargins) "," When true, GridLayout allocates default margins around children based on the child's visual characteristics. <br /><br />"
"android.widget.GridLayout.setAlignmentMode (int alignmentMode) "," Sets the alignment mode to be used for all of the alignments between the children of this container. <br /><br />"
"android.widget.GridLayout.setRowCount (int rowCount) "," RowCount is used only to generate default row/column indices when they are not specified by a component's layout parameters. <br /><br />"
"android.widget.GridLayout.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.GridLayout.getRowCount () "," Returns the current number of rows. <br /><br />"
"android.widget.GridLayout.UNDEFINED () "," Return a Spec, spec, where:   spec.span = [start, start + size]   spec.alignment = alignment   spec.weight = weight    To leave the start index undefined, use the value UNDEFINED. <br /><br />"
"android.widget.GridLayout.isRowOrderPreserved () "," Returns whether or not row boundaries are ordered by their grid indices. <br /><br />"
"android.widget.GridLayout.setColumnCount (int columnCount) "," ColumnCount is used only to generate default column/column indices when they are not specified by a component's layout parameters. <br /><br />"
"android.widget.GridLayout.isColumnOrderPreserved () "," Returns whether or not column boundaries are ordered by their grid indices. <br /><br />"
"android.widget.GridLayout.LayoutParams.setGravity (int gravity) "," Describes how the child views are positioned. <br /><br />"
"android.widget.GridLayout.LayoutParams.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.widget.GridLayout.LayoutParams.Object () "," Compares this instance with the specified object and indicates if they are equal. <br /><br />"
"android.widget.GridLayout.Spec.hashCode () "," Returns an integer hash code for this object. <br /><br />"
"android.widget.GridLayout.Spec.Object () "," Returns true if the class, alignment and span properties of this Spec and the supplied parameter are pairwise equal, false otherwise. <br /><br />"
"android.widget.GridView.ListAdapter () "," Sets the data behind this GridView. <br /><br />"
"android.widget.GridView.getHorizontalSpacing () "," Returns the amount of horizontal spacing currently used between each item in the grid. <br /><br />"
"android.widget.GridView.setColumnWidth (int columnWidth) "," Set the width of columns in the grid. <br /><br />"
"android.widget.GridView.smoothScrollByOffset (int offset) "," Smoothly scroll to the specified adapter position offset. <br /><br />"
"android.widget.GridView.setHorizontalSpacing (int horizontalSpacing) "," Set the amount of horizontal (x) spacing to place between each item in the grid. <br /><br />"
"android.widget.GridView.getNumColumns () "," Get the number of columns in the grid. <br /><br />"
"android.widget.GridView.getStretchMode () "," no description <br /><br />"
"android.widget.GridView.KeyEvent.Callback.onKeyMultiple () () "," Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event). <br /><br />"
"android.widget.GridView.setSelection (int position) "," Sets the currently selected item <br /><br />"
"android.widget.GridView.getColumnWidth () "," Return the width of a column in the grid. <br /><br />"
"android.widget.GridView.getVerticalSpacing () "," Returns the amount of vertical spacing between each item in the grid. <br /><br />"
"android.widget.GridView.KEYCODE_ENTER () "," Default implementation of KeyEvent.Callback.onKeyUp(): perform clicking of the view when KEYCODE_DPAD_CENTER or KEYCODE_ENTER is released. <br /><br />"
"android.widget.GridView.setGravity (int gravity) "," Set the gravity for this grid. <br /><br />"
"android.widget.GridView.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about a particular item in the list. <br /><br />"
"android.widget.GridView.smoothScrollToPosition (int position) "," Smoothly scroll to the specified adapter position. <br /><br />"
"android.widget.GridView.getGravity () "," Describes how the child views are horizontally aligned. <br /><br />"
"android.widget.GridView.setNumColumns (int numColumns) "," Set the number of columns in the grid <br /><br />"
"android.widget.GridView.getAdapter () "," Returns the adapter currently associated with this widget. <br /><br />"
"android.widget.GridView.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.GridView.getRequestedColumnWidth () "," Return the requested width of a column in the grid. <br /><br />"
"android.widget.GridView.setStretchMode (int stretchMode) "," Control how items are stretched to fill their space. <br /><br />"
"android.widget.GridView.setVerticalSpacing (int verticalSpacing) "," Set the amount of vertical (y) spacing to place between each item in the grid. <br /><br />"
"android.widget.GridView.Intent () "," Sets up this AbsListView to use a remote views adapter which connects to a RemoteViewsService through the specified intent. <br /><br />"
"android.widget.GridView.getRequestedHorizontalSpacing () "," Returns the requested amount of horizontal spacing between each item in the grid. <br /><br />"
"android.widget.HeaderViewListAdapter.getView (int, View, ViewGroup) () "," Returns the number of types of Views that will be created by getView(int, View, ViewGroup). <br /><br />"
"android.widget.HeaderViewListAdapter.getFootersCount () "," no description <br /><br />"
"android.widget.HeaderViewListAdapter.isEnabled (int position) "," Returns true if the item at the specified position is not a separator. <br /><br />"
"android.widget.HeaderViewListAdapter.registerDataSetObserver (DataSetObserver) () "," Unregister an observer that has previously been registered with this adapter via registerDataSetObserver(DataSetObserver). <br /><br />"
"android.widget.HeaderViewListAdapter.getHeadersCount () "," no description <br /><br />"
"android.widget.HeaderViewListAdapter.getCount () "," How many items are in the data set represented by this Adapter. <br /><br />"
"android.widget.HeaderViewListAdapter.ViewGroup () "," Get a View that displays the data at the specified position in the data set. <br /><br />"
"android.widget.HeaderViewListAdapter.hasStableIds () "," Indicates whether the item ids are stable across changes to the underlying data. <br /><br />"
"android.widget.HeaderViewListAdapter.View () "," no description <br /><br />"
"android.widget.HeaderViewListAdapter.areAllItemsEnabled () "," Indicates whether all the items in this adapter are enabled. <br /><br />"
"android.widget.HeaderViewListAdapter.getItemId (int position) "," Get the row id associated with the specified position in the list. <br /><br />"
"android.widget.HeaderViewListAdapter.getItem (int position) "," Get the data item associated with the specified position in the data set. <br /><br />"
"android.widget.HeaderViewListAdapter.getWrappedAdapter () "," Returns the adapter wrapped by this list adapter. <br /><br />"
"android.widget.HeaderViewListAdapter.DataSetObserver () "," Register an observer that is called when changes happen to the data used by this adapter. <br /><br />"
"android.widget.HeaderViewListAdapter.isEmpty () "," no description <br /><br />"
"android.widget.HeaderViewListAdapter.getFilter () "," Returns a filter that can be used to constrain data with a filtering pattern. <br /><br />"
"android.widget.HeaderViewListAdapter.getView (int, View, ViewGroup) (int position) "," Get the type of View that will be created by getView(int, View, ViewGroup) for the specified item. <br /><br />"
"android.widget.HeterogeneousExpandableList.getChildView (int, int, boolean, View, ViewGroup) () "," Returns the number of types of child Views that will be created by getChildView(int, int, boolean, View, ViewGroup) . <br /><br />"
"android.widget.HeterogeneousExpandableList.getGroupView (int, boolean, View, ViewGroup) (int groupPosition) "," Get the type of group View that will be created by getGroupView(int, boolean, View, ViewGroup) . <br /><br />"
"android.widget.HeterogeneousExpandableList.getChildView (int, int, boolean, View, ViewGroup) (int groupPosition, int childPosition) "," Get the type of child View that will be created by getChildView(int, int, boolean, View, ViewGroup) for the specified child item. <br /><br />"
"android.widget.HeterogeneousExpandableList.getGroupView (int, boolean, View, ViewGroup) () "," Returns the number of types of group Views that will be created by getGroupView(int, boolean, View, ViewGroup) . <br /><br />"
"android.widget.HorizontalScrollView.setFillViewport (boolean fillViewport) "," Indicates this HorizontalScrollView whether it should stretch its content width to fill the viewport or not. <br /><br />"
"android.widget.HorizontalScrollView.setSmoothScrollingEnabled (boolean smoothScrollingEnabled) "," Set whether arrow scrolling will animate its transition. <br /><br />"
"android.widget.HorizontalScrollView.shouldDelayChildPressedState () "," Return true if the pressed state should be delayed for children or descendants of this ViewGroup. <br /><br />"
"android.widget.HorizontalScrollView.MotionEvent () "," Implement this method to handle touch screen motion events. <br /><br />"
"android.widget.HorizontalScrollView.requestLayout () "," Call this when something has changed which has invalidated the layout of this view. <br /><br />"
"android.widget.HorizontalScrollView.getMaxScrollAmount () "," no description <br /><br />"
"android.widget.HorizontalScrollView.Canvas () "," Manually render this view (and all of its children) to the given Canvas. <br /><br />"
"android.widget.HorizontalScrollView.scrollTo (int x, int y) "," Set the scrolled position of your view. This version also clamps the scrolling to the bounds of our child. <br /><br />"
"android.widget.HorizontalScrollView.scrollBy (int, int) (int dx, int dy) "," Like scrollBy(int, int), but scroll smoothly instead of immediately. <br /><br />"
"android.widget.HorizontalScrollView.View () "," Called when a child of this parent wants focus <br /><br />"
"android.widget.HorizontalScrollView.fullScroll (int direction) "," Handles scrolling in response to a 'home/end' shortcut press. <br /><br />"
"android.widget.HorizontalScrollView.isFillViewport () "," Indicates whether this HorizontalScrollView's content is stretched to fill the viewport. <br /><br />"
"android.widget.HorizontalScrollView.setOverScrollMode (int mode) "," Set the over-scroll mode for this view. <br /><br />"
"android.widget.HorizontalScrollView.onInterceptTouchEvent (MotionEvent) (boolean disallowIntercept) "," Called when a child does not want this parent and its ancestors to intercept touch events with onInterceptTouchEvent(MotionEvent). <br /><br />"
"android.widget.HorizontalScrollView.Rect () "," Called when a child of this group wants a particular rectangle to be positioned onto the screen. <br /><br />"
"android.widget.HorizontalScrollView.computeScroll () "," Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary. <br /><br />"
"android.widget.HorizontalScrollView.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.HorizontalScrollView.arrowScroll (int direction) "," Handle scrolling in response to a left or right arrow click. <br /><br />"
"android.widget.HorizontalScrollView.isSmoothScrollingEnabled () "," no description <br /><br />"
"android.widget.HorizontalScrollView.ViewGroup.LayoutParams () "," Adds a child view with the specified layout parameters. <br /><br />"
"android.widget.HorizontalScrollView.KeyEvent () "," You can call this function yourself to have the scroll view perform scrolling from a key event, just as if the event had been dispatched to it by the view hierarchy. <br /><br />"
"android.widget.HorizontalScrollView.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.HorizontalScrollView.Bundle () "," Performs the specified accessibility action on the view. <br /><br />"
"android.widget.HorizontalScrollView.pageScroll (int direction) "," Handles scrolling in response to a 'page up/down' shortcut press. <br /><br />"
"android.widget.HorizontalScrollView.fling (int velocityX) "," Fling the scroll view <br /><br />"
"android.widget.HorizontalScrollView.scrollTo (int, int) (int x, int y) "," Like scrollTo(int, int), but scroll smoothly instead of immediately. <br /><br />"
"android.widget.ImageButton.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.ImageButton.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.ImageSwitcher.Uri () "," no description <br /><br />"
"android.widget.ImageSwitcher.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.ImageSwitcher.Drawable () "," no description <br /><br />"
"android.widget.ImageSwitcher.setImageResource (int resid) "," no description <br /><br />"
"android.widget.ImageSwitcher.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.ImageView.getAdjustViewBounds () "," True when ImageView is adjusting its bounds to preserve the aspect ratio of its drawable <br /><br />"
"android.widget.ImageView.Drawable (int extraSpace) "," Generate the new Drawable state for this view. <br /><br />"
"android.widget.ImageView.setImageTintList (ColorStateList) () "," Specifies the blending mode used to apply the tint specified by setImageTintList(ColorStateList)} to the image drawable. <br /><br />"
"android.widget.ImageView.onRtlPropertiesChanged (int layoutDirection) "," Called when any RTL property (layout direction or text direction or text alignment) has been changed. <br /><br />"
"android.widget.ImageView.setMaxWidth (int maxWidth) "," An optional argument to supply a maximum width for this view. <br /><br />"
"android.widget.ImageView.setMaxHeight (int maxHeight) "," An optional argument to supply a maximum height for this view. <br /><br />"
"android.widget.ImageView.setBaselineAlignBottom (boolean aligned) "," Set whether to set the baseline of this view to the bottom of the view. <br /><br />"
"android.widget.ImageView.setAlpha (int alpha) "," This method was deprecated in API level 16. use #setImageAlpha(int) instead <br /><br />"
"android.widget.ImageView.LevelListDrawable (int level) "," Sets the image level, when it is constructed from a LevelListDrawable. <br /><br />"
"android.widget.ImageView.setSelected (boolean selected) "," Changes the selection state of this view. <br /><br />"
"android.widget.ImageView.setImageAlpha (int alpha) "," Sets the alpha value that should be applied to the image. <br /><br />"
"android.widget.ImageView.Matrix () "," no description <br /><br />"
"android.widget.ImageView.setImageResource (int resId) "," Sets a drawable as the content of this ImageView. <br /><br />"
"android.widget.ImageView.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.ImageView.ColorStateList () "," Applies a tint to the image drawable. <br /><br />"
"android.widget.ImageView.PorterDuff.Mode () "," Set a tinting option for the image. <br /><br />"
"android.widget.ImageView.Drawable () "," Sets a drawable as the content of this ImageView. <br /><br />"
"android.widget.ImageView.ImageView.ScaleType () "," Controls how the image should be resized or moved to match the size of this ImageView. <br /><br />"
"android.widget.ImageView.getCropToPadding () "," Return whether this ImageView crops to padding. <br /><br />"
"android.widget.ImageView.isOpaque () "," Indicates whether this View is opaque. <br /><br />"
"android.widget.ImageView.getMaxWidth () "," The maximum width of this view. <br /><br />"
"android.widget.ImageView.setCropToPadding (boolean cropToPadding) "," Sets whether this ImageView will crop to padding. <br /><br />"
"android.widget.ImageView.getImageTintList () "," no description <br /><br />"
"android.widget.ImageView.Uri () "," Sets the content of this ImageView to the specified Uri. <br /><br />"
"android.widget.ImageView.setVisibility (int visibility) "," Set the enabled state of this view. <br /><br />"
"android.widget.ImageView.getImageTintMode () "," no description <br /><br />"
"android.widget.ImageView.getBaseline () "," Return the offset of the widget's text baseline from the widget's top boundary. <br /><br />"
"android.widget.ImageView.drawableHotspotChanged (float x, float y) "," This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. <br /><br />"
"android.widget.ImageView.getScaleType () "," Return the current scale type in use by this ImageView. <br /><br />"
"android.widget.ImageView.getImageAlpha () "," Returns the alpha that will be applied to the drawable of this ImageView. <br /><br />"
"android.widget.ImageView.getDrawable () "," Return the view's drawable, or null if no drawable has been assigned. <br /><br />"
"android.widget.ImageView.Drawable.jumpToCurrentState () () "," Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view. <br /><br />"
"android.widget.ImageView.setBaseline (int baseline) "," Set the offset of the widget's text baseline from the widget's top boundary. <br /><br />"
"android.widget.ImageView.getMaxHeight () "," The maximum height of this view. <br /><br />"
"android.widget.ImageView.hasOverlappingRendering () "," Returns whether this View has content which overlaps. <br /><br />"
"android.widget.ImageView.setImageState (int[] state, boolean merge) "," no description <br /><br />"
"android.widget.ImageView.getBaselineAlignBottom () "," Return whether this view's baseline will be considered the bottom of the view. <br /><br />"
"android.widget.ImageView.clearColorFilter () "," no description <br /><br />"
"android.widget.ImageView.dispatchPopulateAccessibilityEvent (AccessibilityEvent) () "," Called from dispatchPopulateAccessibilityEvent(AccessibilityEvent) giving a chance to this View to populate the accessibility event with its text content. <br /><br />"
"android.widget.ImageView.ColorFilter () "," Apply an arbitrary colorfilter to the image. <br /><br />"
"android.widget.ImageView.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.ImageView.setAdjustViewBounds (boolean adjustViewBounds) "," Set this to true if you want the ImageView to adjust its bounds to preserve the aspect ratio of its drawable. <br /><br />"
"android.widget.ImageView.getColorFilter () "," Returns the active color filter for this ImageView. <br /><br />"
"android.widget.ImageView.getImageMatrix () "," Return the view's optional matrix. <br /><br />"
"android.widget.ImageView.setColorFilter (int color) "," Set a tinting option for the image. <br /><br />"
"android.widget.ImageView.Bitmap () "," Sets a Bitmap as the content of this ImageView. <br /><br />"
"android.widget.LinearLayout.AttributeSet () "," Returns a new set of layout parameters based on the supplied attributes set. <br /><br />"
"android.widget.LinearLayout.setWeightSum (float weightSum) "," Defines the desired weights sum. <br /><br />"
"android.widget.LinearLayout.getDividerPadding () "," Get the padding size used to inset dividers in pixels <br /><br />"
"android.widget.LinearLayout.shouldDelayChildPressedState () "," Return true if the pressed state should be delayed for children or descendants of this ViewGroup. <br /><br />"
"android.widget.LinearLayout.getOrientation () "," Returns the current orientation. <br /><br />"
"android.widget.LinearLayout.setBaselineAlignedChildIndex (int i) "," no description <br /><br />"
"android.widget.LinearLayout.getBaseline () "," Return the offset of the widget's text baseline from the widget's top boundary. <br /><br />"
"android.widget.LinearLayout.setShowDividers (int showDividers) "," Set how dividers should be shown between items in this layout <br /><br />"
"android.widget.LinearLayout.getBaselineAlignedChildIndex () "," no description <br /><br />"
"android.widget.LinearLayout.setDividerPadding (int padding) "," Set padding displayed on both ends of dividers. <br /><br />"
"android.widget.LinearLayout.setOrientation (int orientation) "," Should the layout be a column or a row. <br /><br />"
"android.widget.LinearLayout.setGravity (int gravity) "," Describes how the child views are positioned. <br /><br />"
"android.widget.LinearLayout.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.LinearLayout.Drawable () "," Set a drawable to be used as a divider between items. <br /><br />"
"android.widget.LinearLayout.setBaselineAligned (boolean baselineAligned) "," Defines whether widgets contained in this layout are baseline-aligned or not. <br /><br />"
"android.widget.LinearLayout.getShowDividers () "," no description <br /><br />"
"android.widget.LinearLayout.getWeightSum () "," Returns the desired weights sum. <br /><br />"
"android.widget.LinearLayout.isBaselineAligned () "," Indicates whether widgets contained within this layout are aligned on their baseline or not. <br /><br />"
"android.widget.LinearLayout.getDividerDrawable () "," no description <br /><br />"
"android.widget.LinearLayout.setHorizontalGravity (int horizontalGravity) "," no description <br /><br />"
"android.widget.LinearLayout.setMeasureWithLargestChildEnabled (boolean enabled) "," When set to true, all children with a weight will be considered having the minimum size of the largest child. <br /><br />"
"android.widget.LinearLayout.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.LinearLayout.setVerticalGravity (int verticalGravity) "," no description <br /><br />"
"android.widget.LinearLayout.isMeasureWithLargestChildEnabled () "," When true, all children with a weight will be considered having the minimum size of the largest child. <br /><br />"
"android.widget.LinearLayout.LayoutParams.String () "," Returns a String representation of this set of layout parameters. <br /><br />"
"android.widget.ListAdapter.isEnabled (int position) "," Returns true if the item at the specified position is not a separator. <br /><br />"
"android.widget.ListAdapter.areAllItemsEnabled () "," Indicates whether all the items in this adapter are enabled. <br /><br />"
"android.widget.ListPopupWindow.AdapterView.OnItemClickListener () "," Sets a listener to receive events when a list item is clicked. <br /><br />"
"android.widget.ListPopupWindow.ListAdapter () "," Sets the adapter that provides the data and the views to represent the data in this popup window. <br /><br />"
"android.widget.ListPopupWindow.setWidth (int width) "," Sets the width of the popup window in pixels. <br /><br />"
"android.widget.ListPopupWindow.getSelectedItem () "," no description <br /><br />"
"android.widget.ListPopupWindow.getAnchorView () "," Returns the view that will be used to anchor this popup. <br /><br />"
"android.widget.ListPopupWindow.Drawable () "," Sets a drawable to use as the list item selector. <br /><br />"
"android.widget.ListPopupWindow.getHeight () "," no description <br /><br />"
"android.widget.ListPopupWindow.dismiss () "," Dismiss the popup window. <br /><br />"
"android.widget.ListPopupWindow.getSelectedItemPosition () "," no description <br /><br />"
"android.widget.ListPopupWindow.isShowing () "," no description <br /><br />"
"android.widget.ListPopupWindow.AdapterView.OnItemSelectedListener () "," Sets a listener to receive events when a list item is selected. <br /><br />"
"android.widget.ListPopupWindow.View.OnTouchListener () "," Returns an View.OnTouchListener that can be added to the source view to implement drag-to-open behavior. <br /><br />"
"android.widget.ListPopupWindow.show () () "," Post a show() call to the UI thread. <br /><br />"
"android.widget.ListPopupWindow.setHorizontalOffset (int offset) "," Set the horizontal offset of this popup from its anchor view in pixels. <br /><br />"
"android.widget.ListPopupWindow.setSoftInputMode (int) () "," Returns the current value in setSoftInputMode(int). <br /><br />"
"android.widget.ListPopupWindow.performItemClick (int position) "," Perform an item click operation on the specified list adapter position. <br /><br />"
"android.widget.ListPopupWindow.isModal () "," Returns whether the popup window will be modal when shown. <br /><br />"
"android.widget.ListPopupWindow.INPUT_METHOD_NOT_NEEDED (int mode) "," Control how the popup operates with an input method: one of INPUT_METHOD_FROM_FOCUSABLE, INPUT_METHOD_NEEDED, or INPUT_METHOD_NOT_NEEDED. <br /><br />"
"android.widget.ListPopupWindow.setVerticalOffset (int offset) "," Set the vertical offset of this popup from its anchor view in pixels. <br /><br />"
"android.widget.ListPopupWindow.getSelectedItemId () "," no description <br /><br />"
"android.widget.ListPopupWindow.getWidth () "," no description <br /><br />"
"android.widget.ListPopupWindow.setSoftInputMode (int mode) "," Sets the operating mode for the soft input area. <br /><br />"
"android.widget.ListPopupWindow.getListView () "," no description <br /><br />"
"android.widget.ListPopupWindow.setPromptPosition (int position) "," Set where the optional prompt view should appear. <br /><br />"
"android.widget.ListPopupWindow.getPromptPosition () "," no description <br /><br />"
"android.widget.ListPopupWindow.setInputMethodMode (int) () "," Return the current value in setInputMethodMode(int). <br /><br />"
"android.widget.ListPopupWindow.setSelection (int position) "," Set the selected position of the list. <br /><br />"
"android.widget.ListPopupWindow.setAnimationStyle (int animationStyle) "," Set an animation style to use when the popup window is shown or dismissed. <br /><br />"
"android.widget.ListPopupWindow.View () "," Set a view to act as a user prompt for this popup window. <br /><br />"
"android.widget.ListPopupWindow.PopupWindow.OnDismissListener () "," Set a listener to receive a callback when the popup is dismissed. <br /><br />"
"android.widget.ListPopupWindow.setModal (boolean modal) "," Set whether this window should be modal when shown. <br /><br />"
"android.widget.ListPopupWindow.setDropDownGravity (int gravity) "," Set the gravity of the dropdown list. <br /><br />"
"android.widget.ListPopupWindow.getSelectedView () "," no description <br /><br />"
"android.widget.ListPopupWindow.show () "," Show the popup list. <br /><br />"
"android.widget.ListPopupWindow.getVerticalOffset () "," no description <br /><br />"
"android.widget.ListPopupWindow.getHorizontalOffset () "," no description <br /><br />"
"android.widget.ListPopupWindow.getAnimationStyle () "," Returns the animation style that will be used when the popup window is shown or dismissed. <br /><br />"
"android.widget.ListPopupWindow.clearListSelection () "," Clear any current list selection. <br /><br />"
"android.widget.ListPopupWindow.KeyEvent () "," Filter key down events. <br /><br />"
"android.widget.ListPopupWindow.setHeight (int height) "," Sets the height of the popup window in pixels. <br /><br />"
"android.widget.ListPopupWindow.setContentWidth (int width) "," Sets the width of the popup window by the size of its content. <br /><br />"
"android.widget.ListPopupWindow.getBackground () "," no description <br /><br />"
"android.widget.ListPopupWindow.isInputMethodNotNeeded () "," no description <br /><br />"
"android.widget.ListView.ListAdapter () "," Sets the data behind this ListView. <br /><br />"
"android.widget.ListView.getCheckedItemIds () () "," This method was deprecated in API level 8. Use getCheckedItemIds() instead. <br /><br />"
"android.widget.ListView.setCacheColorHint (int color) "," When set to a non-zero value, the cache color hint indicates that this list is always drawn on top of a solid, single-color, opaque background. <br /><br />"
"android.widget.ListView.getMaxScrollAmount () "," no description <br /><br />"
"android.widget.ListView.areHeaderDividersEnabled () "," no description <br /><br />"
"android.widget.ListView.setDividerHeight (int height) "," Sets the height of the divider that will be drawn between each item in the list. <br /><br />"
"android.widget.ListView.getHeaderViewsCount () "," Returns the number of header views in the list. <br /><br />"
"android.widget.ListView.setItemsCanFocus (boolean itemsCanFocus) "," Indicates that the views created by the ListAdapter can contain focusable items. <br /><br />"
"android.widget.ListView.Rect () "," Called when a child of this group wants a particular rectangle to be positioned onto the screen. <br /><br />"
"android.widget.ListView.getFooterViewsCount () "," Returns the number of footer views in the list. <br /><br />"
"android.widget.ListView.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about a particular item in the list. <br /><br />"
"android.widget.ListView.getOverscrollFooter () "," no description <br /><br />"
"android.widget.ListView.smoothScrollToPosition (int position) "," Smoothly scroll to the specified adapter position. <br /><br />"
"android.widget.ListView.Drawable () "," Sets the drawable that will be drawn above all other list content. <br /><br />"
"android.widget.ListView.getDividerHeight () "," no description <br /><br />"
"android.widget.ListView.isOpaque () "," Indicates whether this View is opaque. <br /><br />"
"android.widget.ListView.getOverscrollHeader () "," no description <br /><br />"
"android.widget.ListView.setSelectionAfterHeaderView () "," setSelectionAfterHeaderView set the selection to be the first list item after the header views. <br /><br />"
"android.widget.ListView.setHeaderDividersEnabled (boolean headerDividersEnabled) "," Enables or disables the drawing of the divider for header views. <br /><br />"
"android.widget.ListView.getDivider () "," Returns the drawable that will be drawn between each item in the list. <br /><br />"
"android.widget.ListView.smoothScrollByOffset (int offset) "," Smoothly scroll to the specified adapter position offset. <br /><br />"
"android.widget.ListView.Object () "," Add a fixed view to appear at the top of the list. <br /><br />"
"android.widget.ListView.KeyEvent.Callback.onKeyMultiple () () "," Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event). <br /><br />"
"android.widget.ListView.setSelection (int position) "," Sets the currently selected item. <br /><br />"
"android.widget.ListView.View () "," Removes a previously-added header view. <br /><br />"
"android.widget.ListView.KEYCODE_ENTER () "," Default implementation of KeyEvent.Callback.onKeyUp(): perform clicking of the view when KEYCODE_DPAD_CENTER or KEYCODE_ENTER is released. <br /><br />"
"android.widget.ListView.setFooterDividersEnabled (boolean footerDividersEnabled) "," Enables or disables the drawing of the divider for footer views. <br /><br />"
"android.widget.ListView.KeyEvent () "," Dispatch a key event to the next view on the focus path. <br /><br />"
"android.widget.ListView.getAdapter () "," Returns the adapter currently in use in this ListView. <br /><br />"
"android.widget.ListView.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.ListView.getItemsCanFocus () "," no description <br /><br />"
"android.widget.ListView.areFooterDividersEnabled () "," no description <br /><br />"
"android.widget.ListView.Intent () "," Sets up this AbsListView to use a remote views adapter which connects to a RemoteViewsService through the specified intent. <br /><br />"
"android.widget.MediaController.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.MediaController.hide () "," Remove the controller from the screen. <br /><br />"
"android.widget.MediaController.show () "," Show the controller on screen. <br /><br />"
"android.widget.MediaController.MediaController.MediaPlayerControl () "," no description <br /><br />"
"android.widget.MediaController.isShowing () "," no description <br /><br />"
"android.widget.MediaController.View.OnClickListener () "," no description <br /><br />"
"android.widget.MediaController.show (int timeout) "," Show the controller on screen. <br /><br />"
"android.widget.MediaController.MotionEvent () "," Implement this method to handle trackball motion events. <br /><br />"
"android.widget.MediaController.KeyEvent () "," Dispatch a key event to the next view on the focus path. <br /><br />"
"android.widget.MediaController.setEnabled (boolean enabled) "," Set the enabled state of this view. <br /><br />"
"android.widget.MediaController.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.MediaController.onFinishInflate () "," Finalize inflating a view from XML. <br /><br />"
"android.widget.MediaController.View () "," Set the view that acts as the anchor for the control view. <br /><br />"
"android.widget.MediaController.MediaPlayerControl.isPlaying () "," no description <br /><br />"
"android.widget.MediaController.MediaPlayerControl.canSeekForward () "," no description <br /><br />"
"android.widget.MediaController.MediaPlayerControl.getBufferPercentage () "," no description <br /><br />"
"android.widget.MediaController.MediaPlayerControl.start () "," no description <br /><br />"
"android.widget.MediaController.MediaPlayerControl.getCurrentPosition () "," no description <br /><br />"
"android.widget.MediaController.MediaPlayerControl.canSeekBackward () "," no description <br /><br />"
"android.widget.MediaController.MediaPlayerControl.canPause () "," no description <br /><br />"
"android.widget.MediaController.MediaPlayerControl.seekTo (int pos) "," no description <br /><br />"
"android.widget.MediaController.MediaPlayerControl.pause () "," no description <br /><br />"
"android.widget.MediaController.MediaPlayerControl.getAudioSessionId () "," Get the audio session id for the player used by this VideoView. <br /><br />"
"android.widget.MediaController.MediaPlayerControl.getDuration () "," no description <br /><br />"
"android.widget.MultiAutoCompleteTextView.CommaTokenizer.CharSequence () "," Returns text, modified, if necessary, to ensure that it ends with a token terminator (for example a space or comma). <br /><br />"
"android.widget.MultiAutoCompleteTextView.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.MultiAutoCompleteTextView.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.MultiAutoCompleteTextView.performValidation () "," Instead of validating the entire text, this subclass method validates each token of the text individually. <br /><br />"
"android.widget.MultiAutoCompleteTextView.MultiAutoCompleteTextView.Tokenizer () "," Sets the Tokenizer that will be used to determine the relevant range of the text where the user is typing. <br /><br />"
"android.widget.MultiAutoCompleteTextView.getThreshold () () "," Instead of filtering whenever the total length of the text exceeds the threshhold, this subclass filters only when the length of the range from findTokenStart(CharSequence, int) to getSelectionEnd() meets or exceeds getThreshold(). <br /><br />"
"android.widget.MultiAutoCompleteTextView.Tokenizer.CharSequence () "," Returns text, modified, if necessary, to ensure that it ends with a token terminator (for example a space or comma). <br /><br />"
"android.widget.NumberPicker.Formatter.format (int value) "," Formats a string representation of the current value. <br /><br />"
"android.widget.NumberPicker.getWrapSelectorWheel () "," Gets whether the selector wheel wraps when reaching the min/max value. <br /><br />"
"android.widget.NumberPicker.setOnLongPressUpdateInterval (long intervalMillis) "," Sets the speed at which the numbers be incremented and decremented when the up and down buttons are long pressed respectively. <br /><br />"
"android.widget.NumberPicker.setMaxValue (int maxValue) "," Sets the max value of the picker. <br /><br />"
"android.widget.NumberPicker.scrollBy (int x, int y) "," Move the scrolled position of your view. <br /><br />"
"android.widget.NumberPicker.MotionEvent () "," Implement this method to handle touch screen motion events. <br /><br />"
"android.widget.NumberPicker.performClick () "," Call this view's OnClickListener, if it is defined. <br /><br />"
"android.widget.NumberPicker.AccessibilityService () "," Gets the provider for managing a virtual view hierarchy rooted at this View and reported to AccessibilityServices that explore the window content. <br /><br />"
"android.widget.NumberPicker.getDisplayedValues () "," Gets the values to be displayed instead of string values. <br /><br />"
"android.widget.NumberPicker.performLongClick () "," Call this view's OnLongClickListener, if it is defined. <br /><br />"
"android.widget.NumberPicker.computeScroll () "," Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary. <br /><br />"
"android.widget.NumberPicker.getValue () "," Returns the value of the picker. <br /><br />"
"android.widget.NumberPicker.NumberPicker.Formatter () "," Set the formatter to be used for formatting the current value. <br /><br />"
"android.widget.NumberPicker.getMaxValue () "," Returns the max value of the picker. <br /><br />"
"android.widget.NumberPicker.getMaxValue () (boolean wrapSelectorWheel) "," Sets whether the selector wheel shown during flinging/scrolling should wrap around the getMinValue() and getMaxValue() values. <br /><br />"
"android.widget.NumberPicker.setValue (int value) "," Set the current value for the number picker. <br /><br />"
"android.widget.NumberPicker.NumberPicker.OnValueChangeListener () "," Sets the listener to be notified on change of the current value. <br /><br />"
"android.widget.NumberPicker.KeyEvent () "," Dispatch a key event to the next view on the focus path. <br /><br />"
"android.widget.NumberPicker.getMinValue () "," Returns the min value of the picker. <br /><br />"
"android.widget.NumberPicker.setMinValue (int minValue) "," Sets the min value of the picker. <br /><br />"
"android.widget.NumberPicker.setEnabled (boolean enabled) "," Set the enabled state of this view. <br /><br />"
"android.widget.NumberPicker.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.NumberPicker.String[] () "," Sets the values to be displayed. <br /><br />"
"android.widget.NumberPicker.NumberPicker.OnScrollListener () "," Set listener to be notified for scroll state changes. <br /><br />"
"android.widget.NumberPicker.getSolidColor () "," Override this if your view is known to always be drawn on top of a solid color background, and needs to draw fading edges. <br /><br />"
"android.widget.NumberPicker.OnScrollListener.NumberPicker () "," Callback invoked while the number picker scroll state has changed. <br /><br />"
"android.widget.NumberPicker.OnValueChangeListener.NumberPicker () "," Called upon a change of the current value. <br /><br />"
"android.widget.OverScroller.getFinalX () "," Returns where the scroll will end. <br /><br />"
"android.widget.OverScroller.computeScrollOffset () "," Call this when you want to know the new location. <br /><br />"
"android.widget.OverScroller.isFinished () "," Returns whether the scroller has finished scrolling. <br /><br />"
"android.widget.OverScroller.setFriction (float friction) "," The amount of friction applied to flings. <br /><br />"
"android.widget.OverScroller.notifyVerticalEdgeReached (int startY, int finalY, int overY) "," Notify the scroller that we've reached a vertical boundary. <br /><br />"
"android.widget.OverScroller.notifyHorizontalEdgeReached (int startX, int finalX, int overX) "," Notify the scroller that we've reached a horizontal boundary. <br /><br />"
"android.widget.OverScroller.forceFinished (boolean finished) "," Force the finished field to a particular value. <br /><br />"
"android.widget.OverScroller.getCurrX () "," Returns the current X offset in the scroll. <br /><br />"
"android.widget.OverScroller.abortAnimation () "," Stops the animation. <br /><br />"
"android.widget.OverScroller.getCurrVelocity () "," Returns the absolute value of the current velocity. <br /><br />"
"android.widget.OverScroller.isOverScrolled () "," Returns whether the current Scroller is currently returning to a valid position. <br /><br />"
"android.widget.OverScroller.getStartX () "," Returns the start X offset in the scroll. <br /><br />"
"android.widget.OverScroller.fling (int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY) "," no description <br /><br />"
"android.widget.OverScroller.springBack (int startX, int startY, int minX, int maxX, int minY, int maxY) "," Call this when you want to 'spring back' into a valid coordinate range. <br /><br />"
"android.widget.OverScroller.startScroll (int startX, int startY, int dx, int dy) "," Start scrolling by providing a starting point and the distance to travel. <br /><br />"
"android.widget.OverScroller.getStartY () "," Returns the start Y offset in the scroll. <br /><br />"
"android.widget.OverScroller.getCurrY () "," Returns the current Y offset in the scroll. <br /><br />"
"android.widget.OverScroller.getFinalY () "," Returns where the scroll will end. <br /><br />"
"android.widget.OverScroller.startScroll (int startX, int startY, int dx, int dy, int duration) "," Start scrolling by providing a starting point and the distance to travel. <br /><br />"
"android.widget.OverScroller.fling (int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY, int overX, int overY) "," Start scrolling based on a fling gesture. <br /><br />"
"android.widget.PopupMenu.show () "," Show the menu popup anchored to the view specified during construction. <br /><br />"
"android.widget.PopupMenu.dismiss () "," Dismiss the menu popup. <br /><br />"
"android.widget.PopupMenu.View.OnTouchListener () "," Returns an View.OnTouchListener that can be added to the anchor view to implement drag-to-open behavior. <br /><br />"
"android.widget.PopupMenu.getMenu () "," no description <br /><br />"
"android.widget.PopupMenu.PopupMenu.OnMenuItemClickListener () "," Set a listener that will be notified when the user selects an item from the menu. <br /><br />"
"android.widget.PopupMenu.inflate (int menuRes) "," Inflate a menu resource into this PopupMenu. <br /><br />"
"android.widget.PopupMenu.PopupMenu.OnDismissListener () "," Set a listener that will be notified when this menu is dismissed. <br /><br />"
"android.widget.PopupMenu.getMenuInflater () "," no description <br /><br />"
"android.widget.PopupMenu.OnDismissListener.PopupMenu () "," Called when the associated menu has been dismissed. <br /><br />"
"android.widget.PopupMenu.OnMenuItemClickListener.MenuItem () "," This method will be invoked when a menu item is clicked if the item itself did not already handle the event. <br /><br />"
"android.widget.PopupWindow.setClippingEnabled (boolean enabled) "," Allows the popup window to extend beyond the bounds of the screen. <br /><br />"
"android.widget.PopupWindow.setOutsideTouchable (boolean touchable) "," Controls whether the pop-up will be informed of touch events outside of its window. <br /><br />"
"android.widget.PopupWindow.isOutsideTouchable () "," Indicates whether the popup window will be informed of touch events outside of its window. <br /><br />"
"android.widget.PopupWindow.setWindowLayoutMode (int widthSpec, int heightSpec) "," Change the width and height measure specs that are given to the window manager by the popup. <br /><br />"
"android.widget.PopupWindow.setWidth (int width) "," Change the popup's width MeasureSpec If the popup is showing, calling this method will take effect only the next time the popup is shown. <br /><br />"
"android.widget.PopupWindow.isAttachedInDecor () "," Indicates whether the popup window will be attached in the decor frame of its parent window. <br /><br />"
"android.widget.PopupWindow.update (int x, int y, int width, int height) "," Updates the position and the dimension of the popup window. <br /><br />"
"android.widget.PopupWindow.getContentView () "," Return the view used as the content of the popup window. <br /><br />"
"android.widget.PopupWindow.setElevation (float elevation) "," Specifies the elevation for this popup window. <br /><br />"
"android.widget.PopupWindow.setTouchable (boolean touchable) "," Changes the touchability of the popup window. <br /><br />"
"android.widget.PopupWindow.getHeight () "," Return this popup's height MeasureSpec <br /><br />"
"android.widget.PopupWindow.dismiss () "," Dispose of the popup window. <br /><br />"
"android.widget.PopupWindow.isShowing () "," Indicate whether this popup window is showing on screen. <br /><br />"
"android.widget.PopupWindow.Drawable () "," Specifies the background drawable for this popup window. <br /><br />"
"android.widget.PopupWindow.View.OnTouchListener () "," Set a callback for all touch events being dispatched to the popup window. <br /><br />"
"android.widget.PopupWindow.setSoftInputMode (int) () "," Returns the current value in setSoftInputMode(int). <br /><br />"
"android.widget.PopupWindow.setIgnoreCheekPress () "," Set the flag on popup to ignore cheek press event; by default this flag is set to false which means the pop wont ignore cheek press dispatch events. <br /><br />"
"android.widget.PopupWindow.isFocusable () "," Indicate whether the popup window can grab the focus. <br /><br />"
"android.widget.PopupWindow.update () "," Updates the state of the popup window, if it is currently being displayed, from the currently set state. <br /><br />"
"android.widget.PopupWindow.INPUT_METHOD_NOT_NEEDED (int mode) "," Control how the popup operates with an input method: one of INPUT_METHOD_FROM_FOCUSABLE, INPUT_METHOD_NEEDED, or INPUT_METHOD_NOT_NEEDED. <br /><br />"
"android.widget.PopupWindow.isAboveAnchor () "," Indicates whether the popup is showing above (the y coordinate of the popup's bottom is less than the y coordinate of the anchor) or below the anchor view (the y coordinate of the popup is greater than y coordinate of the anchor's bottom). <br /><br />"
"android.widget.PopupWindow.update (int width, int height) "," Updates the dimension of the popup window. <br /><br />"
"android.widget.PopupWindow.isTouchable () "," Indicates whether the popup window receives touch events. <br /><br />"
"android.widget.PopupWindow.getWidth () "," Return this popup's width MeasureSpec <br /><br />"
"android.widget.PopupWindow.setSoftInputMode (int mode) "," Sets the operating mode for the soft input area. <br /><br />"
"android.widget.PopupWindow.setInputMethodMode (int) () "," Return the current value in setInputMethodMode(int). <br /><br />"
"android.widget.PopupWindow.isClippingEnabled () "," Indicates whether clipping of the popup window is enabled. <br /><br />"
"android.widget.PopupWindow.getElevation () "," no description <br /><br />"
"android.widget.PopupWindow.View () "," Updates the position and the dimension of the popup window. <br /><br />"
"android.widget.PopupWindow.setAnimationStyle (int animationStyle) "," Change the animation style resource for this popup. <br /><br />"
"android.widget.PopupWindow.setSplitTouchEnabled (boolean enabled) "," Allows the popup window to split touches across other windows that also support split touch. <br /><br />"
"android.widget.PopupWindow.PopupWindow.OnDismissListener () "," Sets the listener to be called when the window is dismissed. <br /><br />"
"android.widget.PopupWindow.isSplitTouchEnabled () "," Indicates whether the popup window supports splitting touches. <br /><br />"
"android.widget.PopupWindow.getAnimationStyle () "," Return the animation style to use the popup appears and disappears <br /><br />"
"android.widget.PopupWindow.setHeight (int height) "," Change the popup's height MeasureSpec If the popup is showing, calling this method will take effect only the next time the popup is shown. <br /><br />"
"android.widget.PopupWindow.setFocusable (boolean focusable) "," Changes the focusability of the popup window. <br /><br />"
"android.widget.PopupWindow.getBackground () "," Return the drawable used as the popup window's background. <br /><br />"
"android.widget.PopupWindow.setAttachedInDecor (boolean enabled) "," This will attach the popup window to the decor frame of the parent window to avoid overlaping with screen decorations like the navigation bar. <br /><br />"
"android.widget.PopupWindow.update (int x, int y, int width, int height, boolean force) "," Updates the position and the dimension of the popup window. <br /><br />"
"android.widget.PopupWindow.OnDismissListener.onDismiss () "," Called when this popup window is dismissed. <br /><br />"
"android.widget.ProgressBar.getSecondaryProgress () "," Get the progress bar's current level of secondary progress. <br /><br />"
"android.widget.ProgressBar.setIndeterminate (boolean indeterminate) "," Change the indeterminate mode for this progress bar. <br /><br />"
"android.widget.ProgressBar.setVisibility (int v) "," Set the enabled state of this view. <br /><br />"
"android.widget.ProgressBar.getProgressDrawable () "," Get the drawable used to draw the progress bar in progress mode. <br /><br />"
"android.widget.ProgressBar.getMax () "," Return the upper limit of this progress bar's range. <br /><br />"
"android.widget.ProgressBar.getProgress () "," Get the progress bar's current level of progress. <br /><br />"
"android.widget.ProgressBar.setIndeterminateTintList (ColorStateList) () "," Specifies the blending mode used to apply the tint specified by setIndeterminateTintList(ColorStateList) to the indeterminate drawable. <br /><br />"
"android.widget.ProgressBar.getProgressBackgroundTintList () "," Returns the tint applied to the progress background, if specified. <br /><br />"
"android.widget.ProgressBar.getProgressBackgroundTintMode () "," no description <br /><br />"
"android.widget.ProgressBar.onSaveInstanceState () "," Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. <br /><br />"
"android.widget.ProgressBar.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.ProgressBar.ColorStateList () "," Applies a tint to the secondary progress indicator, if one exists. <br /><br />"
"android.widget.ProgressBar.setProgress (int progress) "," Set the current progress to the specified value. <br /><br />"
"android.widget.ProgressBar.Drawable () "," Define the tileable drawable used to draw the progress bar in progress mode. <br /><br />"
"android.widget.ProgressBar.getProgressTintMode () "," Returns the blending mode used to apply the tint to the progress drawable, if specified. <br /><br />"
"android.widget.ProgressBar.getIndeterminateTintList () "," no description <br /><br />"
"android.widget.ProgressBar.incrementProgressBy (int diff) "," Increase the progress bar's progress by the specified amount. <br /><br />"
"android.widget.ProgressBar.getSecondaryProgressTintList () "," Returns the tint applied to the secondary progress drawable, if specified. <br /><br />"
"android.widget.ProgressBar.setSecondaryProgress (int secondaryProgress) "," Set the current secondary progress to the specified value. <br /><br />"
"android.widget.ProgressBar.incrementSecondaryProgressBy (int diff) "," Increase the progress bar's secondary progress by the specified amount. <br /><br />"
"android.widget.ProgressBar.onSaveInstanceState () () "," Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState(). <br /><br />"
"android.widget.ProgressBar.getProgressTintList () "," Returns the tint applied to the progress drawable, if specified. <br /><br />"
"android.widget.ProgressBar.setSecondaryProgressTintList (ColorStateList) () "," Specifies the blending mode used to apply the tint specified by setSecondaryProgressTintList(ColorStateList)} to the secondary progress indicator. <br /><br />"
"android.widget.ProgressBar.setProgressBackgroundTintList (ColorStateList) () "," Specifies the blending mode used to apply the tint specified by setProgressBackgroundTintList(ColorStateList)} to the progress background. <br /><br />"
"android.widget.ProgressBar.getIndeterminateTintMode () "," Returns the blending mode used to apply the tint to the indeterminate drawable, if specified. <br /><br />"
"android.widget.ProgressBar.drawableHotspotChanged (float x, float y) "," This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. <br /><br />"
"android.widget.ProgressBar.getSecondaryProgressTintMode () "," Returns the blending mode used to apply the tint to the secondary progress drawable, if specified. <br /><br />"
"android.widget.ProgressBar.Drawable.jumpToCurrentState () () "," Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view. <br /><br />"
"android.widget.ProgressBar.Context () "," Sets the acceleration curve for the indeterminate animation. <br /><br />"
"android.widget.ProgressBar.getIndeterminateDrawable () "," Get the drawable used to draw the progress bar in indeterminate mode. <br /><br />"
"android.widget.ProgressBar.postInvalidate () "," Cause an invalidate to happen on a subsequent cycle through the event loop. <br /><br />"
"android.widget.ProgressBar.getInterpolator () "," Gets the acceleration curve type for the indeterminate animation. <br /><br />"
"android.widget.ProgressBar.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.ProgressBar.Interpolator () "," Sets the acceleration curve for the indeterminate animation. <br /><br />"
"android.widget.ProgressBar.setProgressTintList (ColorStateList) () "," Specifies the blending mode used to apply the tint specified by setProgressTintList(ColorStateList)} to the progress indicator. <br /><br />"
"android.widget.ProgressBar.setMax (int max) "," Set the range of the progress bar to 0... <br /><br />"
"android.widget.ProgressBar.isIndeterminate () "," Indicate whether this progress bar is in indeterminate mode. <br /><br />"
"android.widget.QuickContactBadge.Uri () "," Assign the contact uri that this QuickContactBadge should be associated with. <br /><br />"
"android.widget.QuickContactBadge.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.QuickContactBadge.String () "," Assign a contact based on a phone number. <br /><br />"
"android.widget.QuickContactBadge.Drawable () "," Assigns the drawable that is to be drawn on top of the assigned contact photo. <br /><br />"
"android.widget.QuickContactBadge.setMode (int size) "," This call has no effect anymore, as there is only one QuickContact mode <br /><br />"
"android.widget.QuickContactBadge.drawableHotspotChanged (float x, float y) "," This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. <br /><br />"
"android.widget.QuickContactBadge.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.QuickContactBadge.String[] () "," Set a list of specific MIME-types to exclude and not display. <br /><br />"
"android.widget.QuickContactBadge.Bundle () "," Assign a contact based on a phone number. <br /><br />"
"android.widget.QuickContactBadge.setImageToDefault () "," Resets the contact photo to the default state. <br /><br />"
"android.widget.QuickContactBadge.View () "," Called when a view has been clicked. <br /><br />"
"android.widget.RadioButton.toggle () "," Change the checked state of the view to the inverse of its current state  If the radio button is already checked, this method will not toggle the radio button. <br /><br />"
"android.widget.RadioButton.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.RadioButton.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.RadioGroup.AttributeSet () "," Returns a new set of layout parameters based on the supplied attributes set. <br /><br />"
"android.widget.RadioGroup.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.RadioGroup.ViewGroup.LayoutParams () "," Adds a child view with the specified layout parameters. <br /><br />"
"android.widget.RadioGroup.getCheckedRadioButtonId () "," Returns the identifier of the selected radio button in this group. <br /><br />"
"android.widget.RadioGroup.check (int id) "," Sets the selection to the radio button whose identifier is passed in parameter. <br /><br />"
"android.widget.RadioGroup.RadioGroup.OnCheckedChangeListener () "," Register a callback to be invoked when the checked radio button changes in this group. <br /><br />"
"android.widget.RadioGroup.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.RadioGroup.ViewGroup.OnHierarchyChangeListener () "," Register a callback to be invoked when a child is added to or removed from this view. <br /><br />"
"android.widget.RadioGroup.clearCheck () "," Clears the selection. <br /><br />"
"android.widget.RadioGroup.OnCheckedChangeListener.RadioGroup () "," Called when the checked radio button has changed. <br /><br />"
"android.widget.RatingBar.RatingBar.OnRatingBarChangeListener () "," Sets the listener to be called when the rating changes. <br /><br />"
"android.widget.RatingBar.isIndicator () "," no description <br /><br />"
"android.widget.RatingBar.getRating () "," Gets the current rating (number of stars filled). <br /><br />"
"android.widget.RatingBar.setNumStars (int numStars) "," Sets the number of stars to show. <br /><br />"
"android.widget.RatingBar.setRating (float rating) "," Sets the rating (the number of stars filled). <br /><br />"
"android.widget.RatingBar.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.RatingBar.setStepSize (float stepSize) "," Sets the step size (granularity) of this rating bar. <br /><br />"
"android.widget.RatingBar.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.RatingBar.getOnRatingBarChangeListener () "," no description <br /><br />"
"android.widget.RatingBar.setIsIndicator (boolean isIndicator) "," Whether this rating bar should only be an indicator (thus non-changeable by the user). <br /><br />"
"android.widget.RatingBar.getNumStars () "," Returns the number of stars shown. <br /><br />"
"android.widget.RatingBar.getStepSize () "," Gets the step size of this rating bar. <br /><br />"
"android.widget.RatingBar.setMax (int max) "," Set the range of the progress bar to 0... <br /><br />"
"android.widget.RatingBar.OnRatingBarChangeListener.RatingBar () "," Notification that the rating has changed. <br /><br />"
"android.widget.RelativeLayout.AttributeSet () "," Returns a new set of layout parameters based on the supplied attributes set. <br /><br />"
"android.widget.RelativeLayout.setGravity (int gravity) "," Describes how the child views are positioned. <br /><br />"
"android.widget.RelativeLayout.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.RelativeLayout.shouldDelayChildPressedState () "," Return true if the pressed state should be delayed for children or descendants of this ViewGroup. <br /><br />"
"android.widget.RelativeLayout.getGravity () "," Describes how the child views are positioned. <br /><br />"
"android.widget.RelativeLayout.requestLayout () "," Call this when something has changed which has invalidated the layout of this view. <br /><br />"
"android.widget.RelativeLayout.setHorizontalGravity (int horizontalGravity) "," no description <br /><br />"
"android.widget.RelativeLayout.getBaseline () "," Return the offset of the widget's text baseline from the widget's top boundary. <br /><br />"
"android.widget.RelativeLayout.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.RelativeLayout.setVerticalGravity (int verticalGravity) "," no description <br /><br />"
"android.widget.RelativeLayout.View () "," Dispatches an AccessibilityEvent to the View first and then to its children for adding their text content to the event. <br /><br />"
"android.widget.RelativeLayout.setIgnoreGravity (int viewId) "," Defines which View is ignored when the gravity is applied. <br /><br />"
"android.widget.RelativeLayout.LayoutParams.addRule (int verb, int anchor) "," Adds a layout rule to be interpreted by the RelativeLayout. <br /><br />"
"android.widget.RelativeLayout.LayoutParams.String () "," Returns a String representation of this set of layout parameters. <br /><br />"
"android.widget.RelativeLayout.LayoutParams.getRules () "," Retrieves a complete list of all supported rules, where the index is the rule verb, and the element value is the value specified, or 'false' if it was never set. <br /><br />"
"android.widget.RelativeLayout.LayoutParams.removeRule (int verb) "," Removes a layout rule to be interpreted by the RelativeLayout. <br /><br />"
"android.widget.RelativeLayout.LayoutParams.requestLayout () (int layoutDirection) "," This will be called by requestLayout(). <br /><br />"
"android.widget.RelativeLayout.LayoutParams.addRule (int verb) "," Adds a layout rule to be interpreted by the RelativeLayout. <br /><br />"
"android.widget.RemoteViews.RemoteViews () "," Equivalent to calling addView(View) after inflating the given RemoteViews. <br /><br />"
"android.widget.RemoteViews.smoothScrollToPosition (int, int) (int viewId, int offset) "," Equivalent to calling smoothScrollToPosition(int, int). <br /><br />"
"android.widget.RemoteViews.smoothScrollToPosition (int, int) (int viewId, int position) "," Equivalent to calling smoothScrollToPosition(int, int). <br /><br />"
"android.widget.RemoteViews.ViewGroup () "," Inflates the view hierarchy represented by this object and applies all of the actions. <br /><br />"
"android.widget.RemoteViews.setLabelFor (int viewId, int labeledId) "," Equivalent to calling View.setLabelFor(int). <br /><br />"
"android.widget.RemoteViews.getPackage () "," no description <br /><br />"
"android.widget.RemoteViews.showNext () (int viewId) "," Equivalent to calling showNext() <br /><br />"
"android.widget.RemoteViews.setAccessibilityTraversalBefore (int) (int viewId, int nextId) "," Equivalent to calling setAccessibilityTraversalBefore(int). <br /><br />"
"android.widget.RemoteViews.setTextColor (int) (int viewId, int color) "," Equivalent to calling setTextColor(int). <br /><br />"
"android.widget.RemoteViews.setRemoteViewsAdapter (Intent) () "," Equivalent to calling setRemoteViewsAdapter(Intent). <br /><br />"
"android.widget.RemoteViews.getLayoutId () "," Reutrns the layout id of the root layout associated with this RemoteViews. <br /><br />"
"android.widget.RemoteViews.Uri () "," Call a method taking one Uri on a view in the layout for this RemoteViews. <br /><br />"
"android.widget.RemoteViews.setAccessibilityTraversalAfter (int) (int viewId, int nextId) "," Equivalent to calling setAccessibilityTraversalAfter(int). <br /><br />"
"android.widget.RemoteViews.String () "," Call a method taking one String on a view in the layout for this RemoteViews. <br /><br />"
"android.widget.RemoteViews.setCompoundDrawablesWithIntrinsicBounds (int, int, int, int) (int viewId, int left, int top, int right, int bottom) "," Equivalent to calling setCompoundDrawablesWithIntrinsicBounds(int, int, int, int). <br /><br />"
"android.widget.RemoteViews.setEmptyView (int viewId, int emptyViewId) "," Equivalent to calling AdapterView.setEmptyView <br /><br />"
"android.widget.RemoteViews.setViewVisibility (int viewId, int visibility) "," Equivalent to calling View.setVisibility <br /><br />"
"android.widget.RemoteViews.setRemoteAdapter (int, Intent) () "," This method was deprecated in API level 14. This method has been deprecated. See setRemoteAdapter(int, Intent) <br /><br />"
"android.widget.RemoteViews.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.widget.RemoteViews.Chronometer.stop () () "," Equivalent to calling Chronometer.setBase, Chronometer.setFormat, and Chronometer.start() or Chronometer.stop(). <br /><br />"
"android.widget.RemoteViews.CharSequence () "," Equivalent to calling TextView.setText <br /><br />"
"android.widget.RemoteViews.setCompoundDrawablesRelativeWithIntrinsicBounds (int, int, int, int) (int viewId, int start, int top, int end, int bottom) "," Equivalent to calling setCompoundDrawablesRelativeWithIntrinsicBounds(int, int, int, int). <br /><br />"
"android.widget.RemoteViews.setTextSize (int, float) (int viewId, int units, float size) "," Equivalent to calling setTextSize(int, float) <br /><br />"
"android.widget.RemoteViews.describeContents () "," Describe the kinds of special objects contained in this Parcelable's marshalled representation. <br /><br />"
"android.widget.RemoteViews.View () "," Applies all of the actions to the provided view. <br /><br />"
"android.widget.RemoteViews.Class () "," Hook to allow clients of the LayoutInflater to restrict the set of Views that are allowed to be inflated. <br /><br />"
"android.widget.RemoteViews.ProgressBar.setIndeterminate (int viewId, int max, int progress, boolean indeterminate) "," Equivalent to calling ProgressBar.setMax, ProgressBar.setProgress, and ProgressBar.setIndeterminate If indeterminate is true, then the values for max and progress are ignored. <br /><br />"
"android.widget.RemoteViews.clone () "," Creates and returns a copy of this Object. <br /><br />"
"android.widget.RemoteViews.showPrevious () (int viewId) "," Equivalent to calling showPrevious() <br /><br />"
"android.widget.RemoteViews.setPadding (int, int, int, int) (int viewId, int left, int top, int right, int bottom) "," Equivalent to calling setPadding(int, int, int, int). <br /><br />"
"android.widget.RemoteViews.setDisplayedChild (int) (int viewId, int childIndex) "," Equivalent to calling setDisplayedChild(int) <br /><br />"
"android.widget.RemoteViews.setImageViewResource (int viewId, int srcId) "," Equivalent to calling ImageView.setImageResource <br /><br />"
"android.widget.RemoteViews.Bundle () "," Call a method taking one Bundle on a view in the layout for this RemoteViews. <br /><br />"
"android.widget.RemoteViews.removeAllViews () (int viewId) "," Equivalent to calling removeAllViews(). <br /><br />"
"android.widget.RemoteViews.Intent () "," When using collections (eg. <br /><br />"
"android.widget.RemoteViews.PendingIntent () "," When using collections (eg. <br /><br />"
"android.widget.RemoteViews.Bitmap () "," Equivalent to calling ImageView.setImageBitmap <br /><br />"
"android.widget.RemoteViewsService.Intent () "," To be implemented by the derived service to generate appropriate factories for the data. <br /><br />"
"android.widget.RemoteViewsService.RemoteViewsFactory.hasStableIds () () "," See hasStableIds(). <br /><br />"
"android.widget.RemoteViewsService.RemoteViewsFactory.onCreate () "," Called when your factory is first constructed. <br /><br />"
"android.widget.RemoteViewsService.RemoteViewsFactory.onDestroy () "," Called when the last RemoteViewsAdapter that is associated with this factory is unbound. <br /><br />"
"android.widget.RemoteViewsService.RemoteViewsFactory.getViewTypeCount () () "," See getViewTypeCount(). <br /><br />"
"android.widget.RemoteViewsService.RemoteViewsFactory.getView (int, android.view.View, android.view.ViewGroup) (int position) "," See getView(int, android.view.View, android.view.ViewGroup). <br /><br />"
"android.widget.RemoteViewsService.RemoteViewsFactory.getItemId (int) (int position) "," See getItemId(int). <br /><br />"
"android.widget.RemoteViewsService.RemoteViewsFactory.getCount () () "," See getCount() <br /><br />"
"android.widget.RemoteViewsService.RemoteViewsFactory.onDataSetChanged () "," Called when notifyDataSetChanged() is triggered on the remote adapter. <br /><br />"
"android.widget.RemoteViewsService.RemoteViewsFactory.getViewAt (int) () "," This allows for the use of a custom loading view which appears between the time that getViewAt(int) is called and returns. <br /><br />"
"android.widget.ResourceCursorAdapter.setViewResource (int layout) "," Sets the layout resource of the item views. <br /><br />"
"android.widget.ResourceCursorAdapter.setDropDownViewResource (int dropDownLayout) "," Sets the layout resource of the drop down views. <br /><br />"
"android.widget.ResourceCursorAdapter.ViewGroup () "," Inflates view(s) from the specified XML file. <br /><br />"
"android.widget.ResourceCursorTreeAdapter.ViewGroup () "," Makes a new group view to hold the group data pointed to by cursor. <br /><br />"
"android.widget.Scroller.getFinalX () "," Returns where the scroll will end. <br /><br />"
"android.widget.Scroller.computeScrollOffset () "," Call this when you want to know the new location. <br /><br />"
"android.widget.Scroller.isFinished () "," Returns whether the scroller has finished scrolling. <br /><br />"
"android.widget.Scroller.setFriction (float friction) "," The amount of friction applied to flings. <br /><br />"
"android.widget.Scroller.forceFinished (boolean finished) "," Force the finished field to a particular value. <br /><br />"
"android.widget.Scroller.getCurrX () "," Returns the current X offset in the scroll. <br /><br />"
"android.widget.Scroller.abortAnimation () "," Stops the animation. <br /><br />"
"android.widget.Scroller.timePassed () "," Returns the time elapsed since the beginning of the scrolling. <br /><br />"
"android.widget.Scroller.getCurrVelocity () "," Returns the current velocity. <br /><br />"
"android.widget.Scroller.setFinalY (int newY) "," Sets the final position (Y) for this scroller. <br /><br />"
"android.widget.Scroller.getStartX () "," Returns the start X offset in the scroll. <br /><br />"
"android.widget.Scroller.fling (int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY) "," Start scrolling based on a fling gesture. <br /><br />"
"android.widget.Scroller.startScroll (int startX, int startY, int dx, int dy) "," Start scrolling by providing a starting point and the distance to travel. <br /><br />"
"android.widget.Scroller.getStartY () "," Returns the start Y offset in the scroll. <br /><br />"
"android.widget.Scroller.getCurrY () "," Returns the current Y offset in the scroll. <br /><br />"
"android.widget.Scroller.getFinalY () "," Returns where the scroll will end. <br /><br />"
"android.widget.Scroller.startScroll (int startX, int startY, int dx, int dy, int duration) "," Start scrolling by providing a starting point, the distance to travel, and the duration of the scroll. <br /><br />"
"android.widget.Scroller.setFinalX (int newX) "," Sets the final position (X) for this scroller. <br /><br />"
"android.widget.Scroller.extendDuration (int extend) "," Extend the scroll animation. <br /><br />"
"android.widget.Scroller.getDuration () "," Returns how long the scroll event will take, in milliseconds. <br /><br />"
"android.widget.ScrollView.setFillViewport (boolean fillViewport) "," Indicates this ScrollView whether it should stretch its content height to fill the viewport or not. <br /><br />"
"android.widget.ScrollView.setSmoothScrollingEnabled (boolean smoothScrollingEnabled) "," Set whether arrow scrolling will animate its transition. <br /><br />"
"android.widget.ScrollView.shouldDelayChildPressedState () "," Return true if the pressed state should be delayed for children or descendants of this ViewGroup. <br /><br />"
"android.widget.ScrollView.MotionEvent () "," Implement this method to handle touch screen motion events. <br /><br />"
"android.widget.ScrollView.requestLayout () "," Call this when something has changed which has invalidated the layout of this view. <br /><br />"
"android.widget.ScrollView.getMaxScrollAmount () "," no description <br /><br />"
"android.widget.ScrollView.Canvas () "," Manually render this view (and all of its children) to the given Canvas. <br /><br />"
"android.widget.ScrollView.scrollTo (int x, int y) "," Set the scrolled position of your view. This version also clamps the scrolling to the bounds of our child. <br /><br />"
"android.widget.ScrollView.scrollBy (int, int) (int dx, int dy) "," Like scrollBy(int, int), but scroll smoothly instead of immediately. <br /><br />"
"android.widget.ScrollView.View () "," Called when a child of this parent wants focus <br /><br />"
"android.widget.ScrollView.fullScroll (int direction) "," Handles scrolling in response to a 'home/end' shortcut press. <br /><br />"
"android.widget.ScrollView.isFillViewport () "," Indicates whether this ScrollView's content is stretched to fill the viewport. <br /><br />"
"android.widget.ScrollView.setOverScrollMode (int mode) "," Set the over-scroll mode for this view. <br /><br />"
"android.widget.ScrollView.onInterceptTouchEvent (MotionEvent) (boolean disallowIntercept) "," Called when a child does not want this parent and its ancestors to intercept touch events with onInterceptTouchEvent(MotionEvent). <br /><br />"
"android.widget.ScrollView.Rect () "," Called when a child of this group wants a particular rectangle to be positioned onto the screen. <br /><br />"
"android.widget.ScrollView.computeScroll () "," Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary. <br /><br />"
"android.widget.ScrollView.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.ScrollView.arrowScroll (int direction) "," Handle scrolling in response to an up or down arrow click. <br /><br />"
"android.widget.ScrollView.isSmoothScrollingEnabled () "," no description <br /><br />"
"android.widget.ScrollView.ViewGroup.LayoutParams () "," Adds a child view with the specified layout parameters. <br /><br />"
"android.widget.ScrollView.KeyEvent () "," You can call this function yourself to have the scroll view perform scrolling from a key event, just as if the event had been dispatched to it by the view hierarchy. <br /><br />"
"android.widget.ScrollView.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.ScrollView.Bundle () "," Performs the specified accessibility action on the view. <br /><br />"
"android.widget.ScrollView.pageScroll (int direction) "," Handles scrolling in response to a 'page up/down' shortcut press. <br /><br />"
"android.widget.ScrollView.scrollTo (int, int) (int x, int y) "," Like scrollTo(int, int), but scroll smoothly instead of immediately. <br /><br />"
"android.widget.ScrollView.fling (int velocityY) "," Fling the scroll view <br /><br />"
"android.widget.SearchView.SearchView.OnSuggestionListener () "," Sets a listener to inform when a suggestion is focused or clicked. <br /><br />"
"android.widget.SearchView.getInputType () "," Returns the input type set on the query text field. <br /><br />"
"android.widget.SearchView.setMaxWidth (int maxpixels) "," Makes the view at most this many pixels wide <br /><br />"
"android.widget.SearchView.onActionViewCollapsed () "," Called when this view is collapsed as an action view. <br /><br />"
"android.widget.SearchView.isIconfiedByDefault () "," Returns the default iconified state of the search field. <br /><br />"
"android.widget.SearchView.setInputType (int inputType) "," Sets the input type on the query text field. <br /><br />"
"android.widget.SearchView.onActionViewExpanded () "," Called when this view is expanded as an action view. <br /><br />"
"android.widget.SearchView.getImeOptions () "," Returns the IME options set on the query text field. <br /><br />"
"android.widget.SearchView.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.SearchView.SearchView.OnCloseListener () "," Sets a listener to inform when the user closes the SearchView. <br /><br />"
"android.widget.SearchView.View.OnClickListener () "," Sets a listener to inform when the search button is pressed. <br /><br />"
"android.widget.SearchView.getQueryHint () "," Gets the hint text to display in the query text field. <br /><br />"
"android.widget.SearchView.getQuery () "," Returns the query string currently in the text field. <br /><br />"
"android.widget.SearchView.View.OnFocusChangeListener () "," Sets a listener to inform when the focus of the query text field changes. <br /><br />"
"android.widget.SearchView.getMaxWidth () "," Gets the specified maximum width in pixels, if set. <br /><br />"
"android.widget.SearchView.onWindowFocusChanged (boolean hasWindowFocus) "," Called when the window containing this view gains or loses focus. <br /><br />"
"android.widget.SearchView.CursorAdapter () "," You can set a custom adapter if you wish. <br /><br />"
"android.widget.SearchView.setIconified (boolean iconify) "," Iconifies or expands the SearchView. <br /><br />"
"android.widget.SearchView.isIconified () "," Returns the current iconified state of the SearchView. <br /><br />"
"android.widget.SearchView.SearchableInfo () "," Sets the SearchableInfo for this SearchView. <br /><br />"
"android.widget.SearchView.setQueryRefinementEnabled (boolean enable) "," Specifies if a query refinement button should be displayed alongside each suggestion or if it should depend on the flags set in the individual items retrieved from the suggestions provider. <br /><br />"
"android.widget.SearchView.CharSequence () "," Sets the hint text to display in the query text field. <br /><br />"
"android.widget.SearchView.SearchView.OnQueryTextListener () "," Sets a listener for user actions within the SearchView. <br /><br />"
"android.widget.SearchView.setSubmitButtonEnabled (boolean enabled) "," Enables showing a submit button when the query is non-empty. <br /><br />"
"android.widget.SearchView.KeyEvent () "," Handles the key down event for dealing with action keys. <br /><br />"
"android.widget.SearchView.getSuggestionsAdapter () "," Returns the adapter used for suggestions, if any. <br /><br />"
"android.widget.SearchView.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.SearchView.setIconifiedByDefault (boolean iconified) "," Sets the default or resting state of the search field. <br /><br />"
"android.widget.SearchView.isQueryRefinementEnabled () "," Returns whether query refinement is enabled for all items or only specific ones. <br /><br />"
"android.widget.SearchView.isSubmitButtonEnabled () "," Returns whether the submit button is enabled when necessary or never displayed. <br /><br />"
"android.widget.SearchView.setImeOptions (int imeOptions) "," Sets the IME options on the query text field. <br /><br />"
"android.widget.SearchView.OnCloseListener.onClose () "," The user is attempting to close the SearchView. <br /><br />"
"android.widget.SearchView.OnQueryTextListener.String () "," Called when the user submits the query. <br /><br />"
"android.widget.SearchView.OnSuggestionListener.onSuggestionClick (int position) "," Called when a suggestion was clicked. <br /><br />"
"android.widget.SearchView.OnSuggestionListener.onSuggestionSelect (int position) "," Called when a suggestion was selected by navigating to it. <br /><br />"
"android.widget.SectionIndexer.getSectionForPosition (int position) "," Given a position within the adapter, returns the index of the corresponding section within the array of section objects. <br /><br />"
"android.widget.SectionIndexer.getPositionForSection (int sectionIndex) "," Given the index of a section within the array of section objects, returns the starting position of that section within the adapter. <br /><br />"
"android.widget.SectionIndexer.getSections () "," Returns an array of objects representing sections of the list. <br /><br />"
"android.widget.SeekBar.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.SeekBar.SeekBar.OnSeekBarChangeListener () "," Sets a listener to receive notifications of changes to the SeekBar's progress level. <br /><br />"
"android.widget.SeekBar.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.SeekBar.OnSeekBarChangeListener.SeekBar () "," Notification that the user has finished a touch gesture. <br /><br />"
"android.widget.ShareActionProvider.String () "," Sets the file name of a file for persisting the share history which history will be used for ordering share targets. <br /><br />"
"android.widget.ShareActionProvider.onCreateActionView (MenuItem) () "," This method is deprecated. use onCreateActionView(MenuItem) <br /><br />"
"android.widget.ShareActionProvider.hasSubMenu () "," Determines if this ActionProvider has a submenu associated with it. <br /><br />"
"android.widget.ShareActionProvider.ShareActionProvider.OnShareTargetSelectedListener () "," Sets a listener to be notified when a share target has been selected. <br /><br />"
"android.widget.ShareActionProvider.SubMenu () "," Called to prepare an associated submenu for the menu item backed by this ActionProvider. <br /><br />"
"android.widget.ShareActionProvider.Intent () "," Sets an intent with information about the share action. <br /><br />"
"android.widget.ShareActionProvider.OnShareTargetSelectedListener.Intent () "," Called when a share target has been selected. <br /><br />"
"android.widget.SimpleAdapter.getItem (int position) "," no description <br /><br />"
"android.widget.SimpleAdapter.String () "," Called by bindView() to set the text for a TextView but only if there is no existing ViewBinder or if the existing ViewBinder cannot handle binding to a TextView. <br /><br />"
"android.widget.SimpleAdapter.ImageView () "," Called by bindView() to set the image for an ImageView but only if there is no existing ViewBinder or if the existing ViewBinder cannot handle binding to an ImageView. <br /><br />"
"android.widget.SimpleAdapter.getCount () "," no description <br /><br />"
"android.widget.SimpleAdapter.ViewGroup () "," no description <br /><br />"
"android.widget.SimpleAdapter.getFilter () "," Returns a filter that can be used to constrain data with a filtering pattern. <br /><br />"
"android.widget.SimpleAdapter.View () "," Get a View that displays in the drop down popup the data at the specified position in the data set. <br /><br />"
"android.widget.SimpleAdapter.SimpleAdapter.ViewBinder () "," Sets the binder used to bind data to views. <br /><br />"
"android.widget.SimpleAdapter.setDropDownViewResource (int resource) "," Sets the layout resource to create the drop down views. <br /><br />"
"android.widget.SimpleAdapter.getItemId (int position) "," no description <br /><br />"
"android.widget.SimpleAdapter.ViewBinder.String () "," Binds the specified data to the specified view. <br /><br />"
"android.widget.SimpleCursorAdapter.CursorToStringConverter.Cursor () "," Returns a CharSequence representing the specified Cursor. <br /><br />"
"android.widget.SimpleCursorAdapter.getCursorToStringConverter () "," Returns the converter used to convert the filtering Cursor into a String. <br /><br />"
"android.widget.SimpleCursorAdapter.String () "," Called by bindView() to set the text for a TextView but only if there is no existing ViewBinder or if the existing ViewBinder cannot handle binding to a TextView. <br /><br />"
"android.widget.SimpleCursorAdapter.Cursor () "," Swap in a new Cursor, returning the old Cursor. <br /><br />"
"android.widget.SimpleCursorAdapter.setStringConversionColumn (int stringConversionColumn) "," Defines the index of the column in the Cursor used to get a String representation of that Cursor. <br /><br />"
"android.widget.SimpleCursorAdapter.getStringConversionColumn () "," Return the index of the column used to get a String representation of the Cursor. <br /><br />"
"android.widget.SimpleCursorAdapter.String[] () "," Change the cursor and change the column-to-view mappings at the same time. <br /><br />"
"android.widget.SimpleCursorAdapter.SimpleCursorAdapter.CursorToStringConverter () "," Sets the converter used to convert the filtering Cursor into a String. <br /><br />"
"android.widget.SimpleCursorAdapter.SimpleCursorAdapter.ViewBinder () "," Sets the binder used to bind data to views. <br /><br />"
"android.widget.SimpleCursorAdapter.ViewBinder.Cursor () "," Binds the Cursor column defined by the specified index to the specified view. <br /><br />"
"android.widget.SimpleCursorTreeAdapter.String () "," Called by bindView() to set the text for a TextView but only if there is no existing ViewBinder or if the existing ViewBinder cannot handle binding to a TextView. <br /><br />"
"android.widget.SimpleCursorTreeAdapter.SimpleCursorTreeAdapter.ViewBinder () "," Sets the binder used to bind data to views. <br /><br />"
"android.widget.SimpleCursorTreeAdapter.ViewBinder.Cursor () "," Binds the Cursor column defined by the specified index to the specified view. <br /><br />"
"android.widget.SimpleExpandableListAdapter.getChildId (int groupPosition, int childPosition) "," no description <br /><br />"
"android.widget.SimpleExpandableListAdapter.getGroupId (int groupPosition) "," no description <br /><br />"
"android.widget.SimpleExpandableListAdapter.getChild (int groupPosition, int childPosition) "," no description <br /><br />"
"android.widget.SimpleExpandableListAdapter.hasStableIds () "," no description <br /><br />"
"android.widget.SimpleExpandableListAdapter.ViewGroup () "," Instantiates a new View for a group. <br /><br />"
"android.widget.SimpleExpandableListAdapter.getChildrenCount (int groupPosition) "," no description <br /><br />"
"android.widget.SimpleExpandableListAdapter.getGroup (int groupPosition) "," no description <br /><br />"
"android.widget.SimpleExpandableListAdapter.isChildSelectable (int groupPosition, int childPosition) "," no description <br /><br />"
"android.widget.SimpleExpandableListAdapter.getGroupCount () "," no description <br /><br />"
"android.widget.SlidingDrawer.toggle () "," Toggles the drawer open and close. <br /><br />"
"android.widget.SlidingDrawer.SlidingDrawer.OnDrawerCloseListener () "," Sets the listener that receives a notification when the drawer becomes close. <br /><br />"
"android.widget.SlidingDrawer.MotionEvent () "," Implement this method to handle touch screen motion events. <br /><br />"
"android.widget.SlidingDrawer.open () "," Opens the drawer immediately. <br /><br />"
"android.widget.SlidingDrawer.close () "," Closes the drawer immediately. <br /><br />"
"android.widget.SlidingDrawer.getHandle () "," Returns the handle of the drawer. <br /><br />"
"android.widget.SlidingDrawer.lock () "," Locks the SlidingDrawer so that touch events are ignores. <br /><br />"
"android.widget.SlidingDrawer.SlidingDrawer.OnDrawerScrollListener () "," Sets the listener that receives a notification when the drawer starts or ends a scroll. <br /><br />"
"android.widget.SlidingDrawer.SlidingDrawer.OnDrawerOpenListener () "," Sets the listener that receives a notification when the drawer becomes open. <br /><br />"
"android.widget.SlidingDrawer.isOpened () "," Indicates whether the drawer is currently fully opened. <br /><br />"
"android.widget.SlidingDrawer.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.SlidingDrawer.animateToggle () "," Toggles the drawer open and close with an animation. <br /><br />"
"android.widget.SlidingDrawer.isMoving () "," Indicates whether the drawer is scrolling or flinging. <br /><br />"
"android.widget.SlidingDrawer.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.SlidingDrawer.unlock () "," Unlocks the SlidingDrawer so that touch events are processed. <br /><br />"
"android.widget.SlidingDrawer.animateOpen () "," Opens the drawer with an animation. <br /><br />"
"android.widget.SlidingDrawer.animateClose () "," Closes the drawer with an animation. <br /><br />"
"android.widget.SlidingDrawer.getContent () "," Returns the content of the drawer. <br /><br />"
"android.widget.SlidingDrawer.OnDrawerCloseListener.onDrawerClosed () "," Invoked when the drawer becomes fully closed. <br /><br />"
"android.widget.SlidingDrawer.OnDrawerOpenListener.onDrawerOpened () "," Invoked when the drawer becomes fully open. <br /><br />"
"android.widget.SlidingDrawer.OnDrawerScrollListener.onScrollStarted () "," Invoked when the user starts dragging/flinging the drawer's handle. <br /><br />"
"android.widget.SlidingDrawer.OnDrawerScrollListener.onScrollEnded () "," Invoked when the user stops dragging/flinging the drawer's handle. <br /><br />"
"android.widget.Space.Canvas () "," Draw nothing. <br /><br />"
"android.widget.Spinner.AdapterView.OnItemClickListener () "," A spinner does not support item click events. <br /><br />"
"android.widget.Spinner.onSaveInstanceState () () "," Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState(). <br /><br />"
"android.widget.Spinner.getDropDownHorizontalOffset () "," Get the configured horizontal offset in pixels for the spinner's popup window of choices. <br /><br />"
"android.widget.Spinner.performClick () "," Call this view's OnClickListener, if it is defined. <br /><br />"
"android.widget.Spinner.MotionEvent () "," Implement this method to handle touch screen motion events. <br /><br />"
"android.widget.Spinner.getBaseline () "," Return the offset of the widget's text baseline from the widget's top boundary. <br /><br />"
"android.widget.Spinner.getPopupBackground () "," Get the background drawable for the spinner's popup window of choices. <br /><br />"
"android.widget.Spinner.CharSequence () "," Sets the prompt to display when the dialog is shown. <br /><br />"
"android.widget.Spinner.getPrompt () "," no description <br /><br />"
"android.widget.Spinner.getDropDownWidth () "," Get the configured width of the spinner's popup window of choices in pixels. <br /><br />"
"android.widget.Spinner.onSaveInstanceState () "," Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. <br /><br />"
"android.widget.Spinner.setPopupBackgroundResource (int resId) "," Set the background drawable for the spinner's popup window of choices. <br /><br />"
"android.widget.Spinner.setGravity (int gravity) "," Describes how the selected item view is positioned. <br /><br />"
"android.widget.Spinner.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.Spinner.getDropDownVerticalOffset () "," Get the configured vertical offset in pixels for the spinner's popup window of choices. <br /><br />"
"android.widget.Spinner.Drawable () "," Set the background drawable for the spinner's popup window of choices. <br /><br />"
"android.widget.Spinner.setDropDownWidth (int pixels) "," Set the width of the spinner's popup window of choices in pixels. <br /><br />"
"android.widget.Spinner.getGravity () "," Describes how the selected item view is positioned. <br /><br />"
"android.widget.Spinner.setDropDownHorizontalOffset (int pixels) "," Set a horizontal offset in pixels for the spinner's popup window of choices. <br /><br />"
"android.widget.Spinner.setEnabled (boolean enabled) "," Set the enabled state of this view. <br /><br />"
"android.widget.Spinner.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.Spinner.SpinnerAdapter () "," Sets the Adapter used to provide the data which backs this Spinner. <br /><br />"
"android.widget.Spinner.DialogInterface () "," This method will be invoked when a button in the dialog is clicked. <br /><br />"
"android.widget.Spinner.setPromptId (int promptId) "," Sets the prompt to display when the dialog is shown. <br /><br />"
"android.widget.Spinner.setDropDownVerticalOffset (int pixels) "," Set a vertical offset in pixels for the spinner's popup window of choices. <br /><br />"
"android.widget.SpinnerAdapter.View () "," Get a View that displays in the drop down popup the data at the specified position in the data set. <br /><br />"
"android.widget.StackView.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.StackView.showPrevious () "," Manually shows the previous child. <br /><br />"
"android.widget.StackView.MotionEvent () "," Implement this method to handle touch screen motion events. <br /><br />"
"android.widget.StackView.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.StackView.Bundle () "," Performs the specified accessibility action on the view. <br /><br />"
"android.widget.StackView.AppWidgetHost () "," Called by an AppWidgetHost in order to advance the current view when it is being used within an app widget. <br /><br />"
"android.widget.StackView.showNext () "," Manually shows the next child. <br /><br />"
"android.widget.Switch.toggle () "," Change the checked state of the view to the inverse of its current state <br /><br />"
"android.widget.Switch.setThumbResource (int resId) "," Set the drawable used for the switch 'thumb' - the piece that the user can physically touch and drag along the track. <br /><br />"
"android.widget.Switch.getSplitTrack () "," Returns whether the track should be split by the thumb. <br /><br />"
"android.widget.Switch.setChecked (boolean checked) "," Changes the checked state of this button. <br /><br />"
"android.widget.Switch.MotionEvent () "," Implement this method to handle touch screen motion events. <br /><br />"
"android.widget.Switch.getTrackDrawable () "," Get the drawable used for the track that the switch slides within. <br /><br />"
"android.widget.Switch.setSwitchMinWidth (int pixels) "," Set the minimum width of the switch in pixels. <br /><br />"
"android.widget.Switch.getShowText () "," no description <br /><br />"
"android.widget.Switch.getSwitchPadding () "," Get the amount of horizontal padding between the switch and the associated text. <br /><br />"
"android.widget.Switch.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.Switch.Drawable () "," Set the drawable used for the track that the switch slides within. <br /><br />"
"android.widget.Switch.Typeface () "," Sets the typeface in which the text should be displayed on the switch. <br /><br />"
"android.widget.Switch.getTextOff () "," Returns the text displayed when the button is not in the checked state. <br /><br />"
"android.widget.Switch.getSwitchMinWidth () "," Get the minimum width of the switch in pixels. <br /><br />"
"android.widget.Switch.onMeasure (int widthMeasureSpec, int heightMeasureSpec) "," Measure the view and its content to determine the measured width and the measured height. <br /><br />"
"android.widget.Switch.setSplitTrack (boolean splitTrack) "," Specifies whether the track should be split by the thumb. <br /><br />"
"android.widget.Switch.getTextOn () "," Returns the text displayed when the button is in the checked state. <br /><br />"
"android.widget.Switch.getCompoundPaddingRight () "," Returns the right padding of the view, plus space for the right Drawable if any. <br /><br />"
"android.widget.Switch.setSwitchPadding (int pixels) "," Set the amount of horizontal padding between the switch and the associated text. <br /><br />"
"android.widget.Switch.drawableHotspotChanged (float x, float y) "," This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. <br /><br />"
"android.widget.Switch.Canvas () "," Manually render this view (and all of its children) to the given Canvas. <br /><br />"
"android.widget.Switch.setThumbTextPadding (int pixels) "," Set the horizontal padding around the text drawn on the switch itself. <br /><br />"
"android.widget.Switch.CharSequence () "," Sets the text displayed when the button is in the checked state. <br /><br />"
"android.widget.Switch.Drawable.jumpToCurrentState () () "," Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view. <br /><br />"
"android.widget.Switch.getThumbTextPadding () "," Get the horizontal padding around the text drawn on the switch itself. <br /><br />"
"android.widget.Switch.Context () "," Sets the switch text color, size, style, hint color, and highlight color from the specified TextAppearance resource. <br /><br />"
"android.widget.Switch.getThumbDrawable () "," Get the drawable used for the switch 'thumb' - the piece that the user can physically touch and drag along the track. <br /><br />"
"android.widget.Switch.dispatchPopulateAccessibilityEvent (AccessibilityEvent) () "," Called from dispatchPopulateAccessibilityEvent(AccessibilityEvent) giving a chance to this View to populate the accessibility event with its text content. <br /><br />"
"android.widget.Switch.setTrackResource (int resId) "," Set the drawable used for the track that the switch slides within. <br /><br />"
"android.widget.Switch.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.Switch.getCompoundPaddingLeft () "," Returns the left padding of the view, plus space for the left Drawable if any. <br /><br />"
"android.widget.Switch.setShowText (boolean showText) "," Sets whether the on/off text should be displayed. <br /><br />"
"android.widget.TabHost.String () "," no description <br /><br />"
"android.widget.TabHost.setup () "," Call setup() before adding tabs if loading TabHost using findViewById(). <br /><br />"
"android.widget.TabHost.setContent (android.content.Intent) () "," If you are using setContent(android.content.Intent), this must be called since the activityGroup is needed to launch the local activity. <br /><br />"
"android.widget.TabHost.getTabContentView () "," Get the FrameLayout which holds tab content <br /><br />"
"android.widget.TabHost.getTabWidget () "," no description <br /><br />"
"android.widget.TabHost.dispatchWindowFocusChanged (boolean hasFocus) "," Called when the window containing this view gains or loses window focus. <br /><br />"
"android.widget.TabHost.getCurrentTabTag () "," no description <br /><br />"
"android.widget.TabHost.TabHost.TabSpec () "," Get a new TabHost.TabSpec associated with this tab host. <br /><br />"
"android.widget.TabHost.getCurrentTab () "," no description <br /><br />"
"android.widget.TabHost.clearAllTabs () "," Removes all tabs from the tab widget associated with this tab host. <br /><br />"
"android.widget.TabHost.onTouchModeChanged (boolean isInTouchMode) "," Callback method to be invoked when the touch mode changes. <br /><br />"
"android.widget.TabHost.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.TabHost.sendAccessibilityEvent (int eventType) "," Sends an accessibility event of the given type. <br /><br />"
"android.widget.TabHost.KeyEvent () "," Dispatch a key event to the next view on the focus path. <br /><br />"
"android.widget.TabHost.getCurrentTabView () "," no description <br /><br />"
"android.widget.TabHost.getCurrentView () "," no description <br /><br />"
"android.widget.TabHost.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.TabHost.TabHost.OnTabChangeListener () "," Register a callback to be invoked when the selected state of any of the items in this list changes <br /><br />"
"android.widget.TabHost.setCurrentTab (int index) "," no description <br /><br />"
"android.widget.TabHost.OnTabChangeListener.String () "," no description <br /><br />"
"android.widget.TabHost.TabContentFactory.String () "," Callback to make the tab contents <br /><br />"
"android.widget.TabHost.TabSpec.Drawable () "," Specify a label and icon as the tab indicator. <br /><br />"
"android.widget.TabHost.TabSpec.getTag () "," no description <br /><br />"
"android.widget.TabHost.TabSpec.CharSequence () "," Specify a label as the tab indicator. <br /><br />"
"android.widget.TabHost.TabSpec.View () "," Specify a view as the tab indicator. <br /><br />"
"android.widget.TabHost.TabSpec.TabHost.TabContentFactory () "," Specify a TabHost.TabContentFactory to use to create the content of the tab. <br /><br />"
"android.widget.TabHost.TabSpec.Intent () "," Specify an intent to use to launch an activity as the tab content. <br /><br />"
"android.widget.TabHost.TabSpec.setContent (int viewId) "," Specify the id of the view that should be used as the content of the tab. <br /><br />"
"android.widget.TableLayout.AttributeSet () "," Returns a new set of layout parameters based on the supplied attributes set. <br /><br />"
"android.widget.TableLayout.setStretchAllColumns (boolean stretchAllColumns) "," Convenience method to mark all columns as stretchable. <br /><br />"
"android.widget.TableLayout.requestLayout () "," Call this when something has changed which has invalidated the layout of this view. <br /><br />"
"android.widget.TableLayout.isColumnStretchable (int columnIndex) "," Returns whether the specified column is stretchable or not. <br /><br />"
"android.widget.TableLayout.setColumnShrinkable (int columnIndex, boolean isShrinkable) "," Makes the given column shrinkable or not. <br /><br />"
"android.widget.TableLayout.ViewGroup.OnHierarchyChangeListener () "," Register a callback to be invoked when a child is added to or removed from this view. <br /><br />"
"android.widget.TableLayout.isColumnCollapsed (int columnIndex) "," Returns the collapsed state of the specified column. <br /><br />"
"android.widget.TableLayout.View () "," Adds a child view. <br /><br />"
"android.widget.TableLayout.isColumnShrinkable (int columnIndex) "," Returns whether the specified column is shrinkable or not. <br /><br />"
"android.widget.TableLayout.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.TableLayout.ViewGroup.LayoutParams () "," Adds a child view with the specified layout parameters. <br /><br />"
"android.widget.TableLayout.setColumnCollapsed (int columnIndex, boolean isCollapsed) "," Collapses or restores a given column. <br /><br />"
"android.widget.TableLayout.setShrinkAllColumns (boolean shrinkAllColumns) "," Convenience method to mark all columns as shrinkable. <br /><br />"
"android.widget.TableLayout.setColumnStretchable (int columnIndex, boolean isStretchable) "," Makes the given column stretchable or not. <br /><br />"
"android.widget.TableLayout.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.TableLayout.isShrinkAllColumns () "," Indicates whether all columns are shrinkable or not. <br /><br />"
"android.widget.TableLayout.isStretchAllColumns () "," Indicates whether all columns are stretchable or not. <br /><br />"
"android.widget.TableRow.AttributeSet () "," Returns a new set of layout parameters based on the supplied attributes set. <br /><br />"
"android.widget.TableRow.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.TableRow.getVirtualChildCount () "," Returns the virtual number of children. <br /><br />"
"android.widget.TableRow.getVirtualChildAt (int i) "," Returns the view at the specified index. <br /><br />"
"android.widget.TableRow.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.TableRow.ViewGroup.OnHierarchyChangeListener () "," Register a callback to be invoked when a child is added to or removed from this view. <br /><br />"
"android.widget.TabWidget.getChildTabViewAt (int index) "," Returns the tab indicator view at the given index. <br /><br />"
"android.widget.TabWidget.Canvas () "," Called by draw to draw the child views. <br /><br />"
"android.widget.TabWidget.getTabCount () "," Returns the number of tab indicator views. <br /><br />"
"android.widget.TabWidget.focusCurrentTab (int index) "," Sets the current tab and focuses the UI on it. <br /><br />"
"android.widget.TabWidget.View () "," Called when the focus state of a view has changed. <br /><br />"
"android.widget.TabWidget.setRightStripDrawable (int resId) "," Sets the drawable to use as the right part of the strip below the tab indicators. <br /><br />"
"android.widget.TabWidget.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.TabWidget.Drawable () "," Sets the drawable to use as the right part of the strip below the tab indicators. <br /><br />"
"android.widget.TabWidget.setDividerDrawable (int resId) "," Sets the drawable to use as a divider between the tab indicators. <br /><br />"
"android.widget.TabWidget.setEnabled (boolean enabled) "," Set the enabled state of this view. <br /><br />"
"android.widget.TabWidget.AccessibilityEvent () "," This method behaves exactly as sendAccessibilityEvent(int) but takes as an argument an empty AccessibilityEvent and does not perform a check whether accessibility is enabled. <br /><br />"
"android.widget.TabWidget.removeAllViews () "," Call this method to remove all child views from the ViewGroup. <br /><br />"
"android.widget.TabWidget.setStripEnabled (boolean stripEnabled) "," Controls whether the bottom strips on the tab indicators are drawn or not. <br /><br />"
"android.widget.TabWidget.setLeftStripDrawable (int resId) "," Sets the drawable to use as the left part of the strip below the tab indicators. <br /><br />"
"android.widget.TabWidget.addStatesFromChildren () () "," If addStatesFromChildren() is true, refreshes this group's drawable state (to include the states from its children). <br /><br />"
"android.widget.TabWidget.isStripEnabled () "," Indicates whether the bottom strips on the tab indicators are drawn or not. <br /><br />"
"android.widget.TabWidget.setCurrentTab (int index) "," Sets the current tab. <br /><br />"
"android.widget.TextClock.String () "," Sets the specified time zone to use in this clock. <br /><br />"
"android.widget.TextClock.getTimeZone () "," Indicates which time zone is currently used by this view. <br /><br />"
"android.widget.TextClock.CharSequence () "," Specifies the formatting pattern used to display the date and/or time in 24-hour mode. <br /><br />"
"android.widget.TextClock.is24HourModeEnabled () "," Indicates whether the system is currently using the 24-hour mode. <br /><br />"
"android.widget.TextClock.getFormat12Hour () "," Returns the formatting pattern used to display the date and/or time in 12-hour mode. <br /><br />"
"android.widget.TextClock.getFormat24Hour () "," Returns the formatting pattern used to display the date and/or time in 24-hour mode. <br /><br />"
"android.widget.TextSwitcher.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.TextSwitcher.ViewGroup.LayoutParams () "," Adds a child view with the specified layout parameters. <br /><br />"
"android.widget.TextSwitcher.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.TextSwitcher.CharSequence () "," Sets the text of the next view and switches to the next view. <br /><br />"
"android.widget.TextView.InputFilter[] () "," Sets the list of input filters that will be used if the buffer is Editable. <br /><br />"
"android.widget.TextView.getCompoundDrawablesRelative () "," Returns drawables for the start, top, end, and bottom borders. <br /><br />"
"android.widget.TextView.TextView.BufferType () "," no description <br /><br />"
"android.widget.TextView.Drawable () "," Sets the right-hand compound drawable of the TextView to the specified icon and sets an error message that will be displayed in a popup when the TextView has focus. <br /><br />"
"android.widget.TextView.setLinkTextColor (int color) "," Sets the color of links in the text. <br /><br />"
"android.widget.TextView.Spannable.Factory () "," Sets the Factory used to create new Spannables. <br /><br />"
"android.widget.TextView.getEllipsize () "," Returns where, if anywhere, words that are longer than the view is wide should be ellipsized. <br /><br />"
"android.widget.TextView.setTextSize (int unit, float size) "," Set the default text size to a given unit and value. <br /><br />"
"android.widget.TextView.setLineSpacing (float add, float mult) "," Sets line spacing for this TextView. <br /><br />"
"android.widget.TextView.setAutoLinkMask (int mask) "," Sets the autolink mask of the text. <br /><br />"
"android.widget.TextView.setMarqueeRepeatLimit (int marqueeLimit) "," Sets how many times to repeat the marquee animation. <br /><br />"
"android.widget.TextView.EditorInfo.privateImeOptions () "," Set the private content type of the text, which is the EditorInfo.privateImeOptions field that will be filled in when creating an input connection. <br /><br />"
"android.widget.TextView.Locale () "," Set the default Locale of the text in this TextView to the given value. <br /><br />"
"android.widget.TextView.getFreezesText () "," Return whether this text view is including its entire text contents in frozen icicles. <br /><br />"
"android.widget.TextView.cancelLongPress () "," Cancels a pending long press. <br /><br />"
"android.widget.TextView.setShadowLayer (float radius, float dx, float dy, int color) "," Gives the text a shadow of the specified blur radius and color, the specified distance from its drawn position. <br /><br />"
"android.widget.TextView.setTextIsSelectable (boolean selectable) "," Sets whether the content of this view is selectable by the user. <br /><br />"
"android.widget.TextView.setLetterSpacing (float letterSpacing) "," Sets text letter-spacing. <br /><br />"
"android.widget.TextView.getCompoundDrawables () "," Returns drawables for the left, top, right, and bottom borders. <br /><br />"
"android.widget.TextView.MotionEvent () "," Implement this method to handle trackball motion events. <br /><br />"
"android.widget.TextView.setError (CharSequence) () "," Returns the error message that was set to be displayed with setError(CharSequence), or null if no error was set or if it the error was cleared by the widget after user input. <br /><br />"
"android.widget.TextView.setLines (int lines) "," Makes the TextView exactly this many lines tall. <br /><br />"
"android.widget.TextView.setHint (int resid) "," Sets the text to be displayed when the text of the TextView is empty, from a resource. <br /><br />"
"android.widget.TextView.getTotalPaddingRight () "," Returns the total right padding of the view, including the right Drawable if any. <br /><br />"
"android.widget.TextView.Rect () "," Return the baseline for the specified line (0...getLineCount() - 1) If bounds is not null, return the top, left, right, bottom extents of the specified line in it. <br /><br />"
"android.widget.TextView.inputType (int type) "," Set the type of the content with a constant as defined for inputType. <br /><br />"
"android.widget.TextView.getMinEms () "," no description <br /><br />"
"android.widget.TextView.setFreezesText (boolean freezesText) "," Control whether this text view saves its entire text contents when freezing to an icicle, in addition to dynamic state such as cursor position. <br /><br />"
"android.widget.TextView.setMinLines (int minlines) "," Makes the TextView at least this many lines tall. <br /><br />"
"android.widget.TextView.String () "," Sets font feature settings. <br /><br />"
"android.widget.TextView.getLetterSpacing () "," no description <br /><br />"
"android.widget.TextView.getFilters () "," Returns the current list of input filters. <br /><br />"
"android.widget.TextView.InputConnection.commitCompletion () () "," Called by the framework in response to a text completion from the current input method, provided by it calling InputConnection.commitCompletion(). <br /><br />"
"android.widget.TextView.getCurrentHintTextColor () "," Return the current color selected to paint the hint text. <br /><br />"
"android.widget.TextView.KEYCODE_ENTER () "," Default implementation of KeyEvent.Callback.onKeyUp(): perform clicking of the view when KEYCODE_DPAD_CENTER or KEYCODE_ENTER is released. <br /><br />"
"android.widget.TextView.computeScroll () "," Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary. <br /><br />"
"android.widget.TextView.setCompoundDrawablePadding (int pad) "," Sets the size of the padding between the compound drawables and the text. <br /><br />"
"android.widget.TextView.ViewGroup.detachViewFromParent () "," This is called when a container is going to temporarily detach a child, with ViewGroup.detachViewFromParent. <br /><br />"
"android.widget.TextView.setSingleLine () "," Sets the properties of this field (lines, horizontally scrolling, transformation method) to be for a single-line input. <br /><br />"
"android.widget.TextView.getTotalPaddingEnd () "," Returns the total end padding of the view, including the end Drawable if any. <br /><br />"
"android.widget.TextView.getTotalPaddingLeft () "," Returns the total left padding of the view, including the left Drawable if any. <br /><br />"
"android.widget.TextView.getOffsetForPosition (float x, float y) "," Get the character offset closest to the specified absolute position. <br /><br />"
"android.widget.TextView.ExtractedText () "," If this TextView contains editable content, extract a portion of it based on the information in request in to outText. <br /><br />"
"android.widget.TextView.setShowSoftInputOnFocus (boolean show) "," Sets whether the soft input method will be made visible when this TextView gets focused. <br /><br />"
"android.widget.TextView.getCompoundDrawablePadding () "," Returns the padding between the compound drawables and the text. <br /><br />"
"android.widget.TextView.getSelectionStart (CharSequence) () "," Convenience for getSelectionStart(CharSequence). <br /><br />"
"android.widget.TextView.setHintTextColor (int color) "," Sets the color of the hint text for all the states (disabled, focussed, selected...) of this TextView. <br /><br />"
"android.widget.TextView.getMaxEms () "," no description <br /><br />"
"android.widget.TextView.getLineSpacingMultiplier () "," Gets the line spacing multiplier <br /><br />"
"android.widget.TextView.isSuggestionsEnabled () "," Return whether or not suggestions are enabled on this TextView. <br /><br />"
"android.widget.TextView.setEnabled (boolean enabled) "," Set the enabled state of this view. <br /><br />"
"android.widget.TextView.getCompoundPaddingStart () "," Returns the start padding of the view, plus space for the start Drawable if any. <br /><br />"
"android.widget.TextView.setCompoundDrawablesWithIntrinsicBounds (int left, int top, int right, int bottom) "," Sets the Drawables (if any) to appear to the left of, above, to the right of, and below the text. <br /><br />"
"android.widget.TextView.setSelectAllOnFocus (boolean selectAllOnFocus) "," Set the TextView so that when it takes focus, all the text is selected. <br /><br />"
"android.widget.TextView.Drawable.jumpToCurrentState () () "," Call Drawable.jumpToCurrentState() on all Drawable objects associated with this view. <br /><br />"
"android.widget.TextView.didTouchFocusSelect () "," Returns true, only while processing a touch gesture, if the initial touch down event caused focus to move to the text view and as a result its selection changed. <br /><br />"
"android.widget.TextView.getTotalPaddingTop () "," Returns the total top padding of the view, including the top Drawable if any, the extra space to keep more than maxLines from showing, and the vertical offset for gravity, if any. <br /><br />"
"android.widget.TextView.getPaint () "," no description <br /><br />"
"android.widget.TextView.setImeActionLabel (CharSequence, int) () "," Get the IME action label previous set with setImeActionLabel(CharSequence, int). <br /><br />"
"android.widget.TextView.getGravity () "," Returns the horizontal and vertical alignment of this TextView. <br /><br />"
"android.widget.TextView.hasSelection () "," Return true iff there is a selection inside this text view. <br /><br />"
"android.widget.TextView.endBatchEdit () "," no description <br /><br />"
"android.widget.TextView.InputConnection.performEditorAction () (int actionCode) "," Called when an attached input method calls InputConnection.performEditorAction() for this text view. <br /><br />"
"android.widget.TextView.getExtendedPaddingTop () "," Returns the extended top padding of the view, including both the top Drawable if any and any extra space to keep more than maxLines of text from showing. <br /><br />"
"android.widget.TextView.getShadowDy () "," no description <br /><br />"
"android.widget.TextView.EditorInfo () "," Create a new InputConnection for an InputMethod to interact with the view. <br /><br />"
"android.widget.TextView.TransformationMethod () "," Sets the transformation that is applied to the text that this TextView is displaying. <br /><br />"
"android.widget.TextView.getPrivateImeOptions () "," Get the private type of the content. <br /><br />"
"android.widget.TextView.getShadowDx () "," no description <br /><br />"
"android.widget.TextView.getShadowColor () "," no description <br /><br />"
"android.widget.TextView.setSelected (boolean selected) "," Changes the selection state of this view. <br /><br />"
"android.widget.TextView.onTextContextMenuItem (int id) "," Called when a context menu option for the text view is selected. <br /><br />"
"android.widget.TextView.getMaxLines () "," no description <br /><br />"
"android.widget.TextView.onSaveInstanceState () "," Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. <br /><br />"
"android.widget.TextView.onCheckIsTextEditor () "," Check whether the called view is a text editor, in which case it would make sense to automatically display a soft input window for it. <br /><br />"
"android.widget.TextView.sendAccessibilityEvent (int eventType) "," Sends an accessibility event of the given type. <br /><br />"
"android.widget.TextView.setIncludeFontPadding (boolean includepad) "," Set whether the TextView includes extra top and bottom padding to make room for accents that go above the normal ascent and descent. <br /><br />"
"android.widget.TextView.getCompoundPaddingRight () "," Returns the right padding of the view, plus space for the right Drawable if any. <br /><br />"
"android.widget.TextView.getLineHeight () "," no description <br /><br />"
"android.widget.TextView.setText (char[] text, int start, int len) "," Sets the TextView to display the specified slice of the specified char array. <br /><br />"
"android.widget.TextView.getExtendedPaddingBottom () "," Returns the extended bottom padding of the view, including both the bottom Drawable if any and any extra space to keep more than maxLines of text from showing. <br /><br />"
"android.widget.TextView.KeyListener () "," Sets the key listener to be used with this TextView. <br /><br />"
"android.widget.TextView.getShadowRadius () "," Gets the radius of the shadow layer. <br /><br />"
"android.widget.TextView.getBaseline () "," Return the offset of the widget's text baseline from the widget's top boundary. <br /><br />"
"android.widget.TextView.getIncludeFontPadding () "," Gets whether the TextView includes extra top and bottom padding to make room for accents that go above the normal ascent and descent. <br /><br />"
"android.widget.TextView.Scroller () "," no description <br /><br />"
"android.widget.TextView.onStartTemporaryDetach () () "," Called after onStartTemporaryDetach() when the container is done changing the view. <br /><br />"
"android.widget.TextView.setHighlightColor (int color) "," Sets the color used to display the selection highlight. <br /><br />"
"android.widget.TextView.getTypeface () "," no description <br /><br />"
"android.widget.TextView.onRtlPropertiesChanged (int layoutDirection) "," Called when any RTL property (layout direction or text direction or text alignment) has been changed. <br /><br />"
"android.widget.TextView.setText (int resid) "," no description <br /><br />"
"android.widget.TextView.getCompoundPaddingBottom () "," Returns the bottom padding of the view, plus space for the bottom Drawable if any. <br /><br />"
"android.widget.TextView.InputConnection.performPrivateCommand () () "," Called by the framework in response to a private command from the current method, provided by it calling InputConnection.performPrivateCommand(). <br /><br />"
"android.widget.TextView.TextView.OnEditorActionListener () "," Set a special listener to be called when an action is performed on the text view. <br /><br />"
"android.widget.TextView.getMaxWidth () "," no description <br /><br />"
"android.widget.TextView.getHintTextColors () "," no description <br /><br />"
"android.widget.TextView.onSaveInstanceState () () "," Hook allowing a view to re-apply a representation of its internal state that had previously been generated by onSaveInstanceState(). <br /><br />"
"android.widget.TextView.setCursorVisible (boolean visible) "," Set whether the cursor is visible. <br /><br />"
"android.widget.TextView.extractText (ExtractedTextRequest, ExtractedText) () "," Apply to this text view the given extracted text, as previously returned by extractText(ExtractedTextRequest, ExtractedText). <br /><br />"
"android.widget.TextView.hasOverlappingRendering () "," Returns whether this View has content which overlaps. <br /><br />"
"android.widget.TextView.setHeight (int pixels) "," Makes the TextView exactly this many pixels tall. <br /><br />"
"android.widget.TextView.performLongClick () "," Call this view's OnLongClickListener, if it is defined. <br /><br />"
"android.widget.TextView.dispatchPopulateAccessibilityEvent (AccessibilityEvent) () "," Called from dispatchPopulateAccessibilityEvent(AccessibilityEvent) giving a chance to this View to populate the accessibility event with its text content. <br /><br />"
"android.widget.TextView.TextBoxAttribute.extras (int xmlResId) "," Set the extra input data of the text, which is the TextBoxAttribute.extras Bundle that will be filled in when creating an input connection. <br /><br />"
"android.widget.TextView.getShowSoftInputOnFocus () "," Returns whether the soft input method will be made visible when this TextView gets focused. <br /><br />"
"android.widget.TextView.beginBatchEdit () "," no description <br /><br />"
"android.widget.TextView.length () "," Returns the length, in characters, of the text managed by this TextView <br /><br />"
"android.widget.TextView.setMaxHeight (int maxHeight) "," Makes the TextView at most this many pixels tall. <br /><br />"
"android.widget.TextView.getCompoundPaddingTop () "," Returns the top padding of the view, plus space for the top Drawable if any. <br /><br />"
"android.widget.TextView.getInputExtras (boolean create) "," Retrieve the input extras currently associated with the text view, which can be viewed as well as modified. <br /><br />"
"android.widget.TextView.setMaxLines (int maxlines) "," Makes the TextView at most this many lines tall. <br /><br />"
"android.widget.TextView.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.TextView.Typeface () "," Sets the typeface and style in which the text should be displayed. <br /><br />"
"android.widget.TextView.getLineSpacingExtra () "," Gets the line spacing extra space <br /><br />"
"android.widget.TextView.getEditableText () "," Return the text the TextView is displaying as an Editable object. <br /><br />"
"android.widget.TextView.commitCorrection (CorrectionInfo) () "," Called by the framework in response to a text auto-correction (such as fixing a typo using a a dictionnary) from the current input method, provided by it calling commitCorrection(CorrectionInfo) InputConnection.commitCorrection()}. <br /><br />"
"android.widget.TextView.getKeyListener () "," no description <br /><br />"
"android.widget.TextView.setPadding (int left, int top, int right, int bottom) "," Sets the padding. <br /><br />"
"android.widget.TextView.setTextColor (int color) "," Sets the text color for all the states (normal, selected, focused) to be this color. <br /><br />"
"android.widget.TextView.imeOptions (int imeOptions) "," Change the editor type integer associated with the text view, which will be reported to an IME with imeOptions when it has focus. <br /><br />"
"android.widget.TextView.CharSequence () "," Sets the string value of the TextView. <br /><br />"
"android.widget.TextView.setCustomSelectionActionModeCallback (ActionMode.Callback) () "," Retrieves the value set in setCustomSelectionActionModeCallback(ActionMode.Callback). <br /><br />"
"android.widget.TextView.setTextIsSelectable () () "," Returns the state of the textIsSelectable flag (See setTextIsSelectable()). <br /><br />"
"android.widget.TextView.getLayout () "," no description <br /><br />"
"android.widget.TextView.setMinEms (int minems) "," Makes the TextView at least this many ems wide <br /><br />"
"android.widget.TextView.TextWatcher () "," Removes the specified TextWatcher from the list of those whose methods are called whenever this TextView's text changes. <br /><br />"
"android.widget.TextView.BaseInputConnection.removeComposingSpans () () "," Use BaseInputConnection.removeComposingSpans() to remove any IME composing state from this text view. <br /><br />"
"android.widget.TextView.Context () "," Sets the text color, size, style, hint color, and highlight color from the specified TextAppearance resource. <br /><br />"
"android.widget.TextView.KeyEvent () "," Called on the focused view when a key shortcut event is not handled. <br /><br />"
"android.widget.TextView.getSelectionEnd (CharSequence) () "," Convenience for getSelectionEnd(CharSequence). <br /><br />"
"android.widget.TextView.getMarqueeRepeatLimit () "," Gets the number of times the marquee animation is repeated. <br /><br />"
"android.widget.TextView.setEms (int ems) "," Makes the TextView exactly this many ems wide <br /><br />"
"android.widget.TextView.getPaintFlags () "," no description <br /><br />"
"android.widget.TextView.setMinWidth (int minpixels) "," Makes the TextView at least this many pixels wide <br /><br />"
"android.widget.TextView.getTransformationMethod () "," no description <br /><br />"
"android.widget.TextView.setCompoundDrawablesRelativeWithIntrinsicBounds (int start, int top, int end, int bottom) "," Sets the Drawables (if any) to appear to the start of, above, to the end of, and below the text. <br /><br />"
"android.widget.TextView.setMinHeight (int minHeight) "," Makes the TextView at least this many pixels tall. <br /><br />"
"android.widget.TextView.getTextColors () "," Gets the text colors for the different states (normal, selected, focused) of the TextView. <br /><br />"
"android.widget.TextView.TextUtils.TruncateAt () "," Causes words in the text that are longer than the view is wide to be ellipsized instead of broken in the middle. <br /><br />"
"android.widget.TextView.ColorStateList () "," Sets the text color. <br /><br />"
"android.widget.TextView.getLinkTextColors () "," no description <br /><br />"
"android.widget.TextView.setText (CharSequence, android.widget.TextView.BufferType) () "," Like setText(CharSequence, android.widget.TextView.BufferType), except that the cursor position (if any) is retained in the new text. <br /><br />"
"android.widget.TextView.endBatchEdit () () "," Called by the framework in response to a request to end a batch of edit operations through a call to link endBatchEdit(). <br /><br />"
"android.widget.TextView.ActionMode.Callback () "," If provided, this ActionMode.Callback will be used to create the ActionMode when text selection is initiated in this View. <br /><br />"
"android.widget.TextView.startDrag () () "," Handles drag events sent by the system following a call to startDrag(). <br /><br />"
"android.widget.TextView.onWindowFocusChanged (boolean hasWindowFocus) "," Called when the window containing this view gains or loses focus. <br /><br />"
"android.widget.TextView.Editable.Factory () "," Sets the Factory used to create new Editables. <br /><br />"
"android.widget.TextView.getAutoLinkMask () "," Gets the autolink mask of the text. <br /><br />"
"android.widget.TextView.setText (char[], int, int) () "," Returns whether the movement method will automatically be set to LinkMovementMethod if setAutoLinkMask(int) has been set to nonzero and links are detected in setText(char[], int, int). <br /><br />"
"android.widget.TextView.getMinWidth () "," no description <br /><br />"
"android.widget.TextView.getFontFeatureSettings () "," no description <br /><br />"
"android.widget.TextView.setMaxEms (int maxems) "," Makes the TextView at most this many ems wide <br /><br />"
"android.widget.TextView.setAllCaps (boolean allCaps) "," Sets the properties of this field to transform input to ALL CAPS display. <br /><br />"
"android.widget.TextView.getCompoundPaddingEnd () "," Returns the end padding of the view, plus space for the end Drawable if any. <br /><br />"
"android.widget.TextView.getMinHeight () "," no description <br /><br />"
"android.widget.TextView.drawableHotspotChanged (float x, float y) "," This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. <br /><br />"
"android.widget.TextView.isInputMethodTarget () "," Returns whether this text view is a current input method target. <br /><br />"
"android.widget.TextView.moveCursorToVisibleOffset () "," Move the cursor, if needed, so that it is at an offset that is visible to the user. <br /><br />"
"android.widget.TextView.getMaxHeight () "," no description <br /><br />"
"android.widget.TextView.setText (CharSequence) () "," Like setText(CharSequence), except that the cursor position (if any) is retained in the new text. <br /><br />"
"android.widget.TextView.actionId () "," Change the custom IME action associated with the text view, which will be reported to an IME with actionLabel and actionId when it has focus. <br /><br />"
"android.widget.TextView.setElegantTextHeight (boolean elegant) "," Set the TextView's elegant height metrics flag. <br /><br />"
"android.widget.TextView.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.TextView.setRawInputType (int type) "," Directly change the content type integer of the text view, without modifying any other state. <br /><br />"
"android.widget.TextView.setTextScaleX (float size) "," Sets the extent by which text should be stretched horizontally. <br /><br />"
"android.widget.TextView.getHighlightColor () "," no description <br /><br />"
"android.widget.TextView.setText (char[], int, int) (boolean whether) "," Sets whether the movement method will automatically be set to LinkMovementMethod if setAutoLinkMask(int) has been set to nonzero and links are detected in setText(char[], int, int). <br /><br />"
"android.widget.TextView.setSingleLine (boolean singleLine) "," If true, sets the properties of this field (number of lines, horizontally scrolling, transformation method) to be for a single-line input; if false, restores these to the default conditions. <br /><br />"
"android.widget.TextView.setTextSize (float size) "," Set the default text size to the given value, interpreted as 'scaled pixel' units. <br /><br />"
"android.widget.TextView.beginBatchEdit () () "," Called by the framework in response to a request to begin a batch of edit operations through a call to link beginBatchEdit(). <br /><br />"
"android.widget.TextView.getTextSize () "," no description <br /><br />"
"android.widget.TextView.getInputType () "," Get the type of the editable content. <br /><br />"
"android.widget.TextView.bringPointIntoView (int offset) "," Move the point, specified by the offset, into the view if it is needed. <br /><br />"
"android.widget.TextView.setMaxWidth (int maxpixels) "," Makes the TextView at most this many pixels wide <br /><br />"
"android.widget.TextView.getTotalPaddingBottom () "," Returns the total bottom padding of the view, including the bottom Drawable if any, the extra space to keep more than maxLines from showing, and the vertical offset for gravity, if any. <br /><br />"
"android.widget.TextView.getMovementMethod () "," no description <br /><br />"
"android.widget.TextView.getTextScaleX () "," no description <br /><br />"
"android.widget.TextView.Linkify () "," Returns the list of URLSpans attached to the text (by Linkify or otherwise) if any. <br /><br />"
"android.widget.TextView.getImeOptions () "," Get the type of the IME editor. <br /><br />"
"android.widget.TextView.onPreDraw () "," Callback method to be invoked when the view tree is about to be drawn. <br /><br />"
"android.widget.TextView.setHorizontallyScrolling (boolean whether) "," Sets whether the text should be allowed to be wider than the View is. <br /><br />"
"android.widget.TextView.getHint () "," Returns the hint that is displayed when the text of the TextView is empty. <br /><br />"
"android.widget.TextView.setGravity (int gravity) "," Sets the horizontal alignment of the text and the vertical gravity that will be used when there is extra space in the TextView beyond what is required for the text itself. <br /><br />"
"android.widget.TextView.getMinLines () "," no description <br /><br />"
"android.widget.TextView.MovementMethod () "," Sets the movement method (arrow key handler) to be used for this TextView. <br /><br />"
"android.widget.TextView.setPaintFlags (int flags) "," Sets flags on the Paint being used to display the text and reflows the text if they are different from the old flags. <br /><br />"
"android.widget.TextView.VIEW_LOG_TAG (int depth) "," Prints information about this view in the log output, with the tag VIEW_LOG_TAG. <br /><br />"
"android.widget.TextView.setPaddingRelative (int start, int top, int end, int bottom) "," Sets the relative padding. <br /><br />"
"android.widget.TextView.KeyEvent.Callback.onKeyMultiple () () "," Default implementation of KeyEvent.Callback.onKeyMultiple(): always returns false (doesn't handle the event). <br /><br />"
"android.widget.TextView.getText () "," Return the text the TextView is displaying. <br /><br />"
"android.widget.TextView.getLineCount () "," Return the number of lines of text, or 0 if the internal Layout has not been built. <br /><br />"
"android.widget.TextView.setWidth (int pixels) "," Makes the TextView exactly this many pixels wide. <br /><br />"
"android.widget.TextView.isCursorVisible () "," no description <br /><br />"
"android.widget.TextView.onScreenStateChanged (int screenState) "," This method is called whenever the state of the screen this view is attached to changes. <br /><br />"
"android.widget.TextView.getTotalPaddingStart () "," Returns the total start padding of the view, including the start Drawable if any. <br /><br />"
"android.widget.TextView.getCompoundPaddingLeft () "," Returns the left padding of the view, plus space for the left Drawable if any. <br /><br />"
"android.widget.TextView.getCurrentTextColor () "," Return the current color selected for normal text. <br /><br />"
"android.widget.TextView.OnEditorActionListener.KeyEvent () "," Called when an action is being performed. <br /><br />"
"android.widget.TextView.SavedState.Parcel () "," Flatten this object in to a Parcel. <br /><br />"
"android.widget.TextView.SavedState.toString () "," Returns a string containing a concise, human-readable description of this object. <br /><br />"
"android.widget.TimePicker.is24HourView () "," no description <br /><br />"
"android.widget.TimePicker.getBaseline () "," Return the offset of the widget's text baseline from the widget's top boundary. <br /><br />"
"android.widget.TimePicker.TimePicker.OnTimeChangedListener () "," Set the callback that indicates the time has been adjusted by the user. <br /><br />"
"android.widget.TimePicker.getCurrentMinute () "," no description <br /><br />"
"android.widget.TimePicker.Boolean () "," Set whether in 24 hour or AM/PM mode. <br /><br />"
"android.widget.TimePicker.View () "," Dispatches an AccessibilityEvent to the View first and then to its children for adding their text content to the event. <br /><br />"
"android.widget.TimePicker.getCurrentHour () "," no description <br /><br />"
"android.widget.TimePicker.Integer () "," Set the current minute (0-59). <br /><br />"
"android.widget.TimePicker.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.TimePicker.dispatchPopulateAccessibilityEvent (AccessibilityEvent) () "," Called from dispatchPopulateAccessibilityEvent(AccessibilityEvent) giving a chance to this View to populate the accessibility event with its text content. <br /><br />"
"android.widget.TimePicker.isEnabled () "," Returns the enabled status for this view. <br /><br />"
"android.widget.TimePicker.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.TimePicker.setEnabled (boolean enabled) "," Set the enabled state of this view. <br /><br />"
"android.widget.TimePicker.OnTimeChangedListener.TimePicker () "," no description <br /><br />"
"android.widget.Toast.setGravity (int gravity, int xOffset, int yOffset) "," Set the location at which the notification should appear on the screen. <br /><br />"
"android.widget.Toast.getView () "," Return the view. <br /><br />"
"android.widget.Toast.getYOffset () "," Return the Y offset in pixels to apply to the gravity's location. <br /><br />"
"android.widget.Toast.setText (int resId) "," Update the text in a Toast that was previously created using one of the makeText() methods. <br /><br />"
"android.widget.Toast.setMargin (float horizontalMargin, float verticalMargin) "," Set the margins of the view. <br /><br />"
"android.widget.Toast.CharSequence () "," Update the text in a Toast that was previously created using one of the makeText() methods. <br /><br />"
"android.widget.Toast.setDuration (int duration) "," Set how long to show the view for. <br /><br />"
"android.widget.Toast.View () "," Set the view to show. <br /><br />"
"android.widget.Toast.Context () "," Make a standard toast that just contains a text view with the text from a resource. <br /><br />"
"android.widget.Toast.show () "," Show the view for the specified duration. <br /><br />"
"android.widget.Toast.getHorizontalMargin () "," Return the horizontal margin. <br /><br />"
"android.widget.Toast.getGravity () "," Get the location at which the notification should appear on the screen. <br /><br />"
"android.widget.Toast.cancel () "," Close the view if it's showing, or don't show it if it isn't showing yet. <br /><br />"
"android.widget.Toast.getXOffset () "," Return the X offset in pixels to apply to the gravity's location. <br /><br />"
"android.widget.Toast.getVerticalMargin () "," Return the vertical margin. <br /><br />"
"android.widget.Toast.getDuration () "," Return the duration. <br /><br />"
"android.widget.ToggleButton.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.ToggleButton.setChecked (boolean checked) "," Changes the checked state of this button. <br /><br />"
"android.widget.ToggleButton.setBackground (Drawable) () "," This method is deprecated. use setBackground(Drawable) instead <br /><br />"
"android.widget.ToggleButton.getTextOff () "," Returns the text for when the button is not in the checked state. <br /><br />"
"android.widget.ToggleButton.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.ToggleButton.CharSequence () "," Sets the text for when the button is in the checked state. <br /><br />"
"android.widget.ToggleButton.getTextOn () "," Returns the text for when the button is in the checked state. <br /><br />"
"android.widget.Toolbar.AttributeSet () "," Returns a new set of layout parameters based on the supplied attributes set. <br /><br />"
"android.widget.Toolbar.getPopupTheme () "," no description <br /><br />"
"android.widget.Toolbar.onRtlPropertiesChanged (int layoutDirection) "," Called when any RTL property (layout direction or text direction or text alignment) has been changed. <br /><br />"
"android.widget.Toolbar.dismissPopupMenus () "," Dismiss all currently showing popup menus, including overflow or submenus. <br /><br />"
"android.widget.Toolbar.MotionEvent () "," Implement this method to handle touch screen motion events. <br /><br />"
"android.widget.Toolbar.setLogoDescription (int resId) "," Set a description of the toolbar's logo. <br /><br />"
"android.widget.Toolbar.getMenu () "," Return the Menu shown in the toolbar. <br /><br />"
"android.widget.Toolbar.getNavigationIcon () "," Return the current drawable used as the navigation icon. <br /><br />"
"android.widget.Toolbar.setSubtitle (int resId) "," Set the subtitle of this toolbar. <br /><br />"
"android.widget.Toolbar.setTitle (int resId) "," Set the title of this toolbar. <br /><br />"
"android.widget.Toolbar.setNavigationIcon (int resId) "," Set the icon to use for the toolbar's navigation button. <br /><br />"
"android.widget.Toolbar.getSubtitle () "," Return the subtitle of this toolbar. <br /><br />"
"android.widget.Toolbar.Drawable () "," Set the icon to use for the toolbar's navigation button. <br /><br />"
"android.widget.Toolbar.View.OnClickListener () "," Set a listener to respond to navigation events. <br /><br />"
"android.widget.Toolbar.getContentInsetStart () "," Get the starting content inset for this toolbar. <br /><br />"
"android.widget.Toolbar.hideOverflowMenu () "," Hide the overflow items from the associated menu. <br /><br />"
"android.widget.Toolbar.setLogo (int resId) "," Set a logo drawable from a resource id. <br /><br />"
"android.widget.Toolbar.Toolbar.OnMenuItemClickListener () "," Set a listener to respond to menu item click events. <br /><br />"
"android.widget.Toolbar.getTitle () "," Returns the title of this toolbar. <br /><br />"
"android.widget.Toolbar.setNavigationContentDescription (int resId) "," Set a content description for the navigation button if one is present. <br /><br />"
"android.widget.Toolbar.showOverflowMenu () "," Show the overflow items from the associated menu. <br /><br />"
"android.widget.Toolbar.getLogo () "," Return the current logo drawable. <br /><br />"
"android.widget.Toolbar.setPopupTheme (int resId) "," Specifies the theme to use when inflating popup menus. <br /><br />"
"android.widget.Toolbar.getContentInsetRight () "," Get the right content inset for this toolbar. <br /><br />"
"android.widget.Toolbar.setContentInsetsAbsolute (int contentInsetLeft, int contentInsetRight) "," Set the content insets for this toolbar. <br /><br />"
"android.widget.Toolbar.CharSequence () "," Set the title of this toolbar. <br /><br />"
"android.widget.Toolbar.getLogoDescription () "," Return the description of the toolbar's logo. <br /><br />"
"android.widget.Toolbar.setSubtitleTextColor (int color) "," Sets the text color of the subtitle, if present. <br /><br />"
"android.widget.Toolbar.getContentInsetEnd () "," Get the ending content inset for this toolbar. <br /><br />"
"android.widget.Toolbar.isOverflowMenuShowing () "," Check whether the overflow menu is currently showing. <br /><br />"
"android.widget.Toolbar.Context () "," Sets the text color, size, style, hint color, and highlight color from the specified TextAppearance resource. <br /><br />"
"android.widget.Toolbar.getContentInsetLeft () "," Get the left content inset for this toolbar. <br /><br />"
"android.widget.Toolbar.collapseActionView () "," Collapse a currently expanded action view. <br /><br />"
"android.widget.Toolbar.setContentInsetsRelative (int contentInsetStart, int contentInsetEnd) "," Set the content insets for this toolbar relative to layout direction. <br /><br />"
"android.widget.Toolbar.setTitleTextColor (int color) "," Sets the text color of the title, if present. <br /><br />"
"android.widget.Toolbar.hasExpandedActionView () "," Check whether this Toolbar is currently hosting an expanded action view. <br /><br />"
"android.widget.Toolbar.getNavigationContentDescription () "," Retrieve the currently configured content description for the navigation button view. <br /><br />"
"android.widget.Toolbar.inflateMenu (int resId) "," Inflate a menu resource into this toolbar. <br /><br />"
"android.widget.Toolbar.OnMenuItemClickListener.MenuItem () "," This method will be invoked when a menu item is clicked if the item itself did not already handle the event. <br /><br />"
"android.widget.TwoLineListItem.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.TwoLineListItem.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.TwoLineListItem.getText2 () "," Returns a handle to the item with ID text2. <br /><br />"
"android.widget.TwoLineListItem.getText1 () "," Returns a handle to the item with ID text1. <br /><br />"
"android.widget.VideoView.MotionEvent () "," Implement this method to handle trackball motion events. <br /><br />"
"android.widget.VideoView.MediaController () "," no description <br /><br />"
"android.widget.VideoView.MediaPlayer.OnInfoListener () "," Register a callback to be invoked when an informational event occurs during playback or setup. <br /><br />"
"android.widget.VideoView.MediaPlayer.OnErrorListener () "," Register a callback to be invoked when an error occurs during playback or setup. <br /><br />"
"android.widget.VideoView.isPlaying () "," no description <br /><br />"
"android.widget.VideoView.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.VideoView.canSeekForward () "," no description <br /><br />"
"android.widget.VideoView.resume () "," no description <br /><br />"
"android.widget.VideoView.canSeekBackward () "," no description <br /><br />"
"android.widget.VideoView.getDuration () "," no description <br /><br />"
"android.widget.VideoView.Uri () "," Sets video URI. <br /><br />"
"android.widget.VideoView.suspend () "," no description <br /><br />"
"android.widget.VideoView.String () "," Sets video URI using specific headers. <br /><br />"
"android.widget.VideoView.getBufferPercentage () "," no description <br /><br />"
"android.widget.VideoView.MediaPlayer.OnPreparedListener () "," Register a callback to be invoked when the media file is loaded and ready to go. <br /><br />"
"android.widget.VideoView.Canvas () "," Manually render this view (and all of its children) to the given Canvas. <br /><br />"
"android.widget.VideoView.start () "," no description <br /><br />"
"android.widget.VideoView.MediaFormat () "," Adds an external subtitle source file (from the provided input stream.) Note that a single external subtitle source may contain multiple or no supported tracks in it. <br /><br />"
"android.widget.VideoView.KEYCODE_ENTER () "," Default implementation of KeyEvent.Callback.onKeyDown(): perform press of the view when KEYCODE_DPAD_CENTER or KEYCODE_ENTER is released, if the view is enabled and clickable. <br /><br />"
"android.widget.VideoView.seekTo (int msec) "," no description <br /><br />"
"android.widget.VideoView.stopPlayback () "," no description <br /><br />"
"android.widget.VideoView.resolveAdjustedSize (int desiredSize, int measureSpec) "," no description <br /><br />"
"android.widget.VideoView.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.VideoView.MediaPlayer.OnCompletionListener () "," Register a callback to be invoked when the end of a media file has been reached during playback. <br /><br />"
"android.widget.VideoView.getCurrentPosition () "," no description <br /><br />"
"android.widget.VideoView.canPause () "," no description <br /><br />"
"android.widget.VideoView.getAudioSessionId () "," Get the audio session id for the player used by this VideoView. <br /><br />"
"android.widget.VideoView.pause () "," no description <br /><br />"
"android.widget.ViewAnimator.setAnimateFirstView (boolean animate) "," Indicates whether the current View should be animated the first time the ViewAnimator is displayed. <br /><br />"
"android.widget.ViewAnimator.showPrevious () "," Manually shows the previous child. <br /><br />"
"android.widget.ViewAnimator.Animation () "," Specifies the animation used to animate a View that exit the screen. <br /><br />"
"android.widget.ViewAnimator.getAnimateFirstView () "," Returns whether the current View should be animated the first time the ViewAnimator is displayed. <br /><br />"
"android.widget.ViewAnimator.getBaseline () "," Return the offset of the widget's text baseline from the widget's top boundary. <br /><br />"
"android.widget.ViewAnimator.removeViews (int start, int count) "," Removes the specified range of views from the group. <br /><br />"
"android.widget.ViewAnimator.removeViewAt (int index) "," Removes the view at the specified position in the group. <br /><br />"
"android.widget.ViewAnimator.View () "," Removes a view during layout. <br /><br />"
"android.widget.ViewAnimator.getInAnimation () "," Returns the current animation used to animate a View that enters the screen. <br /><br />"
"android.widget.ViewAnimator.removeViewsInLayout (int start, int count) "," Removes a range of views during layout. <br /><br />"
"android.widget.ViewAnimator.Context () "," Specifies the animation used to animate a View that exit the screen. <br /><br />"
"android.widget.ViewAnimator.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.ViewAnimator.ViewGroup.LayoutParams () "," Adds a child view with the specified layout parameters. <br /><br />"
"android.widget.ViewAnimator.getOutAnimation () "," Returns the current animation used to animate a View that exits the screen. <br /><br />"
"android.widget.ViewAnimator.getCurrentView () "," Returns the View corresponding to the currently displayed child. <br /><br />"
"android.widget.ViewAnimator.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.ViewAnimator.removeAllViews () "," Call this method to remove all child views from the ViewGroup. <br /><br />"
"android.widget.ViewAnimator.showNext () "," Manually shows the next child. <br /><br />"
"android.widget.ViewAnimator.setDisplayedChild (int whichChild) "," Sets which child view will be displayed. <br /><br />"
"android.widget.ViewAnimator.dispatchDraw (android.graphics.Canvas) () "," Note: do not invoke this method from draw(android.graphics.Canvas), onDraw(android.graphics.Canvas), dispatchDraw(android.graphics.Canvas) or any related method. <br /><br />"
"android.widget.ViewAnimator.getDisplayedChild () "," Returns the index of the currently displayed child view. <br /><br />"
"android.widget.ViewFlipper.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.ViewFlipper.startFlipping () "," Start a timer to cycle through child views <br /><br />"
"android.widget.ViewFlipper.startFlipping () () "," Returns true if this view automatically calls startFlipping() when it becomes attached to a window. <br /><br />"
"android.widget.ViewFlipper.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.ViewFlipper.setFlipInterval (int milliseconds) "," How long to wait before flipping to the next view <br /><br />"
"android.widget.ViewFlipper.isFlipping () "," Returns true if the child views are flipping. <br /><br />"
"android.widget.ViewFlipper.startFlipping () (boolean autoStart) "," Set if this view automatically calls startFlipping() when it becomes attached to a window. <br /><br />"
"android.widget.ViewFlipper.stopFlipping () "," No more flips <br /><br />"
"android.widget.ViewSwitcher.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.ViewSwitcher.ViewSwitcher.ViewFactory () "," Sets the factory used to create the two views between which the ViewSwitcher will flip. <br /><br />"
"android.widget.ViewSwitcher.ViewGroup.LayoutParams () "," Adds a child view with the specified layout parameters. <br /><br />"
"android.widget.ViewSwitcher.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.ViewSwitcher.reset () "," Reset the ViewSwitcher to hide all of the existing views and to make it think that the first time animation has not yet played. <br /><br />"
"android.widget.ViewSwitcher.getNextView () "," Returns the next view to be displayed. <br /><br />"
"android.widget.ViewSwitcher.ViewFactory.ViewSwitcher () "," Creates a new View to be added in a ViewSwitcher. <br /><br />"
"android.widget.WrapperListAdapter.getWrappedAdapter () "," Returns the adapter wrapped by this list adapter. <br /><br />"
"android.widget.ZoomButton.setZoomSpeed (long speed) "," no description <br /><br />"
"android.widget.ZoomButton.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.ZoomButton.MotionEvent () "," Implement this method to handle touch screen motion events. <br /><br />"
"android.widget.ZoomButton.setEnabled (boolean enabled) "," Set the enabled state of this view. <br /><br />"
"android.widget.ZoomButton.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.ZoomButton.View () "," Called when a view has been clicked and held. <br /><br />"
"android.widget.ZoomButton.KEYCODE_ENTER () "," Default implementation of KeyEvent.Callback.onKeyUp(): perform clicking of the view when KEYCODE_DPAD_CENTER or KEYCODE_ENTER is released. <br /><br />"
"android.widget.ZoomButtonsController.setZoomSpeed (long speed) "," Sets the delay between zoom callbacks as the user holds a zoom button. <br /><br />"
"android.widget.ZoomButtonsController.ZoomButtonsController.OnZoomListener () "," Sets the ZoomButtonsController.OnZoomListener listener that receives callbacks to zoom. <br /><br />"
"android.widget.ZoomButtonsController.setZoomOutEnabled (boolean enabled) "," Whether to enable the zoom out control. <br /><br />"
"android.widget.ZoomButtonsController.isVisible () "," Whether the zoom controls are visible to the user. <br /><br />"
"android.widget.ZoomButtonsController.isAutoDismissed () "," Whether the zoom controls will be automatically dismissed after showing. <br /><br />"
"android.widget.ZoomButtonsController.getZoomControls () "," Gets the view for the zoom controls. <br /><br />"
"android.widget.ZoomButtonsController.setFocusable (boolean focusable) "," Sets whether the zoom controls should be focusable. <br /><br />"
"android.widget.ZoomButtonsController.setAutoDismissed (boolean autoDismiss) "," Sets whether the zoom controls will be automatically dismissed after showing. <br /><br />"
"android.widget.ZoomButtonsController.setZoomInEnabled (boolean enabled) "," Whether to enable the zoom in control. <br /><br />"
"android.widget.ZoomButtonsController.setVisible (boolean visible) "," Sets whether the zoom controls should be visible to the user. <br /><br />"
"android.widget.ZoomButtonsController.getContainer () "," Gets the container that is the parent of the zoom controls. <br /><br />"
"android.widget.ZoomButtonsController.OnZoomListener.onZoom (boolean zoomIn) "," Called when the owner view needs to be zoomed. <br /><br />"
"android.widget.ZoomButtonsController.OnZoomListener.onVisibilityChanged (boolean visible) "," Called when the zoom controls' visibility changes. <br /><br />"
"android.widget.ZoomControls.setZoomSpeed (long speed) "," no description <br /><br />"
"android.widget.ZoomControls.AccessibilityNodeInfo () "," Initializes an AccessibilityNodeInfo with information about this view. <br /><br />"
"android.widget.ZoomControls.hide () "," no description <br /><br />"
"android.widget.ZoomControls.show () "," no description <br /><br />"
"android.widget.ZoomControls.View.OnClickListener () "," no description <br /><br />"
"android.widget.ZoomControls.MotionEvent () "," Implement this method to handle touch screen motion events. <br /><br />"
"android.widget.ZoomControls.setIsZoomOutEnabled (boolean isEnabled) "," no description <br /><br />"
"android.widget.ZoomControls.AccessibilityEvent () "," Initializes an AccessibilityEvent with information about this View which is the event source. <br /><br />"
"android.widget.ZoomControls.setIsZoomInEnabled (boolean isEnabled) "," no description <br /><br />"
"android.widget.ZoomControls.hasFocus () "," Returns true if this view has or contains focus <br /><br />"
